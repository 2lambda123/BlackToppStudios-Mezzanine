/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGLUA
#define SWIGLUA
#endif

#define SWIG_LUA_TARGET SWIG_LUA_FLAVOR_LUA
#define SWIG_LUA_MODULE_GLOBAL


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif

/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.

  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/*
   Flags/methods for returning states.

   The SWIG conversion methods, as ConvertPtr, return an integer
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).

   Use the following macros/flags to set or process the returning
   states.

   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }

   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {
        if (<obj is ok>) {
          if (<need new object>) {
            *ptr = <ptr to new allocated object>;
            return SWIG_NEWOBJ;
          } else {
            *ptr = <ptr to old object>;
            return SWIG_OLDOBJ;
          }
        } else {
          return SWIG_BADOBJ;
        }
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call

      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0)
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) {
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) {
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0;
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/*
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/*
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/*
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;

  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start,
                            swig_module_info *end,
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      size_t l = 0;
      size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	size_t i = (l + r) >> 1;
	const char *iname = iter->types[i]->name;
	if (iname) {
	  int compare = strcmp(name, iname);
	  if (compare == 0) {
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).

  We start searching at module start, and finish searching when start == end.
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start,
                     swig_module_info *end,
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }

  /* neither found a match */
  return 0;
}

/*
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  const unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/*
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  unsigned char *u = (unsigned char *) ptr;
  const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    char d = *(c++);
    unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = (unsigned char)((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = (unsigned char)((d - ('a'-10)) << 4);
    else
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (unsigned char)(d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (unsigned char)(d - ('a'-10));
    else
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/*
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * Lua flavors
 * ----------------------------------------------------------------------------- */

#define SWIG_LUA_FLAVOR_LUA 1
#define SWIG_LUA_FLAVOR_ELUA 2
#define SWIG_LUA_FLAVOR_ELUAC 3

#if !defined(SWIG_LUA_TARGET)
# error SWIG_LUA_TARGET not defined
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)

struct swig_elua_entry;

typedef struct swig_elua_key {
  int type;
  union {
    const char* strkey;
    lua_Number numkey;
  } key;
} swig_elua_key;

typedef struct swig_elua_val {
  int type;
  union {
    lua_Number number;
    const struct swig_elua_entry *table;
    const char *string;
    lua_CFunction function;
    struct {
      char member;
      long lvalue;
      void *pvalue;
      swig_type_info **ptype;
    } userdata;
  } value;
} swig_elua_val;

typedef struct swig_elua_entry {
  swig_elua_key key;
  swig_elua_val value;
} swig_elua_entry;

#define LSTRKEY(x) {LUA_TSTRING, {.strkey = x} }
#define LNUMKEY(x) {LUA_TNUMBER, {.numkey = x} }
#define LNILKEY {LUA_TNIL, {.strkey = 0} }

#define LNUMVAL(x) {LUA_TNUMBER, {.number = x} }
#define LFUNCVAL(x) {LUA_TFUNCTION, {.function = x} }
#define LROVAL(x) {LUA_TTABLE, {.table = x} }
#define LNILVAL {LUA_TNIL, {.string = 0} }
#define LSTRVAL(x) {LUA_TSTRING, {.string = x} }

#define LUA_REG_TYPE swig_elua_entry

#define SWIG_LUA_ELUA_EMUL_METATABLE_KEY "__metatable"

#define lua_pushrotable(L,p)\
  lua_newtable(L);\
  assert(p);\
  SWIG_Lua_elua_emulate_register(L,(swig_elua_entry*)(p));

#define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={0,0,(void*)(C),&D} } }

#define SWIG_LUA_CONSTTAB_BINARY(B,S,C,D)\
  LSTRKEY(B), {LUA_TUSERDATA, { .userdata={1,S,(void*)(C),&D} } }
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define SWIG_LUA_CONSTTAB_INT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) LSTRKEY(B), LNUMVAL(C)
#  define SWIG_LUA_CONSTTAB_STRING(B, C) LSTRKEY(B), LSTRVAL(C)
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) LSTRKEY(B), LNUMVAL(C)
    /* Those two types of constants are not supported in elua */

#ifndef SWIG_LUA_CONSTTAB_POINTER
#warning eLua does not support pointers as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_POINTER(B,C,D) LSTRKEY(B), LNILVAL
#endif

#ifndef SWIG_LUA_CONSTTAB_BINARY
#warning eLua does not support pointers to member as constants. By default, nil will be used as value
#define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D) LSTRKEY(B), LNILVAL
#endif
#else /* SWIG_LUA_FLAVOR_LUA */
#  define SWIG_LUA_CONSTTAB_INT(B, C) SWIG_LUA_INT, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_FLOAT(B, C) SWIG_LUA_FLOAT, (char *)B, 0, (double)C, 0, 0
#  define SWIG_LUA_CONSTTAB_STRING(B, C) SWIG_LUA_STRING, (char *)B, 0, 0, (void *)C, 0
#  define SWIG_LUA_CONSTTAB_CHAR(B, C) SWIG_LUA_CHAR, (char *)B, (long)C, 0, 0, 0
#  define SWIG_LUA_CONSTTAB_POINTER(B,C,D)\
       SWIG_LUA_POINTER, (char *)B, 0, 0, (void *)C, &D
#  define SWIG_LUA_CONSTTAB_BINARY(B, S, C, D)\
       SWIG_LUA_BINARY,  (char *)B, S, 0, (void *)C, &D
#endif

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
#  define LRO_STRVAL(v) {{.p = (char *) v}, LUA_TSTRING}
#  define LSTRVAL LRO_STRVAL
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/

#ifndef SWIG_LUA_ELUA_EMULATE
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)

#ifndef MIN_OPT_LEVEL
#define MIN_OPT_LEVEL 2
#endif

#include "lrodefs.h"
#include "lrotable.h"
#endif
#endif /* SWIG_LUA_ELUA_EMULATE*/
/* -----------------------------------------------------------------------------
 * compatibility defines
 * ----------------------------------------------------------------------------- */

/* History of Lua C API length functions:  In Lua 5.0 (and before?)
   there was "lua_strlen".  In Lua 5.1, this was renamed "lua_objlen",
   but a compatibility define of "lua_strlen" was added.  In Lua 5.2,
   this function was again renamed, to "lua_rawlen" (to emphasize that
   it doesn't call the "__len" metamethod), and the compatibility
   define of lua_strlen was removed.  All SWIG uses have been updated
   to "lua_rawlen", and we add our own defines of that here for older
   versions of Lua.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 501
# define lua_rawlen lua_strlen
#elif LUA_VERSION_NUM == 501
# define lua_rawlen lua_objlen
#endif


/* lua_pushglobaltable is the recommended "future-proof" way to get
   the global table for Lua 5.2 and later.  Here we define
   lua_pushglobaltable ourselves for Lua versions before 5.2.  */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_pushglobaltable(L) lua_pushvalue(L, LUA_GLOBALSINDEX)
#endif

/* lua_absindex was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
# define lua_absindex(L,i) ((i)>0 || (i) <= LUA_REGISTRYINDEX ? (i) : lua_gettop(L) + (i) + 1)
#endif

/* lua_rawsetp was introduced in Lua 5.2 */
#if !defined(LUA_VERSION_NUM) || LUA_VERSION_NUM < 502
#define lua_rawsetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_insert(L,-2);\
  lua_rawset(L,index);

#define lua_rawgetp(L,index,ptr)\
  lua_pushlightuserdata(L,(void*)(ptr));\
  lua_rawget(L,index);

#endif

/* --------------------------------------------------------------------------
 * Helper functions for error handling
 * -------------------------------------------------------------------------- */

/* Push the string STR on the Lua stack, like lua_pushstring, but
   prefixed with the the location of the innermost Lua call-point
   (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pusherrstring (lua_State *L, const char *str)
{
  luaL_where (L, 1);
  lua_pushstring (L, str);
  lua_concat (L, 2);
}

/* Push a formatted string generated from FMT and following args on
   the Lua stack, like lua_pushfstring, but prefixed with the the
   location of the innermost Lua call-point (as formated by luaL_where).  */
SWIGRUNTIME void
SWIG_Lua_pushferrstring (lua_State *L, const char *fmt, ...)
{
  va_list argp;
  va_start(argp, fmt);
  luaL_where(L, 1);
  lua_pushvfstring(L, fmt, argp);
  va_end(argp);
  lua_concat(L, 2);
}


/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
typedef const LUA_REG_TYPE swig_lua_method;
typedef const LUA_REG_TYPE swig_lua_const_info;
#else /* Normal lua */
typedef luaL_Reg swig_lua_method;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

#endif

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;


struct swig_lua_class;
/* Can be used to create namespaces. Currently used to wrap class static methods/variables/constants */
typedef struct swig_lua_namespace {
  const char            *name;
  swig_lua_method       *ns_methods;
  swig_lua_attribute    *ns_attributes;
  swig_lua_const_info   *ns_constants;
  struct swig_lua_class        **ns_classes;
  struct swig_lua_namespace    **ns_namespaces;
} swig_lua_namespace;

typedef struct swig_lua_class {
  const char    *name; /* Name that this class has in Lua */
  const char    *fqname; /* Fully qualified name - Scope + class name */
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  swig_lua_namespace    *cls_static;
  swig_lua_method   *metatable; /* 0 for -eluac */
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrapping all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitrary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { SWIG_Lua_pusherrstring(L, (char *) msg); goto fail; } else


/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {SWIG_Lua_pushferrstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {SWIG_Lua_pushferrstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

#define SWIG_Lua_add_boolean(L,n,b) \
  (lua_pushstring(L, n), \
      lua_pushboolean(L, b), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
/*#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a))) */
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State *L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State *L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default action is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State *L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  luaL_error(L,"This variable is immutable");
#endif
    return 0;   /* should not return anything */
}

#ifdef SWIG_LUA_ELUA_EMULATE

SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own);
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type);
static int swig_lua_elua_emulate_unique_key;

/* This function emulates eLua rotables behaviour. It loads a rotable definition into the usual lua table. */
SWIGINTERN void SWIG_Lua_elua_emulate_register(lua_State *L, const swig_elua_entry *table)
{
  int i, table_parsed, parsed_tables_array, target_table;
  assert(lua_istable(L,-1));
  target_table = lua_gettop(L);
  /* Get the registry where we put all parsed tables to avoid loops */
  lua_rawgetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
  if(lua_isnil(L,-1)) {
    lua_pop(L,1);
    lua_newtable(L);
    lua_pushvalue(L,-1);
    lua_rawsetp(L,LUA_REGISTRYINDEX,(void*)(&swig_lua_elua_emulate_unique_key));
  }
  parsed_tables_array = lua_gettop(L);
  lua_pushvalue(L,target_table);
  lua_rawsetp(L, parsed_tables_array, table);
  table_parsed = 0;
  const int SWIGUNUSED pairs_start = lua_gettop(L);
  for(i = 0;table[i].key.type != LUA_TNIL || table[i].value.type != LUA_TNIL;i++)
  {
    const swig_elua_entry *entry = table + i;
    int is_metatable = 0;
    switch(entry->key.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->key.key.strkey);
        if(strcmp(entry->key.key.strkey, SWIG_LUA_ELUA_EMUL_METATABLE_KEY) == 0)
          is_metatable = 1;
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->key.key.numkey);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    switch(entry->value.type) {
      case LUA_TSTRING:
        lua_pushstring(L,entry->value.value.string);
        break;
      case  LUA_TNUMBER:
        lua_pushnumber(L,entry->value.value.number);
        break;
      case LUA_TFUNCTION:
        lua_pushcfunction(L,entry->value.value.function);
        break;
      case LUA_TTABLE:
        lua_rawgetp(L,parsed_tables_array, entry->value.value.table);
        table_parsed = !lua_isnil(L,-1);
        if(!table_parsed) {
          lua_pop(L,1); /*remove nil */
          lua_newtable(L);
          SWIG_Lua_elua_emulate_register(L,entry->value.value.table);
        } 
        if(is_metatable) {
          assert(lua_istable(L,-1));
          lua_pushvalue(L,-1);
          lua_setmetatable(L,target_table);
        }

        break;
      case LUA_TUSERDATA:
        if(entry->value.value.userdata.member) 
          SWIG_NewMemberObj(L,entry->value.value.userdata.pvalue,
              entry->value.value.userdata.lvalue,
              *(entry->value.value.userdata.ptype));
        else 
          SWIG_NewPointerObj(L,entry->value.value.userdata.pvalue,
              *(entry->value.value.userdata.ptype),0);
        break;
      case LUA_TNIL:
        lua_pushnil(L);
        break;
      default:
        assert(0);
    }
    assert(lua_gettop(L) == pairs_start + 2);
    lua_rawset(L,target_table);
  }
  lua_pop(L,1); /* Removing parsed tables storage */
  assert(lua_gettop(L) == target_table);
}

SWIGINTERN void SWIG_Lua_elua_emulate_register_clear(lua_State *L)
{
  lua_pushnil(L);
  lua_rawsetp(L, LUA_REGISTRYINDEX, &swig_lua_elua_emulate_unique_key);
}

SWIGINTERN void SWIG_Lua_get_class_registry(lua_State *L);

SWIGINTERN int SWIG_Lua_emulate_elua_getmetatable(lua_State *L)
{
  SWIG_check_num_args("getmetatable(SWIG eLua emulation)", 1, 1);
  SWIG_Lua_get_class_registry(L);
  lua_getfield(L,-1,"lua_getmetatable");
  lua_remove(L,-2); /* remove the registry*/
  assert(!lua_isnil(L,-1));
  lua_pushvalue(L,1);
  assert(lua_gettop(L) == 3); /* object | function | object again */
  lua_call(L,1,1);
  if(!lua_isnil(L,-1)) /*There is an ordinary metatable */
    return 1;
  /*if it is a table, then emulate elua behaviour - check for __metatable attribute of a table*/
  assert(lua_gettop(L) == 2);
  if(lua_istable(L,-2)) {
    lua_pop(L,1); /*remove the nil*/
    lua_getfield(L,-1, SWIG_LUA_ELUA_EMUL_METATABLE_KEY);
  }
  assert(lua_gettop(L) == 2);
  return 1;
  
fail:
  lua_error(L);
  return 0;
}

SWIGINTERN void SWIG_Lua_emulate_elua_swap_getmetatable(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushglobaltable(L);
  lua_pushstring(L,"lua_getmetatable");
  lua_getfield(L,-2,"getmetatable");
  assert(!lua_isnil(L,-1));
  lua_rawset(L,-4);
  lua_pushstring(L, "getmetatable");
  lua_pushcfunction(L, SWIG_Lua_emulate_elua_getmetatable);
  lua_rawset(L,-3);
  lua_pop(L,2);
      
}
/* END OF REMOVE */

#endif
/* -----------------------------------------------------------------------------
 * global variable support code: namespaces and modules (which are the same thing)
 * ----------------------------------------------------------------------------- */

SWIGINTERN int SWIG_Lua_namespace_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_istable(L,-2));  /* just in case */
  lua_getmetatable(L,-2);
  assert(lua_istable(L,-1));
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_call(L,0,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: whether it's a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  return 0;
}

SWIGINTERN int SWIG_Lua_namespace_set(lua_State *L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/

  assert(lua_istable(L,1));
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  lua_pop(L,1); /* remote metatable */
  lua_rawset(L,-3);
  return 0;
}

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
SWIGINTERN void SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]); /* forward declaration */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn); /* forward declaration */
SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss);

/* helper function - register namespace methods and attributes into namespace */
SWIGINTERN int SWIG_Lua_add_namespace_details(lua_State *L, swig_lua_namespace *ns)
{
  int i;
  /* There must be namespace table (not metatable) at the top of the stack */
  assert(lua_istable(L,-1));
  SWIG_Lua_InstallConstants(L, ns->ns_constants);

  /* add methods to the namespace/module table */
  for(i=0;ns->ns_methods[i].name;i++){
    SWIG_Lua_add_function(L,ns->ns_methods[i].name,ns->ns_methods[i].func);
  }
  lua_getmetatable(L,-1);

  /* add fns */
  for(i=0;ns->ns_attributes[i].name;i++){
    SWIG_Lua_add_variable(L,ns->ns_attributes[i].name,ns->ns_attributes[i].getmethod,ns->ns_attributes[i].setmethod);
  }

  /* clear stack - remove metatble */
  lua_pop(L,1);
  return 0;
}

/* Register all classes in the namespace */
SWIGINTERN void SWIG_Lua_add_namespace_classes(lua_State *L, swig_lua_namespace *ns)
{
  swig_lua_class **classes;

  /* There must be a module/namespace table at the top of the stack */
  assert(lua_istable(L,-1));

  classes = ns->ns_classes;

  if( classes != 0 ) {
    while(*classes != 0) {
      SWIG_Lua_class_register(L, *classes);
      classes++;
    }
  }
}

/* Helper function. Creates namespace table and adds it to module table
   if 'reg' is true, then will register namespace table to parent one (must be on top of the stack
   when function is called).
   Function always returns newly registered table on top of the stack.
*/
SWIGINTERN void SWIG_Lua_namespace_register(lua_State *L, swig_lua_namespace *ns, int reg)
{
  swig_lua_namespace **sub_namespace;
  /* 1 argument - table on the top of the stack */
  const int SWIGUNUSED begin = lua_gettop(L);
  assert(lua_istable(L,-1)); /* just in case. This is supposed to be module table or parent namespace table */
  lua_checkstack(L,5);
  lua_newtable(L); /* namespace itself */
  lua_newtable(L); /* metatable for namespace */

  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);

  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_namespace_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_namespace_set);

  lua_setmetatable(L,-2); /* set metatable */

  /* Register all functions, variables etc */
  SWIG_Lua_add_namespace_details(L,ns);
  /* Register classes */
  SWIG_Lua_add_namespace_classes(L,ns);

  sub_namespace = ns->ns_namespaces;
  if( sub_namespace != 0) {
    while(*sub_namespace != 0) {
      SWIG_Lua_namespace_register(L, *sub_namespace, 1);
      lua_pop(L,1); /* removing sub-namespace table */
      sub_namespace++;
    }
  }

  if (reg) {
    lua_pushstring(L,ns->name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4); /* add namespace to module table */
  }
  assert(lua_gettop(L) == begin+1);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname);

typedef int (*swig_lua_base_iterator_func)(lua_State*,swig_type_info*, int, int *ret);

SWIGINTERN int SWIG_Lua_iterate_bases(lua_State *L, swig_type_info * SWIGUNUSED swig_type,
  int first_arg, swig_lua_base_iterator_func func, int  *const ret)
{
    /* first_arg - position of the object in stack. Everything that is above are arguments
     * and is passed to every evocation of the func */
    int last_arg = lua_gettop(L);/* position of last argument */
    int original_metatable = last_arg + 1;
    size_t bases_count;
    int result = SWIG_ERROR;
    int bases_table;
    (void)swig_type;
    lua_getmetatable(L,first_arg);

    /* initialise base search */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
    SWIG_Lua_get_table(L,".bases");
    assert(lua_istable(L,-1));
    bases_count = lua_rawlen(L,-1);
    bases_table = lua_gettop(L);
#else
    /* In elua .bases table doesn't exist. Use table from swig_lua_class */
    (void)bases_table;
    assert(swig_type!=0);
    swig_module_info *module=SWIG_GetModule(L);
    swig_lua_class **bases= ((swig_lua_class*)(swig_type->clientdata))->bases;
    const char **base_names= ((swig_lua_class*)(swig_type->clientdata))->base_names;
    bases_count = 0;
    for(;base_names[bases_count];
      bases_count++);/* get length of bases */
#endif

    if(ret)
      *ret = 0;
    if(bases_count>0)
    {
      int to_remove;
      size_t i;
      int j;
      int subcall_last_arg;
      int subcall_first_arg = lua_gettop(L) + 1;/* Here a copy of first_arg and arguments begin */
      int valid = 1;
      swig_type_info *base_swig_type = 0;
      for(j=first_arg;j<=last_arg;j++)
        lua_pushvalue(L,j);
      subcall_last_arg = lua_gettop(L);

      /* Trick: temporarily replacing original metatable with metatable for base class and call getter */
      for(i=0;i<bases_count;i++) {
        /* Iteration through class bases */
#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
        lua_rawgeti(L,bases_table,i+1);
        base_swig_type = 0;
        if(lua_isnil(L,-1)) {
          valid = 0;
          lua_pop(L,1);
        } else {
          valid = 1;
        }
#else /* In elua .bases table doesn't exist. Use table from swig_lua_class */
        swig_lua_class *base_class = bases[i];
        if(!base_class) {
          valid = 0;
        } else {
          valid = 1;
          SWIG_Lua_get_class_metatable(L,base_class->fqname);
          base_swig_type = SWIG_TypeQueryModule(module,module,base_names[i]);
          assert(base_swig_type != 0);
        }
#endif

        if(!valid)
          continue;
        assert(lua_isuserdata(L, subcall_first_arg));
        assert(lua_istable(L,-1));
        lua_setmetatable(L,subcall_first_arg); /* Set new metatable */
        assert(lua_gettop(L) == subcall_last_arg);
        result = func(L, base_swig_type,subcall_first_arg, ret); /* Forward call */
        if(result != SWIG_ERROR) {
          break;
        }
      }
      /* Restore original metatable */
      lua_pushvalue(L,original_metatable);
      lua_setmetatable(L,first_arg);
      /* Clear - remove everything between last_arg and subcall_last_arg including */
      to_remove = subcall_last_arg - last_arg;
      for(j=0;j<to_remove;j++)
        lua_remove(L,last_arg+1);
    } else {
      /* Remove everything after last_arg */
      lua_pop(L, lua_gettop(L) - last_arg);
    }
    if(ret) assert(lua_gettop(L) == last_arg + *ret);
    return result;
}

/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get_item(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret) *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get_item,ret);
  return bases_search_result;  /* sorry not known */
}


/* The class.get method helper, performs the lookup of class attributes.
 * It returns an error code. Number of function return values is passed inside 'ret'.
 * first_arg is not used in this function because function always has 2 arguments.
 */
SWIGINTERN int  SWIG_Lua_class_do_get(lua_State *L, swig_type_info *type, int SWIGUNUSED first_arg, int *ret)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int bases_search_result;
  int substack_start = lua_gettop(L)-2;
  assert(first_arg == substack_start+1);
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,substack_start+2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    if(ret)
      *ret = 1;
    return SWIG_OK;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* Remove the metatable */
  lua_pop(L,1);
  /* Search in base classes */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,substack_start+1,SWIG_Lua_class_do_get,ret);
  return bases_search_result;  /* sorry not known */
}

/* the class.get method, performs the lookup of class attributes
 */
SWIGINTERN int  SWIG_Lua_class_get(lua_State *L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  int ret = 0;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_get(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  result = SWIG_Lua_class_do_get_item(L,type,1,&ret);
  if(result == SWIG_OK)
    return ret;

  return 0;
}

/* helper for the class.set method, performs the lookup of class attributes
 * It returns error code. Number of function return values is passed inside 'ret'
 */
SWIGINTERN int  SWIG_Lua_class_do_set(lua_State *L, swig_type_info *type, int first_arg, int *ret)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */

  int bases_search_result;
  int substack_start = lua_gettop(L) - 3;
  lua_checkstack(L,5);
  assert(lua_isuserdata(L,substack_start+1));  /* just in case */
  lua_getmetatable(L,substack_start+1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  if(ret)
    *ret = 0; /* it is setter - number of return values is always 0 */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,substack_start+2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,-2); /* tidy stack, remove .set table */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,substack_start+1);  /* userdata */
      lua_pushvalue(L,substack_start+3);  /* value */
      lua_call(L,2,0);
      lua_remove(L,substack_start+4); /*remove metatable*/
      return SWIG_OK;
    }
    lua_pop(L,1);  /* remove the value */
  } else {
    lua_pop(L,1);  /* remove the answer for .set table request*/
  }
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,substack_start+1);  /* the userdata */
    lua_pushvalue(L,substack_start+2);  /* the parameter */
    lua_pushvalue(L,substack_start+3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return SWIG_OK;
  }
  lua_pop(L,1); /* remove value */

  lua_pop(L,1); /* remove metatable */
  /* Search among bases */
  bases_search_result = SWIG_Lua_iterate_bases(L,type,first_arg,SWIG_Lua_class_do_set,ret);
  if(ret)
    assert(*ret == 0);
  assert(lua_gettop(L) == substack_start + 3);
  return bases_search_result;
}

/* This is the actual method exported to Lua. It calls SWIG_Lua_class_do_set and correctly
 * handles return values.
 */
SWIGINTERN int  SWIG_Lua_class_set(lua_State *L)
{
/*  There should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
  */
  int ret = 0;
  int result;
  swig_lua_userdata *usr;
  swig_type_info *type;
  assert(lua_isuserdata(L,1));
  usr=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  type = usr->type;
  result = SWIG_Lua_class_do_set(L,type,1,&ret);
  if(result != SWIG_OK) {
   SWIG_Lua_pushferrstring(L,"Assignment not possible. No setter/member with this name. For custom assignments implement __setitem method.");
   lua_error(L);
  } else {
    assert(ret==0);
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  swig_lua_class *clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* the class.__tostring method called by the interpreter and print */
SWIGINTERN int  SWIG_Lua_class_tostring(lua_State *L)
{
/*  there should be 1 param passed in
  (1) userdata (not the metatable) */
  const char *className;
  void* userData;
  assert(lua_isuserdata(L,1));  /* just in case */
  userData = lua_touserdata(L,1); /* get the userdata address for later */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  lua_getfield(L, -1, ".type");
  className = lua_tostring(L, -1);

  lua_pushfstring(L, "<%s userdata: %p>", className, userData);
  return 1;
}

/* to manually disown some userdata */
SWIGINTERN int  SWIG_Lua_class_disown(lua_State *L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata *usr;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  
  usr->own = 0; /* clear our ownership */
  return 0;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_class_equal(lua_State *L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* populate table at the top of the stack with metamethods that ought to be inherited */
SWIGINTERN void SWIG_Lua_populate_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_add_boolean(L, "__add", 1);
  SWIG_Lua_add_boolean(L, "__sub", 1);
  SWIG_Lua_add_boolean(L, "__mul", 1);
  SWIG_Lua_add_boolean(L, "__div", 1);
  SWIG_Lua_add_boolean(L, "__mod", 1);
  SWIG_Lua_add_boolean(L, "__pow", 1);
  SWIG_Lua_add_boolean(L, "__unm", 1);
  SWIG_Lua_add_boolean(L, "__len", 1 );
  SWIG_Lua_add_boolean(L, "__concat", 1 );
  SWIG_Lua_add_boolean(L, "__eq", 1);
  SWIG_Lua_add_boolean(L, "__lt", 1);
  SWIG_Lua_add_boolean(L, "__le", 1);
  SWIG_Lua_add_boolean(L, "__call", 1);
  SWIG_Lua_add_boolean(L, "__tostring", 1);
  SWIG_Lua_add_boolean(L, "__gc", 0);
}

/* creates the swig registry */
SWIGINTERN void SWIG_Lua_create_class_registry(lua_State *L)
{
  /* create main SWIG registry table */
  lua_pushstring(L,"SWIG");
  lua_newtable(L);
  /* populate it with some predefined data */

  /* .library table. Placeholder */
  lua_pushstring(L,".library");
  lua_newtable(L);
  {
    /* list of metamethods that class inherits from its bases */
    lua_pushstring(L,"inheritable_metamethods");
    lua_newtable(L);
    /* populate with list of metamethods */
    SWIG_Lua_populate_inheritable_metamethods(L);
    lua_rawset(L,-3);
  }
  lua_rawset(L,-3);

  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* gets the swig registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State *L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    SWIG_Lua_create_class_registry(L);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

SWIGINTERN void SWIG_Lua_get_inheritable_metamethods(lua_State *L)
{
  SWIG_Lua_get_class_registry(L);
  lua_pushstring(L, ".library");
  lua_rawget(L,-2);
  assert( !lua_isnil(L,-1) );
  lua_pushstring(L, "inheritable_metamethods");
  lua_rawget(L,-2);

  /* Remove class registry and library table */
  lua_remove(L,-2);
  lua_remove(L,-2);
}

/* Helper function to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State *L,const char *cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* Set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State *L,swig_lua_class *clss)
{
  int i=0;
  swig_module_info *module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }
}

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
/* Merges two tables  */
SWIGINTERN void SWIG_Lua_merge_tables_by_index(lua_State *L, int target, int source)
{
  /* iterating */
  lua_pushnil(L);
  while (lua_next(L,source) != 0) {
    /* -1 - value, -2 - index */
    /* have to copy to assign */
    lua_pushvalue(L,-2); /* copy of index */
    lua_pushvalue(L,-2); /* copy of value */
    lua_rawset(L, target);
    lua_pop(L,1);
    /* only key is left */
  }
}

/* Merges two tables with given name. original - index of target metatable, base - index of source metatable */
SWIGINTERN void SWIG_Lua_merge_tables(lua_State *L, const char* name, int original, int base)
{
  /* push original[name], then base[name] */
  lua_pushstring(L,name);
  lua_rawget(L,original);
  int original_table = lua_gettop(L);
  lua_pushstring(L,name);
  lua_rawget(L,base);
  int base_table = lua_gettop(L);
  SWIG_Lua_merge_tables_by_index(L, original_table, base_table);
  /* clearing stack */
  lua_pop(L,2);
}

/* Function takes all symbols from base and adds it to derived class. It's just a helper. */
SWIGINTERN void SWIG_Lua_class_squash_base(lua_State *L, swig_lua_class *base_cls)
{
  /* There is one parameter - original, i.e. 'derived' class metatable */
  assert(lua_istable(L,-1));
  int original = lua_gettop(L);
  SWIG_Lua_get_class_metatable(L,base_cls->fqname);
  int base = lua_gettop(L);
  SWIG_Lua_merge_tables(L, ".fn", original, base );
  SWIG_Lua_merge_tables(L, ".set", original, base );
  SWIG_Lua_merge_tables(L, ".get", original, base );
  lua_pop(L,1);
}

/* Function squashes all symbols from 'clss' bases into itself */
SWIGINTERN void  SWIG_Lua_class_squash_bases(lua_State *L, swig_lua_class *clss)
{
  int i;
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* Somehow it's not found. Skip it */
      continue;
    /* Thing is: all bases are already registered. Thus they have already executed
     * this function. So we just need to squash them into us, because their bases
     * are already squashed into them. No need for recursion here!
     */
    SWIG_Lua_class_squash_base(L, clss->bases[i]);
  }
  lua_pop(L,1); /*tidy stack*/
}
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA) /* In elua this is useless */
/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_variable(lua_State *L,const char *name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class static details (static attributes, operations and constants) */
SWIGINTERN void SWIG_Lua_add_class_static_details(lua_State *L, swig_lua_class *clss)
{
  int i = 0;
  /* The class namespace table must be on the top of the stack */
  assert(lua_istable(L,-1));
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_static_details(L,clss->bases[i]);
  }

  SWIG_Lua_add_namespace_details(L, clss->cls_static);
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss); /* forward declaration */

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_instance_details(lua_State *L, swig_lua_class *clss)
{
  int i;
  size_t bases_count = 0;
  /* Add bases to .bases table */
  SWIG_Lua_get_table(L,".bases");
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
    /* Base class must be already registered */
    assert(lua_istable(L,-1));
    lua_rawseti(L,-2,i+1); /* In lua indexing starts from 1 */
    bases_count++;
  }
  assert(lua_rawlen(L,-1) == bases_count);
  lua_pop(L,1); /* remove .bases table */
  /* add attributes */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].func);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /* add operator overloads
    This adds methods from metatable array to metatable. Can mess up garbage
    collectind if someone defines __gc method
    */
  if(clss->metatable) {
    for(i=0;clss->metatable[i].name;i++) {
      SWIG_Lua_add_function(L,clss->metatable[i].name,clss->metatable[i].func);
    }
  }

#if !defined(SWIG_LUA_SQUASH_BASES)
  /* Adding metamethods that are defined in base classes. If bases were squashed
   * then it is obviously unnecessary
   */
  SWIG_Lua_add_class_user_metamethods(L, clss);
#endif
}

/* Helpers to add user defined class metamedhods - __add, __sub etc. The helpers are needed
   for the following issue: Lua runtime checks for metamethod existence with rawget function
   ignoring our SWIG-provided __index and __newindex functions. Thus our inheritance-aware method
   search algorithm doesn't work in such case. (Not to say that Lua runtime queries metamethod directly
   in metatable and not in object).
   Current solution is this: if somewhere in hierarchy metamethod __x is defined, then all descendants
   are automatically given a special proxy __x that calls the real __x method.
   Obvious idea - to copy __x instead of creating __x-proxy is wrong because if someone changes __x in runtime,
   those changes must be reflected in all descendants.
*/

SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L); /*forward declaration*/

/* The real function that resolves a metamethod.
 * Function searches given class and all it's bases(recursively) for first instance of something that is
 * not equal to SWIG_Lua_resolve_metatmethod. (Almost always this 'something' is actual metamethod implementation
 * and it is a SWIG-generated C function.). It returns value on the top of the L and there is no garbage below the
 * answer.
 * Returns 1 if found, 0 otherwise.
 * clss is class which metatable we will search for method
 * metamethod_name_idx is index in L where metamethod name (as string) lies
 * skip_check allows to skip searching metamethod in givel clss and immideatelly go to searching in bases. skip_check
 * is not caried to subsequent recursive calls - false is always passed. It is set to true only at first call from
 * SWIG_Lua_resolve_metamethod
 * */
SWIGINTERN int SWIG_Lua_do_resolve_metamethod(lua_State *L, const swig_lua_class *clss, int metamethod_name_idx,
    int skip_check)
{
  /* This function is called recursively */
  int result = 0;
  int i = 0;

  if (!skip_check) {
    SWIG_Lua_get_class_metatable(L, clss->fqname);
    lua_pushvalue(L, metamethod_name_idx);
    lua_rawget(L,-2);
    /* If this is cfunction and it is equal to SWIG_Lua_resolve_metamethod then
     * this isn't the function we are looking for :)
     * lua_tocfunction will return NULL if not cfunction
     */
    if (!lua_isnil(L,-1) && lua_tocfunction(L,-1) != SWIG_Lua_resolve_metamethod ) {
      lua_remove(L,-2); /* removing class metatable */
      return 1;
    }
    lua_pop(L,2); /* remove class metatable and query result */
  }

  /* Forwarding calls to bases */
  for(i=0;clss->bases[i];i++)
  {
    result = SWIG_Lua_do_resolve_metamethod(L, clss->bases[i], metamethod_name_idx, 0);
    if (result)
      break;
  }

  return result;
}

/* The proxy function for metamethod. All parameters are passed as cclosure. Searches for actual method
 * and calls it */
SWIGRUNTIME int SWIG_Lua_resolve_metamethod(lua_State *L)
{
  int numargs;
  int metamethod_name_idx;
  const swig_lua_class* clss;
  int result;

  lua_checkstack(L,5);
  numargs = lua_gettop(L); /* number of arguments to pass to actual metamethod */
  
  /* Get upvalues from closure */
  lua_pushvalue(L, lua_upvalueindex(1)); /*Get function name*/
  metamethod_name_idx = lua_gettop(L);
  
  lua_pushvalue(L, lua_upvalueindex(2));
  clss = (const swig_lua_class*)(lua_touserdata(L,-1));
  lua_pop(L,1); /* remove lightuserdata with clss from stack */

  /* Actual work */
  result = SWIG_Lua_do_resolve_metamethod(L, clss, metamethod_name_idx, 1);
  if (!result) {
   SWIG_Lua_pushferrstring(L,"The metamethod proxy is set, but it failed to find actual metamethod. Memory corruption is most likely explanation.");
   lua_error(L);
   return 0;
  }

  lua_remove(L,-2); /* remove metamethod key */
  lua_insert(L,1); /* move function to correct position */
  lua_call(L, numargs, LUA_MULTRET);
  return lua_gettop(L); /* return all results */
}


/* If given metamethod must be present in given class, then creates appropriate proxy
 * Returns 1 if successfully added, 0 if not added because no base class has it, -1
 * if method is defined in the class metatable itself
 */
SWIGINTERN int SWIG_Lua_add_class_user_metamethod(lua_State *L, swig_lua_class *clss, const int metatable_index)
{
  int key_index;
  int success = 0;
  int i = 0;

  /* metamethod name - on the top of the stack */
  assert(lua_isstring(L,-1));
  
  key_index = lua_gettop(L);

  /* Check whether method is already defined in metatable */
  lua_pushvalue(L,key_index); /* copy of the key */
  lua_gettable(L,metatable_index);
  if( !lua_isnil(L,-1) ) {
    lua_pop(L,1);
    return -1;
  }
  lua_pop(L,1); 

  /* Iterating over immediate bases */
  for(i=0;clss->bases[i];i++)
  {
    const swig_lua_class *base = clss->bases[i];
    SWIG_Lua_get_class_metatable(L, base->fqname);
    lua_pushvalue(L, key_index);
    lua_rawget(L, -2);
    if( !lua_isnil(L,-1) ) {
      lua_pushvalue(L, key_index); 

      /* Add proxy function */
      lua_pushvalue(L, key_index); /* first closure value is function name */
      lua_pushlightuserdata(L, clss); /* second closure value is swig_lua_class structure */
      lua_pushcclosure(L, SWIG_Lua_resolve_metamethod, 2);
      
      lua_rawset(L, metatable_index);
      success = 1;
    }
    lua_pop(L,1); /* remove function or nil */
    lua_pop(L,1); /* remove base class metatable */

    if( success )
      break;
  }

  return success; 
}

SWIGINTERN void SWIG_Lua_add_class_user_metamethods(lua_State *L, swig_lua_class *clss)
{
  int metatable_index;
  int metamethods_info_index;
  int tostring_undefined;
  int eq_undefined = 0;

  SWIG_Lua_get_class_metatable(L, clss->fqname);
  metatable_index = lua_gettop(L);
  SWIG_Lua_get_inheritable_metamethods(L);
  assert(lua_istable(L,-1));
  metamethods_info_index = lua_gettop(L);
  lua_pushnil(L); /* first key */
  while(lua_next(L, metamethods_info_index) != 0 ) {
    /* key at index -2, value at index -1 */
    const int is_inheritable = lua_toboolean(L,-2);
    lua_pop(L,1); /* remove value - we don't need it anymore */

    if(is_inheritable) { /* if metamethod is inheritable */
      SWIG_Lua_add_class_user_metamethod(L,clss,metatable_index);
    }
  }

  lua_pop(L,1); /* remove inheritable metatmethods table */

  /* Special handling for __tostring method */
  lua_pushstring(L, "__tostring");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  tostring_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( tostring_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_tostring);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }

  /* Special handling for __eq method */
  lua_pushstring(L, "__eq");
  lua_pushvalue(L,-1);
  lua_rawget(L,metatable_index);
  eq_undefined = lua_isnil(L,-1);
  lua_pop(L,1);
  if( eq_undefined ) {
    lua_pushcfunction(L, SWIG_Lua_class_equal);
    lua_rawset(L, metatable_index);
  } else {
    lua_pop(L,1); /* remove copy of the key */
  }
  /* Warning: __index and __newindex are SWIG-defined. For user-defined operator[]
   * a __getitem/__setitem method should be defined
   */
  lua_pop(L,1); /* pop class metatable */
}

/* Register class static methods,attributes etc as well as constructor proxy */
SWIGINTERN void SWIG_Lua_class_register_static(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  lua_checkstack(L,5); /* just in case */
  assert(lua_istable(L,-1));  /* just in case */
  assert(strcmp(clss->name, clss->cls_static->name) == 0); /* in class those 2 must be equal */

  SWIG_Lua_namespace_register(L,clss->cls_static, 1);

  assert(lua_istable(L,-1)); /* just in case */

  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
  {
    lua_getmetatable(L,-1);
    assert(lua_istable(L,-1)); /* just in case */
    SWIG_Lua_add_function(L,"__call", clss->constructor);
    lua_pop(L,1);
  }

  assert(lua_istable(L,-1)); /* just in case */
  SWIG_Lua_add_class_static_details(L, clss);

  /* clear stack */
  lua_pop(L,1);
  assert( lua_gettop(L) == begin );
}

/* Performs the instance (non-static) class registration process. Metatable for class is created
 * and added to the class registry.
 */
SWIGINTERN void  SWIG_Lua_class_register_instance(lua_State *L,swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_newtable(L);    /* create the metatable */
#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* If squashing is requested, then merges all bases metatable into this one.
   * It would get us all special methods: __getitem, __add etc.
   * This would set .fn, .type, and other .xxx incorrectly, but we will overwrite it right away
   */
  {
    int new_metatable_index = lua_absindex(L,-1);
    for(i=0;clss->bases[i];i++)
    {
      int base_metatable;
      SWIG_Lua_get_class_metatable(L,clss->bases[i]->fqname);
      base_metatable = lua_absindex(L,-1);
      SWIG_Lua_merge_tables_by_index(L,new_metatable_index, base_metatable);
      lua_pop(L,1);
    }
  }
  /* And now we will overwrite all incorrectly set data */
#endif
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->fqname);
  lua_rawset(L,-3);
  /* add a table called bases */
  lua_pushstring(L,".bases");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  /* add manual disown method */
  SWIG_Lua_add_function(L,"__disown",SWIG_Lua_class_disown);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */
  assert(lua_gettop(L) == begin);

#if defined(SWIG_LUA_SQUASH_BASES) && (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  /* Now merge all symbols from .fn, .set, .get etc from bases to our tables */
  SWIG_Lua_class_squash_bases(L,clss);
#endif
  SWIG_Lua_get_class_metatable(L,clss->fqname);
  SWIG_Lua_add_class_instance_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
  assert( lua_gettop(L) == begin );
}

SWIGINTERN void  SWIG_Lua_class_register(lua_State *L,swig_lua_class *clss)
{
  int SWIGUNUSED begin;
  assert(lua_istable(L,-1)); /* This is a table (module or namespace) where classes will be added */
  SWIG_Lua_class_register_instance(L,clss);
  SWIG_Lua_class_register_static(L,clss);

  /* Add links from static part to instance part and vice versa */
  /* [SWIG registry]                                   [Module]
   *    "MyClass" ----> [MyClass metatable] <=====     "MyClass" -+> [static part]
   *                     ".get" ----> ...        |                |     getmetatable()----|
   *                     ".set" ----> ...        |                |                       |
   *                     ".static" --------------)----------------/           [static part metatable]
   *                                             |                                ".get" --> ...
   *                                             |                                ".set" --> ....
   *                                             |=============================== ".instance"
   */
  begin = lua_gettop(L);
  lua_pushstring(L,clss->cls_static->name);
  lua_rawget(L,-2); /* get class static table */
  assert(lua_istable(L,-1));
  lua_getmetatable(L,-1);
  assert(lua_istable(L,-1)); /* get class static metatable */
  lua_pushstring(L,".instance"); /* prepare key */

  SWIG_Lua_get_class_metatable(L,clss->fqname); /* get class metatable */
  assert(lua_istable(L,-1));
  lua_pushstring(L,".static"); /* prepare key */
  lua_pushvalue(L, -4); /* push static class TABLE */
  assert(lua_istable(L,-1));
  lua_rawset(L,-3); /* assign static class table(!NOT metatable) as ".static" member of class metatable */
  lua_rawset(L,-3); /* assign class metatable as ".instance" member of class static METATABLE */
  lua_pop(L,2);
  assert(lua_gettop(L) == begin);
}
#endif /* SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA */

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
SWIGINTERN void SWIG_Lua_elua_class_register_instance(lua_State *L, swig_lua_class *clss)
{
  const int SWIGUNUSED begin = lua_gettop(L);
  int i;
  /* if name already there (class is already registered) then do nothing */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  lua_rawget(L,-2);
  if(!lua_isnil(L,-1)) {
    lua_pop(L,2);
    assert(lua_gettop(L)==begin);
    return;
  }
  lua_pop(L,2); /* tidy stack */
  /* Recursively initialize all bases */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_elua_class_register_instance(L,clss->bases[i]);
  }
  /* Again, get registry and push name */
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->fqname);  /* get the name */
  assert(clss->metatable);
  lua_pushrotable(L, (void*)(clss->metatable));    /* create the metatable */
  lua_rawset(L,-3);
  lua_pop(L,1);
  assert(lua_gettop(L) == begin);
}
#endif /* elua && eluac */

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void SWIG_Lua_AddMetatable(lua_State *L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->fqname);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State *L,void *ptr,swig_type_info *type, int own)
{
  swig_lua_userdata *usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
#endif
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State *L,int index,void **ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata *usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State *L,int index,swig_type_info *type,int flags,
       int argnum,const char *func_name){
  void *result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    luaL_error (L,"Error in %s, expected a %s at argument number %d\n",
		func_name,(type && type->str)?type->str:"void*",argnum);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State *L,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State *L,int index,void *ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata *raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata *usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State *L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC))
/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State *L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushinteger(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      {
        char c = constants[i].lvalue;
        lua_pushlstring(L,&c,1);
      }
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}
#endif

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua which is a really simple way of calling lua from C
Unfortunately lua keeps changing its APIs, so we need a conditional compile
In lua 5.0.X it's lua_dostring()
In lua 5.1.X it's luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char *str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Byte swig_types[0]
#define SWIGTYPE_p_ChannelType swig_types[1]
#define SWIGTYPE_p_ComponentContainer swig_types[2]
#define SWIGTYPE_p_ComponentIterator swig_types[3]
#define SWIGTYPE_p_ComponentRange swig_types[4]
#define SWIGTYPE_p_ComponentVec swig_types[5]
#define SWIGTYPE_p_ConstComponentIterator swig_types[6]
#define SWIGTYPE_p_ConstComponentRange swig_types[7]
#define SWIGTYPE_p_ConstEntityIterator swig_types[8]
#define SWIGTYPE_p_ConstEntityRange swig_types[9]
#define SWIGTYPE_p_ConstFactoryIterator swig_types[10]
#define SWIGTYPE_p_ConstManagerFactoryIterator swig_types[11]
#define SWIGTYPE_p_ConstObjectIterator swig_types[12]
#define SWIGTYPE_p_ConstResultIterator swig_types[13]
#define SWIGTYPE_p_ConstWorldManagerIterator swig_types[14]
#define SWIGTYPE_p_DefaultEventPublisher swig_types[15]
#define SWIGTYPE_p_EntityContainer swig_types[16]
#define SWIGTYPE_p_EntityIterator swig_types[17]
#define SWIGTYPE_p_EntityRange swig_types[18]
#define SWIGTYPE_p_EventNameType swig_types[19]
#define SWIGTYPE_p_FactoryContainer swig_types[20]
#define SWIGTYPE_p_FactoryIterator swig_types[21]
#define SWIGTYPE_p_FilterFunction swig_types[22]
#define SWIGTYPE_p_GeometryRayTestResult swig_types[23]
#define SWIGTYPE_p_IDType swig_types[24]
#define SWIGTYPE_p_ManagerFactoryIterator swig_types[25]
#define SWIGTYPE_p_ManagerFactoryMap swig_types[26]
#define SWIGTYPE_p_MathTools__GeometryRayTestResult swig_types[27]
#define SWIGTYPE_p_MathTools__PlaneSide swig_types[28]
#define SWIGTYPE_p_MathTools__PlaneTestResult swig_types[29]
#define SWIGTYPE_p_MathTools__Point3DTestResult swig_types[30]
#define SWIGTYPE_p_Mezzanine__Actor swig_types[31]
#define SWIGTYPE_p_Mezzanine__ActorFactory swig_types[32]
#define SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit swig_types[33]
#define SWIGTYPE_p_Mezzanine__AngleData swig_types[34]
#define SWIGTYPE_p_Mezzanine__AreaEffect swig_types[35]
#define SWIGTYPE_p_Mezzanine__AreaEffectFactory swig_types[36]
#define SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit swig_types[37]
#define SWIGTYPE_p_Mezzanine__ArithmeticException swig_types[38]
#define SWIGTYPE_p_Mezzanine__AxisAlignedBox swig_types[39]
#define SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer swig_types[40]
#define SWIGTYPE_p_Mezzanine__CameraController swig_types[41]
#define SWIGTYPE_p_Mezzanine__Circle swig_types[42]
#define SWIGTYPE_p_Mezzanine__ColourValue swig_types[43]
#define SWIGTYPE_p_Mezzanine__Debris swig_types[44]
#define SWIGTYPE_p_Mezzanine__DebrisFactory swig_types[45]
#define SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit swig_types[46]
#define SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory swig_types[47]
#define SWIGTYPE_p_Mezzanine__DirectoryException swig_types[48]
#define SWIGTYPE_p_Mezzanine__DirectoryNotFoundException swig_types[49]
#define SWIGTYPE_p_Mezzanine__DirectoryPermissionException swig_types[50]
#define SWIGTYPE_p_Mezzanine__DirectoryReadException swig_types[51]
#define SWIGTYPE_p_Mezzanine__DirectoryWriteException swig_types[52]
#define SWIGTYPE_p_Mezzanine__Entity swig_types[53]
#define SWIGTYPE_p_Mezzanine__EntityComponent swig_types[54]
#define SWIGTYPE_p_Mezzanine__EntityComponentID swig_types[55]
#define SWIGTYPE_p_Mezzanine__EntityComponentManager swig_types[56]
#define SWIGTYPE_p_Mezzanine__EntityFactory swig_types[57]
#define SWIGTYPE_p_Mezzanine__EntityID swig_types[58]
#define SWIGTYPE_p_Mezzanine__EntityManagementEvent swig_types[59]
#define SWIGTYPE_p_Mezzanine__EntityManager swig_types[60]
#define SWIGTYPE_p_Mezzanine__EntityProxy swig_types[61]
#define SWIGTYPE_p_Mezzanine__ExceptionBase swig_types[62]
#define SWIGTYPE_p_Mezzanine__FieldOfForce swig_types[63]
#define SWIGTYPE_p_Mezzanine__FileException swig_types[64]
#define SWIGTYPE_p_Mezzanine__FileNotFoundException swig_types[65]
#define SWIGTYPE_p_Mezzanine__FilePermissionException swig_types[66]
#define SWIGTYPE_p_Mezzanine__FileReadException swig_types[67]
#define SWIGTYPE_p_Mezzanine__FileWriteException swig_types[68]
#define SWIGTYPE_p_Mezzanine__GenericEntityFactory swig_types[69]
#define SWIGTYPE_p_Mezzanine__Graphics__CameraProxy swig_types[70]
#define SWIGTYPE_p_Mezzanine__Graphics__Mesh swig_types[71]
#define SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery swig_types[72]
#define SWIGTYPE_p_Mezzanine__Graphics__SceneManager swig_types[73]
#define SWIGTYPE_p_Mezzanine__GravityField swig_types[74]
#define SWIGTYPE_p_Mezzanine__GravityWell swig_types[75]
#define SWIGTYPE_p_Mezzanine__IOException swig_types[76]
#define SWIGTYPE_p_Mezzanine__IOReadException swig_types[77]
#define SWIGTYPE_p_Mezzanine__IOWriteException swig_types[78]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException swig_types[79]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityException swig_types[80]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException swig_types[81]
#define SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException swig_types[82]
#define SWIGTYPE_p_Mezzanine__InternalException swig_types[83]
#define SWIGTYPE_p_Mezzanine__InvalidAssignment swig_types[84]
#define SWIGTYPE_p_Mezzanine__InvalidStateException swig_types[85]
#define SWIGTYPE_p_Mezzanine__InvalidVersionException swig_types[86]
#define SWIGTYPE_p_Mezzanine__ManagerBase swig_types[87]
#define SWIGTYPE_p_Mezzanine__ManagerFactory swig_types[88]
#define SWIGTYPE_p_Mezzanine__Matrix3x3 swig_types[89]
#define SWIGTYPE_p_Mezzanine__MemoryManagementException swig_types[90]
#define SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException swig_types[91]
#define SWIGTYPE_p_Mezzanine__NetworkException swig_types[92]
#define SWIGTYPE_p_Mezzanine__NetworkNotFoundException swig_types[93]
#define SWIGTYPE_p_Mezzanine__NetworkPermissionException swig_types[94]
#define SWIGTYPE_p_Mezzanine__NetworkReadException swig_types[95]
#define SWIGTYPE_p_Mezzanine__NetworkURLException swig_types[96]
#define SWIGTYPE_p_Mezzanine__NetworkWriteException swig_types[97]
#define SWIGTYPE_p_Mezzanine__NotImplementedException swig_types[98]
#define SWIGTYPE_p_Mezzanine__OutOfMemoryException swig_types[99]
#define SWIGTYPE_p_Mezzanine__ParametersCastException swig_types[100]
#define SWIGTYPE_p_Mezzanine__ParametersException swig_types[101]
#define SWIGTYPE_p_Mezzanine__ParametersRangeException swig_types[102]
#define SWIGTYPE_p_Mezzanine__Physics__CollisionShape swig_types[103]
#define SWIGTYPE_p_Mezzanine__Physics__GhostProxy swig_types[104]
#define SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo swig_types[105]
#define SWIGTYPE_p_Mezzanine__Plane swig_types[106]
#define SWIGTYPE_p_Mezzanine__Quaternion swig_types[107]
#define SWIGTYPE_p_Mezzanine__Ray swig_types[108]
#define SWIGTYPE_p_Mezzanine__RayQuery swig_types[109]
#define SWIGTYPE_p_Mezzanine__RayQueryHit swig_types[110]
#define SWIGTYPE_p_Mezzanine__RectBaseT_float_t swig_types[111]
#define SWIGTYPE_p_Mezzanine__RectBaseT_int_t swig_types[112]
#define SWIGTYPE_p_Mezzanine__RectBaseT_unsigned_long_t swig_types[113]
#define SWIGTYPE_p_Mezzanine__RenderingAPIException swig_types[114]
#define SWIGTYPE_p_Mezzanine__RigidDebris swig_types[115]
#define SWIGTYPE_p_Mezzanine__RuntimeAssertionException swig_types[116]
#define SWIGTYPE_p_Mezzanine__ScriptException swig_types[117]
#define SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException swig_types[118]
#define SWIGTYPE_p_Mezzanine__ScriptLuaException swig_types[119]
#define SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException swig_types[120]
#define SWIGTYPE_p_Mezzanine__ScriptLuaYieldException swig_types[121]
#define SWIGTYPE_p_Mezzanine__SoftDebris swig_types[122]
#define SWIGTYPE_p_Mezzanine__Sphere swig_types[123]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorException swig_types[124]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException swig_types[125]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException swig_types[126]
#define SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException swig_types[127]
#define SWIGTYPE_p_Mezzanine__TerrainUpdateWorkUnit swig_types[128]
#define SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type swig_types[129]
#define SWIGTYPE_p_Mezzanine__Threading__RawFile swig_types[130]
#define SWIGTYPE_p_Mezzanine__Timer swig_types[131]
#define SWIGTYPE_p_Mezzanine__Transform swig_types[132]
#define SWIGTYPE_p_Mezzanine__TransformableChildObject swig_types[133]
#define SWIGTYPE_p_Mezzanine__TransformableObject swig_types[134]
#define SWIGTYPE_p_Mezzanine__Vector2 swig_types[135]
#define SWIGTYPE_p_Mezzanine__Vector2LengthCompare swig_types[136]
#define SWIGTYPE_p_Mezzanine__Vector3 swig_types[137]
#define SWIGTYPE_p_Mezzanine__Vector3LengthCompare swig_types[138]
#define SWIGTYPE_p_Mezzanine__Vehicle swig_types[139]
#define SWIGTYPE_p_Mezzanine__VehicleFactory swig_types[140]
#define SWIGTYPE_p_Mezzanine__VehicleUpdateWorkUnit swig_types[141]
#define SWIGTYPE_p_Mezzanine__World swig_types[142]
#define SWIGTYPE_p_Mezzanine__WorldManager swig_types[143]
#define SWIGTYPE_p_Mezzanine__WorldManagerFactory swig_types[144]
#define SWIGTYPE_p_Mezzanine__XML__Attribute swig_types[145]
#define SWIGTYPE_p_Mezzanine__XML__AttributeIterator swig_types[146]
#define SWIGTYPE_p_Mezzanine__XML__AttributeStruct swig_types[147]
#define SWIGTYPE_p_Mezzanine__XML__Document swig_types[148]
#define SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator swig_types[149]
#define SWIGTYPE_p_Mezzanine__XML__Node swig_types[150]
#define SWIGTYPE_p_Mezzanine__XML__NodeIterator swig_types[151]
#define SWIGTYPE_p_Mezzanine__XML__NodeStruct swig_types[152]
#define SWIGTYPE_p_Mezzanine__XML__NodeText swig_types[153]
#define SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t swig_types[154]
#define SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t swig_types[155]
#define SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t swig_types[156]
#define SWIGTYPE_p_Mezzanine__XML__ParseResult swig_types[157]
#define SWIGTYPE_p_Mezzanine__XML__TreeWalker swig_types[158]
#define SWIGTYPE_p_Mezzanine__XML__Writer swig_types[159]
#define SWIGTYPE_p_Mezzanine__XML__WriterFile swig_types[160]
#define SWIGTYPE_p_Mezzanine__XML__WriterStream swig_types[161]
#define SWIGTYPE_p_Mezzanine__XML__XMLStreamWrapper swig_types[162]
#define SWIGTYPE_p_Mezzanine__XML__XPathNode swig_types[163]
#define SWIGTYPE_p_Mezzanine__XML__XPathNodeSet swig_types[164]
#define SWIGTYPE_p_Mezzanine__XML__XPathParseResult swig_types[165]
#define SWIGTYPE_p_Mezzanine__XML__XPathQuery swig_types[166]
#define SWIGTYPE_p_Mezzanine__XML__XPathVariable swig_types[167]
#define SWIGTYPE_p_Mezzanine__XML__XPathVariableSet swig_types[168]
#define SWIGTYPE_p_ObjectContainer swig_types[169]
#define SWIGTYPE_p_ObjectIterator swig_types[170]
#define SWIGTYPE_p_Ogre__AxisAlignedBox swig_types[171]
#define SWIGTYPE_p_Ogre__ColourValue swig_types[172]
#define SWIGTYPE_p_Ogre__Plane swig_types[173]
#define SWIGTYPE_p_Ogre__Quaternion swig_types[174]
#define SWIGTYPE_p_Ogre__Ray swig_types[175]
#define SWIGTYPE_p_Ogre__Sphere swig_types[176]
#define SWIGTYPE_p_Ogre__Vector2 swig_types[177]
#define SWIGTYPE_p_Ogre__Vector3 swig_types[178]
#define SWIGTYPE_p_PlaneRayTestResult swig_types[179]
#define SWIGTYPE_p_RayTestResult swig_types[180]
#define SWIGTYPE_p_ResultContainer swig_types[181]
#define SWIGTYPE_p_ResultIterator swig_types[182]
#define SWIGTYPE_p_SDL_Event swig_types[183]
#define SWIGTYPE_p_StreamSize swig_types[184]
#define SWIGTYPE_p_WorldManagerContainer swig_types[185]
#define SWIGTYPE_p_WorldManagerIterator swig_types[186]
#define SWIGTYPE_p_XML__Node swig_types[187]
#define SWIGTYPE_p_attribute_iterator swig_types[188]
#define SWIGTYPE_p_bool swig_types[189]
#define SWIGTYPE_p_btQuaternion swig_types[190]
#define SWIGTYPE_p_btTransform swig_types[191]
#define SWIGTYPE_p_btVector3 swig_types[192]
#define SWIGTYPE_p_char swig_types[193]
#define SWIGTYPE_p_difference_type swig_types[194]
#define SWIGTYPE_p_double swig_types[195]
#define SWIGTYPE_p_f_p_void__void swig_types[196]
#define SWIGTYPE_p_f_size_t__p_void swig_types[197]
#define SWIGTYPE_p_float swig_types[198]
#define SWIGTYPE_p_int swig_types[199]
#define SWIGTYPE_p_iterator swig_types[200]
#define SWIGTYPE_p_iterator_category swig_types[201]
#define SWIGTYPE_p_long_long swig_types[202]
#define SWIGTYPE_p_ptrdiff_t swig_types[203]
#define SWIGTYPE_p_short swig_types[204]
#define SWIGTYPE_p_signed_char swig_types[205]
#define SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t swig_types[206]
#define SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t swig_types[207]
#define SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t swig_types[208]
#define SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t swig_types[209]
#define SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t swig_types[210]
#define SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t swig_types[211]
#define SWIGTYPE_p_std__exception swig_types[212]
#define SWIGTYPE_p_std__functionT_bool_fMezzanine__EntityProxy_pF_t swig_types[213]
#define SWIGTYPE_p_std__istream swig_types[214]
#define SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t swig_types[215]
#define SWIGTYPE_p_std__mapT_std__string_std__string_t swig_types[216]
#define SWIGTYPE_p_std__pairT_std__string_std__string_t swig_types[217]
#define SWIGTYPE_p_std__setT_std__string_t swig_types[218]
#define SWIGTYPE_p_std__shared_ptrT_Mezzanine__EntityManagementEvent_t swig_types[219]
#define SWIGTYPE_p_std__string swig_types[220]
#define SWIGTYPE_p_std__stringstream swig_types[221]
#define SWIGTYPE_p_std__vectorT_Mezzanine__EntityComponent_p_t swig_types[222]
#define SWIGTYPE_p_std__vectorT_Mezzanine__Entity_p_t swig_types[223]
#define SWIGTYPE_p_std__vectorT_Mezzanine__RayQueryHit_t swig_types[224]
#define SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t swig_types[225]
#define SWIGTYPE_p_std__vectorT_std__string_t swig_types[226]
#define SWIGTYPE_p_std__wstring swig_types[227]
#define SWIGTYPE_p_unsigned_char swig_types[228]
#define SWIGTYPE_p_unsigned_int swig_types[229]
#define SWIGTYPE_p_unsigned_long swig_types[230]
#define SWIGTYPE_p_unsigned_long_long swig_types[231]
#define SWIGTYPE_p_unsigned_short swig_types[232]
#define SWIGTYPE_p_value_type swig_types[233]
#define SWIGTYPE_p_wchar_t swig_types[234]
static swig_type_info *swig_types[236];
static swig_module_info swig_module = {swig_types, 235, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "Mezzanine"
#define SWIG_init      luaopen_Mezzanine
#define SWIG_init_user luaopen_Mezzanine_user

#define SWIG_LUACODE   luaopen_Mezzanine_luacode

namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


        // code to be inserted verbatim into the swig file goes here
        #include "mezzanine.h"
        #include "btBulletDynamicsCommon.h"
        #include "Ogre.h"
        #include "SDL.h"

        #ifdef GetCurrentTime
        #undef GetCurrentTime
        #endif

        #ifdef GetExceptionCode
        #undef GetExceptionCode
        #endif

        using namespace Mezzanine;
        //using namespace Mezzanine::Threading;
        //using namespace Mezzanine::Physics;

        // Fix cross module type-usage
        namespace Mezzanine
        {
            namespace Physics
            {
                typedef Mezzanine::Vector3 Vector3;
            }
            namespace Threading
            {

            }
            typedef Threading::RawFile RawFile;
        }
    

#include <typeinfo>
#include <stdexcept>


#define SWIG_exception(a,b)\
{ lua_pushfstring(L,"%s:%s",#a,b);SWIG_fail; }


#include <typeinfo>
#include <stdexcept>


#include <string>


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}


#include <vector>


#include <map>
#include <algorithm>
#include <stdexcept>


#include <utility>


#include <stdint.h>		// Use the C99 official header


#include <deque>
#include <stdexcept>

#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_new_string__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",0,0)
  result = (std::string *)new std::string();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("std::string::string",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("std::string::string",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = (std::string *)new std::string((char const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__string,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_string(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_string__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_string__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_string'\n"
    "  Possible C/C++ prototypes are:\n"
    "    std::string::string()\n"
    "    std::string::string(char const *)\n");
  lua_error(L);return 0;
}


static int _wrap_string_size(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::size",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_size",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_length(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("std::string::length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::length",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_length",1,SWIGTYPE_p_std__string);
  }
  
  result = (unsigned int)((std::string const *)arg1)->length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_empty(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  bool result;
  
  SWIG_check_num_args("std::string::empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::empty",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_empty",1,SWIGTYPE_p_std__string);
  }
  
  result = (bool)((std::string const *)arg1)->empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_c_str(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::c_str",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::c_str",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_c_str",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->c_str();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_data(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("std::string::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::data",1,"std::string const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_data",1,SWIGTYPE_p_std__string);
  }
  
  result = (char *)((std::string const *)arg1)->data();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_string_assign(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = (std::string *) 0 ;
  char *arg2 = (char *) 0 ;
  
  SWIG_check_num_args("std::string::assign",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("std::string::assign",1,"std::string *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("std::string::assign",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("string_assign",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  (arg1)->assign((char const *)arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_string(void *obj) {
std::string *arg1 = (std::string *) obj;
delete arg1;
}
static int _proxy__wrap_new_string(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_string);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_string_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_string_methods[]= {
    { "size", _wrap_string_size},
    { "length", _wrap_string_length},
    { "empty", _wrap_string_empty},
    { "c_str", _wrap_string_c_str},
    { "data", _wrap_string_data},
    { "assign", _wrap_string_assign},
    {0,0}
};
static swig_lua_method swig_string_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_string_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_string_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_string_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_string_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_string_Sf_SwigStatic = {
    "string",
    swig_string_Sf_SwigStatic_methods,
    swig_string_Sf_SwigStatic_attributes,
    swig_string_Sf_SwigStatic_constants,
    swig_string_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_string_bases[] = {0};
static const char *swig_string_base_names[] = {0};
static swig_lua_class _wrap_class_string = { "string", "string", &SWIGTYPE_p_std__string,_proxy__wrap_new_string, swig_delete_string, swig_string_methods, swig_string_attributes, &swig_string_Sf_SwigStatic, swig_string_meta, swig_string_bases, swig_string_base_names };

static int _wrap_EnumBit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Whole arg1 ;
  Mezzanine::UInt64 result;
  
  SWIG_check_num_args("Mezzanine::EnumBit",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::EnumBit",1,"Mezzanine::Whole const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::Whole const)lua_tonumber(L, 1);
  result = (Mezzanine::UInt64)Mezzanine::EnumBit(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetExceptionCode",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ExceptionBase const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetFunction",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetFunction",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetFunction();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetFile(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetFile",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetFile",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetFile();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetLine(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::Whole *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetLine",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetLine",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetLine",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::Whole *) &((Mezzanine::ExceptionBase const *)arg1)->GetLine();
  lua_pushnumber(L, (lua_Number) *result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetExceptionTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetExceptionTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetExceptionTypeName",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetExceptionTypeName",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetExceptionTypeName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetExceptionJavaTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetExceptionJavaTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetExceptionJavaTypeName",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetExceptionJavaTypeName",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::ExceptionBase const *)arg1)->GetExceptionJavaTypeName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_GetCompleteMessage(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::GetCompleteMessage",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::GetCompleteMessage",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_GetCompleteMessage",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = ((Mezzanine::ExceptionBase const *)arg1)->GetCompleteMessage();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ExceptionBase_what(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ExceptionBase::what",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ExceptionBase::what",1,"Mezzanine::ExceptionBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ExceptionBase,0))){
    SWIG_fail_ptr("ExceptionBase_what",1,SWIGTYPE_p_Mezzanine__ExceptionBase);
  }
  
  result = (char *)((Mezzanine::ExceptionBase const *)arg1)->what();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ExceptionBase(void *obj) {
Mezzanine::ExceptionBase *arg1 = (Mezzanine::ExceptionBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_ExceptionBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ExceptionBase_methods[]= {
    { "GetExceptionCode", _wrap_ExceptionBase_GetExceptionCode},
    { "GetFunction", _wrap_ExceptionBase_GetFunction},
    { "GetFile", _wrap_ExceptionBase_GetFile},
    { "GetLine", _wrap_ExceptionBase_GetLine},
    { "GetExceptionTypeName", _wrap_ExceptionBase_GetExceptionTypeName},
    { "GetExceptionJavaTypeName", _wrap_ExceptionBase_GetExceptionJavaTypeName},
    { "GetCompleteMessage", _wrap_ExceptionBase_GetCompleteMessage},
    { "what", _wrap_ExceptionBase_what},
    {0,0}
};
static swig_lua_method swig_ExceptionBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ExceptionBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ExceptionBase_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("FIRST_EXCEPTION", Mezzanine::ExceptionBase::FIRST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_EXCEPTION", Mezzanine::ExceptionBase::IO_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_FILE_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_DIRECTORY_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_URL_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_URL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_NETWORK_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IO_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_EXCEPTION", Mezzanine::ExceptionBase::II_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_IDENTITY_INVALID_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_INVALID_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_IDENTITY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("II_DUPLICATE_IDENTITY_EXCEPTION", Mezzanine::ExceptionBase::II_DUPLICATE_IDENTITY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_EXCEPTION", Mezzanine::ExceptionBase::MM_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_OUT_OF_MEMORY_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_MEMORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("MM_OUT_OF_BOUNDS_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_BOUNDS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_XML", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XML)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_XPATH", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XPATH)},
    {SWIG_LUA_CONSTTAB_INT("SYNTAX_ERROR_EXCEPTION_LUA", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_YIELD", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_YIELD)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_RUNTIME", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_RUNTIME)},
    {SWIG_LUA_CONSTTAB_INT("SCRIPT_EXCEPTION_LUA_ERRERR", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_ERRERR)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_CAST_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_CAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("PARAMETERS_RANGE_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_RANGE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ARITHMETIC_EXCEPTION", Mezzanine::ExceptionBase::ARITHMETIC_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_VERSION_EXCEPTION", Mezzanine::ExceptionBase::INVALID_VERSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_STATE_EXCEPTION", Mezzanine::ExceptionBase::INVALID_STATE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("RENDERINGAPI_EXCEPTION", Mezzanine::ExceptionBase::RENDERINGAPI_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("RT_ASSERTION_EXCEPTION", Mezzanine::ExceptionBase::RT_ASSERTION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INTERNAL_EXCEPTION", Mezzanine::ExceptionBase::INTERNAL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("NOT_IMPLEMENTED_EXCEPTION", Mezzanine::ExceptionBase::NOT_IMPLEMENTED_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("INVALID_ASSIGNMENT", Mezzanine::ExceptionBase::INVALID_ASSIGNMENT)},
    {SWIG_LUA_CONSTTAB_INT("LAST_EXCEPTION", Mezzanine::ExceptionBase::LAST_EXCEPTION)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ExceptionBase_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ExceptionBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ExceptionBase_Sf_SwigStatic = {
    "ExceptionBase",
    swig_ExceptionBase_Sf_SwigStatic_methods,
    swig_ExceptionBase_Sf_SwigStatic_attributes,
    swig_ExceptionBase_Sf_SwigStatic_constants,
    swig_ExceptionBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ExceptionBase_bases[] = {0};
static const char *swig_ExceptionBase_base_names[] = {0};
static swig_lua_class _wrap_class_ExceptionBase = { "ExceptionBase", "ExceptionBase", &SWIGTYPE_p_Mezzanine__ExceptionBase,0, swig_delete_ExceptionBase, swig_ExceptionBase_methods, swig_ExceptionBase_attributes, &swig_ExceptionBase_Sf_SwigStatic, swig_ExceptionBase_meta, swig_ExceptionBase_bases, swig_ExceptionBase_base_names };

static int _wrap_new_IOException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::IOException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOException::IOException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOException::IOException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOException::IOException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOException::IOException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOException::IOException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::IOException::IOException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::IOException::IOException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::IOException *)new Mezzanine::IOException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOException::IOException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOException::IOException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOException::IOException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOException::IOException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOException::IOException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOException *)new Mezzanine::IOException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IOException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOException::IOException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOException::IOException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOException *arg1 = (Mezzanine::IOException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOException::GetExceptionCode",1,"Mezzanine::IOException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOException,0))){
    SWIG_fail_ptr("IOException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOException(void *obj) {
Mezzanine::IOException *arg1 = (Mezzanine::IOException *) obj;
delete arg1;
}
static int _proxy__wrap_new_IOException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IOException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IOException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IOException_methods[]= {
    { "GetExceptionCode", _wrap_IOException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_IOException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IOException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IOException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IOException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IOException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IOException_Sf_SwigStatic = {
    "IOException",
    swig_IOException_Sf_SwigStatic_methods,
    swig_IOException_Sf_SwigStatic_attributes,
    swig_IOException_Sf_SwigStatic_constants,
    swig_IOException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IOException_bases[] = {0,0};
static const char *swig_IOException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_IOException = { "IOException", "IOException", &SWIGTYPE_p_Mezzanine__IOException,_proxy__wrap_new_IOException, swig_delete_IOException, swig_IOException_methods, swig_IOException_attributes, &swig_IOException_Sf_SwigStatic, swig_IOException_meta, swig_IOException_bases, swig_IOException_base_names };

static int _wrap_new_FileException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileException::FileException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileException::FileException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileException::FileException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileException::FileException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileException::FileException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileException::FileException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileException::FileException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileException *)new Mezzanine::FileException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileException::FileException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileException::FileException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileException::FileException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileException::FileException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileException::FileException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileException *)new Mezzanine::FileException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileException::FileException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileException::FileException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileException *arg1 = (Mezzanine::FileException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileException::GetExceptionCode",1,"Mezzanine::FileException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileException,0))){
    SWIG_fail_ptr("FileException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileException(void *obj) {
Mezzanine::FileException *arg1 = (Mezzanine::FileException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileException_methods[]= {
    { "GetExceptionCode", _wrap_FileException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileException_Sf_SwigStatic = {
    "FileException",
    swig_FileException_Sf_SwigStatic_methods,
    swig_FileException_Sf_SwigStatic_attributes,
    swig_FileException_Sf_SwigStatic_constants,
    swig_FileException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileException_bases[] = {0,0};
static const char *swig_FileException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_FileException = { "FileException", "FileException", &SWIGTYPE_p_Mezzanine__FileException,_proxy__wrap_new_FileException, swig_delete_FileException, swig_FileException_methods, swig_FileException_attributes, &swig_FileException_Sf_SwigStatic, swig_FileException_meta, swig_FileException_bases, swig_FileException_base_names };

static int _wrap_new_FileReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileReadException::FileReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileReadException *)new Mezzanine::FileReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileReadException::FileReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileReadException::FileReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileReadException *)new Mezzanine::FileReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileReadException::FileReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileReadException::FileReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileReadException *arg1 = (Mezzanine::FileReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileReadException::GetExceptionCode",1,"Mezzanine::FileReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileReadException,0))){
    SWIG_fail_ptr("FileReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileReadException(void *obj) {
Mezzanine::FileReadException *arg1 = (Mezzanine::FileReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileReadException_methods[]= {
    { "GetExceptionCode", _wrap_FileReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileReadException_Sf_SwigStatic = {
    "FileReadException",
    swig_FileReadException_Sf_SwigStatic_methods,
    swig_FileReadException_Sf_SwigStatic_attributes,
    swig_FileReadException_Sf_SwigStatic_constants,
    swig_FileReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileReadException_bases[] = {0,0};
static const char *swig_FileReadException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FileReadException = { "FileReadException", "FileReadException", &SWIGTYPE_p_Mezzanine__FileReadException,_proxy__wrap_new_FileReadException, swig_delete_FileReadException, swig_FileReadException_methods, swig_FileReadException_attributes, &swig_FileReadException_Sf_SwigStatic, swig_FileReadException_meta, swig_FileReadException_bases, swig_FileReadException_base_names };

static int _wrap_new_FileWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::FileWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileWriteException *)new Mezzanine::FileWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::FileWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileWriteException::FileWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileWriteException *)new Mezzanine::FileWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileWriteException::FileWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileWriteException::FileWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileWriteException *arg1 = (Mezzanine::FileWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileWriteException::GetExceptionCode",1,"Mezzanine::FileWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileWriteException,0))){
    SWIG_fail_ptr("FileWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileWriteException(void *obj) {
Mezzanine::FileWriteException *arg1 = (Mezzanine::FileWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileWriteException_methods[]= {
    { "GetExceptionCode", _wrap_FileWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileWriteException_Sf_SwigStatic = {
    "FileWriteException",
    swig_FileWriteException_Sf_SwigStatic_methods,
    swig_FileWriteException_Sf_SwigStatic_attributes,
    swig_FileWriteException_Sf_SwigStatic_constants,
    swig_FileWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileWriteException_bases[] = {0,0};
static const char *swig_FileWriteException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FileWriteException = { "FileWriteException", "FileWriteException", &SWIGTYPE_p_Mezzanine__FileWriteException,_proxy__wrap_new_FileWriteException, swig_delete_FileWriteException, swig_FileWriteException_methods, swig_FileWriteException_attributes, &swig_FileWriteException_Sf_SwigStatic, swig_FileWriteException_meta, swig_FileWriteException_bases, swig_FileWriteException_base_names };

static int _wrap_new_FileNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FileNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::FileNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FileNotFoundException *)new Mezzanine::FileNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FileNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::FileNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FileNotFoundException::FileNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FileNotFoundException *)new Mezzanine::FileNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FileNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FileNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FileNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FileNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FileNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FileNotFoundException::FileNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FileNotFoundException::FileNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FileNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FileNotFoundException *arg1 = (Mezzanine::FileNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FileNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FileNotFoundException::GetExceptionCode",1,"Mezzanine::FileNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FileNotFoundException,0))){
    SWIG_fail_ptr("FileNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FileNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FileNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FileNotFoundException(void *obj) {
Mezzanine::FileNotFoundException *arg1 = (Mezzanine::FileNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FileNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FileNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FileNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FileNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_FileNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FileNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FileNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FileNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FileNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FileNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FileNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FileNotFoundException_Sf_SwigStatic = {
    "FileNotFoundException",
    swig_FileNotFoundException_Sf_SwigStatic_methods,
    swig_FileNotFoundException_Sf_SwigStatic_attributes,
    swig_FileNotFoundException_Sf_SwigStatic_constants,
    swig_FileNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FileNotFoundException_bases[] = {0,0};
static const char *swig_FileNotFoundException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FileNotFoundException = { "FileNotFoundException", "FileNotFoundException", &SWIGTYPE_p_Mezzanine__FileNotFoundException,_proxy__wrap_new_FileNotFoundException, swig_delete_FileNotFoundException, swig_FileNotFoundException_methods, swig_FileNotFoundException_attributes, &swig_FileNotFoundException_Sf_SwigStatic, swig_FileNotFoundException_meta, swig_FileNotFoundException_bases, swig_FileNotFoundException_base_names };

static int _wrap_new_FilePermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::FilePermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::FilePermissionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::FilePermissionException *)new Mezzanine::FilePermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FilePermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilePermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::FilePermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::FilePermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::FilePermissionException::FilePermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::FilePermissionException *)new Mezzanine::FilePermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FilePermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_FilePermissionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_FilePermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_FilePermissionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_FilePermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::FilePermissionException::FilePermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::FilePermissionException::FilePermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_FilePermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::FilePermissionException *arg1 = (Mezzanine::FilePermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::FilePermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::FilePermissionException::GetExceptionCode",1,"Mezzanine::FilePermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__FilePermissionException,0))){
    SWIG_fail_ptr("FilePermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__FilePermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::FilePermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_FilePermissionException(void *obj) {
Mezzanine::FilePermissionException *arg1 = (Mezzanine::FilePermissionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_FilePermissionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_FilePermissionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_FilePermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_FilePermissionException_methods[]= {
    { "GetExceptionCode", _wrap_FilePermissionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_FilePermissionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_FilePermissionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_FilePermissionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::FilePermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_FilePermissionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_FilePermissionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_FilePermissionException_Sf_SwigStatic = {
    "FilePermissionException",
    swig_FilePermissionException_Sf_SwigStatic_methods,
    swig_FilePermissionException_Sf_SwigStatic_attributes,
    swig_FilePermissionException_Sf_SwigStatic_constants,
    swig_FilePermissionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_FilePermissionException_bases[] = {0,0};
static const char *swig_FilePermissionException_base_names[] = {"Mezzanine::FileException *",0};
static swig_lua_class _wrap_class_FilePermissionException = { "FilePermissionException", "FilePermissionException", &SWIGTYPE_p_Mezzanine__FilePermissionException,_proxy__wrap_new_FilePermissionException, swig_delete_FilePermissionException, swig_FilePermissionException_methods, swig_FilePermissionException_attributes, &swig_FilePermissionException_Sf_SwigStatic, swig_FilePermissionException_meta, swig_FilePermissionException_bases, swig_FilePermissionException_base_names };

static int _wrap_new_DirectoryException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::DirectoryException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryException *)new Mezzanine::DirectoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::DirectoryException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryException::DirectoryException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryException *)new Mezzanine::DirectoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryException::DirectoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryException::DirectoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryException *arg1 = (Mezzanine::DirectoryException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryException::GetExceptionCode",1,"Mezzanine::DirectoryException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryException,0))){
    SWIG_fail_ptr("DirectoryException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryException(void *obj) {
Mezzanine::DirectoryException *arg1 = (Mezzanine::DirectoryException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryException_Sf_SwigStatic = {
    "DirectoryException",
    swig_DirectoryException_Sf_SwigStatic_methods,
    swig_DirectoryException_Sf_SwigStatic_attributes,
    swig_DirectoryException_Sf_SwigStatic_constants,
    swig_DirectoryException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryException_bases[] = {0,0};
static const char *swig_DirectoryException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_DirectoryException = { "DirectoryException", "DirectoryException", &SWIGTYPE_p_Mezzanine__DirectoryException,_proxy__wrap_new_DirectoryException, swig_delete_DirectoryException, swig_DirectoryException_methods, swig_DirectoryException_attributes, &swig_DirectoryException_Sf_SwigStatic, swig_DirectoryException_meta, swig_DirectoryException_bases, swig_DirectoryException_base_names };

static int _wrap_new_DirectoryReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::DirectoryReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryReadException *)new Mezzanine::DirectoryReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::DirectoryReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryReadException::DirectoryReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryReadException *)new Mezzanine::DirectoryReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryReadException::DirectoryReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryReadException::DirectoryReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryReadException *arg1 = (Mezzanine::DirectoryReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryReadException::GetExceptionCode",1,"Mezzanine::DirectoryReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryReadException,0))){
    SWIG_fail_ptr("DirectoryReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryReadException(void *obj) {
Mezzanine::DirectoryReadException *arg1 = (Mezzanine::DirectoryReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryReadException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryReadException_Sf_SwigStatic = {
    "DirectoryReadException",
    swig_DirectoryReadException_Sf_SwigStatic_methods,
    swig_DirectoryReadException_Sf_SwigStatic_attributes,
    swig_DirectoryReadException_Sf_SwigStatic_constants,
    swig_DirectoryReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryReadException_bases[] = {0,0};
static const char *swig_DirectoryReadException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryReadException = { "DirectoryReadException", "DirectoryReadException", &SWIGTYPE_p_Mezzanine__DirectoryReadException,_proxy__wrap_new_DirectoryReadException, swig_delete_DirectoryReadException, swig_DirectoryReadException_methods, swig_DirectoryReadException_attributes, &swig_DirectoryReadException_Sf_SwigStatic, swig_DirectoryReadException_meta, swig_DirectoryReadException_bases, swig_DirectoryReadException_base_names };

static int _wrap_new_DirectoryWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::DirectoryWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryWriteException *)new Mezzanine::DirectoryWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::DirectoryWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryWriteException *)new Mezzanine::DirectoryWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryWriteException::DirectoryWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryWriteException::DirectoryWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryWriteException *arg1 = (Mezzanine::DirectoryWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryWriteException::GetExceptionCode",1,"Mezzanine::DirectoryWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryWriteException,0))){
    SWIG_fail_ptr("DirectoryWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryWriteException(void *obj) {
Mezzanine::DirectoryWriteException *arg1 = (Mezzanine::DirectoryWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryWriteException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryWriteException_Sf_SwigStatic = {
    "DirectoryWriteException",
    swig_DirectoryWriteException_Sf_SwigStatic_methods,
    swig_DirectoryWriteException_Sf_SwigStatic_attributes,
    swig_DirectoryWriteException_Sf_SwigStatic_constants,
    swig_DirectoryWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryWriteException_bases[] = {0,0};
static const char *swig_DirectoryWriteException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryWriteException = { "DirectoryWriteException", "DirectoryWriteException", &SWIGTYPE_p_Mezzanine__DirectoryWriteException,_proxy__wrap_new_DirectoryWriteException, swig_delete_DirectoryWriteException, swig_DirectoryWriteException_methods, swig_DirectoryWriteException_attributes, &swig_DirectoryWriteException_Sf_SwigStatic, swig_DirectoryWriteException_meta, swig_DirectoryWriteException_bases, swig_DirectoryWriteException_base_names };

static int _wrap_new_DirectoryNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryNotFoundException *)new Mezzanine::DirectoryNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryNotFoundException *)new Mezzanine::DirectoryNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryNotFoundException::DirectoryNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryNotFoundException *arg1 = (Mezzanine::DirectoryNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryNotFoundException::GetExceptionCode",1,"Mezzanine::DirectoryNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,0))){
    SWIG_fail_ptr("DirectoryNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryNotFoundException(void *obj) {
Mezzanine::DirectoryNotFoundException *arg1 = (Mezzanine::DirectoryNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryNotFoundException_Sf_SwigStatic = {
    "DirectoryNotFoundException",
    swig_DirectoryNotFoundException_Sf_SwigStatic_methods,
    swig_DirectoryNotFoundException_Sf_SwigStatic_attributes,
    swig_DirectoryNotFoundException_Sf_SwigStatic_constants,
    swig_DirectoryNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryNotFoundException_bases[] = {0,0};
static const char *swig_DirectoryNotFoundException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryNotFoundException = { "DirectoryNotFoundException", "DirectoryNotFoundException", &SWIGTYPE_p_Mezzanine__DirectoryNotFoundException,_proxy__wrap_new_DirectoryNotFoundException, swig_delete_DirectoryNotFoundException, swig_DirectoryNotFoundException_methods, swig_DirectoryNotFoundException_attributes, &swig_DirectoryNotFoundException_Sf_SwigStatic, swig_DirectoryNotFoundException_meta, swig_DirectoryNotFoundException_bases, swig_DirectoryNotFoundException_base_names };

static int _wrap_new_DirectoryPermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::DirectoryPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::DirectoryPermissionException *)new Mezzanine::DirectoryPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryPermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::DirectoryPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::DirectoryPermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::DirectoryPermissionException *)new Mezzanine::DirectoryPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_DirectoryPermissionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_DirectoryPermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_DirectoryPermissionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_DirectoryPermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DirectoryPermissionException::DirectoryPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::DirectoryPermissionException::DirectoryPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DirectoryPermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DirectoryPermissionException *arg1 = (Mezzanine::DirectoryPermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::DirectoryPermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DirectoryPermissionException::GetExceptionCode",1,"Mezzanine::DirectoryPermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DirectoryPermissionException,0))){
    SWIG_fail_ptr("DirectoryPermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__DirectoryPermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::DirectoryPermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DirectoryPermissionException(void *obj) {
Mezzanine::DirectoryPermissionException *arg1 = (Mezzanine::DirectoryPermissionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_DirectoryPermissionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DirectoryPermissionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DirectoryPermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DirectoryPermissionException_methods[]= {
    { "GetExceptionCode", _wrap_DirectoryPermissionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_DirectoryPermissionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DirectoryPermissionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DirectoryPermissionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::DirectoryPermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DirectoryPermissionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DirectoryPermissionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DirectoryPermissionException_Sf_SwigStatic = {
    "DirectoryPermissionException",
    swig_DirectoryPermissionException_Sf_SwigStatic_methods,
    swig_DirectoryPermissionException_Sf_SwigStatic_attributes,
    swig_DirectoryPermissionException_Sf_SwigStatic_constants,
    swig_DirectoryPermissionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DirectoryPermissionException_bases[] = {0,0};
static const char *swig_DirectoryPermissionException_base_names[] = {"Mezzanine::DirectoryException *",0};
static swig_lua_class _wrap_class_DirectoryPermissionException = { "DirectoryPermissionException", "DirectoryPermissionException", &SWIGTYPE_p_Mezzanine__DirectoryPermissionException,_proxy__wrap_new_DirectoryPermissionException, swig_delete_DirectoryPermissionException, swig_DirectoryPermissionException_methods, swig_DirectoryPermissionException_attributes, &swig_DirectoryPermissionException_Sf_SwigStatic, swig_DirectoryPermissionException_meta, swig_DirectoryPermissionException_bases, swig_DirectoryPermissionException_base_names };

static int _wrap_new_NetworkException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkException::NetworkException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkException *)new Mezzanine::NetworkException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkException::NetworkException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkException::NetworkException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkException *)new Mezzanine::NetworkException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkException::NetworkException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkException::NetworkException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkException *arg1 = (Mezzanine::NetworkException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkException::GetExceptionCode",1,"Mezzanine::NetworkException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkException,0))){
    SWIG_fail_ptr("NetworkException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkException(void *obj) {
Mezzanine::NetworkException *arg1 = (Mezzanine::NetworkException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkException_Sf_SwigStatic = {
    "NetworkException",
    swig_NetworkException_Sf_SwigStatic_methods,
    swig_NetworkException_Sf_SwigStatic_attributes,
    swig_NetworkException_Sf_SwigStatic_constants,
    swig_NetworkException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkException_bases[] = {0,0};
static const char *swig_NetworkException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_NetworkException = { "NetworkException", "NetworkException", &SWIGTYPE_p_Mezzanine__NetworkException,_proxy__wrap_new_NetworkException, swig_delete_NetworkException, swig_NetworkException_methods, swig_NetworkException_attributes, &swig_NetworkException_Sf_SwigStatic, swig_NetworkException_meta, swig_NetworkException_bases, swig_NetworkException_base_names };

static int _wrap_new_NetworkReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::NetworkReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkReadException *)new Mezzanine::NetworkReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::NetworkReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkReadException::NetworkReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkReadException *)new Mezzanine::NetworkReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkReadException::NetworkReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkReadException::NetworkReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkReadException *arg1 = (Mezzanine::NetworkReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkReadException::GetExceptionCode",1,"Mezzanine::NetworkReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkReadException,0))){
    SWIG_fail_ptr("NetworkReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkReadException(void *obj) {
Mezzanine::NetworkReadException *arg1 = (Mezzanine::NetworkReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkReadException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkReadException_Sf_SwigStatic = {
    "NetworkReadException",
    swig_NetworkReadException_Sf_SwigStatic_methods,
    swig_NetworkReadException_Sf_SwigStatic_attributes,
    swig_NetworkReadException_Sf_SwigStatic_constants,
    swig_NetworkReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkReadException_bases[] = {0,0};
static const char *swig_NetworkReadException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkReadException = { "NetworkReadException", "NetworkReadException", &SWIGTYPE_p_Mezzanine__NetworkReadException,_proxy__wrap_new_NetworkReadException, swig_delete_NetworkReadException, swig_NetworkReadException_methods, swig_NetworkReadException_attributes, &swig_NetworkReadException_Sf_SwigStatic, swig_NetworkReadException_meta, swig_NetworkReadException_bases, swig_NetworkReadException_base_names };

static int _wrap_new_NetworkWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::NetworkWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkWriteException *)new Mezzanine::NetworkWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::NetworkWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkWriteException::NetworkWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkWriteException *)new Mezzanine::NetworkWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkWriteException::NetworkWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkWriteException::NetworkWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkWriteException *arg1 = (Mezzanine::NetworkWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkWriteException::GetExceptionCode",1,"Mezzanine::NetworkWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkWriteException,0))){
    SWIG_fail_ptr("NetworkWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkWriteException(void *obj) {
Mezzanine::NetworkWriteException *arg1 = (Mezzanine::NetworkWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkWriteException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkWriteException_Sf_SwigStatic = {
    "NetworkWriteException",
    swig_NetworkWriteException_Sf_SwigStatic_methods,
    swig_NetworkWriteException_Sf_SwigStatic_attributes,
    swig_NetworkWriteException_Sf_SwigStatic_constants,
    swig_NetworkWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkWriteException_bases[] = {0,0};
static const char *swig_NetworkWriteException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkWriteException = { "NetworkWriteException", "NetworkWriteException", &SWIGTYPE_p_Mezzanine__NetworkWriteException,_proxy__wrap_new_NetworkWriteException, swig_delete_NetworkWriteException, swig_NetworkWriteException_methods, swig_NetworkWriteException_attributes, &swig_NetworkWriteException_Sf_SwigStatic, swig_NetworkWriteException_meta, swig_NetworkWriteException_bases, swig_NetworkWriteException_base_names };

static int _wrap_new_NetworkNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkNotFoundException *)new Mezzanine::NetworkNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::NetworkNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkNotFoundException *)new Mezzanine::NetworkNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkNotFoundException::NetworkNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkNotFoundException::NetworkNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkNotFoundException *arg1 = (Mezzanine::NetworkNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkNotFoundException::GetExceptionCode",1,"Mezzanine::NetworkNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkNotFoundException,0))){
    SWIG_fail_ptr("NetworkNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkNotFoundException(void *obj) {
Mezzanine::NetworkNotFoundException *arg1 = (Mezzanine::NetworkNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkNotFoundException_Sf_SwigStatic = {
    "NetworkNotFoundException",
    swig_NetworkNotFoundException_Sf_SwigStatic_methods,
    swig_NetworkNotFoundException_Sf_SwigStatic_attributes,
    swig_NetworkNotFoundException_Sf_SwigStatic_constants,
    swig_NetworkNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkNotFoundException_bases[] = {0,0};
static const char *swig_NetworkNotFoundException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkNotFoundException = { "NetworkNotFoundException", "NetworkNotFoundException", &SWIGTYPE_p_Mezzanine__NetworkNotFoundException,_proxy__wrap_new_NetworkNotFoundException, swig_delete_NetworkNotFoundException, swig_NetworkNotFoundException_methods, swig_NetworkNotFoundException_attributes, &swig_NetworkNotFoundException_Sf_SwigStatic, swig_NetworkNotFoundException_meta, swig_NetworkNotFoundException_bases, swig_NetworkNotFoundException_base_names };

static int _wrap_new_NetworkURLException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkURLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::NetworkURLException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkURLException *)new Mezzanine::NetworkURLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkURLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkURLException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkURLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::NetworkURLException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkURLException::NetworkURLException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkURLException *)new Mezzanine::NetworkURLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkURLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkURLException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkURLException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkURLException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkURLException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkURLException::NetworkURLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkURLException::NetworkURLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkURLException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkURLException *arg1 = (Mezzanine::NetworkURLException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkURLException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkURLException::GetExceptionCode",1,"Mezzanine::NetworkURLException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkURLException,0))){
    SWIG_fail_ptr("NetworkURLException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkURLException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkURLException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkURLException(void *obj) {
Mezzanine::NetworkURLException *arg1 = (Mezzanine::NetworkURLException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkURLException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkURLException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkURLException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkURLException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkURLException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkURLException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkURLException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkURLException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkURLException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkURLException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkURLException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkURLException_Sf_SwigStatic = {
    "NetworkURLException",
    swig_NetworkURLException_Sf_SwigStatic_methods,
    swig_NetworkURLException_Sf_SwigStatic_attributes,
    swig_NetworkURLException_Sf_SwigStatic_constants,
    swig_NetworkURLException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkURLException_bases[] = {0,0};
static const char *swig_NetworkURLException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkURLException = { "NetworkURLException", "NetworkURLException", &SWIGTYPE_p_Mezzanine__NetworkURLException,_proxy__wrap_new_NetworkURLException, swig_delete_NetworkURLException, swig_NetworkURLException_methods, swig_NetworkURLException_attributes, &swig_NetworkURLException_Sf_SwigStatic, swig_NetworkURLException_meta, swig_NetworkURLException_bases, swig_NetworkURLException_base_names };

static int _wrap_new_NetworkPermissionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NetworkPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::NetworkPermissionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NetworkPermissionException *)new Mezzanine::NetworkPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkPermissionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NetworkPermissionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::NetworkPermissionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NetworkPermissionException *)new Mezzanine::NetworkPermissionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NetworkPermissionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NetworkPermissionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NetworkPermissionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NetworkPermissionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NetworkPermissionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NetworkPermissionException::NetworkPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NetworkPermissionException::NetworkPermissionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NetworkPermissionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NetworkPermissionException *arg1 = (Mezzanine::NetworkPermissionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NetworkPermissionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NetworkPermissionException::GetExceptionCode",1,"Mezzanine::NetworkPermissionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NetworkPermissionException,0))){
    SWIG_fail_ptr("NetworkPermissionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NetworkPermissionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NetworkPermissionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NetworkPermissionException(void *obj) {
Mezzanine::NetworkPermissionException *arg1 = (Mezzanine::NetworkPermissionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NetworkPermissionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NetworkPermissionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NetworkPermissionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NetworkPermissionException_methods[]= {
    { "GetExceptionCode", _wrap_NetworkPermissionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NetworkPermissionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NetworkPermissionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NetworkPermissionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NetworkPermissionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NetworkPermissionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NetworkPermissionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NetworkPermissionException_Sf_SwigStatic = {
    "NetworkPermissionException",
    swig_NetworkPermissionException_Sf_SwigStatic_methods,
    swig_NetworkPermissionException_Sf_SwigStatic_attributes,
    swig_NetworkPermissionException_Sf_SwigStatic_constants,
    swig_NetworkPermissionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NetworkPermissionException_bases[] = {0,0};
static const char *swig_NetworkPermissionException_base_names[] = {"Mezzanine::NetworkException *",0};
static swig_lua_class _wrap_class_NetworkPermissionException = { "NetworkPermissionException", "NetworkPermissionException", &SWIGTYPE_p_Mezzanine__NetworkPermissionException,_proxy__wrap_new_NetworkPermissionException, swig_delete_NetworkPermissionException, swig_NetworkPermissionException_methods, swig_NetworkPermissionException_attributes, &swig_NetworkPermissionException_Sf_SwigStatic, swig_NetworkPermissionException_meta, swig_NetworkPermissionException_bases, swig_NetworkPermissionException_base_names };

static int _wrap_new_IOWriteException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::IOWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::IOWriteException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::IOWriteException *)new Mezzanine::IOWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOWriteException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOWriteException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::IOWriteException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOWriteException::IOWriteException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOWriteException *)new Mezzanine::IOWriteException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOWriteException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOWriteException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOWriteException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IOWriteException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOWriteException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOWriteException::IOWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOWriteException::IOWriteException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOWriteException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOWriteException *arg1 = (Mezzanine::IOWriteException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOWriteException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOWriteException::GetExceptionCode",1,"Mezzanine::IOWriteException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOWriteException,0))){
    SWIG_fail_ptr("IOWriteException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOWriteException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOWriteException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOWriteException(void *obj) {
Mezzanine::IOWriteException *arg1 = (Mezzanine::IOWriteException *) obj;
delete arg1;
}
static int _proxy__wrap_new_IOWriteException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IOWriteException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IOWriteException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IOWriteException_methods[]= {
    { "GetExceptionCode", _wrap_IOWriteException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_IOWriteException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IOWriteException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IOWriteException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOWriteException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IOWriteException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IOWriteException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IOWriteException_Sf_SwigStatic = {
    "IOWriteException",
    swig_IOWriteException_Sf_SwigStatic_methods,
    swig_IOWriteException_Sf_SwigStatic_attributes,
    swig_IOWriteException_Sf_SwigStatic_constants,
    swig_IOWriteException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IOWriteException_bases[] = {0,0};
static const char *swig_IOWriteException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_IOWriteException = { "IOWriteException", "IOWriteException", &SWIGTYPE_p_Mezzanine__IOWriteException,_proxy__wrap_new_IOWriteException, swig_delete_IOWriteException, swig_IOWriteException_methods, swig_IOWriteException_attributes, &swig_IOWriteException_Sf_SwigStatic, swig_IOWriteException_meta, swig_IOWriteException_bases, swig_IOWriteException_base_names };

static int _wrap_new_IOReadException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::IOReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOReadException::IOReadException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::IOReadException *)new Mezzanine::IOReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOReadException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::IOReadException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::IOReadException::IOReadException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::IOReadException::IOReadException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::IOReadException *)new Mezzanine::IOReadException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__IOReadException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_IOReadException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_IOReadException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_IOReadException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_IOReadException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::IOReadException::IOReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::IOReadException::IOReadException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_IOReadException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::IOReadException *arg1 = (Mezzanine::IOReadException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::IOReadException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::IOReadException::GetExceptionCode",1,"Mezzanine::IOReadException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__IOReadException,0))){
    SWIG_fail_ptr("IOReadException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__IOReadException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::IOReadException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_IOReadException(void *obj) {
Mezzanine::IOReadException *arg1 = (Mezzanine::IOReadException *) obj;
delete arg1;
}
static int _proxy__wrap_new_IOReadException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_IOReadException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_IOReadException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_IOReadException_methods[]= {
    { "GetExceptionCode", _wrap_IOReadException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_IOReadException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_IOReadException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_IOReadException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::IOReadException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_IOReadException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_IOReadException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_IOReadException_Sf_SwigStatic = {
    "IOReadException",
    swig_IOReadException_Sf_SwigStatic_methods,
    swig_IOReadException_Sf_SwigStatic_attributes,
    swig_IOReadException_Sf_SwigStatic_constants,
    swig_IOReadException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_IOReadException_bases[] = {0,0};
static const char *swig_IOReadException_base_names[] = {"Mezzanine::IOException *",0};
static swig_lua_class _wrap_class_IOReadException = { "IOReadException", "IOReadException", &SWIGTYPE_p_Mezzanine__IOReadException,_proxy__wrap_new_IOReadException, swig_delete_IOReadException, swig_IOReadException_methods, swig_IOReadException_attributes, &swig_IOReadException_Sf_SwigStatic, swig_IOReadException_meta, swig_IOReadException_bases, swig_IOReadException_base_names };

static int _wrap_new_InstanceIdentityException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::InstanceIdentityException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityException *)new Mezzanine::InstanceIdentityException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::InstanceIdentityException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityException *)new Mezzanine::InstanceIdentityException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityException::InstanceIdentityException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityException::InstanceIdentityException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityException *arg1 = (Mezzanine::InstanceIdentityException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityException::GetExceptionCode",1,"Mezzanine::InstanceIdentityException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityException,0))){
    SWIG_fail_ptr("InstanceIdentityException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityException(void *obj) {
Mezzanine::InstanceIdentityException *arg1 = (Mezzanine::InstanceIdentityException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityException_Sf_SwigStatic = {
    "InstanceIdentityException",
    swig_InstanceIdentityException_Sf_SwigStatic_methods,
    swig_InstanceIdentityException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityException_Sf_SwigStatic_constants,
    swig_InstanceIdentityException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityException_bases[] = {0,0};
static const char *swig_InstanceIdentityException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InstanceIdentityException = { "InstanceIdentityException", "InstanceIdentityException", &SWIGTYPE_p_Mezzanine__InstanceIdentityException,_proxy__wrap_new_InstanceIdentityException, swig_delete_InstanceIdentityException, swig_InstanceIdentityException_methods, swig_InstanceIdentityException_attributes, &swig_InstanceIdentityException_Sf_SwigStatic, swig_InstanceIdentityException_meta, swig_InstanceIdentityException_bases, swig_InstanceIdentityException_base_names };

static int _wrap_new_InstanceIdentityInvalidException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityInvalidException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityInvalidException *)new Mezzanine::InstanceIdentityInvalidException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityInvalidException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityInvalidException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityInvalidException *)new Mezzanine::InstanceIdentityInvalidException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityInvalidException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityInvalidException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityInvalidException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityInvalidException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityInvalidException::InstanceIdentityInvalidException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityInvalidException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityInvalidException *arg1 = (Mezzanine::InstanceIdentityInvalidException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityInvalidException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityInvalidException::GetExceptionCode",1,"Mezzanine::InstanceIdentityInvalidException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,0))){
    SWIG_fail_ptr("InstanceIdentityInvalidException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityInvalidException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityInvalidException(void *obj) {
Mezzanine::InstanceIdentityInvalidException *arg1 = (Mezzanine::InstanceIdentityInvalidException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityInvalidException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityInvalidException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityInvalidException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityInvalidException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityInvalidException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityInvalidException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityInvalidException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityInvalidException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityInvalidException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityInvalidException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityInvalidException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityInvalidException_Sf_SwigStatic = {
    "InstanceIdentityInvalidException",
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_methods,
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_constants,
    swig_InstanceIdentityInvalidException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityInvalidException_bases[] = {0,0};
static const char *swig_InstanceIdentityInvalidException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_InstanceIdentityInvalidException = { "InstanceIdentityInvalidException", "InstanceIdentityInvalidException", &SWIGTYPE_p_Mezzanine__InstanceIdentityInvalidException,_proxy__wrap_new_InstanceIdentityInvalidException, swig_delete_InstanceIdentityInvalidException, swig_InstanceIdentityInvalidException_methods, swig_InstanceIdentityInvalidException_attributes, &swig_InstanceIdentityInvalidException_Sf_SwigStatic, swig_InstanceIdentityInvalidException_meta, swig_InstanceIdentityInvalidException_bases, swig_InstanceIdentityInvalidException_base_names };

static int _wrap_new_InstanceIdentityNotFoundException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityNotFoundException *)new Mezzanine::InstanceIdentityNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityNotFoundException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityNotFoundException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityNotFoundException *)new Mezzanine::InstanceIdentityNotFoundException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityNotFoundException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityNotFoundException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityNotFoundException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityNotFoundException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityNotFoundException::InstanceIdentityNotFoundException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityNotFoundException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityNotFoundException *arg1 = (Mezzanine::InstanceIdentityNotFoundException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityNotFoundException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityNotFoundException::GetExceptionCode",1,"Mezzanine::InstanceIdentityNotFoundException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,0))){
    SWIG_fail_ptr("InstanceIdentityNotFoundException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityNotFoundException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityNotFoundException(void *obj) {
Mezzanine::InstanceIdentityNotFoundException *arg1 = (Mezzanine::InstanceIdentityNotFoundException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityNotFoundException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityNotFoundException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityNotFoundException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityNotFoundException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityNotFoundException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityNotFoundException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityNotFoundException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityNotFoundException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityNotFoundException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityNotFoundException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityNotFoundException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityNotFoundException_Sf_SwigStatic = {
    "InstanceIdentityNotFoundException",
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_methods,
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_constants,
    swig_InstanceIdentityNotFoundException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityNotFoundException_bases[] = {0,0};
static const char *swig_InstanceIdentityNotFoundException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_InstanceIdentityNotFoundException = { "InstanceIdentityNotFoundException", "InstanceIdentityNotFoundException", &SWIGTYPE_p_Mezzanine__InstanceIdentityNotFoundException,_proxy__wrap_new_InstanceIdentityNotFoundException, swig_delete_InstanceIdentityNotFoundException, swig_InstanceIdentityNotFoundException_methods, swig_InstanceIdentityNotFoundException_attributes, &swig_InstanceIdentityNotFoundException_Sf_SwigStatic, swig_InstanceIdentityNotFoundException_meta, swig_InstanceIdentityNotFoundException_bases, swig_InstanceIdentityNotFoundException_base_names };

static int _wrap_new_InstanceIdentityDuplicateException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InstanceIdentityDuplicateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InstanceIdentityDuplicateException *)new Mezzanine::InstanceIdentityDuplicateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityDuplicateException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InstanceIdentityDuplicateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InstanceIdentityDuplicateException *)new Mezzanine::InstanceIdentityDuplicateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InstanceIdentityDuplicateException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InstanceIdentityDuplicateException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InstanceIdentityDuplicateException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InstanceIdentityDuplicateException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InstanceIdentityDuplicateException::InstanceIdentityDuplicateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InstanceIdentityDuplicateException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InstanceIdentityDuplicateException *arg1 = (Mezzanine::InstanceIdentityDuplicateException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InstanceIdentityDuplicateException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InstanceIdentityDuplicateException::GetExceptionCode",1,"Mezzanine::InstanceIdentityDuplicateException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,0))){
    SWIG_fail_ptr("InstanceIdentityDuplicateException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InstanceIdentityDuplicateException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InstanceIdentityDuplicateException(void *obj) {
Mezzanine::InstanceIdentityDuplicateException *arg1 = (Mezzanine::InstanceIdentityDuplicateException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InstanceIdentityDuplicateException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InstanceIdentityDuplicateException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InstanceIdentityDuplicateException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InstanceIdentityDuplicateException_methods[]= {
    { "GetExceptionCode", _wrap_InstanceIdentityDuplicateException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InstanceIdentityDuplicateException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InstanceIdentityDuplicateException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InstanceIdentityDuplicateException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InstanceIdentityDuplicateException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InstanceIdentityDuplicateException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InstanceIdentityDuplicateException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InstanceIdentityDuplicateException_Sf_SwigStatic = {
    "InstanceIdentityDuplicateException",
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_methods,
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_attributes,
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_constants,
    swig_InstanceIdentityDuplicateException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InstanceIdentityDuplicateException_bases[] = {0,0};
static const char *swig_InstanceIdentityDuplicateException_base_names[] = {"Mezzanine::InstanceIdentityException *",0};
static swig_lua_class _wrap_class_InstanceIdentityDuplicateException = { "InstanceIdentityDuplicateException", "InstanceIdentityDuplicateException", &SWIGTYPE_p_Mezzanine__InstanceIdentityDuplicateException,_proxy__wrap_new_InstanceIdentityDuplicateException, swig_delete_InstanceIdentityDuplicateException, swig_InstanceIdentityDuplicateException_methods, swig_InstanceIdentityDuplicateException_attributes, &swig_InstanceIdentityDuplicateException_Sf_SwigStatic, swig_InstanceIdentityDuplicateException_meta, swig_InstanceIdentityDuplicateException_bases, swig_InstanceIdentityDuplicateException_base_names };

static int _wrap_new_MemoryManagementException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::MemoryManagementException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::MemoryManagementException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::MemoryManagementException *)new Mezzanine::MemoryManagementException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryManagementException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryManagementException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::MemoryManagementException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::MemoryManagementException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::MemoryManagementException::MemoryManagementException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::MemoryManagementException *)new Mezzanine::MemoryManagementException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryManagementException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryManagementException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_MemoryManagementException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_MemoryManagementException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MemoryManagementException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MemoryManagementException::MemoryManagementException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::MemoryManagementException::MemoryManagementException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MemoryManagementException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MemoryManagementException *arg1 = (Mezzanine::MemoryManagementException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::MemoryManagementException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MemoryManagementException::GetExceptionCode",1,"Mezzanine::MemoryManagementException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MemoryManagementException,0))){
    SWIG_fail_ptr("MemoryManagementException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__MemoryManagementException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::MemoryManagementException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MemoryManagementException(void *obj) {
Mezzanine::MemoryManagementException *arg1 = (Mezzanine::MemoryManagementException *) obj;
delete arg1;
}
static int _proxy__wrap_new_MemoryManagementException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MemoryManagementException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MemoryManagementException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MemoryManagementException_methods[]= {
    { "GetExceptionCode", _wrap_MemoryManagementException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_MemoryManagementException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MemoryManagementException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MemoryManagementException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::MemoryManagementException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MemoryManagementException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MemoryManagementException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MemoryManagementException_Sf_SwigStatic = {
    "MemoryManagementException",
    swig_MemoryManagementException_Sf_SwigStatic_methods,
    swig_MemoryManagementException_Sf_SwigStatic_attributes,
    swig_MemoryManagementException_Sf_SwigStatic_constants,
    swig_MemoryManagementException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MemoryManagementException_bases[] = {0,0};
static const char *swig_MemoryManagementException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_MemoryManagementException = { "MemoryManagementException", "MemoryManagementException", &SWIGTYPE_p_Mezzanine__MemoryManagementException,_proxy__wrap_new_MemoryManagementException, swig_delete_MemoryManagementException, swig_MemoryManagementException_methods, swig_MemoryManagementException_attributes, &swig_MemoryManagementException_Sf_SwigStatic, swig_MemoryManagementException_meta, swig_MemoryManagementException_bases, swig_MemoryManagementException_base_names };

static int _wrap_new_OutOfMemoryException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::OutOfMemoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::OutOfMemoryException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::OutOfMemoryException *)new Mezzanine::OutOfMemoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__OutOfMemoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutOfMemoryException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::OutOfMemoryException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::OutOfMemoryException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::OutOfMemoryException *)new Mezzanine::OutOfMemoryException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__OutOfMemoryException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_OutOfMemoryException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_OutOfMemoryException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_OutOfMemoryException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_OutOfMemoryException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::OutOfMemoryException::OutOfMemoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::OutOfMemoryException::OutOfMemoryException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_OutOfMemoryException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::OutOfMemoryException *arg1 = (Mezzanine::OutOfMemoryException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::OutOfMemoryException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::OutOfMemoryException::GetExceptionCode",1,"Mezzanine::OutOfMemoryException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__OutOfMemoryException,0))){
    SWIG_fail_ptr("OutOfMemoryException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__OutOfMemoryException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::OutOfMemoryException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_OutOfMemoryException(void *obj) {
Mezzanine::OutOfMemoryException *arg1 = (Mezzanine::OutOfMemoryException *) obj;
delete arg1;
}
static int _proxy__wrap_new_OutOfMemoryException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_OutOfMemoryException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_OutOfMemoryException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_OutOfMemoryException_methods[]= {
    { "GetExceptionCode", _wrap_OutOfMemoryException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_OutOfMemoryException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_OutOfMemoryException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_OutOfMemoryException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::OutOfMemoryException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_OutOfMemoryException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_OutOfMemoryException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_OutOfMemoryException_Sf_SwigStatic = {
    "OutOfMemoryException",
    swig_OutOfMemoryException_Sf_SwigStatic_methods,
    swig_OutOfMemoryException_Sf_SwigStatic_attributes,
    swig_OutOfMemoryException_Sf_SwigStatic_constants,
    swig_OutOfMemoryException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_OutOfMemoryException_bases[] = {0,0};
static const char *swig_OutOfMemoryException_base_names[] = {"Mezzanine::MemoryManagementException *",0};
static swig_lua_class _wrap_class_OutOfMemoryException = { "OutOfMemoryException", "OutOfMemoryException", &SWIGTYPE_p_Mezzanine__OutOfMemoryException,_proxy__wrap_new_OutOfMemoryException, swig_delete_OutOfMemoryException, swig_OutOfMemoryException_methods, swig_OutOfMemoryException_attributes, &swig_OutOfMemoryException_Sf_SwigStatic, swig_OutOfMemoryException_meta, swig_OutOfMemoryException_bases, swig_OutOfMemoryException_base_names };

static int _wrap_new_MemoryOutOfBoundsException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::MemoryOutOfBoundsException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::MemoryOutOfBoundsException *)new Mezzanine::MemoryOutOfBoundsException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryOutOfBoundsException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::MemoryOutOfBoundsException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::MemoryOutOfBoundsException *)new Mezzanine::MemoryOutOfBoundsException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MemoryOutOfBoundsException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_MemoryOutOfBoundsException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_MemoryOutOfBoundsException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_MemoryOutOfBoundsException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::MemoryOutOfBoundsException::MemoryOutOfBoundsException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_MemoryOutOfBoundsException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MemoryOutOfBoundsException *arg1 = (Mezzanine::MemoryOutOfBoundsException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::MemoryOutOfBoundsException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::MemoryOutOfBoundsException::GetExceptionCode",1,"Mezzanine::MemoryOutOfBoundsException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,0))){
    SWIG_fail_ptr("MemoryOutOfBoundsException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::MemoryOutOfBoundsException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MemoryOutOfBoundsException(void *obj) {
Mezzanine::MemoryOutOfBoundsException *arg1 = (Mezzanine::MemoryOutOfBoundsException *) obj;
delete arg1;
}
static int _proxy__wrap_new_MemoryOutOfBoundsException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_MemoryOutOfBoundsException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_MemoryOutOfBoundsException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_MemoryOutOfBoundsException_methods[]= {
    { "GetExceptionCode", _wrap_MemoryOutOfBoundsException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_MemoryOutOfBoundsException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_MemoryOutOfBoundsException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_MemoryOutOfBoundsException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::MemoryOutOfBoundsException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_MemoryOutOfBoundsException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_MemoryOutOfBoundsException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_MemoryOutOfBoundsException_Sf_SwigStatic = {
    "MemoryOutOfBoundsException",
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_methods,
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_attributes,
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_constants,
    swig_MemoryOutOfBoundsException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_MemoryOutOfBoundsException_bases[] = {0,0};
static const char *swig_MemoryOutOfBoundsException_base_names[] = {"Mezzanine::MemoryManagementException *",0};
static swig_lua_class _wrap_class_MemoryOutOfBoundsException = { "MemoryOutOfBoundsException", "MemoryOutOfBoundsException", &SWIGTYPE_p_Mezzanine__MemoryOutOfBoundsException,_proxy__wrap_new_MemoryOutOfBoundsException, swig_delete_MemoryOutOfBoundsException, swig_MemoryOutOfBoundsException_methods, swig_MemoryOutOfBoundsException_attributes, &swig_MemoryOutOfBoundsException_Sf_SwigStatic, swig_MemoryOutOfBoundsException_meta, swig_MemoryOutOfBoundsException_bases, swig_MemoryOutOfBoundsException_base_names };

static int _wrap_new_SyntaxErrorException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::SyntaxErrorException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorException *)new Mezzanine::SyntaxErrorException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::SyntaxErrorException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorException *)new Mezzanine::SyntaxErrorException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorException::SyntaxErrorException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorException::SyntaxErrorException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorException *arg1 = (Mezzanine::SyntaxErrorException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorException::GetExceptionCode",1,"Mezzanine::SyntaxErrorException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorException,0))){
    SWIG_fail_ptr("SyntaxErrorException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorException(void *obj) {
Mezzanine::SyntaxErrorException *arg1 = (Mezzanine::SyntaxErrorException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorException_Sf_SwigStatic = {
    "SyntaxErrorException",
    swig_SyntaxErrorException_Sf_SwigStatic_methods,
    swig_SyntaxErrorException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorException_Sf_SwigStatic_constants,
    swig_SyntaxErrorException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorException_bases[] = {0,0};
static const char *swig_SyntaxErrorException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_SyntaxErrorException = { "SyntaxErrorException", "SyntaxErrorException", &SWIGTYPE_p_Mezzanine__SyntaxErrorException,_proxy__wrap_new_SyntaxErrorException, swig_delete_SyntaxErrorException, swig_SyntaxErrorException_methods, swig_SyntaxErrorException_attributes, &swig_SyntaxErrorException_Sf_SwigStatic, swig_SyntaxErrorException_meta, swig_SyntaxErrorException_bases, swig_SyntaxErrorException_base_names };

static int _wrap_new_SyntaxErrorXMLException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorXMLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorXMLException *)new Mezzanine::SyntaxErrorXMLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXMLException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorXMLException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorXMLException *)new Mezzanine::SyntaxErrorXMLException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXMLException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorXMLException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorXMLException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorXMLException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorXMLException::SyntaxErrorXMLException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorXMLException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorXMLException *arg1 = (Mezzanine::SyntaxErrorXMLException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXMLException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXMLException::GetExceptionCode",1,"Mezzanine::SyntaxErrorXMLException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,0))){
    SWIG_fail_ptr("SyntaxErrorXMLException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorXMLException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorXMLException(void *obj) {
Mezzanine::SyntaxErrorXMLException *arg1 = (Mezzanine::SyntaxErrorXMLException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorXMLException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorXMLException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorXMLException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorXMLException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorXMLException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorXMLException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorXMLException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorXMLException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorXMLException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorXMLException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorXMLException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorXMLException_Sf_SwigStatic = {
    "SyntaxErrorXMLException",
    swig_SyntaxErrorXMLException_Sf_SwigStatic_methods,
    swig_SyntaxErrorXMLException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorXMLException_Sf_SwigStatic_constants,
    swig_SyntaxErrorXMLException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorXMLException_bases[] = {0,0};
static const char *swig_SyntaxErrorXMLException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_SyntaxErrorXMLException = { "SyntaxErrorXMLException", "SyntaxErrorXMLException", &SWIGTYPE_p_Mezzanine__SyntaxErrorXMLException,_proxy__wrap_new_SyntaxErrorXMLException, swig_delete_SyntaxErrorXMLException, swig_SyntaxErrorXMLException_methods, swig_SyntaxErrorXMLException_attributes, &swig_SyntaxErrorXMLException_Sf_SwigStatic, swig_SyntaxErrorXMLException_meta, swig_SyntaxErrorXMLException_bases, swig_SyntaxErrorXMLException_base_names };

static int _wrap_new_SyntaxErrorXPathException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorXPathException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorXPathException *)new Mezzanine::SyntaxErrorXPathException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXPathException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorXPathException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorXPathException *)new Mezzanine::SyntaxErrorXPathException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorXPathException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorXPathException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorXPathException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorXPathException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorXPathException::SyntaxErrorXPathException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorXPathException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorXPathException *arg1 = (Mezzanine::SyntaxErrorXPathException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorXPathException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorXPathException::GetExceptionCode",1,"Mezzanine::SyntaxErrorXPathException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,0))){
    SWIG_fail_ptr("SyntaxErrorXPathException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorXPathException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorXPathException(void *obj) {
Mezzanine::SyntaxErrorXPathException *arg1 = (Mezzanine::SyntaxErrorXPathException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorXPathException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorXPathException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorXPathException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorXPathException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorXPathException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorXPathException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorXPathException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorXPathException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorXPathException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorXPathException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorXPathException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorXPathException_Sf_SwigStatic = {
    "SyntaxErrorXPathException",
    swig_SyntaxErrorXPathException_Sf_SwigStatic_methods,
    swig_SyntaxErrorXPathException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorXPathException_Sf_SwigStatic_constants,
    swig_SyntaxErrorXPathException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorXPathException_bases[] = {0,0};
static const char *swig_SyntaxErrorXPathException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_SyntaxErrorXPathException = { "SyntaxErrorXPathException", "SyntaxErrorXPathException", &SWIGTYPE_p_Mezzanine__SyntaxErrorXPathException,_proxy__wrap_new_SyntaxErrorXPathException, swig_delete_SyntaxErrorXPathException, swig_SyntaxErrorXPathException_methods, swig_SyntaxErrorXPathException_attributes, &swig_SyntaxErrorXPathException_Sf_SwigStatic, swig_SyntaxErrorXPathException_meta, swig_SyntaxErrorXPathException_bases, swig_SyntaxErrorXPathException_base_names };

static int _wrap_new_SyntaxErrorLuaException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::SyntaxErrorLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::SyntaxErrorLuaException *)new Mezzanine::SyntaxErrorLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorLuaException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::SyntaxErrorLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::SyntaxErrorLuaException *)new Mezzanine::SyntaxErrorLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_SyntaxErrorLuaException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_SyntaxErrorLuaException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_SyntaxErrorLuaException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_SyntaxErrorLuaException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::SyntaxErrorLuaException::SyntaxErrorLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_SyntaxErrorLuaException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::SyntaxErrorLuaException *arg1 = (Mezzanine::SyntaxErrorLuaException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::SyntaxErrorLuaException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::SyntaxErrorLuaException::GetExceptionCode",1,"Mezzanine::SyntaxErrorLuaException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,0))){
    SWIG_fail_ptr("SyntaxErrorLuaException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::SyntaxErrorLuaException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_SyntaxErrorLuaException(void *obj) {
Mezzanine::SyntaxErrorLuaException *arg1 = (Mezzanine::SyntaxErrorLuaException *) obj;
delete arg1;
}
static int _proxy__wrap_new_SyntaxErrorLuaException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_SyntaxErrorLuaException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_SyntaxErrorLuaException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_SyntaxErrorLuaException_methods[]= {
    { "GetExceptionCode", _wrap_SyntaxErrorLuaException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_SyntaxErrorLuaException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_SyntaxErrorLuaException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_SyntaxErrorLuaException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::SyntaxErrorLuaException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SyntaxErrorLuaException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_SyntaxErrorLuaException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_SyntaxErrorLuaException_Sf_SwigStatic = {
    "SyntaxErrorLuaException",
    swig_SyntaxErrorLuaException_Sf_SwigStatic_methods,
    swig_SyntaxErrorLuaException_Sf_SwigStatic_attributes,
    swig_SyntaxErrorLuaException_Sf_SwigStatic_constants,
    swig_SyntaxErrorLuaException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_SyntaxErrorLuaException_bases[] = {0,0};
static const char *swig_SyntaxErrorLuaException_base_names[] = {"Mezzanine::SyntaxErrorException *",0};
static swig_lua_class _wrap_class_SyntaxErrorLuaException = { "SyntaxErrorLuaException", "SyntaxErrorLuaException", &SWIGTYPE_p_Mezzanine__SyntaxErrorLuaException,_proxy__wrap_new_SyntaxErrorLuaException, swig_delete_SyntaxErrorLuaException, swig_SyntaxErrorLuaException_methods, swig_SyntaxErrorLuaException_attributes, &swig_SyntaxErrorLuaException_Sf_SwigStatic, swig_SyntaxErrorLuaException_meta, swig_SyntaxErrorLuaException_bases, swig_SyntaxErrorLuaException_base_names };

static int _wrap_new_ScriptException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptException::ScriptException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptException *)new Mezzanine::ScriptException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptException::ScriptException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptException::ScriptException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptException *)new Mezzanine::ScriptException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptException::ScriptException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptException::ScriptException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptException *arg1 = (Mezzanine::ScriptException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptException::GetExceptionCode",1,"Mezzanine::ScriptException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptException,0))){
    SWIG_fail_ptr("ScriptException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptException(void *obj) {
Mezzanine::ScriptException *arg1 = (Mezzanine::ScriptException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptException_Sf_SwigStatic = {
    "ScriptException",
    swig_ScriptException_Sf_SwigStatic_methods,
    swig_ScriptException_Sf_SwigStatic_attributes,
    swig_ScriptException_Sf_SwigStatic_constants,
    swig_ScriptException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptException_bases[] = {0,0};
static const char *swig_ScriptException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_ScriptException = { "ScriptException", "ScriptException", &SWIGTYPE_p_Mezzanine__ScriptException,_proxy__wrap_new_ScriptException, swig_delete_ScriptException, swig_ScriptException_methods, swig_ScriptException_attributes, &swig_ScriptException_Sf_SwigStatic, swig_ScriptException_meta, swig_ScriptException_bases, swig_ScriptException_base_names };

static int _wrap_new_ScriptLuaException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::ScriptLuaException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaException *)new Mezzanine::ScriptLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::ScriptLuaException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaException::ScriptLuaException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaException *)new Mezzanine::ScriptLuaException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaException::ScriptLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaException::ScriptLuaException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaException *arg1 = (Mezzanine::ScriptLuaException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaException::GetExceptionCode",1,"Mezzanine::ScriptLuaException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaException,0))){
    SWIG_fail_ptr("ScriptLuaException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaException(void *obj) {
Mezzanine::ScriptLuaException *arg1 = (Mezzanine::ScriptLuaException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaException_Sf_SwigStatic = {
    "ScriptLuaException",
    swig_ScriptLuaException_Sf_SwigStatic_methods,
    swig_ScriptLuaException_Sf_SwigStatic_attributes,
    swig_ScriptLuaException_Sf_SwigStatic_constants,
    swig_ScriptLuaException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaException_bases[] = {0,0};
static const char *swig_ScriptLuaException_base_names[] = {"Mezzanine::ScriptException *",0};
static swig_lua_class _wrap_class_ScriptLuaException = { "ScriptLuaException", "ScriptLuaException", &SWIGTYPE_p_Mezzanine__ScriptLuaException,_proxy__wrap_new_ScriptLuaException, swig_delete_ScriptLuaException, swig_ScriptLuaException_methods, swig_ScriptLuaException_attributes, &swig_ScriptLuaException_Sf_SwigStatic, swig_ScriptLuaException_meta, swig_ScriptLuaException_bases, swig_ScriptLuaException_base_names };

static int _wrap_new_ScriptLuaYieldException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaYieldException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaYieldException *)new Mezzanine::ScriptLuaYieldException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaYieldException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaYieldException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaYieldException *)new Mezzanine::ScriptLuaYieldException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaYieldException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaYieldException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaYieldException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaYieldException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaYieldException::ScriptLuaYieldException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaYieldException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaYieldException *arg1 = (Mezzanine::ScriptLuaYieldException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaYieldException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaYieldException::GetExceptionCode",1,"Mezzanine::ScriptLuaYieldException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,0))){
    SWIG_fail_ptr("ScriptLuaYieldException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaYieldException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaYieldException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaYieldException(void *obj) {
Mezzanine::ScriptLuaYieldException *arg1 = (Mezzanine::ScriptLuaYieldException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaYieldException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaYieldException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaYieldException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaYieldException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaYieldException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaYieldException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaYieldException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaYieldException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaYieldException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaYieldException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaYieldException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaYieldException_Sf_SwigStatic = {
    "ScriptLuaYieldException",
    swig_ScriptLuaYieldException_Sf_SwigStatic_methods,
    swig_ScriptLuaYieldException_Sf_SwigStatic_attributes,
    swig_ScriptLuaYieldException_Sf_SwigStatic_constants,
    swig_ScriptLuaYieldException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaYieldException_bases[] = {0,0};
static const char *swig_ScriptLuaYieldException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_ScriptLuaYieldException = { "ScriptLuaYieldException", "ScriptLuaYieldException", &SWIGTYPE_p_Mezzanine__ScriptLuaYieldException,_proxy__wrap_new_ScriptLuaYieldException, swig_delete_ScriptLuaYieldException, swig_ScriptLuaYieldException_methods, swig_ScriptLuaYieldException_attributes, &swig_ScriptLuaYieldException_Sf_SwigStatic, swig_ScriptLuaYieldException_meta, swig_ScriptLuaYieldException_bases, swig_ScriptLuaYieldException_base_names };

static int _wrap_new_ScriptLuaRuntimeException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaRuntimeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaRuntimeException *)new Mezzanine::ScriptLuaRuntimeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaRuntimeException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaRuntimeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaRuntimeException *)new Mezzanine::ScriptLuaRuntimeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaRuntimeException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaRuntimeException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaRuntimeException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaRuntimeException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaRuntimeException::ScriptLuaRuntimeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaRuntimeException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaRuntimeException *arg1 = (Mezzanine::ScriptLuaRuntimeException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaRuntimeException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaRuntimeException::GetExceptionCode",1,"Mezzanine::ScriptLuaRuntimeException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,0))){
    SWIG_fail_ptr("ScriptLuaRuntimeException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaRuntimeException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaRuntimeException(void *obj) {
Mezzanine::ScriptLuaRuntimeException *arg1 = (Mezzanine::ScriptLuaRuntimeException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaRuntimeException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaRuntimeException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaRuntimeException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaRuntimeException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaRuntimeException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaRuntimeException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaRuntimeException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaRuntimeException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaRuntimeException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaRuntimeException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaRuntimeException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaRuntimeException_Sf_SwigStatic = {
    "ScriptLuaRuntimeException",
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_methods,
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_attributes,
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_constants,
    swig_ScriptLuaRuntimeException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaRuntimeException_bases[] = {0,0};
static const char *swig_ScriptLuaRuntimeException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_ScriptLuaRuntimeException = { "ScriptLuaRuntimeException", "ScriptLuaRuntimeException", &SWIGTYPE_p_Mezzanine__ScriptLuaRuntimeException,_proxy__wrap_new_ScriptLuaRuntimeException, swig_delete_ScriptLuaRuntimeException, swig_ScriptLuaRuntimeException_methods, swig_ScriptLuaRuntimeException_attributes, &swig_ScriptLuaRuntimeException_Sf_SwigStatic, swig_ScriptLuaRuntimeException_meta, swig_ScriptLuaRuntimeException_bases, swig_ScriptLuaRuntimeException_base_names };

static int _wrap_new_ScriptLuaErrErrException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ScriptLuaErrErrException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ScriptLuaErrErrException *)new Mezzanine::ScriptLuaErrErrException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaErrErrException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ScriptLuaErrErrException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ScriptLuaErrErrException *)new Mezzanine::ScriptLuaErrErrException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ScriptLuaErrErrException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ScriptLuaErrErrException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ScriptLuaErrErrException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ScriptLuaErrErrException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ScriptLuaErrErrException::ScriptLuaErrErrException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ScriptLuaErrErrException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ScriptLuaErrErrException *arg1 = (Mezzanine::ScriptLuaErrErrException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ScriptLuaErrErrException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ScriptLuaErrErrException::GetExceptionCode",1,"Mezzanine::ScriptLuaErrErrException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,0))){
    SWIG_fail_ptr("ScriptLuaErrErrException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ScriptLuaErrErrException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ScriptLuaErrErrException(void *obj) {
Mezzanine::ScriptLuaErrErrException *arg1 = (Mezzanine::ScriptLuaErrErrException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ScriptLuaErrErrException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ScriptLuaErrErrException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ScriptLuaErrErrException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ScriptLuaErrErrException_methods[]= {
    { "GetExceptionCode", _wrap_ScriptLuaErrErrException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ScriptLuaErrErrException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ScriptLuaErrErrException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ScriptLuaErrErrException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ScriptLuaErrErrException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ScriptLuaErrErrException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ScriptLuaErrErrException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ScriptLuaErrErrException_Sf_SwigStatic = {
    "ScriptLuaErrErrException",
    swig_ScriptLuaErrErrException_Sf_SwigStatic_methods,
    swig_ScriptLuaErrErrException_Sf_SwigStatic_attributes,
    swig_ScriptLuaErrErrException_Sf_SwigStatic_constants,
    swig_ScriptLuaErrErrException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ScriptLuaErrErrException_bases[] = {0,0};
static const char *swig_ScriptLuaErrErrException_base_names[] = {"Mezzanine::ScriptLuaException *",0};
static swig_lua_class _wrap_class_ScriptLuaErrErrException = { "ScriptLuaErrErrException", "ScriptLuaErrErrException", &SWIGTYPE_p_Mezzanine__ScriptLuaErrErrException,_proxy__wrap_new_ScriptLuaErrErrException, swig_delete_ScriptLuaErrErrException, swig_ScriptLuaErrErrException_methods, swig_ScriptLuaErrErrException_attributes, &swig_ScriptLuaErrErrException_Sf_SwigStatic, swig_ScriptLuaErrErrException_meta, swig_ScriptLuaErrErrException_bases, swig_ScriptLuaErrErrException_base_names };

static int _wrap_new_ParametersException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ParametersException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersException::ParametersException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ParametersException *)new Mezzanine::ParametersException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersException::ParametersException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersException::ParametersException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersException *)new Mezzanine::ParametersException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ParametersException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersException::ParametersException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersException::ParametersException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersException *arg1 = (Mezzanine::ParametersException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersException::GetExceptionCode",1,"Mezzanine::ParametersException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersException,0))){
    SWIG_fail_ptr("ParametersException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersException(void *obj) {
Mezzanine::ParametersException *arg1 = (Mezzanine::ParametersException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametersException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametersException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametersException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametersException_methods[]= {
    { "GetExceptionCode", _wrap_ParametersException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ParametersException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametersException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametersException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametersException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametersException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametersException_Sf_SwigStatic = {
    "ParametersException",
    swig_ParametersException_Sf_SwigStatic_methods,
    swig_ParametersException_Sf_SwigStatic_attributes,
    swig_ParametersException_Sf_SwigStatic_constants,
    swig_ParametersException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametersException_bases[] = {0,0};
static const char *swig_ParametersException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_ParametersException = { "ParametersException", "ParametersException", &SWIGTYPE_p_Mezzanine__ParametersException,_proxy__wrap_new_ParametersException, swig_delete_ParametersException, swig_ParametersException_methods, swig_ParametersException_attributes, &swig_ParametersException_Sf_SwigStatic, swig_ParametersException_meta, swig_ParametersException_bases, swig_ParametersException_base_names };

static int _wrap_new_ParametersCastException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ParametersCastException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::ParametersCastException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ParametersCastException *)new Mezzanine::ParametersCastException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersCastException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersCastException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersCastException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::ParametersCastException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersCastException::ParametersCastException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersCastException *)new Mezzanine::ParametersCastException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersCastException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersCastException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersCastException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ParametersCastException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersCastException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersCastException::ParametersCastException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersCastException::ParametersCastException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersCastException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersCastException *arg1 = (Mezzanine::ParametersCastException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersCastException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersCastException::GetExceptionCode",1,"Mezzanine::ParametersCastException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersCastException,0))){
    SWIG_fail_ptr("ParametersCastException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersCastException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersCastException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersCastException(void *obj) {
Mezzanine::ParametersCastException *arg1 = (Mezzanine::ParametersCastException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametersCastException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametersCastException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametersCastException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametersCastException_methods[]= {
    { "GetExceptionCode", _wrap_ParametersCastException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ParametersCastException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametersCastException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametersCastException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersCastException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametersCastException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametersCastException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametersCastException_Sf_SwigStatic = {
    "ParametersCastException",
    swig_ParametersCastException_Sf_SwigStatic_methods,
    swig_ParametersCastException_Sf_SwigStatic_attributes,
    swig_ParametersCastException_Sf_SwigStatic_constants,
    swig_ParametersCastException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametersCastException_bases[] = {0,0};
static const char *swig_ParametersCastException_base_names[] = {"Mezzanine::ParametersException *",0};
static swig_lua_class _wrap_class_ParametersCastException = { "ParametersCastException", "ParametersCastException", &SWIGTYPE_p_Mezzanine__ParametersCastException,_proxy__wrap_new_ParametersCastException, swig_delete_ParametersCastException, swig_ParametersCastException_methods, swig_ParametersCastException_attributes, &swig_ParametersCastException_Sf_SwigStatic, swig_ParametersCastException_meta, swig_ParametersCastException_bases, swig_ParametersCastException_base_names };

static int _wrap_new_ParametersRangeException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ParametersRangeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::ParametersRangeException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ParametersRangeException *)new Mezzanine::ParametersRangeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersRangeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersRangeException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ParametersRangeException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::ParametersRangeException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ParametersRangeException::ParametersRangeException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ParametersRangeException *)new Mezzanine::ParametersRangeException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ParametersRangeException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParametersRangeException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ParametersRangeException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ParametersRangeException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ParametersRangeException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ParametersRangeException::ParametersRangeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ParametersRangeException::ParametersRangeException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ParametersRangeException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ParametersRangeException *arg1 = (Mezzanine::ParametersRangeException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ParametersRangeException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ParametersRangeException::GetExceptionCode",1,"Mezzanine::ParametersRangeException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ParametersRangeException,0))){
    SWIG_fail_ptr("ParametersRangeException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ParametersRangeException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ParametersRangeException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParametersRangeException(void *obj) {
Mezzanine::ParametersRangeException *arg1 = (Mezzanine::ParametersRangeException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParametersRangeException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParametersRangeException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParametersRangeException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ParametersRangeException_methods[]= {
    { "GetExceptionCode", _wrap_ParametersRangeException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ParametersRangeException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParametersRangeException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParametersRangeException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ParametersRangeException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParametersRangeException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParametersRangeException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParametersRangeException_Sf_SwigStatic = {
    "ParametersRangeException",
    swig_ParametersRangeException_Sf_SwigStatic_methods,
    swig_ParametersRangeException_Sf_SwigStatic_attributes,
    swig_ParametersRangeException_Sf_SwigStatic_constants,
    swig_ParametersRangeException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParametersRangeException_bases[] = {0,0};
static const char *swig_ParametersRangeException_base_names[] = {"Mezzanine::ParametersException *",0};
static swig_lua_class _wrap_class_ParametersRangeException = { "ParametersRangeException", "ParametersRangeException", &SWIGTYPE_p_Mezzanine__ParametersRangeException,_proxy__wrap_new_ParametersRangeException, swig_delete_ParametersRangeException, swig_ParametersRangeException_methods, swig_ParametersRangeException_attributes, &swig_ParametersRangeException_Sf_SwigStatic, swig_ParametersRangeException_meta, swig_ParametersRangeException_bases, swig_ParametersRangeException_base_names };

static int _wrap_new_ArithmeticException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::ArithmeticException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::ArithmeticException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::ArithmeticException *)new Mezzanine::ArithmeticException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ArithmeticException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArithmeticException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::ArithmeticException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::ArithmeticException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ArithmeticException::ArithmeticException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::ArithmeticException *)new Mezzanine::ArithmeticException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ArithmeticException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ArithmeticException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ArithmeticException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_ArithmeticException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ArithmeticException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ArithmeticException::ArithmeticException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::ArithmeticException::ArithmeticException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ArithmeticException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ArithmeticException *arg1 = (Mezzanine::ArithmeticException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::ArithmeticException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ArithmeticException::GetExceptionCode",1,"Mezzanine::ArithmeticException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ArithmeticException,0))){
    SWIG_fail_ptr("ArithmeticException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__ArithmeticException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::ArithmeticException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ArithmeticException(void *obj) {
Mezzanine::ArithmeticException *arg1 = (Mezzanine::ArithmeticException *) obj;
delete arg1;
}
static int _proxy__wrap_new_ArithmeticException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ArithmeticException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ArithmeticException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ArithmeticException_methods[]= {
    { "GetExceptionCode", _wrap_ArithmeticException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_ArithmeticException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ArithmeticException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ArithmeticException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::ArithmeticException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ArithmeticException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ArithmeticException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ArithmeticException_Sf_SwigStatic = {
    "ArithmeticException",
    swig_ArithmeticException_Sf_SwigStatic_methods,
    swig_ArithmeticException_Sf_SwigStatic_attributes,
    swig_ArithmeticException_Sf_SwigStatic_constants,
    swig_ArithmeticException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ArithmeticException_bases[] = {0,0};
static const char *swig_ArithmeticException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_ArithmeticException = { "ArithmeticException", "ArithmeticException", &SWIGTYPE_p_Mezzanine__ArithmeticException,_proxy__wrap_new_ArithmeticException, swig_delete_ArithmeticException, swig_ArithmeticException_methods, swig_ArithmeticException_attributes, &swig_ArithmeticException_Sf_SwigStatic, swig_ArithmeticException_meta, swig_ArithmeticException_bases, swig_ArithmeticException_base_names };

static int _wrap_new_InvalidVersionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InvalidVersionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::InvalidVersionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InvalidVersionException *)new Mezzanine::InvalidVersionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidVersionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidVersionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidVersionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::InvalidVersionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidVersionException::InvalidVersionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidVersionException *)new Mezzanine::InvalidVersionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidVersionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidVersionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidVersionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InvalidVersionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidVersionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidVersionException::InvalidVersionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidVersionException::InvalidVersionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidVersionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidVersionException *arg1 = (Mezzanine::InvalidVersionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidVersionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidVersionException::GetExceptionCode",1,"Mezzanine::InvalidVersionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidVersionException,0))){
    SWIG_fail_ptr("InvalidVersionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidVersionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidVersionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidVersionException(void *obj) {
Mezzanine::InvalidVersionException *arg1 = (Mezzanine::InvalidVersionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InvalidVersionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InvalidVersionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InvalidVersionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InvalidVersionException_methods[]= {
    { "GetExceptionCode", _wrap_InvalidVersionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InvalidVersionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InvalidVersionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InvalidVersionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidVersionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InvalidVersionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InvalidVersionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InvalidVersionException_Sf_SwigStatic = {
    "InvalidVersionException",
    swig_InvalidVersionException_Sf_SwigStatic_methods,
    swig_InvalidVersionException_Sf_SwigStatic_attributes,
    swig_InvalidVersionException_Sf_SwigStatic_constants,
    swig_InvalidVersionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InvalidVersionException_bases[] = {0,0};
static const char *swig_InvalidVersionException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InvalidVersionException = { "InvalidVersionException", "InvalidVersionException", &SWIGTYPE_p_Mezzanine__InvalidVersionException,_proxy__wrap_new_InvalidVersionException, swig_delete_InvalidVersionException, swig_InvalidVersionException_methods, swig_InvalidVersionException_attributes, &swig_InvalidVersionException_Sf_SwigStatic, swig_InvalidVersionException_meta, swig_InvalidVersionException_bases, swig_InvalidVersionException_base_names };

static int _wrap_new_InvalidStateException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InvalidStateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::InvalidStateException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InvalidStateException *)new Mezzanine::InvalidStateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidStateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidStateException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidStateException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::InvalidStateException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidStateException::InvalidStateException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidStateException *)new Mezzanine::InvalidStateException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidStateException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidStateException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidStateException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InvalidStateException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidStateException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidStateException::InvalidStateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidStateException::InvalidStateException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidStateException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidStateException *arg1 = (Mezzanine::InvalidStateException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidStateException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidStateException::GetExceptionCode",1,"Mezzanine::InvalidStateException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidStateException,0))){
    SWIG_fail_ptr("InvalidStateException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidStateException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidStateException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidStateException(void *obj) {
Mezzanine::InvalidStateException *arg1 = (Mezzanine::InvalidStateException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InvalidStateException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InvalidStateException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InvalidStateException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InvalidStateException_methods[]= {
    { "GetExceptionCode", _wrap_InvalidStateException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InvalidStateException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InvalidStateException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InvalidStateException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidStateException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InvalidStateException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InvalidStateException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InvalidStateException_Sf_SwigStatic = {
    "InvalidStateException",
    swig_InvalidStateException_Sf_SwigStatic_methods,
    swig_InvalidStateException_Sf_SwigStatic_attributes,
    swig_InvalidStateException_Sf_SwigStatic_constants,
    swig_InvalidStateException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InvalidStateException_bases[] = {0,0};
static const char *swig_InvalidStateException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InvalidStateException = { "InvalidStateException", "InvalidStateException", &SWIGTYPE_p_Mezzanine__InvalidStateException,_proxy__wrap_new_InvalidStateException, swig_delete_InvalidStateException, swig_InvalidStateException_methods, swig_InvalidStateException_attributes, &swig_InvalidStateException_Sf_SwigStatic, swig_InvalidStateException_meta, swig_InvalidStateException_bases, swig_InvalidStateException_base_names };

static int _wrap_new_RenderingAPIException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::RenderingAPIException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::RenderingAPIException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::RenderingAPIException *)new Mezzanine::RenderingAPIException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RenderingAPIException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RenderingAPIException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::RenderingAPIException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::RenderingAPIException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::RenderingAPIException::RenderingAPIException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::RenderingAPIException *)new Mezzanine::RenderingAPIException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RenderingAPIException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RenderingAPIException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RenderingAPIException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_RenderingAPIException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RenderingAPIException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RenderingAPIException::RenderingAPIException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::RenderingAPIException::RenderingAPIException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RenderingAPIException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RenderingAPIException *arg1 = (Mezzanine::RenderingAPIException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::RenderingAPIException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RenderingAPIException::GetExceptionCode",1,"Mezzanine::RenderingAPIException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RenderingAPIException,0))){
    SWIG_fail_ptr("RenderingAPIException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__RenderingAPIException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::RenderingAPIException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RenderingAPIException(void *obj) {
Mezzanine::RenderingAPIException *arg1 = (Mezzanine::RenderingAPIException *) obj;
delete arg1;
}
static int _proxy__wrap_new_RenderingAPIException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RenderingAPIException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RenderingAPIException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RenderingAPIException_methods[]= {
    { "GetExceptionCode", _wrap_RenderingAPIException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_RenderingAPIException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RenderingAPIException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RenderingAPIException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::RenderingAPIException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RenderingAPIException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RenderingAPIException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RenderingAPIException_Sf_SwigStatic = {
    "RenderingAPIException",
    swig_RenderingAPIException_Sf_SwigStatic_methods,
    swig_RenderingAPIException_Sf_SwigStatic_attributes,
    swig_RenderingAPIException_Sf_SwigStatic_constants,
    swig_RenderingAPIException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RenderingAPIException_bases[] = {0,0};
static const char *swig_RenderingAPIException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_RenderingAPIException = { "RenderingAPIException", "RenderingAPIException", &SWIGTYPE_p_Mezzanine__RenderingAPIException,_proxy__wrap_new_RenderingAPIException, swig_delete_RenderingAPIException, swig_RenderingAPIException_methods, swig_RenderingAPIException_attributes, &swig_RenderingAPIException_Sf_SwigStatic, swig_RenderingAPIException_meta, swig_RenderingAPIException_bases, swig_RenderingAPIException_base_names };

static int _wrap_new_RuntimeAssertionException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::RuntimeAssertionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::RuntimeAssertionException *)new Mezzanine::RuntimeAssertionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RuntimeAssertionException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::RuntimeAssertionException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::RuntimeAssertionException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::RuntimeAssertionException *)new Mezzanine::RuntimeAssertionException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RuntimeAssertionException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_RuntimeAssertionException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_RuntimeAssertionException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_RuntimeAssertionException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RuntimeAssertionException::RuntimeAssertionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::RuntimeAssertionException::RuntimeAssertionException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_RuntimeAssertionException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RuntimeAssertionException *arg1 = (Mezzanine::RuntimeAssertionException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::RuntimeAssertionException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RuntimeAssertionException::GetExceptionCode",1,"Mezzanine::RuntimeAssertionException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RuntimeAssertionException,0))){
    SWIG_fail_ptr("RuntimeAssertionException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__RuntimeAssertionException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::RuntimeAssertionException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RuntimeAssertionException(void *obj) {
Mezzanine::RuntimeAssertionException *arg1 = (Mezzanine::RuntimeAssertionException *) obj;
delete arg1;
}
static int _proxy__wrap_new_RuntimeAssertionException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RuntimeAssertionException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RuntimeAssertionException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RuntimeAssertionException_methods[]= {
    { "GetExceptionCode", _wrap_RuntimeAssertionException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_RuntimeAssertionException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RuntimeAssertionException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RuntimeAssertionException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::RuntimeAssertionException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RuntimeAssertionException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_RuntimeAssertionException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RuntimeAssertionException_Sf_SwigStatic = {
    "RuntimeAssertionException",
    swig_RuntimeAssertionException_Sf_SwigStatic_methods,
    swig_RuntimeAssertionException_Sf_SwigStatic_attributes,
    swig_RuntimeAssertionException_Sf_SwigStatic_constants,
    swig_RuntimeAssertionException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RuntimeAssertionException_bases[] = {0,0};
static const char *swig_RuntimeAssertionException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_RuntimeAssertionException = { "RuntimeAssertionException", "RuntimeAssertionException", &SWIGTYPE_p_Mezzanine__RuntimeAssertionException,_proxy__wrap_new_RuntimeAssertionException, swig_delete_RuntimeAssertionException, swig_RuntimeAssertionException_methods, swig_RuntimeAssertionException_attributes, &swig_RuntimeAssertionException_Sf_SwigStatic, swig_RuntimeAssertionException_meta, swig_RuntimeAssertionException_bases, swig_RuntimeAssertionException_base_names };

static int _wrap_new_InternalException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InternalException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InternalException::InternalException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InternalException *)new Mezzanine::InternalException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InternalException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InternalException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InternalException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InternalException::InternalException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InternalException::InternalException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InternalException *)new Mezzanine::InternalException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InternalException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InternalException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InternalException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InternalException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InternalException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InternalException::InternalException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InternalException::InternalException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InternalException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InternalException *arg1 = (Mezzanine::InternalException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InternalException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InternalException::GetExceptionCode",1,"Mezzanine::InternalException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InternalException,0))){
    SWIG_fail_ptr("InternalException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InternalException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InternalException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InternalException(void *obj) {
Mezzanine::InternalException *arg1 = (Mezzanine::InternalException *) obj;
delete arg1;
}
static int _proxy__wrap_new_InternalException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InternalException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InternalException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InternalException_methods[]= {
    { "GetExceptionCode", _wrap_InternalException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InternalException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InternalException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InternalException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InternalException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InternalException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InternalException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InternalException_Sf_SwigStatic = {
    "InternalException",
    swig_InternalException_Sf_SwigStatic_methods,
    swig_InternalException_Sf_SwigStatic_attributes,
    swig_InternalException_Sf_SwigStatic_constants,
    swig_InternalException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InternalException_bases[] = {0,0};
static const char *swig_InternalException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InternalException = { "InternalException", "InternalException", &SWIGTYPE_p_Mezzanine__InternalException,_proxy__wrap_new_InternalException, swig_delete_InternalException, swig_InternalException_methods, swig_InternalException_attributes, &swig_InternalException_Sf_SwigStatic, swig_InternalException_meta, swig_InternalException_bases, swig_InternalException_base_names };

static int _wrap_new_NotImplementedException__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::NotImplementedException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::NotImplementedException",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::NotImplementedException *)new Mezzanine::NotImplementedException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NotImplementedException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotImplementedException__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::NotImplementedException *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::NotImplementedException",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::NotImplementedException::NotImplementedException",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::NotImplementedException *)new Mezzanine::NotImplementedException((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__NotImplementedException,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NotImplementedException(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_NotImplementedException__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_NotImplementedException__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NotImplementedException'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::NotImplementedException::NotImplementedException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::NotImplementedException::NotImplementedException(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NotImplementedException_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::NotImplementedException *arg1 = (Mezzanine::NotImplementedException *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::NotImplementedException::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::NotImplementedException::GetExceptionCode",1,"Mezzanine::NotImplementedException const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__NotImplementedException,0))){
    SWIG_fail_ptr("NotImplementedException_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__NotImplementedException);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::NotImplementedException const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NotImplementedException(void *obj) {
Mezzanine::NotImplementedException *arg1 = (Mezzanine::NotImplementedException *) obj;
delete arg1;
}
static int _proxy__wrap_new_NotImplementedException(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NotImplementedException);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NotImplementedException_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NotImplementedException_methods[]= {
    { "GetExceptionCode", _wrap_NotImplementedException_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_NotImplementedException_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NotImplementedException_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NotImplementedException_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::NotImplementedException::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NotImplementedException_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NotImplementedException_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NotImplementedException_Sf_SwigStatic = {
    "NotImplementedException",
    swig_NotImplementedException_Sf_SwigStatic_methods,
    swig_NotImplementedException_Sf_SwigStatic_attributes,
    swig_NotImplementedException_Sf_SwigStatic_constants,
    swig_NotImplementedException_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NotImplementedException_bases[] = {0,0};
static const char *swig_NotImplementedException_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_NotImplementedException = { "NotImplementedException", "NotImplementedException", &SWIGTYPE_p_Mezzanine__NotImplementedException,_proxy__wrap_new_NotImplementedException, swig_delete_NotImplementedException, swig_NotImplementedException_methods, swig_NotImplementedException_attributes, &swig_NotImplementedException_Sf_SwigStatic, swig_NotImplementedException_meta, swig_NotImplementedException_bases, swig_NotImplementedException_base_names };

static int _wrap_new_InvalidAssignment__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String *arg5 = 0 ;
  Mezzanine::Whole *arg6 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::String temp4 ;
  Mezzanine::String temp5 ;
  Mezzanine::Whole temp6 ;
  Mezzanine::InvalidAssignment *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::InvalidAssignment",6,6)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",3,"Mezzanine::String const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",4,"Mezzanine::String const &");
  if(!lua_isstring(L,5)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",5,"Mezzanine::String const &");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",6,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  temp5.assign(lua_tostring(L,5),lua_rawlen(L,5)); arg5=&temp5;
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  temp6=(Mezzanine::Whole)lua_tonumber(L,6); arg6=&temp6;
  result = (Mezzanine::InvalidAssignment *)new Mezzanine::InvalidAssignment((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::String const &)*arg4,(Mezzanine::String const &)*arg5,(Mezzanine::Whole const &)*arg6);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidAssignment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidAssignment__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::Whole *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::Whole temp4 ;
  Mezzanine::InvalidAssignment *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::InvalidAssignment",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",3,"Mezzanine::String const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::InvalidAssignment::InvalidAssignment",4,"Mezzanine::Whole const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  temp4=(Mezzanine::Whole)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::InvalidAssignment *)new Mezzanine::InvalidAssignment((Mezzanine::String const &)*arg1,(Mezzanine::String const &)*arg2,(Mezzanine::String const &)*arg3,(Mezzanine::Whole const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__InvalidAssignment,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_InvalidAssignment(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_InvalidAssignment__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isstring(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_new_InvalidAssignment__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_InvalidAssignment'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::InvalidAssignment::InvalidAssignment(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n"
    "    Mezzanine::InvalidAssignment::InvalidAssignment(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const &)\n");
  lua_error(L);return 0;
}


static int _wrap_InvalidAssignment_GetExceptionCode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::InvalidAssignment *arg1 = (Mezzanine::InvalidAssignment *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::InvalidAssignment::GetExceptionCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::InvalidAssignment::GetExceptionCode",1,"Mezzanine::InvalidAssignment const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__InvalidAssignment,0))){
    SWIG_fail_ptr("InvalidAssignment_GetExceptionCode",1,SWIGTYPE_p_Mezzanine__InvalidAssignment);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::InvalidAssignment const *)arg1)->GetExceptionCode();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_InvalidAssignment(void *obj) {
Mezzanine::InvalidAssignment *arg1 = (Mezzanine::InvalidAssignment *) obj;
delete arg1;
}
static int _proxy__wrap_new_InvalidAssignment(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_InvalidAssignment);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_InvalidAssignment_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_InvalidAssignment_methods[]= {
    { "GetExceptionCode", _wrap_InvalidAssignment_GetExceptionCode},
    {0,0}
};
static swig_lua_method swig_InvalidAssignment_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_InvalidAssignment_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_InvalidAssignment_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("ExceptionCode", Mezzanine::InvalidAssignment::ExceptionCode)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_InvalidAssignment_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_InvalidAssignment_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_InvalidAssignment_Sf_SwigStatic = {
    "InvalidAssignment",
    swig_InvalidAssignment_Sf_SwigStatic_methods,
    swig_InvalidAssignment_Sf_SwigStatic_attributes,
    swig_InvalidAssignment_Sf_SwigStatic_constants,
    swig_InvalidAssignment_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_InvalidAssignment_bases[] = {0,0};
static const char *swig_InvalidAssignment_base_names[] = {"Mezzanine::ExceptionBase *",0};
static swig_lua_class _wrap_class_InvalidAssignment = { "InvalidAssignment", "InvalidAssignment", &SWIGTYPE_p_Mezzanine__InvalidAssignment,_proxy__wrap_new_InvalidAssignment, swig_delete_InvalidAssignment, swig_InvalidAssignment_methods, swig_InvalidAssignment_attributes, &swig_InvalidAssignment_Sf_SwigStatic, swig_InvalidAssignment_meta, swig_InvalidAssignment_bases, swig_InvalidAssignment_base_names };

static int _wrap_SerializeError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::SerializeError",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SerializeError",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::SerializeError",3,"Mezzanine::Boole");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  Mezzanine::SerializeError((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerializeError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::SerializeError",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::SerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::SerializeError",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  Mezzanine::SerializeError((std::string const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_SerializeError(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_SerializeError__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_SerializeError__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'SerializeError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::SerializeError(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::SerializeError(Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DeSerializeError__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::DeSerializeError",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DeSerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DeSerializeError",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::DeSerializeError",3,"Mezzanine::Boole");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  Mezzanine::DeSerializeError((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeSerializeError__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::DeSerializeError",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::DeSerializeError",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::DeSerializeError",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  Mezzanine::DeSerializeError((std::string const &)*arg1,(std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DeSerializeError(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_DeSerializeError__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_DeSerializeError__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DeSerializeError'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DeSerializeError(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Boole)\n"
    "    Mezzanine::DeSerializeError(Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_X_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::X",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::X",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_X_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::X",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_X_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Y",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Y",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Y_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Y",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Y_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Z_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Z",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Z",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Z_set",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Z",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Z_get",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real) ((arg1)->Z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetAxisValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Whole *arg2 = 0 ;
  Mezzanine::Whole temp2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetAxisValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetAxisValue",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetAxisValue",2,"Mezzanine::Whole const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetAxisValue",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  temp2=(Mezzanine::Whole)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->GetAxisValue((Mezzanine::Whole const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",0,0)
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Mezzanine::Vector3 &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Vector3 &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",3,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((Ogre::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_btVector3);
  }
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3((btVector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node arg1 ;
  XML::Node *argp1 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Vector3",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Vector3",1,"XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_Vector3",1,SWIGTYPE_p_XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Vector3 *)new Mezzanine::Vector3(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector3__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector3__SWIG_6(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Vector3__SWIG_3(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector3'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::Vector3()\n"
    "    Mezzanine::Vector3::Vector3(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(Mezzanine::Vector3 &&)\n"
    "    Mezzanine::Vector3::Vector3(Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Vector3::Vector3(Ogre::Vector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(btVector3 const &)\n"
    "    Mezzanine::Vector3::Vector3(XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_X",0,0)
  result = Mezzanine::Vector3::Unit_X();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_Y",0,0)
  result = Mezzanine::Vector3::Unit_Y();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Unit_Z(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Unit_Z",0,0)
  result = Mezzanine::Vector3::Unit_Z();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_X",0,0)
  result = Mezzanine::Vector3::Neg_Unit_X();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_Y",0,0)
  result = Mezzanine::Vector3::Neg_Unit_Y();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Neg_Unit_Z(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Neg_Unit_Z",0,0)
  result = Mezzanine::Vector3::Neg_Unit_Z();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_UnitOnAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::StandardAxis arg1 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::UnitOnAxis",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector3::UnitOnAxis",1,"Mezzanine::StandardAxis");
  arg1 = (Mezzanine::StandardAxis)(int)lua_tonumber(L, 1);
  result = Mezzanine::Vector3::UnitOnAxis(arg1);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsStandardUnitAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::StandardAxis result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsStandardUnitAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsStandardUnitAxis",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsStandardUnitAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::StandardAxis)((Mezzanine::Vector3 const *)arg1)->IsStandardUnitAxis();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___unm(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___unm",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->operator -();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_btVector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((btVector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator ==",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___eq",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator ==((Ogre::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___eq__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator ==(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator ==(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator ==(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator <=",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator <=",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___le",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___le",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->operator <=((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_btVector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((btVector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator +",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator +",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___add",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator +((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator +(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator +(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator +(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator -",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator -",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___sub",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator -((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator -(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator -(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator -(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator *",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator *",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___mul",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator *((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator *(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector3::operator *(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator *(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator *(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3___div__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::operator /",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::operator /",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3___div",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->operator /((Ogre::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector3___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::operator /(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector3::operator /(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::operator /(btVector3 const &) const\n"
    "    Mezzanine::Vector3::operator /(Ogre::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_CrossProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::CrossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::CrossProduct",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::CrossProduct",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_CrossProduct",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_CrossProduct",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->CrossProduct((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_DotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::DotProduct",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::DotProduct",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_DotProduct",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_DotProduct",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->DotProduct((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Normalize",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Normalize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetNormal",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetNormal",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetNormal();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_AngleBetween(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::AngleBetween",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::AngleBetween",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::AngleBetween",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_AngleBetween",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_AngleBetween",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->AngleBetween((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Permute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Permute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Permute",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Permute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Permute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetPermute",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetPermute();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_AntiPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::AntiPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::AntiPermute",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_AntiPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->AntiPermute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetAntiPermute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetAntiPermute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetAntiPermute",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetAntiPermute",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetAntiPermute();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetDirection(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetDirection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetDirection",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetDirection",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetDirection",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetDirection",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetDirection((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Perpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Perpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Perpendicular",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Perpendicular",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->Perpendicular();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsPerpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsPerpendicular",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsPerpendicular",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::IsPerpendicular",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsPerpendicular",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsPerpendicular",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsPerpendicular((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Inverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Inverse",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Inverse",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->Inverse();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Reflect(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Reflect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Reflect",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Reflect",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Reflect",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Reflect",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (arg1)->Reflect((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Distance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Distance",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Distance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Distance",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Distance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->Distance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SquaredDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::SquaredDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SquaredDistance",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::SquaredDistance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredDistance",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredDistance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->SquaredDistance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Length(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Length",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Length",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector3::SquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SquaredLength",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SquaredLength",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector3 const *)arg1)->SquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsZeroLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsZeroLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsZeroLength",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsZeroLength",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsZeroLength();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetRotationToAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetRotationToAxis((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetRotationToAxis",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::GetRotationToAxis",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetRotationToAxis",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetRotationToAxis((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetRotationToAxis(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector3_GetRotationToAxis__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Vector3_GetRotationToAxis__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector3_GetRotationToAxis'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector3::GetRotationToAxis(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Vector3::GetRotationToAxis(Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector3_Zero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Zero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Zero",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Zero",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Zero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Real temp4 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::SetValues",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",1,"Mezzanine::Vector3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Vector3::SetValues",4,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_SetValues",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  temp4=(Mezzanine::Real)lua_tonumber(L,4); arg4=&temp4;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_IsZero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3::IsZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::IsZero",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_IsZero",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3 const *)arg1)->IsZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Ceil(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Ceil",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Ceil",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Ceil",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Ceil",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Ceil",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Ceil((Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_Floor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::Floor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::Floor",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::Floor",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Floor",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_Floor",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Vector3 *) &(arg1)->Floor((Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetBulletVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetBulletVector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetBulletVector3",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetBulletVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetBulletVector3();
  {
    btVector3 * resultptr = new btVector3((const btVector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btVector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ExtractBulletVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  btVector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ExtractBulletVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ExtractBulletVector3",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ExtractBulletVector3",2,"btVector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractBulletVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("Vector3_ExtractBulletVector3",2,SWIGTYPE_p_btVector3);
  }
  
  (arg1)->ExtractBulletVector3((btVector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetOgreVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetOgreVector3",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::GetOgreVector3",1,"Mezzanine::Vector3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_GetOgreVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Vector3 const *)arg1)->GetOgreVector3();
  {
    Ogre::Vector3 * resultptr = new Ogre::Vector3((const Ogre::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ExtractOgreVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  Ogre::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ExtractOgreVector3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ExtractOgreVector3",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ExtractOgreVector3",2,"Ogre::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractOgreVector3",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("Vector3_ExtractOgreVector3",2,SWIGTYPE_p_Ogre__Vector3);
  }
  
  (arg1)->ExtractOgreVector3((Ogre::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ProtoSerialize",1,"Mezzanine::Vector3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Vector3_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Vector3 const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::ProtoDeSerialize",1,"Mezzanine::Vector3 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Vector3_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Vector3::GetSerializableName",0,0)
  result = Mezzanine::Vector3::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector3___tostring(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3::__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3::__str__",1,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3___tostring",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (char *)(arg1)->__str__();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3(void *obj) {
Mezzanine::Vector3 *arg1 = (Mezzanine::Vector3 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector3(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3_attributes[] = {
    { "X", _wrap_Vector3_X_get, _wrap_Vector3_X_set },
    { "Y", _wrap_Vector3_Y_get, _wrap_Vector3_Y_set },
    { "Z", _wrap_Vector3_Z_get, _wrap_Vector3_Z_set },
    {0,0,0}
};
static swig_lua_method swig_Vector3_methods[]= {
    { "GetAxisValue", _wrap_Vector3_GetAxisValue},
    { "IsStandardUnitAxis", _wrap_Vector3_IsStandardUnitAxis},
    { "__unm", _wrap_Vector3___unm},
    { "__eq", _wrap_Vector3___eq},
    { "__le", _wrap_Vector3___le},
    { "__add", _wrap_Vector3___add},
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__div", _wrap_Vector3___div},
    { "CrossProduct", _wrap_Vector3_CrossProduct},
    { "DotProduct", _wrap_Vector3_DotProduct},
    { "Normalize", _wrap_Vector3_Normalize},
    { "GetNormal", _wrap_Vector3_GetNormal},
    { "AngleBetween", _wrap_Vector3_AngleBetween},
    { "Permute", _wrap_Vector3_Permute},
    { "GetPermute", _wrap_Vector3_GetPermute},
    { "AntiPermute", _wrap_Vector3_AntiPermute},
    { "GetAntiPermute", _wrap_Vector3_GetAntiPermute},
    { "GetDirection", _wrap_Vector3_GetDirection},
    { "Perpendicular", _wrap_Vector3_Perpendicular},
    { "IsPerpendicular", _wrap_Vector3_IsPerpendicular},
    { "Inverse", _wrap_Vector3_Inverse},
    { "Reflect", _wrap_Vector3_Reflect},
    { "Distance", _wrap_Vector3_Distance},
    { "SquaredDistance", _wrap_Vector3_SquaredDistance},
    { "Length", _wrap_Vector3_Length},
    { "SquaredLength", _wrap_Vector3_SquaredLength},
    { "IsZeroLength", _wrap_Vector3_IsZeroLength},
    { "GetRotationToAxis", _wrap_Vector3_GetRotationToAxis},
    { "Zero", _wrap_Vector3_Zero},
    { "SetValues", _wrap_Vector3_SetValues},
    { "IsZero", _wrap_Vector3_IsZero},
    { "Ceil", _wrap_Vector3_Ceil},
    { "Floor", _wrap_Vector3_Floor},
    { "GetBulletVector3", _wrap_Vector3_GetBulletVector3},
    { "ExtractBulletVector3", _wrap_Vector3_ExtractBulletVector3},
    { "GetOgreVector3", _wrap_Vector3_GetOgreVector3},
    { "ExtractOgreVector3", _wrap_Vector3_ExtractOgreVector3},
    { "ProtoSerialize", _wrap_Vector3_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Vector3_ProtoDeSerialize},
    { "__tostring", _wrap_Vector3___tostring},
    {0,0}
};
static swig_lua_method swig_Vector3_meta[] = {
    { "__unm", _wrap_Vector3___unm},
    { "__eq", _wrap_Vector3___eq},
    { "__le", _wrap_Vector3___le},
    { "__add", _wrap_Vector3___add},
    { "__sub", _wrap_Vector3___sub},
    { "__mul", _wrap_Vector3___mul},
    { "__div", _wrap_Vector3___div},
    { "__tostring", _wrap_Vector3___tostring},
    {0,0}
};

static swig_lua_attribute swig_Vector3_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3_Sf_SwigStatic_methods[]= {
    { "Unit_X", _wrap_Vector3_Unit_X},
    { "Unit_Y", _wrap_Vector3_Unit_Y},
    { "Unit_Z", _wrap_Vector3_Unit_Z},
    { "Neg_Unit_X", _wrap_Vector3_Neg_Unit_X},
    { "Neg_Unit_Y", _wrap_Vector3_Neg_Unit_Y},
    { "Neg_Unit_Z", _wrap_Vector3_Neg_Unit_Z},
    { "UnitOnAxis", _wrap_Vector3_UnitOnAxis},
    { "GetSerializableName", _wrap_Vector3_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Vector3_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3_Sf_SwigStatic = {
    "Vector3",
    swig_Vector3_Sf_SwigStatic_methods,
    swig_Vector3_Sf_SwigStatic_attributes,
    swig_Vector3_Sf_SwigStatic_constants,
    swig_Vector3_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3_bases[] = {0};
static const char *swig_Vector3_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3 = { "Vector3", "Vector3", &SWIGTYPE_p_Mezzanine__Vector3,_proxy__wrap_new_Vector3, swig_delete_Vector3, swig_Vector3_methods, swig_Vector3_attributes, &swig_Vector3_Sf_SwigStatic, swig_Vector3_meta, swig_Vector3_bases, swig_Vector3_base_names };

static int _wrap_Vector3LengthCompare___call(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3LengthCompare *arg1 = (Mezzanine::Vector3LengthCompare *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector3LengthCompare::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",1,"Mezzanine::Vector3LengthCompare const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector3LengthCompare::operator ()",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3LengthCompare,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",1,SWIGTYPE_p_Mezzanine__Vector3LengthCompare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Vector3LengthCompare___call",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector3LengthCompare const *)arg1)->operator ()((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector3LengthCompare(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3LengthCompare *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector3LengthCompare::Vector3LengthCompare",0,0)
  result = (Mezzanine::Vector3LengthCompare *)new Mezzanine::Vector3LengthCompare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3LengthCompare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector3LengthCompare(void *obj) {
Mezzanine::Vector3LengthCompare *arg1 = (Mezzanine::Vector3LengthCompare *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector3LengthCompare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector3LengthCompare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector3LengthCompare_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vector3LengthCompare_methods[]= {
    { "__call", _wrap_Vector3LengthCompare___call},
    {0,0}
};
static swig_lua_method swig_Vector3LengthCompare_meta[] = {
    { "__call", _wrap_Vector3LengthCompare___call},
    {0,0}
};

static swig_lua_attribute swig_Vector3LengthCompare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector3LengthCompare_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector3LengthCompare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector3LengthCompare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector3LengthCompare_Sf_SwigStatic = {
    "Vector3LengthCompare",
    swig_Vector3LengthCompare_Sf_SwigStatic_methods,
    swig_Vector3LengthCompare_Sf_SwigStatic_attributes,
    swig_Vector3LengthCompare_Sf_SwigStatic_constants,
    swig_Vector3LengthCompare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector3LengthCompare_bases[] = {0};
static const char *swig_Vector3LengthCompare_base_names[] = {0};
static swig_lua_class _wrap_class_Vector3LengthCompare = { "Vector3LengthCompare", "Vector3LengthCompare", &SWIGTYPE_p_Mezzanine__Vector3LengthCompare,_proxy__wrap_new_Vector3LengthCompare, swig_delete_Vector3LengthCompare, swig_Vector3LengthCompare_methods, swig_Vector3LengthCompare_attributes, &swig_Vector3LengthCompare_Sf_SwigStatic, swig_Vector3LengthCompare_meta, swig_Vector3LengthCompare_bases, swig_Vector3LengthCompare_base_names };

static int _wrap___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator +",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator +",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__add",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator +((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator -",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator -",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__sub",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator -((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator *",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator *",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__mul",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator *((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  btVector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator /",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator /",1,"btVector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btVector3,0))){
    SWIG_fail_ptr("__div",1,SWIGTYPE_p_btVector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator /((btVector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator +",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator +",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator +",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__add",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__add",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator +((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___add__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator +(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator +(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator -",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator -",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator -",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__sub",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__sub",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator -((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___sub__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator -(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator -(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator *",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator *",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__mul",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator *((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___mul__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator *(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator *(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::operator /",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::operator /",1,"Ogre::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::operator /",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector3,0))){
    SWIG_fail_ptr("__div",1,SWIGTYPE_p_Ogre__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("__div",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::operator /((Ogre::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btVector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___div__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap___div__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function '__div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::operator /(btVector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::operator /(Ogre::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_X_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::X",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::X",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_X_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::X",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_X_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Y",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Y",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Y_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Y",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Y_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Z_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Z",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Z",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Z_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Z_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Z",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Z_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->Z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_W_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::W",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::W",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::W",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_W_set",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->W = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_W_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::W",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::W",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_W_get",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real) ((arg1)->W);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",0,0)
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Quaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Quaternion &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Quaternion &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Real temp4 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",4,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  temp4=(Mezzanine::Real)lua_tonumber(L,4); arg4=&temp4;
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Real const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Vector3 const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Real const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Matrix3x3 *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Matrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Matrix3x3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Matrix3x3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Matrix3x3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Quaternion",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  btQuaternion *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_btQuaternion);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((btQuaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Quaternion *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((Ogre::Quaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  XML::Node *arg1 = 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Quaternion",1,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_XML__Node);
  }
  
  result = (Mezzanine::Quaternion *)new Mezzanine::Quaternion((XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Matrix3x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_8(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_9(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_10(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Quaternion__SWIG_4(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Quaternion__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::Quaternion()\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Quaternion &&)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Real const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Real const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Matrix3x3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Quaternion::Quaternion(btQuaternion const &)\n"
    "    Mezzanine::Quaternion::Quaternion(Ogre::Quaternion const &)\n"
    "    Mezzanine::Quaternion::Quaternion(XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_SetIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetIdentity",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetIdentity",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real *arg4 = 0 ;
  Mezzanine::Real *arg5 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  Mezzanine::Real temp4 ;
  Mezzanine::Real temp5 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetValues",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",3,"Mezzanine::Real const &");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",4,"Mezzanine::Real const &");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Quaternion::SetValues",5,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetValues",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  temp4=(Mezzanine::Real)lua_tonumber(L,4); arg4=&temp4;
  temp5=(Mezzanine::Real)lua_tonumber(L,5); arg5=&temp5;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3,(Mezzanine::Real const &)*arg4,(Mezzanine::Real const &)*arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromAxisAngle(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromAxisAngle",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisAngle",1,"Mezzanine::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisAngle",2,"Mezzanine::Real const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisAngle",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisAngle",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisAngle",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetFromAxisAngle((Mezzanine::Real const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromMatrix3x3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Matrix3x3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromMatrix3x3",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromMatrix3x3",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromMatrix3x3",2,"Mezzanine::Matrix3x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromMatrix3x3",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Matrix3x3,0))){
    SWIG_fail_ptr("Quaternion_SetFromMatrix3x3",2,SWIGTYPE_p_Mezzanine__Matrix3x3);
  }
  
  (arg1)->SetFromMatrix3x3((Mezzanine::Matrix3x3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromAxes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromAxes",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",3,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxes",4,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxes",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetFromAxes((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_SetFromAxisToZ(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::SetFromAxisToZ",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisToZ",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisToZ",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::SetFromAxisToZ",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisToZ",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisToZ",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_SetFromAxisToZ",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetFromAxisToZ((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_ConvertToAngleAxis(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ConvertToAngleAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ConvertToAngleAxis",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ConvertToAngleAxis",2,"Mezzanine::Real &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Quaternion::ConvertToAngleAxis",3,"Mezzanine::Vector3 &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ConvertToAngleAxis",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Quaternion_ConvertToAngleAxis",2,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion_ConvertToAngleAxis",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  ((Mezzanine::Quaternion const *)arg1)->ConvertToAngleAxis(*arg2,*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_DotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::DotProduct",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::DotProduct",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_DotProduct",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_DotProduct",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->DotProduct((Mezzanine::Quaternion const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Length(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Length",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Length",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_LengthSqrd(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::LengthSqrd",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::LengthSqrd",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_LengthSqrd",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Quaternion const *)arg1)->LengthSqrd();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::Normalize",1,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_Normalize",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Quaternion *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetNormalizedCopy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetNormalizedCopy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetNormalizedCopy",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetNormalizedCopy",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetNormalizedCopy();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetInverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetInverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetInverse",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetInverse",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetInverse();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetBulletQuaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Boole arg2 ;
  btQuaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetBulletQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetBulletQuaternion",1,"Mezzanine::Quaternion const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::GetBulletQuaternion",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetBulletQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Mezzanine::Quaternion const *)arg1)->GetBulletQuaternion(arg2);
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetBulletQuaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetBulletQuaternion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetBulletQuaternion",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetBulletQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetBulletQuaternion();
  {
    btQuaternion * resultptr = new btQuaternion((const btQuaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btQuaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetBulletQuaternion(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Quaternion_GetBulletQuaternion__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_GetBulletQuaternion__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_GetBulletQuaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::GetBulletQuaternion(Mezzanine::Boole) const\n"
    "    Mezzanine::Quaternion::GetBulletQuaternion() const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_ExtractBulletQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ExtractBulletQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractBulletQuaternion",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractBulletQuaternion",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractBulletQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractBulletQuaternion",2,SWIGTYPE_p_btQuaternion);
  }
  
  (arg1)->ExtractBulletQuaternion((btQuaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetOgreQuaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Boole arg2 ;
  Ogre::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetOgreQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetOgreQuaternion",1,"Mezzanine::Quaternion const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::GetOgreQuaternion",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetOgreQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = ((Mezzanine::Quaternion const *)arg1)->GetOgreQuaternion(arg2);
  {
    Ogre::Quaternion * resultptr = new Ogre::Quaternion((const Ogre::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetOgreQuaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetOgreQuaternion",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::GetOgreQuaternion",1,"Mezzanine::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_GetOgreQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->GetOgreQuaternion();
  {
    Ogre::Quaternion * resultptr = new Ogre::Quaternion((const Ogre::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetOgreQuaternion(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Quaternion_GetOgreQuaternion__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion_GetOgreQuaternion__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion_GetOgreQuaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::GetOgreQuaternion(Mezzanine::Boole) const\n"
    "    Mezzanine::Quaternion::GetOgreQuaternion() const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion_ExtractOgreQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ExtractOgreQuaternion",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractOgreQuaternion",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ExtractOgreQuaternion",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractOgreQuaternion",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ExtractOgreQuaternion",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  (arg1)->ExtractOgreQuaternion((Ogre::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___div(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator /",1,"Mezzanine::Quaternion const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator /",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___div",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Quaternion const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((Ogre::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator +",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___add",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___add",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator +((btQuaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___add__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___add__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator +(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator +(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator +(btQuaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___sub__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___sub__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((Ogre::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___sub__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator -",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___sub",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator -((btQuaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___sub(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___sub__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___sub__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___sub__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___sub'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator -(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator -(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator -(btQuaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Ogre::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((btQuaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator *",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Quaternion const *)arg1)->operator *((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Quaternion___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator *(Mezzanine::Real const &) const\n"
    "    Mezzanine::Quaternion::operator *(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator *(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator *(btQuaternion const &) const\n"
    "    Mezzanine::Quaternion::operator *(Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator ==((Mezzanine::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Ogre::Quaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",2,"Ogre::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_Ogre__Quaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator ==((Ogre::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  btQuaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator ==",2,"btQuaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btQuaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_btQuaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator ==((btQuaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___eq__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_btQuaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Quaternion___eq__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Quaternion___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Quaternion::operator ==(Mezzanine::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator ==(Ogre::Quaternion const &) const\n"
    "    Mezzanine::Quaternion::operator ==(btQuaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::operator <=",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::operator <=",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___le",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___le",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Quaternion const *)arg1)->operator <=((Mezzanine::Quaternion const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoSerialize",1,"Mezzanine::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Quaternion_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Quaternion const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Quaternion::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoDeSerialize",1,"Mezzanine::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Quaternion::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Quaternion_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Quaternion::GetSerializableName",0,0)
  result = Mezzanine::Quaternion::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quaternion(void *obj) {
Mezzanine::Quaternion *arg1 = (Mezzanine::Quaternion *) obj;
delete arg1;
}
static int _proxy__wrap_new_Quaternion(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Quaternion);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Quaternion_attributes[] = {
    { "X", _wrap_Quaternion_X_get, _wrap_Quaternion_X_set },
    { "Y", _wrap_Quaternion_Y_get, _wrap_Quaternion_Y_set },
    { "Z", _wrap_Quaternion_Z_get, _wrap_Quaternion_Z_set },
    { "W", _wrap_Quaternion_W_get, _wrap_Quaternion_W_set },
    {0,0,0}
};
static swig_lua_method swig_Quaternion_methods[]= {
    { "SetIdentity", _wrap_Quaternion_SetIdentity},
    { "SetValues", _wrap_Quaternion_SetValues},
    { "SetFromAxisAngle", _wrap_Quaternion_SetFromAxisAngle},
    { "SetFromMatrix3x3", _wrap_Quaternion_SetFromMatrix3x3},
    { "SetFromAxes", _wrap_Quaternion_SetFromAxes},
    { "SetFromAxisToZ", _wrap_Quaternion_SetFromAxisToZ},
    { "ConvertToAngleAxis", _wrap_Quaternion_ConvertToAngleAxis},
    { "DotProduct", _wrap_Quaternion_DotProduct},
    { "Length", _wrap_Quaternion_Length},
    { "LengthSqrd", _wrap_Quaternion_LengthSqrd},
    { "Normalize", _wrap_Quaternion_Normalize},
    { "GetNormalizedCopy", _wrap_Quaternion_GetNormalizedCopy},
    { "GetInverse", _wrap_Quaternion_GetInverse},
    { "GetBulletQuaternion", _wrap_Quaternion_GetBulletQuaternion},
    { "ExtractBulletQuaternion", _wrap_Quaternion_ExtractBulletQuaternion},
    { "GetOgreQuaternion", _wrap_Quaternion_GetOgreQuaternion},
    { "ExtractOgreQuaternion", _wrap_Quaternion_ExtractOgreQuaternion},
    { "__div", _wrap_Quaternion___div},
    { "__add", _wrap_Quaternion___add},
    { "__sub", _wrap_Quaternion___sub},
    { "__mul", _wrap_Quaternion___mul},
    { "__eq", _wrap_Quaternion___eq},
    { "__le", _wrap_Quaternion___le},
    { "ProtoSerialize", _wrap_Quaternion_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Quaternion_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_Quaternion_meta[] = {
    { "__div", _wrap_Quaternion___div},
    { "__add", _wrap_Quaternion___add},
    { "__sub", _wrap_Quaternion___sub},
    { "__mul", _wrap_Quaternion___mul},
    { "__eq", _wrap_Quaternion___eq},
    { "__le", _wrap_Quaternion___le},
    {0,0}
};

static swig_lua_attribute swig_Quaternion_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Quaternion_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Quaternion_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Quaternion_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Quaternion_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Quaternion_Sf_SwigStatic = {
    "Quaternion",
    swig_Quaternion_Sf_SwigStatic_methods,
    swig_Quaternion_Sf_SwigStatic_attributes,
    swig_Quaternion_Sf_SwigStatic_constants,
    swig_Quaternion_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Quaternion_bases[] = {0};
static const char *swig_Quaternion_base_names[] = {0};
static swig_lua_class _wrap_class_Quaternion = { "Quaternion", "Quaternion", &SWIGTYPE_p_Mezzanine__Quaternion,_proxy__wrap_new_Quaternion, swig_delete_Quaternion, swig_Quaternion_methods, swig_Quaternion_attributes, &swig_Quaternion_Sf_SwigStatic, swig_Quaternion_meta, swig_Quaternion_bases, swig_Quaternion_base_names };

static int _wrap_Transform_Location_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Location",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Location",1,"Mezzanine::Transform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Transform::Location",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Location_set",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Transform_Location_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Location = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_Location_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Location",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Location",1,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Location_get",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Location);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_Rotation_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Quaternion *arg2 = (Mezzanine::Quaternion *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Rotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Rotation",1,"Mezzanine::Transform *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Transform::Rotation",2,"Mezzanine::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Rotation_set",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Transform_Rotation_set",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  if (arg1) (arg1)->Rotation = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_Rotation_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Quaternion *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Rotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::Rotation",1,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_Rotation_get",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Quaternion *)& ((arg1)->Rotation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",0,0)
  result = (Mezzanine::Transform *)new Mezzanine::Transform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Transform const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"Mezzanine::Transform &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Transform &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::Transform",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("new_Transform",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Quaternion const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  btTransform *arg1 = 0 ;
  Mezzanine::Transform *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::Transform",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Transform::Transform",1,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("new_Transform",1,SWIGTYPE_p_btTransform);
  }
  
  result = (Mezzanine::Transform *)new Mezzanine::Transform((btTransform const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Transform(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Transform__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Transform__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Transform__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Transform__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_btTransform, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Transform__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Transform__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Transform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Transform::Transform()\n"
    "    Mezzanine::Transform::Transform(Mezzanine::Transform const &)\n"
    "    Mezzanine::Transform::Transform(Mezzanine::Transform &&)\n"
    "    Mezzanine::Transform::Transform(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Transform::Transform(Mezzanine::Vector3 const &,Mezzanine::Quaternion const &)\n"
    "    Mezzanine::Transform::Transform(btTransform const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Transform_SetIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::SetIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::SetIdentity",1,"Mezzanine::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_SetIdentity",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_GetBulletTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  btTransform result;
  
  SWIG_check_num_args("Mezzanine::Transform::GetBulletTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::GetBulletTransform",1,"Mezzanine::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_GetBulletTransform",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = ((Mezzanine::Transform const *)arg1)->GetBulletTransform();
  {
    btTransform * resultptr = new btTransform((const btTransform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_btTransform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_ExtractBulletTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  btTransform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::ExtractBulletTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::ExtractBulletTransform",1,"Mezzanine::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::ExtractBulletTransform",2,"btTransform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_ExtractBulletTransform",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_btTransform,0))){
    SWIG_fail_ptr("Transform_ExtractBulletTransform",2,SWIGTYPE_p_btTransform);
  }
  
  (arg1)->ExtractBulletTransform((btTransform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::ProtoSerialize",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::ProtoSerialize",2,"XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Transform_ProtoSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  ((Mezzanine::Transform const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Transform::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::ProtoDeSerialize",1,"Mezzanine::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::ProtoDeSerialize",2,"XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_XML__Node,0))){
    SWIG_fail_ptr("Transform_ProtoDeSerialize",2,SWIGTYPE_p_XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Transform::GetSerializableName",0,0)
  result = Mezzanine::Transform::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___sub(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator -",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator -",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___sub",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___sub",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = ((Mezzanine::Transform const *)arg1)->operator -((Mezzanine::Transform const &)*arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___add(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator +",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator +",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___add",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___add",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = ((Mezzanine::Transform const *)arg1)->operator +((Mezzanine::Transform const &)*arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___mul(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator *",1,"Mezzanine::Transform const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator *",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___mul",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = ((Mezzanine::Transform const *)arg1)->operator *(arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___div(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator /",1,"Mezzanine::Transform const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator /",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___div",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = ((Mezzanine::Transform const *)arg1)->operator /(arg2);
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator ==",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator ==",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___eq",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___eq",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Transform const *)arg1)->operator ==((Mezzanine::Transform const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Transform *arg1 = (Mezzanine::Transform *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Transform::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Transform::operator <=",1,"Mezzanine::Transform const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Transform::operator <=",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___le",1,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Transform___le",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Transform const *)arg1)->operator <=((Mezzanine::Transform const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Transform(void *obj) {
Mezzanine::Transform *arg1 = (Mezzanine::Transform *) obj;
delete arg1;
}
static int _proxy__wrap_new_Transform(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Transform);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Transform_attributes[] = {
    { "Location", _wrap_Transform_Location_get, _wrap_Transform_Location_set },
    { "Rotation", _wrap_Transform_Rotation_get, _wrap_Transform_Rotation_set },
    {0,0,0}
};
static swig_lua_method swig_Transform_methods[]= {
    { "SetIdentity", _wrap_Transform_SetIdentity},
    { "GetBulletTransform", _wrap_Transform_GetBulletTransform},
    { "ExtractBulletTransform", _wrap_Transform_ExtractBulletTransform},
    { "ProtoSerialize", _wrap_Transform_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Transform_ProtoDeSerialize},
    { "__sub", _wrap_Transform___sub},
    { "__add", _wrap_Transform___add},
    { "__mul", _wrap_Transform___mul},
    { "__div", _wrap_Transform___div},
    { "__eq", _wrap_Transform___eq},
    { "__le", _wrap_Transform___le},
    {0,0}
};
static swig_lua_method swig_Transform_meta[] = {
    { "__sub", _wrap_Transform___sub},
    { "__add", _wrap_Transform___add},
    { "__mul", _wrap_Transform___mul},
    { "__div", _wrap_Transform___div},
    { "__eq", _wrap_Transform___eq},
    { "__le", _wrap_Transform___le},
    {0,0}
};

static swig_lua_attribute swig_Transform_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Transform_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Transform_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Transform_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Transform_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Transform_Sf_SwigStatic = {
    "Transform",
    swig_Transform_Sf_SwigStatic_methods,
    swig_Transform_Sf_SwigStatic_attributes,
    swig_Transform_Sf_SwigStatic_constants,
    swig_Transform_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Transform_bases[] = {0};
static const char *swig_Transform_base_names[] = {0};
static swig_lua_class _wrap_class_Transform = { "Transform", "Transform", &SWIGTYPE_p_Mezzanine__Transform,_proxy__wrap_new_Transform, swig_delete_Transform, swig_Transform_methods, swig_Transform_attributes, &swig_Transform_Sf_SwigStatic, swig_Transform_meta, swig_Transform_bases, swig_Transform_base_names };

static int _wrap_TransformableObject_SetTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetTransform",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetTransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetTransform",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("TransformableObject_SetTransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetTransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Quaternion *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetTransform",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetTransform",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetTransform",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::SetTransform",3,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetTransform",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_SetTransform",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_SetTransform",3,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetTransform((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Quaternion const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetTransform(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_SetTransform__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_TransformableObject_SetTransform__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_SetTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::SetTransform(Mezzanine::Transform const &)\n"
    "    Mezzanine::TransformableObject::SetTransform(Mezzanine::Vector3 const &,Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_GetTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::GetTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::GetTransform",1,"Mezzanine::TransformableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_GetTransform",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->GetTransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::GetLocation",1,"Mezzanine::TransformableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_GetLocation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::TransformableObject::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TransformableObject_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::TransformableObject::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::GetOrientation",1,"Mezzanine::TransformableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_GetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::GetScale",1,"Mezzanine::TransformableObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_GetScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Translate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_Translate__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_Translate__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_Yaw(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Yaw",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Yaw",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Pitch(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Pitch",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Pitch",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Roll(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Roll",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Roll",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_Rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableObject_Rotate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::TransformableObject::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",1,"Mezzanine::TransformableObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",1,"Mezzanine::TransformableObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableObject::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableObject_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableObject::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertLocalToGlobal((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertGlobalToLocal((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertLocalToGlobalNoScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertLocalToGlobalNoScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobalNoScale",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobalNoScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobalNoScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobalNoScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertLocalToGlobalNoScale((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertGlobalToLocalNoScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertGlobalToLocalNoScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocalNoScale",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocalNoScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocalNoScale",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocalNoScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertGlobalToLocalNoScale((Mezzanine::Vector3 const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertLocalToGlobal",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_ConvertLocalToGlobal",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertLocalToGlobal((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertLocalToGlobal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertLocalToGlobal__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_ConvertLocalToGlobal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::ConvertLocalToGlobal(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::TransformableObject::ConvertLocalToGlobal(Mezzanine::Quaternion const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",1,"Mezzanine::TransformableObject const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableObject::ConvertGlobalToLocal",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableObject,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",1,SWIGTYPE_p_Mezzanine__TransformableObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableObject_ConvertGlobalToLocal",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = ((Mezzanine::TransformableObject const *)arg1)->ConvertGlobalToLocal((Mezzanine::Quaternion const &)*arg2);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableObject_ConvertGlobalToLocal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableObject_ConvertGlobalToLocal__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableObject_ConvertGlobalToLocal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableObject::ConvertGlobalToLocal(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::TransformableObject::ConvertGlobalToLocal(Mezzanine::Quaternion const &) const\n");
  lua_error(L);return 0;
}


static void swig_delete_TransformableObject(void *obj) {
Mezzanine::TransformableObject *arg1 = (Mezzanine::TransformableObject *) obj;
delete arg1;
}
static swig_lua_attribute swig_TransformableObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransformableObject_methods[]= {
    { "SetTransform", _wrap_TransformableObject_SetTransform},
    { "GetTransform", _wrap_TransformableObject_GetTransform},
    { "SetLocation", _wrap_TransformableObject_SetLocation},
    { "GetLocation", _wrap_TransformableObject_GetLocation},
    { "SetOrientation", _wrap_TransformableObject_SetOrientation},
    { "GetOrientation", _wrap_TransformableObject_GetOrientation},
    { "SetScale", _wrap_TransformableObject_SetScale},
    { "GetScale", _wrap_TransformableObject_GetScale},
    { "Translate", _wrap_TransformableObject_Translate},
    { "Yaw", _wrap_TransformableObject_Yaw},
    { "Pitch", _wrap_TransformableObject_Pitch},
    { "Roll", _wrap_TransformableObject_Roll},
    { "Rotate", _wrap_TransformableObject_Rotate},
    { "Scale", _wrap_TransformableObject_Scale},
    { "ConvertLocalToGlobalNoScale", _wrap_TransformableObject_ConvertLocalToGlobalNoScale},
    { "ConvertGlobalToLocalNoScale", _wrap_TransformableObject_ConvertGlobalToLocalNoScale},
    { "ConvertLocalToGlobal", _wrap_TransformableObject_ConvertLocalToGlobal},
    { "ConvertGlobalToLocal", _wrap_TransformableObject_ConvertGlobalToLocal},
    {0,0}
};
static swig_lua_method swig_TransformableObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TransformableObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransformableObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransformableObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransformableObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransformableObject_Sf_SwigStatic = {
    "TransformableObject",
    swig_TransformableObject_Sf_SwigStatic_methods,
    swig_TransformableObject_Sf_SwigStatic_attributes,
    swig_TransformableObject_Sf_SwigStatic_constants,
    swig_TransformableObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransformableObject_bases[] = {0};
static const char *swig_TransformableObject_base_names[] = {0};
static swig_lua_class _wrap_class_TransformableObject = { "TransformableObject", "TransformableObject", &SWIGTYPE_p_Mezzanine__TransformableObject,0, swig_delete_TransformableObject, swig_TransformableObject_methods, swig_TransformableObject_attributes, &swig_TransformableObject_Sf_SwigStatic, swig_TransformableObject_meta, swig_TransformableObject_bases, swig_TransformableObject_base_names };

static int _wrap_TransformableChildObject_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetLocation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::GetLocation",1,"Mezzanine::TransformableChildObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_GetLocation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  result = ((Mezzanine::TransformableChildObject const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableChildObject_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TransformableChildObject_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::TransformableChildObject::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::GetOrientation",1,"Mezzanine::TransformableChildObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_GetOrientation",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  result = ((Mezzanine::TransformableChildObject const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_SetScale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::GetScale",1,"Mezzanine::TransformableChildObject const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_GetScale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  result = ((Mezzanine::TransformableChildObject const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::TransformSpace arg5 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",5,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 5);
  (arg1)->Translate(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Translate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Translate(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_Translate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Translate__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_Translate__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_TransformableChildObject_Translate__SWIG_2(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Vector3 const &,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Yaw__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Yaw",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Yaw",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Yaw(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Yaw__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Yaw",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Yaw(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransformableChildObject_Yaw__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Yaw__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Yaw'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Yaw(Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Yaw(Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Pitch__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Pitch",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Pitch",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Pitch(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Pitch__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Pitch",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Pitch(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransformableChildObject_Pitch__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Pitch__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Pitch'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Pitch(Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Pitch(Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Roll__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Roll",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Roll",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Roll(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Roll__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Roll",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Roll(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_TransformableChildObject_Roll__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Roll__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Roll'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Roll(Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Roll(Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  Mezzanine::TransformSpace arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",4,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 4);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  Mezzanine::TransformSpace arg3 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Quaternion const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",3,"Mezzanine::TransformSpace const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  arg3 = (Mezzanine::TransformSpace const)(int)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("TransformableChildObject_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Rotate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_Rotate__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Rotate__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_TransformableChildObject_Rotate__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_Rotate__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Quaternion const &,Mezzanine::TransformSpace const)\n"
    "    Mezzanine::TransformableChildObject::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_TransformableChildObject_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("TransformableChildObject_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::TransformableChildObject::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",1,"Mezzanine::TransformableChildObject *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::TransformableChildObject::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TransformableChildObject,0))){
    SWIG_fail_ptr("TransformableChildObject_Scale",1,SWIGTYPE_p_Mezzanine__TransformableChildObject);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TransformableChildObject_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_TransformableChildObject_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__TransformableChildObject, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_TransformableChildObject_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'TransformableChildObject_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::TransformableChildObject::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::TransformableChildObject::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static void swig_delete_TransformableChildObject(void *obj) {
Mezzanine::TransformableChildObject *arg1 = (Mezzanine::TransformableChildObject *) obj;
delete arg1;
}
static swig_lua_attribute swig_TransformableChildObject_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TransformableChildObject_methods[]= {
    { "SetLocation", _wrap_TransformableChildObject_SetLocation},
    { "GetLocation", _wrap_TransformableChildObject_GetLocation},
    { "SetOrientation", _wrap_TransformableChildObject_SetOrientation},
    { "GetOrientation", _wrap_TransformableChildObject_GetOrientation},
    { "SetScale", _wrap_TransformableChildObject_SetScale},
    { "GetScale", _wrap_TransformableChildObject_GetScale},
    { "Translate", _wrap_TransformableChildObject_Translate},
    { "Yaw", _wrap_TransformableChildObject_Yaw},
    { "Pitch", _wrap_TransformableChildObject_Pitch},
    { "Roll", _wrap_TransformableChildObject_Roll},
    { "Rotate", _wrap_TransformableChildObject_Rotate},
    { "Scale", _wrap_TransformableChildObject_Scale},
    {0,0}
};
static swig_lua_method swig_TransformableChildObject_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TransformableChildObject_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TransformableChildObject_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TransformableChildObject_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TransformableChildObject_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TransformableChildObject_Sf_SwigStatic = {
    "TransformableChildObject",
    swig_TransformableChildObject_Sf_SwigStatic_methods,
    swig_TransformableChildObject_Sf_SwigStatic_attributes,
    swig_TransformableChildObject_Sf_SwigStatic_constants,
    swig_TransformableChildObject_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TransformableChildObject_bases[] = {0};
static const char *swig_TransformableChildObject_base_names[] = {0};
static swig_lua_class _wrap_class_TransformableChildObject = { "TransformableChildObject", "TransformableChildObject", &SWIGTYPE_p_Mezzanine__TransformableChildObject,0, swig_delete_TransformableChildObject, swig_TransformableChildObject_methods, swig_TransformableChildObject_attributes, &swig_TransformableChildObject_Sf_SwigStatic, swig_TransformableChildObject_meta, swig_TransformableChildObject_bases, swig_TransformableChildObject_base_names };

static int _wrap_EntityFactory_GetTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityFactory *arg1 = (Mezzanine::EntityFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::EntityFactory::GetTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityFactory::GetTypeName",1,"Mezzanine::EntityFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityFactory,0))){
    SWIG_fail_ptr("EntityFactory_GetTypeName",1,SWIGTYPE_p_Mezzanine__EntityFactory);
  }
  
  result = ((Mezzanine::EntityFactory const *)arg1)->GetTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityFactory_CreateEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityFactory *arg1 = (Mezzanine::EntityFactory *) 0 ;
  Mezzanine::EntityID *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairMap *arg4 = 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityFactory::CreateEntity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityFactory::CreateEntity",1,"Mezzanine::EntityFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityFactory::CreateEntity",2,"Mezzanine::EntityID const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EntityFactory::CreateEntity",3,"Mezzanine::World *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::EntityFactory::CreateEntity",4,"Mezzanine::NameValuePairMap const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityFactory,0))){
    SWIG_fail_ptr("EntityFactory_CreateEntity",1,SWIGTYPE_p_Mezzanine__EntityFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityFactory_CreateEntity",2,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("EntityFactory_CreateEntity",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("EntityFactory_CreateEntity",4,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (Mezzanine::Entity *)(arg1)->CreateEntity((Mezzanine::EntityID const &)*arg2,arg3,(Mezzanine::NameValuePairMap const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityFactory_CreateEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityFactory *arg1 = (Mezzanine::EntityFactory *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityFactory::CreateEntity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityFactory::CreateEntity",1,"Mezzanine::EntityFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityFactory::CreateEntity",2,"Mezzanine::XML::Node const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EntityFactory::CreateEntity",3,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityFactory,0))){
    SWIG_fail_ptr("EntityFactory_CreateEntity",1,SWIGTYPE_p_Mezzanine__EntityFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityFactory_CreateEntity",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("EntityFactory_CreateEntity",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Entity *)(arg1)->CreateEntity((Mezzanine::XML::Node const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityFactory_CreateEntity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EntityFactory_CreateEntity__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityID, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EntityFactory_CreateEntity__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityFactory_CreateEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityFactory::CreateEntity(Mezzanine::EntityID const &,Mezzanine::World *,Mezzanine::NameValuePairMap const &)\n"
    "    Mezzanine::EntityFactory::CreateEntity(Mezzanine::XML::Node const &,Mezzanine::World *)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityFactory_DestroyEntity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityFactory *arg1 = (Mezzanine::EntityFactory *) 0 ;
  Mezzanine::Entity *arg2 = (Mezzanine::Entity *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityFactory::DestroyEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityFactory::DestroyEntity",1,"Mezzanine::EntityFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EntityFactory::DestroyEntity",2,"Mezzanine::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityFactory,0))){
    SWIG_fail_ptr("EntityFactory_DestroyEntity",1,SWIGTYPE_p_Mezzanine__EntityFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("EntityFactory_DestroyEntity",2,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  (arg1)->DestroyEntity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityFactory(void *obj) {
Mezzanine::EntityFactory *arg1 = (Mezzanine::EntityFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_EntityFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityFactory_methods[]= {
    { "GetTypeName", _wrap_EntityFactory_GetTypeName},
    { "CreateEntity", _wrap_EntityFactory_CreateEntity},
    { "DestroyEntity", _wrap_EntityFactory_DestroyEntity},
    {0,0}
};
static swig_lua_method swig_EntityFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntityFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntityFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EntityFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityFactory_Sf_SwigStatic = {
    "EntityFactory",
    swig_EntityFactory_Sf_SwigStatic_methods,
    swig_EntityFactory_Sf_SwigStatic_attributes,
    swig_EntityFactory_Sf_SwigStatic_constants,
    swig_EntityFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityFactory_bases[] = {0};
static const char *swig_EntityFactory_base_names[] = {0};
static swig_lua_class _wrap_class_EntityFactory = { "EntityFactory", "EntityFactory", &SWIGTYPE_p_Mezzanine__EntityFactory,0, swig_delete_EntityFactory, swig_EntityFactory_methods, swig_EntityFactory_attributes, &swig_EntityFactory_Sf_SwigStatic, swig_EntityFactory_meta, swig_EntityFactory_bases, swig_EntityFactory_base_names };

static int _wrap_EntityID_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = (Mezzanine::EntityID *) 0 ;
  Mezzanine::EntityID::IDType arg2 ;
  
  SWIG_check_num_args("Mezzanine::EntityID::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityID::ID",1,"Mezzanine::EntityID *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityID::ID",2,"Mezzanine::EntityID::IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityID_ID_set",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  arg2 = (Mezzanine::EntityID::IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityID_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = (Mezzanine::EntityID *) 0 ;
  Mezzanine::EntityID::IDType result;
  
  SWIG_check_num_args("Mezzanine::EntityID::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityID::ID",1,"Mezzanine::EntityID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityID_ID_get",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  result = (Mezzanine::EntityID::IDType) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityID__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityID::EntityID",0,0)
  result = (Mezzanine::EntityID *)new Mezzanine::EntityID();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityID__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID::IDType arg1 ;
  Mezzanine::EntityID *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityID::EntityID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::EntityID::EntityID",1,"Mezzanine::EntityID::IDType const");
  arg1 = (Mezzanine::EntityID::IDType const)lua_tonumber(L, 1);
  result = (Mezzanine::EntityID *)new Mezzanine::EntityID(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityID__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = 0 ;
  Mezzanine::EntityID *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityID::EntityID",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::EntityID::EntityID",1,"Mezzanine::EntityID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("new_EntityID",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  result = (Mezzanine::EntityID *)new Mezzanine::EntityID((Mezzanine::EntityID const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityID__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = 0 ;
  Mezzanine::EntityID *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityID::EntityID",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::EntityID::EntityID",1,"Mezzanine::EntityID &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("new_EntityID",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  result = (Mezzanine::EntityID *)new Mezzanine::EntityID((Mezzanine::EntityID &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityID(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EntityID__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EntityID__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EntityID__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_EntityID__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_EntityID'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityID::EntityID()\n"
    "    Mezzanine::EntityID::EntityID(Mezzanine::EntityID::IDType const)\n"
    "    Mezzanine::EntityID::EntityID(Mezzanine::EntityID const &)\n"
    "    Mezzanine::EntityID::EntityID(Mezzanine::EntityID &&)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityID_IsInvalid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = (Mezzanine::EntityID *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EntityID::IsInvalid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityID::IsInvalid",1,"Mezzanine::EntityID const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityID_IsInvalid",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EntityID const *)arg1)->IsInvalid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityID___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = (Mezzanine::EntityID *) 0 ;
  Mezzanine::EntityID *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EntityID::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityID::operator ==",1,"Mezzanine::EntityID const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityID::operator ==",2,"Mezzanine::EntityID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityID___eq",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityID___eq",2,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EntityID const *)arg1)->operator ==((Mezzanine::EntityID const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityID___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = (Mezzanine::EntityID *) 0 ;
  Mezzanine::EntityID *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EntityID::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityID::operator <",1,"Mezzanine::EntityID const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityID::operator <",2,"Mezzanine::EntityID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityID___lt",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityID___lt",2,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EntityID const *)arg1)->operator <((Mezzanine::EntityID const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityID_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = (Mezzanine::EntityID *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityID::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityID::ProtoSerialize",1,"Mezzanine::EntityID const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityID::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityID_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityID_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::EntityID const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityID_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = (Mezzanine::EntityID *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityID::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityID::ProtoDeSerialize",1,"Mezzanine::EntityID *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityID::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityID_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityID_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityID_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::EntityID::GetSerializableName",0,0)
  result = Mezzanine::EntityID::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityID(void *obj) {
Mezzanine::EntityID *arg1 = (Mezzanine::EntityID *) obj;
delete arg1;
}
static int _proxy__wrap_new_EntityID(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EntityID);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EntityID_attributes[] = {
    { "ID", _wrap_EntityID_ID_get, _wrap_EntityID_ID_set },
    {0,0,0}
};
static swig_lua_method swig_EntityID_methods[]= {
    { "IsInvalid", _wrap_EntityID_IsInvalid},
    { "__eq", _wrap_EntityID___eq},
    { "__lt", _wrap_EntityID___lt},
    { "ProtoSerialize", _wrap_EntityID_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_EntityID_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_EntityID_meta[] = {
    { "__eq", _wrap_EntityID___eq},
    { "__lt", _wrap_EntityID___lt},
    {0,0}
};

static swig_lua_attribute swig_EntityID_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntityID_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_STRING("InvalidID", "Mezzanine::EntityID::InvalidID")},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityID_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_EntityID_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_EntityID_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityID_Sf_SwigStatic = {
    "EntityID",
    swig_EntityID_Sf_SwigStatic_methods,
    swig_EntityID_Sf_SwigStatic_attributes,
    swig_EntityID_Sf_SwigStatic_constants,
    swig_EntityID_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityID_bases[] = {0};
static const char *swig_EntityID_base_names[] = {0};
static swig_lua_class _wrap_class_EntityID = { "EntityID", "EntityID", &SWIGTYPE_p_Mezzanine__EntityID,_proxy__wrap_new_EntityID, swig_delete_EntityID, swig_EntityID_methods, swig_EntityID_attributes, &swig_EntityID_Sf_SwigStatic, swig_EntityID_meta, swig_EntityID_bases, swig_EntityID_base_names };

static int _wrap_ComponentCompare(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::EntityComponent *arg2 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::ComponentCompare",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ComponentCompare",1,"Mezzanine::EntityComponent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::ComponentCompare",2,"Mezzanine::EntityComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("ComponentCompare",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("ComponentCompare",2,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  result = (Mezzanine::Boole)Mezzanine::ComponentCompare(arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Entity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Entity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::Entity",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_Entity",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Entity *)new Mezzanine::Entity(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Entity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Entity",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Entity::Entity",1,"Mezzanine::EntityID const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Entity::Entity",2,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("new_Entity",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_Entity",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Entity *)new Mezzanine::Entity((Mezzanine::EntityID const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Entity__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Entity",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Entity::Entity",1,"Mezzanine::XML::Node const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Entity::Entity",2,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_Entity",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_Entity",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Entity *)new Mezzanine::Entity((Mezzanine::XML::Node const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Entity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Entity__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Entity__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Entity__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Entity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Entity::Entity(Mezzanine::World *)\n"
    "    Mezzanine::Entity::Entity(Mezzanine::EntityID const &,Mezzanine::World *)\n"
    "    Mezzanine::Entity::Entity(Mezzanine::XML::Node const &,Mezzanine::World *)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_GetEntityType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::EntityType result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetEntityType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetEntityType",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetEntityType",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = (Mezzanine::EntityType)((Mezzanine::Entity const *)arg1)->GetEntityType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetEntityID(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::EntityID result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetEntityID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetEntityID",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetEntityID",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = ((Mezzanine::Entity const *)arg1)->GetEntityID();
  {
    Mezzanine::EntityID * resultptr = new Mezzanine::EntityID((const Mezzanine::EntityID &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__EntityID,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::GetWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetWorld",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetWorld",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = (Mezzanine::World *)((Mezzanine::Entity const *)arg1)->GetWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::Entity::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::SetName",1,"Mezzanine::Entity *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::Entity::SetName",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_SetName",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->SetName((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetName",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetName",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::Entity const *)arg1)->GetName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_IsInWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Entity::IsInWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::IsInWorld",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_IsInWorld",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Entity const *)arg1)->IsInWorld();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_IsStatic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Entity::IsStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::IsStatic",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_IsStatic",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Entity const *)arg1)->IsStatic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_AddComponent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::EntityComponent *arg2 = (Mezzanine::EntityComponent *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::AddComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::AddComponent",1,"Mezzanine::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Entity::AddComponent",2,"Mezzanine::EntityComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_AddComponent",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("Entity_AddComponent",2,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  (arg1)->AddComponent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_RemoveComponent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::EntityComponent *arg2 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::EntityComponent *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::RemoveComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::RemoveComponent",1,"Mezzanine::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Entity::RemoveComponent",2,"Mezzanine::EntityComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_RemoveComponent",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("Entity_RemoveComponent",2,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  result = (Mezzanine::EntityComponent *)(arg1)->RemoveComponent(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_RemoveAllComponentsOfType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::ComponentType arg2 ;
  SwigValueWrapper< std::vector< Mezzanine::EntityComponent * > > result;
  
  SWIG_check_num_args("Mezzanine::Entity::RemoveAllComponentsOfType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::RemoveAllComponentsOfType",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::RemoveAllComponentsOfType",2,"Mezzanine::ComponentType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_RemoveAllComponentsOfType",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::ComponentType const)(int)lua_tonumber(L, 2);
  result = (arg1)->RemoveAllComponentsOfType(arg2);
  {
    Mezzanine::Entity::ComponentContainer * resultptr = new Mezzanine::Entity::ComponentContainer((const Mezzanine::Entity::ComponentContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__EntityComponent_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_RemoveAllComponentsOfTypes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::ComponentType arg2 ;
  Mezzanine::ComponentType arg3 ;
  SwigValueWrapper< std::vector< Mezzanine::EntityComponent * > > result;
  
  SWIG_check_num_args("Mezzanine::Entity::RemoveAllComponentsOfTypes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::RemoveAllComponentsOfTypes",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::RemoveAllComponentsOfTypes",2,"Mezzanine::ComponentType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Entity::RemoveAllComponentsOfTypes",3,"Mezzanine::ComponentType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_RemoveAllComponentsOfTypes",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::ComponentType const)(int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::ComponentType const)(int)lua_tonumber(L, 3);
  result = (arg1)->RemoveAllComponentsOfTypes(arg2,arg3);
  {
    Mezzanine::Entity::ComponentContainer * resultptr = new Mezzanine::Entity::ComponentContainer((const Mezzanine::Entity::ComponentContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__EntityComponent_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_RemoveAllComponents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  SwigValueWrapper< std::vector< Mezzanine::EntityComponent * > > result;
  
  SWIG_check_num_args("Mezzanine::Entity::RemoveAllComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::RemoveAllComponents",1,"Mezzanine::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_RemoveAllComponents",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = (arg1)->RemoveAllComponents();
  {
    Mezzanine::Entity::ComponentContainer * resultptr = new Mezzanine::Entity::ComponentContainer((const Mezzanine::Entity::ComponentContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__EntityComponent_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetNumComponents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetNumComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetNumComponents",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetNumComponents",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::Entity const *)arg1)->GetNumComponents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetComponent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::EntityComponent *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::GetComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetComponent",1,"Mezzanine::Entity const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::GetComponent",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetComponent",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::EntityComponent *)((Mezzanine::Entity const *)arg1)->GetComponent(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetComponent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::ComponentType arg2 ;
  Mezzanine::Whole arg3 ;
  Mezzanine::EntityComponent *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::GetComponent",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetComponent",1,"Mezzanine::Entity const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::GetComponent",2,"Mezzanine::ComponentType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Entity::GetComponent",3,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetComponent",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::ComponentType const)(int)lua_tonumber(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole)lua_tonumber(L, 3);
  result = (Mezzanine::EntityComponent *)((Mezzanine::Entity const *)arg1)->GetComponent(arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetComponent__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::ComponentType arg2 ;
  Mezzanine::ComponentType arg3 ;
  Mezzanine::Whole arg4 ;
  Mezzanine::EntityComponent *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::GetComponent",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetComponent",1,"Mezzanine::Entity const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::GetComponent",2,"Mezzanine::ComponentType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Entity::GetComponent",3,"Mezzanine::ComponentType const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Entity::GetComponent",4,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetComponent",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::ComponentType const)(int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::ComponentType const)(int)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (Mezzanine::Whole)lua_tonumber(L, 4);
  result = (Mezzanine::EntityComponent *)((Mezzanine::Entity const *)arg1)->GetComponent(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetComponent(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Entity_GetComponent__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Entity_GetComponent__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Entity_GetComponent__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Entity_GetComponent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Entity::GetComponent(Mezzanine::Whole const) const\n"
    "    Mezzanine::Entity::GetComponent(Mezzanine::ComponentType const,Mezzanine::Whole) const\n"
    "    Mezzanine::Entity::GetComponent(Mezzanine::ComponentType const,Mezzanine::ComponentType const,Mezzanine::Whole) const\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_GetComponents__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Entity::ComponentContainer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::GetComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetComponents",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetComponents",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = (Mezzanine::Entity::ComponentContainer *) &((Mezzanine::Entity const *)arg1)->GetComponents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__EntityComponent_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetComponents__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::ComponentType arg2 ;
  SwigValueWrapper< std::vector< Mezzanine::EntityComponent * > > result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetComponents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetComponents",1,"Mezzanine::Entity const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::GetComponents",2,"Mezzanine::ComponentType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetComponents",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::ComponentType const)(int)lua_tonumber(L, 2);
  result = ((Mezzanine::Entity const *)arg1)->GetComponents(arg2);
  {
    Mezzanine::Entity::ComponentContainer * resultptr = new Mezzanine::Entity::ComponentContainer((const Mezzanine::Entity::ComponentContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__EntityComponent_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetComponents__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::ComponentType arg2 ;
  Mezzanine::ComponentType arg3 ;
  SwigValueWrapper< std::vector< Mezzanine::EntityComponent * > > result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetComponents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetComponents",1,"Mezzanine::Entity const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::GetComponents",2,"Mezzanine::ComponentType const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Entity::GetComponents",3,"Mezzanine::ComponentType const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetComponents",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::ComponentType const)(int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::ComponentType const)(int)lua_tonumber(L, 3);
  result = ((Mezzanine::Entity const *)arg1)->GetComponents(arg2,arg3);
  {
    Mezzanine::Entity::ComponentContainer * resultptr = new Mezzanine::Entity::ComponentContainer((const Mezzanine::Entity::ComponentContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__EntityComponent_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetComponents(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Entity_GetComponents__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Entity_GetComponents__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Entity_GetComponents__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Entity_GetComponents'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Entity::GetComponents() const\n"
    "    Mezzanine::Entity::GetComponents(Mezzanine::ComponentType const) const\n"
    "    Mezzanine::Entity::GetComponents(Mezzanine::ComponentType const,Mezzanine::ComponentType const) const\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_SetPrimaryProxy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::EntityProxy *arg2 = (Mezzanine::EntityProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::SetPrimaryProxy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::SetPrimaryProxy",1,"Mezzanine::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Entity::SetPrimaryProxy",2,"Mezzanine::EntityProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_SetPrimaryProxy",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("Entity_SetPrimaryProxy",2,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  (arg1)->SetPrimaryProxy(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetPrimaryProxy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::EntityProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::GetPrimaryProxy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetPrimaryProxy",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetPrimaryProxy",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = (Mezzanine::EntityProxy *)((Mezzanine::Entity const *)arg1)->GetPrimaryProxy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_AddToWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::AddToWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::AddToWorld",1,"Mezzanine::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_AddToWorld",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  (arg1)->AddToWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_RemoveFromWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::RemoveFromWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::RemoveFromWorld",1,"Mezzanine::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_RemoveFromWorld",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  (arg1)->RemoveFromWorld();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::SetTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::SetTransform",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::SetTransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_SetTransform",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Entity_SetTransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetTransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Quaternion *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::SetTransform",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::SetTransform",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::SetTransform",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Entity::SetTransform",3,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_SetTransform",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Entity_SetTransform",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Entity_SetTransform",3,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetTransform((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Quaternion const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetTransform(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Entity_SetTransform__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Entity_SetTransform__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Entity_SetTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Entity::SetTransform(Mezzanine::Transform const &)\n"
    "    Mezzanine::Entity::SetTransform(Mezzanine::Vector3 const &,Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_GetTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetTransform",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetTransform",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = ((Mezzanine::Entity const *)arg1)->GetTransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::SetLocation",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_SetLocation",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Entity_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Entity::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::SetLocation",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Entity::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Entity::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_SetLocation",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Entity_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Entity_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Entity_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Entity::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Entity::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetLocation",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetLocation",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = ((Mezzanine::Entity const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::SetOrientation",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_SetOrientation",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Entity_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::Entity::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::SetOrientation",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Entity::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Entity::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::Entity::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_SetOrientation",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Entity_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Entity_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Entity_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Entity::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::Entity::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetOrientation",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetOrientation",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = ((Mezzanine::Entity const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::SetScale",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_SetScale",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Entity_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Entity::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::SetScale",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Entity::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Entity::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_SetScale",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Entity_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Entity_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Entity_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Entity::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Entity::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetScale",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetScale",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = ((Mezzanine::Entity const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::Translate",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_Translate",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Entity_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::Translate",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Entity::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Entity::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_Translate",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_Translate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Entity_Translate__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Entity_Translate__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Entity_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Entity::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Entity::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_Yaw(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::Yaw",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_Yaw",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_Pitch(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::Pitch",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_Pitch",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_Roll(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::Roll",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_Roll",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::Rotate",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Entity::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_Rotate",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Entity_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::Rotate",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_Rotate",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("Entity_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_Rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Entity_Rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Entity_Rotate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Entity_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Entity::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Entity::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::Scale",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_Scale",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Entity_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::Entity::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::Scale",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Entity::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::Entity::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_Scale",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Entity_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Entity_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Entity_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Entity::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Entity::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::ProtoSerialize",1,"Mezzanine::Entity const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Entity_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Entity const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::ProtoSerializeProperties",1,"Mezzanine::Entity const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::ProtoSerializeProperties",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Entity_ProtoSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Entity const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_ProtoSerializeComponents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::ProtoSerializeComponents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::ProtoSerializeComponents",1,"Mezzanine::Entity const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::ProtoSerializeComponents",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_ProtoSerializeComponents",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Entity_ProtoSerializeComponents",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Entity const *)arg1)->ProtoSerializeComponents(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::ProtoDeSerialize",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Entity_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::ProtoDeSerializeProperties",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::ProtoDeSerializeProperties",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Entity_ProtoDeSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_ProtoDeSerializeComponents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::ProtoDeSerializeComponents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::ProtoDeSerializeComponents",1,"Mezzanine::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Entity::ProtoDeSerializeComponents",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_ProtoDeSerializeComponents",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Entity_ProtoDeSerializeComponents",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeComponents((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::GetDerivedSerializableName",1,"Mezzanine::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  result = ((Mezzanine::Entity const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Entity::GetSerializableName",0,0)
  result = Mezzanine::Entity::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity__Update(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Entity::_Update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::_Update",1,"Mezzanine::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Entity::_Update",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity__Update",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->_Update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity__SyncTransforms(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Entity *arg1 = (Mezzanine::Entity *) 0 ;
  Mezzanine::EntityProxy *arg2 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Transform *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Entity::_SyncTransforms",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Entity::_SyncTransforms",1,"Mezzanine::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Entity::_SyncTransforms",2,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Entity::_SyncTransforms",3,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("Entity__SyncTransforms",1,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("Entity__SyncTransforms",2,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("Entity__SyncTransforms",3,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->_SyncTransforms(arg2,(Mezzanine::Transform const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Entity(void *obj) {
Mezzanine::Entity *arg1 = (Mezzanine::Entity *) obj;
delete arg1;
}
static int _proxy__wrap_new_Entity(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Entity);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Entity_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Entity_methods[]= {
    { "GetEntityType", _wrap_Entity_GetEntityType},
    { "GetEntityID", _wrap_Entity_GetEntityID},
    { "GetWorld", _wrap_Entity_GetWorld},
    { "SetName", _wrap_Entity_SetName},
    { "GetName", _wrap_Entity_GetName},
    { "IsInWorld", _wrap_Entity_IsInWorld},
    { "IsStatic", _wrap_Entity_IsStatic},
    { "AddComponent", _wrap_Entity_AddComponent},
    { "RemoveComponent", _wrap_Entity_RemoveComponent},
    { "RemoveAllComponentsOfType", _wrap_Entity_RemoveAllComponentsOfType},
    { "RemoveAllComponentsOfTypes", _wrap_Entity_RemoveAllComponentsOfTypes},
    { "RemoveAllComponents", _wrap_Entity_RemoveAllComponents},
    { "GetNumComponents", _wrap_Entity_GetNumComponents},
    { "GetComponent", _wrap_Entity_GetComponent},
    { "GetComponents", _wrap_Entity_GetComponents},
    { "SetPrimaryProxy", _wrap_Entity_SetPrimaryProxy},
    { "GetPrimaryProxy", _wrap_Entity_GetPrimaryProxy},
    { "AddToWorld", _wrap_Entity_AddToWorld},
    { "RemoveFromWorld", _wrap_Entity_RemoveFromWorld},
    { "SetTransform", _wrap_Entity_SetTransform},
    { "GetTransform", _wrap_Entity_GetTransform},
    { "SetLocation", _wrap_Entity_SetLocation},
    { "GetLocation", _wrap_Entity_GetLocation},
    { "SetOrientation", _wrap_Entity_SetOrientation},
    { "GetOrientation", _wrap_Entity_GetOrientation},
    { "SetScale", _wrap_Entity_SetScale},
    { "GetScale", _wrap_Entity_GetScale},
    { "Translate", _wrap_Entity_Translate},
    { "Yaw", _wrap_Entity_Yaw},
    { "Pitch", _wrap_Entity_Pitch},
    { "Roll", _wrap_Entity_Roll},
    { "Rotate", _wrap_Entity_Rotate},
    { "Scale", _wrap_Entity_Scale},
    { "ProtoSerialize", _wrap_Entity_ProtoSerialize},
    { "ProtoSerializeProperties", _wrap_Entity_ProtoSerializeProperties},
    { "ProtoSerializeComponents", _wrap_Entity_ProtoSerializeComponents},
    { "ProtoDeSerialize", _wrap_Entity_ProtoDeSerialize},
    { "ProtoDeSerializeProperties", _wrap_Entity_ProtoDeSerializeProperties},
    { "ProtoDeSerializeComponents", _wrap_Entity_ProtoDeSerializeComponents},
    { "GetDerivedSerializableName", _wrap_Entity_GetDerivedSerializableName},
    { "_Update", _wrap_Entity__Update},
    { "_SyncTransforms", _wrap_Entity__SyncTransforms},
    {0,0}
};
static swig_lua_method swig_Entity_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Entity_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Entity_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Entity_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Entity_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Entity_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Entity_Sf_SwigStatic = {
    "Entity",
    swig_Entity_Sf_SwigStatic_methods,
    swig_Entity_Sf_SwigStatic_attributes,
    swig_Entity_Sf_SwigStatic_constants,
    swig_Entity_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Entity_bases[] = {0,0};
static const char *swig_Entity_base_names[] = {"Mezzanine::TransformableObject *",0};
static swig_lua_class _wrap_class_Entity = { "Entity", "Entity", &SWIGTYPE_p_Mezzanine__Entity,_proxy__wrap_new_Entity, swig_delete_Entity, swig_Entity_methods, swig_Entity_attributes, &swig_Entity_Sf_SwigStatic, swig_Entity_meta, swig_Entity_bases, swig_Entity_base_names };

static int _wrap_new_GenericEntityFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::GenericEntityFactory *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::GenericEntityFactory::GenericEntityFactory",0,0)
  result = (Mezzanine::GenericEntityFactory *)new Mezzanine::GenericEntityFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GenericEntityFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericEntityFactory_GetTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::GenericEntityFactory *arg1 = (Mezzanine::GenericEntityFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::GenericEntityFactory::GetTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::GenericEntityFactory::GetTypeName",1,"Mezzanine::GenericEntityFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__GenericEntityFactory,0))){
    SWIG_fail_ptr("GenericEntityFactory_GetTypeName",1,SWIGTYPE_p_Mezzanine__GenericEntityFactory);
  }
  
  result = ((Mezzanine::GenericEntityFactory const *)arg1)->GetTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericEntityFactory_CreateEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::GenericEntityFactory *arg1 = (Mezzanine::GenericEntityFactory *) 0 ;
  Mezzanine::EntityID *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairMap *arg4 = 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::GenericEntityFactory::CreateEntity",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::GenericEntityFactory::CreateEntity",1,"Mezzanine::GenericEntityFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::GenericEntityFactory::CreateEntity",2,"Mezzanine::EntityID const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::GenericEntityFactory::CreateEntity",3,"Mezzanine::World *");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::GenericEntityFactory::CreateEntity",4,"Mezzanine::NameValuePairMap const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__GenericEntityFactory,0))){
    SWIG_fail_ptr("GenericEntityFactory_CreateEntity",1,SWIGTYPE_p_Mezzanine__GenericEntityFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("GenericEntityFactory_CreateEntity",2,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("GenericEntityFactory_CreateEntity",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("GenericEntityFactory_CreateEntity",4,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (Mezzanine::Entity *)(arg1)->CreateEntity((Mezzanine::EntityID const &)*arg2,arg3,(Mezzanine::NameValuePairMap const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericEntityFactory_CreateEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::GenericEntityFactory *arg1 = (Mezzanine::GenericEntityFactory *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::GenericEntityFactory::CreateEntity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::GenericEntityFactory::CreateEntity",1,"Mezzanine::GenericEntityFactory *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::GenericEntityFactory::CreateEntity",2,"Mezzanine::XML::Node const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::GenericEntityFactory::CreateEntity",3,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__GenericEntityFactory,0))){
    SWIG_fail_ptr("GenericEntityFactory_CreateEntity",1,SWIGTYPE_p_Mezzanine__GenericEntityFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("GenericEntityFactory_CreateEntity",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("GenericEntityFactory_CreateEntity",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Entity *)(arg1)->CreateEntity((Mezzanine::XML::Node const &)*arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GenericEntityFactory_CreateEntity(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__GenericEntityFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_GenericEntityFactory_CreateEntity__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__GenericEntityFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityID, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_GenericEntityFactory_CreateEntity__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'GenericEntityFactory_CreateEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::GenericEntityFactory::CreateEntity(Mezzanine::EntityID const &,Mezzanine::World *,Mezzanine::NameValuePairMap const &)\n"
    "    Mezzanine::GenericEntityFactory::CreateEntity(Mezzanine::XML::Node const &,Mezzanine::World *)\n");
  lua_error(L);return 0;
}


static int _wrap_GenericEntityFactory_DestroyEntity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::GenericEntityFactory *arg1 = (Mezzanine::GenericEntityFactory *) 0 ;
  Mezzanine::Entity *arg2 = (Mezzanine::Entity *) 0 ;
  
  SWIG_check_num_args("Mezzanine::GenericEntityFactory::DestroyEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::GenericEntityFactory::DestroyEntity",1,"Mezzanine::GenericEntityFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::GenericEntityFactory::DestroyEntity",2,"Mezzanine::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__GenericEntityFactory,0))){
    SWIG_fail_ptr("GenericEntityFactory_DestroyEntity",1,SWIGTYPE_p_Mezzanine__GenericEntityFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("GenericEntityFactory_DestroyEntity",2,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  (arg1)->DestroyEntity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_GenericEntityFactory(void *obj) {
Mezzanine::GenericEntityFactory *arg1 = (Mezzanine::GenericEntityFactory *) obj;
delete arg1;
}
static int _proxy__wrap_new_GenericEntityFactory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_GenericEntityFactory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_GenericEntityFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_GenericEntityFactory_methods[]= {
    { "GetTypeName", _wrap_GenericEntityFactory_GetTypeName},
    { "CreateEntity", _wrap_GenericEntityFactory_CreateEntity},
    { "DestroyEntity", _wrap_GenericEntityFactory_DestroyEntity},
    {0,0}
};
static swig_lua_method swig_GenericEntityFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_GenericEntityFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_GenericEntityFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_GenericEntityFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_GenericEntityFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_GenericEntityFactory_Sf_SwigStatic = {
    "GenericEntityFactory",
    swig_GenericEntityFactory_Sf_SwigStatic_methods,
    swig_GenericEntityFactory_Sf_SwigStatic_attributes,
    swig_GenericEntityFactory_Sf_SwigStatic_constants,
    swig_GenericEntityFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_GenericEntityFactory_bases[] = {0,0};
static const char *swig_GenericEntityFactory_base_names[] = {"Mezzanine::EntityFactory *",0};
static swig_lua_class _wrap_class_GenericEntityFactory = { "GenericEntityFactory", "GenericEntityFactory", &SWIGTYPE_p_Mezzanine__GenericEntityFactory,_proxy__wrap_new_GenericEntityFactory, swig_delete_GenericEntityFactory, swig_GenericEntityFactory_methods, swig_GenericEntityFactory_attributes, &swig_GenericEntityFactory_Sf_SwigStatic, swig_GenericEntityFactory_meta, swig_GenericEntityFactory_bases, swig_GenericEntityFactory_base_names };

static int _wrap_new_Actor(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Actor *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Actor::Actor",0,0)
  result = (Mezzanine::Actor *)new Mezzanine::Actor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Actor,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Actor(void *obj) {
Mezzanine::Actor *arg1 = (Mezzanine::Actor *) obj;
delete arg1;
}
static int _proxy__wrap_new_Actor(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Actor);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Actor_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Actor_methods[]= {
    {0,0}
};
static swig_lua_method swig_Actor_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Actor_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Actor_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Actor_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Actor_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Actor_Sf_SwigStatic = {
    "Actor",
    swig_Actor_Sf_SwigStatic_methods,
    swig_Actor_Sf_SwigStatic_attributes,
    swig_Actor_Sf_SwigStatic_constants,
    swig_Actor_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Actor_bases[] = {0,0};
static const char *swig_Actor_base_names[] = {"Mezzanine::Entity *",0};
static swig_lua_class _wrap_class_Actor = { "Actor", "Actor", &SWIGTYPE_p_Mezzanine__Actor,_proxy__wrap_new_Actor, swig_delete_Actor, swig_Actor_methods, swig_Actor_attributes, &swig_Actor_Sf_SwigStatic, swig_Actor_meta, swig_Actor_bases, swig_Actor_base_names };

static void swig_delete_ActorFactory(void *obj) {
Mezzanine::ActorFactory *arg1 = (Mezzanine::ActorFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_ActorFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ActorFactory_methods[]= {
    {0,0}
};
static swig_lua_method swig_ActorFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ActorFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ActorFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ActorFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ActorFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ActorFactory_Sf_SwigStatic = {
    "ActorFactory",
    swig_ActorFactory_Sf_SwigStatic_methods,
    swig_ActorFactory_Sf_SwigStatic_attributes,
    swig_ActorFactory_Sf_SwigStatic_constants,
    swig_ActorFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ActorFactory_bases[] = {0,0};
static const char *swig_ActorFactory_base_names[] = {"Mezzanine::EntityFactory *",0};
static swig_lua_class _wrap_class_ActorFactory = { "ActorFactory", "ActorFactory", &SWIGTYPE_p_Mezzanine__ActorFactory,0, swig_delete_ActorFactory, swig_ActorFactory_methods, swig_ActorFactory_attributes, &swig_ActorFactory_Sf_SwigStatic, swig_ActorFactory_meta, swig_ActorFactory_bases, swig_ActorFactory_base_names };

static int _wrap_new_ColourValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",2,"Mezzanine::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",3,"Mezzanine::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",4,"Mezzanine::Real");
  arg1 = (Mezzanine::Real)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real)lua_tonumber(L, 4);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",2,"Mezzanine::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",3,"Mezzanine::Real");
  arg1 = (Mezzanine::Real)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Real arg2 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::Real");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",2,"Mezzanine::Real");
  arg1 = (Mezzanine::Real)lua_tonumber(L, 1);
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::Real");
  arg1 = (Mezzanine::Real)lua_tonumber(L, 1);
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",0,0)
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("new_ColourValue",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue((Mezzanine::ColourValue const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::ColourValue &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("new_ColourValue",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue((Mezzanine::ColourValue &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::ColourValue *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ColourValue",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ColourValue",1,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_ColourValue",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::ColourValue *)new Mezzanine::ColourValue((Mezzanine::XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ColourValue(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_ColourValue__SWIG_4(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ColourValue__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ColourValue__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_ColourValue__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_ColourValue__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_ColourValue__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_ColourValue__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_ColourValue__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_ColourValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::Real,Mezzanine::Real,Mezzanine::Real,Mezzanine::Real)\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::Real,Mezzanine::Real,Mezzanine::Real)\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::Real,Mezzanine::Real)\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::Real)\n"
    "    Mezzanine::ColourValue::ColourValue()\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::ColourValue const &)\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::ColourValue &&)\n"
    "    Mezzanine::ColourValue::ColourValue(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ColourValue_GetOgreColourValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Ogre::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetOgreColourValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::GetOgreColourValue",1,"Mezzanine::ColourValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_GetOgreColourValue",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = ((Mezzanine::ColourValue const *)arg1)->GetOgreColourValue();
  {
    Ogre::ColourValue * resultptr = new Ogre::ColourValue((const Ogre::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SetRedChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SetRedChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::SetRedChannel",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::SetRedChannel",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_SetRedChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetRedChannel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GetRedChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetRedChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::GetRedChannel",1,"Mezzanine::ColourValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_GetRedChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::Real)((Mezzanine::ColourValue const *)arg1)->GetRedChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SetGreenChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SetGreenChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::SetGreenChannel",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::SetGreenChannel",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_SetGreenChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetGreenChannel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GetGreenChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetGreenChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::GetGreenChannel",1,"Mezzanine::ColourValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_GetGreenChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::Real)((Mezzanine::ColourValue const *)arg1)->GetGreenChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SetBlueChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SetBlueChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::SetBlueChannel",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::SetBlueChannel",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_SetBlueChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetBlueChannel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GetBlueChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetBlueChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::GetBlueChannel",1,"Mezzanine::ColourValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_GetBlueChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::Real)((Mezzanine::ColourValue const *)arg1)->GetBlueChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SetAlphaChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SetAlphaChannel",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::SetAlphaChannel",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::SetAlphaChannel",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_SetAlphaChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->SetAlphaChannel(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GetAlphaChannel(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetAlphaChannel",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::GetAlphaChannel",1,"Mezzanine::ColourValue const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_GetAlphaChannel",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::Real)((Mezzanine::ColourValue const *)arg1)->GetAlphaChannel();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SetValues",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::SetValues",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::SetValues",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::ColourValue::SetValues",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::ColourValue::SetValues",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::ColourValue::SetValues",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_SetValues",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetValues(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Average(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Average",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::Average",1,"Mezzanine::ColourValue const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::Average",2,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_Average",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_Average",2,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = ((Mezzanine::ColourValue const *)arg1)->Average((Mezzanine::ColourValue const &)*arg2);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::operator *",1,"Mezzanine::ColourValue *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::operator *",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___mul",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (arg1)->operator *(arg2);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue___add(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::operator +",1,"Mezzanine::ColourValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::operator +",2,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___add",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___add",2,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (arg1)->operator +((Mezzanine::ColourValue const &)*arg2);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue___sub(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::operator -",1,"Mezzanine::ColourValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::operator -",2,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___sub",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___sub",2,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (arg1)->operator -((Mezzanine::ColourValue const &)*arg2);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::operator *",1,"Mezzanine::ColourValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::operator *",2,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___mul",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___mul",2,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (arg1)->operator *((Mezzanine::ColourValue const &)*arg2);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_ColourValue___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_ColourValue___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ColourValue___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::ColourValue::operator *(Mezzanine::Real const)\n"
    "    Mezzanine::ColourValue::operator *(Mezzanine::ColourValue const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ColourValue___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::ColourValue *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::operator ==",1,"Mezzanine::ColourValue const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::operator ==",2,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___eq",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue___eq",2,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::ColourValue const *)arg1)->operator ==((Mezzanine::ColourValue const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Transparent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Transparent",0,0)
  result = Mezzanine::ColourValue::Transparent();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_AliceBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::AliceBlue",0,0)
  result = Mezzanine::ColourValue::AliceBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_AntiqueWhite(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::AntiqueWhite",0,0)
  result = Mezzanine::ColourValue::AntiqueWhite();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Aqua(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Aqua",0,0)
  result = Mezzanine::ColourValue::Aqua();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Aquamarine(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Aquamarine",0,0)
  result = Mezzanine::ColourValue::Aquamarine();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Azure(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Azure",0,0)
  result = Mezzanine::ColourValue::Azure();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Beige(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Beige",0,0)
  result = Mezzanine::ColourValue::Beige();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Bisque(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Bisque",0,0)
  result = Mezzanine::ColourValue::Bisque();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Black(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Black",0,0)
  result = Mezzanine::ColourValue::Black();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Blanchedalmond(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Blanchedalmond",0,0)
  result = Mezzanine::ColourValue::Blanchedalmond();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Blue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Blue",0,0)
  result = Mezzanine::ColourValue::Blue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_BlueViolet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::BlueViolet",0,0)
  result = Mezzanine::ColourValue::BlueViolet();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Brown(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Brown",0,0)
  result = Mezzanine::ColourValue::Brown();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_BurlyWood(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::BurlyWood",0,0)
  result = Mezzanine::ColourValue::BurlyWood();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_CadetBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::CadetBlue",0,0)
  result = Mezzanine::ColourValue::CadetBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Chartreuse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Chartreuse",0,0)
  result = Mezzanine::ColourValue::Chartreuse();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Chocolate(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Chocolate",0,0)
  result = Mezzanine::ColourValue::Chocolate();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Coral(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Coral",0,0)
  result = Mezzanine::ColourValue::Coral();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_CornFlowerBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::CornFlowerBlue",0,0)
  result = Mezzanine::ColourValue::CornFlowerBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_CornSilk(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::CornSilk",0,0)
  result = Mezzanine::ColourValue::CornSilk();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Crimson(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Crimson",0,0)
  result = Mezzanine::ColourValue::Crimson();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Cyan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Cyan",0,0)
  result = Mezzanine::ColourValue::Cyan();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkBlue",0,0)
  result = Mezzanine::ColourValue::DarkBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkCyan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkCyan",0,0)
  result = Mezzanine::ColourValue::DarkCyan();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkGoldenRod(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkGoldenRod",0,0)
  result = Mezzanine::ColourValue::DarkGoldenRod();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkGray",0,0)
  result = Mezzanine::ColourValue::DarkGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkGreen",0,0)
  result = Mezzanine::ColourValue::DarkGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkKhaki(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkKhaki",0,0)
  result = Mezzanine::ColourValue::DarkKhaki();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkMagenta(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkMagenta",0,0)
  result = Mezzanine::ColourValue::DarkMagenta();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkOliveGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkOliveGreen",0,0)
  result = Mezzanine::ColourValue::DarkOliveGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkOrange(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkOrange",0,0)
  result = Mezzanine::ColourValue::DarkOrange();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkOrchid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkOrchid",0,0)
  result = Mezzanine::ColourValue::DarkOrchid();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkRed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkRed",0,0)
  result = Mezzanine::ColourValue::DarkRed();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkSalmon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkSalmon",0,0)
  result = Mezzanine::ColourValue::DarkSalmon();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkSeaGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkSeaGreen",0,0)
  result = Mezzanine::ColourValue::DarkSeaGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkSlateBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkSlateBlue",0,0)
  result = Mezzanine::ColourValue::DarkSlateBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkSlateGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkSlateGray",0,0)
  result = Mezzanine::ColourValue::DarkSlateGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkTurquoise(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkTurquoise",0,0)
  result = Mezzanine::ColourValue::DarkTurquoise();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DarkViolet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DarkViolet",0,0)
  result = Mezzanine::ColourValue::DarkViolet();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DeepPink(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DeepPink",0,0)
  result = Mezzanine::ColourValue::DeepPink();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DeepSkyBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DeepSkyBlue",0,0)
  result = Mezzanine::ColourValue::DeepSkyBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DimGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DimGray",0,0)
  result = Mezzanine::ColourValue::DimGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_DodgerBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::DodgerBlue",0,0)
  result = Mezzanine::ColourValue::DodgerBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_FireBrick(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::FireBrick",0,0)
  result = Mezzanine::ColourValue::FireBrick();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_FloralWhite(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::FloralWhite",0,0)
  result = Mezzanine::ColourValue::FloralWhite();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_ForestGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ForestGreen",0,0)
  result = Mezzanine::ColourValue::ForestGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Fuchsia(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Fuchsia",0,0)
  result = Mezzanine::ColourValue::Fuchsia();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Gainsboro(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Gainsboro",0,0)
  result = Mezzanine::ColourValue::Gainsboro();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GhostWhite(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GhostWhite",0,0)
  result = Mezzanine::ColourValue::GhostWhite();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Gold(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Gold",0,0)
  result = Mezzanine::ColourValue::Gold();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GoldenRod(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GoldenRod",0,0)
  result = Mezzanine::ColourValue::GoldenRod();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Gray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Gray",0,0)
  result = Mezzanine::ColourValue::Gray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Green(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Green",0,0)
  result = Mezzanine::ColourValue::Green();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GreenYellow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GreenYellow",0,0)
  result = Mezzanine::ColourValue::GreenYellow();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_HoneyDew(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::HoneyDew",0,0)
  result = Mezzanine::ColourValue::HoneyDew();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_HotPink(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::HotPink",0,0)
  result = Mezzanine::ColourValue::HotPink();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_IndianRed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::IndianRed",0,0)
  result = Mezzanine::ColourValue::IndianRed();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Indigo(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Indigo",0,0)
  result = Mezzanine::ColourValue::Indigo();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Ivory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Ivory",0,0)
  result = Mezzanine::ColourValue::Ivory();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Khaki(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Khaki",0,0)
  result = Mezzanine::ColourValue::Khaki();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Lavender(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Lavender",0,0)
  result = Mezzanine::ColourValue::Lavender();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LavenderBlush(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LavenderBlush",0,0)
  result = Mezzanine::ColourValue::LavenderBlush();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LawnGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LawnGreen",0,0)
  result = Mezzanine::ColourValue::LawnGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LemonChiffon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LemonChiffon",0,0)
  result = Mezzanine::ColourValue::LemonChiffon();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightBlue",0,0)
  result = Mezzanine::ColourValue::LightBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightCoral(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightCoral",0,0)
  result = Mezzanine::ColourValue::LightCoral();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightCyan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightCyan",0,0)
  result = Mezzanine::ColourValue::LightCyan();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightGoldenRodYellow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightGoldenRodYellow",0,0)
  result = Mezzanine::ColourValue::LightGoldenRodYellow();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightGray",0,0)
  result = Mezzanine::ColourValue::LightGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightGreen",0,0)
  result = Mezzanine::ColourValue::LightGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightPink(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightPink",0,0)
  result = Mezzanine::ColourValue::LightPink();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightSalmon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightSalmon",0,0)
  result = Mezzanine::ColourValue::LightSalmon();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightSeaGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightSeaGreen",0,0)
  result = Mezzanine::ColourValue::LightSeaGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightSkyBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightSkyBlue",0,0)
  result = Mezzanine::ColourValue::LightSkyBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightSlateGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightSlateGray",0,0)
  result = Mezzanine::ColourValue::LightSlateGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightSteelBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightSteelBlue",0,0)
  result = Mezzanine::ColourValue::LightSteelBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LightYellow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LightYellow",0,0)
  result = Mezzanine::ColourValue::LightYellow();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Lime(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Lime",0,0)
  result = Mezzanine::ColourValue::Lime();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_LimeGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::LimeGreen",0,0)
  result = Mezzanine::ColourValue::LimeGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Linen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Linen",0,0)
  result = Mezzanine::ColourValue::Linen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Magenta(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Magenta",0,0)
  result = Mezzanine::ColourValue::Magenta();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Maroon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Maroon",0,0)
  result = Mezzanine::ColourValue::Maroon();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumAquamarine(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumAquamarine",0,0)
  result = Mezzanine::ColourValue::MediumAquamarine();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumBlue",0,0)
  result = Mezzanine::ColourValue::MediumBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumOrchid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumOrchid",0,0)
  result = Mezzanine::ColourValue::MediumOrchid();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumPurple(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumPurple",0,0)
  result = Mezzanine::ColourValue::MediumPurple();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumSeaGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumSeaGreen",0,0)
  result = Mezzanine::ColourValue::MediumSeaGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumSlateBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumSlateBlue",0,0)
  result = Mezzanine::ColourValue::MediumSlateBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumSpringGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumSpringGreen",0,0)
  result = Mezzanine::ColourValue::MediumSpringGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumTurquoise(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumTurquoise",0,0)
  result = Mezzanine::ColourValue::MediumTurquoise();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MediumVioletRed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MediumVioletRed",0,0)
  result = Mezzanine::ColourValue::MediumVioletRed();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MidnightBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MidnightBlue",0,0)
  result = Mezzanine::ColourValue::MidnightBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MintCream(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MintCream",0,0)
  result = Mezzanine::ColourValue::MintCream();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_MistyRose(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::MistyRose",0,0)
  result = Mezzanine::ColourValue::MistyRose();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Moccasin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Moccasin",0,0)
  result = Mezzanine::ColourValue::Moccasin();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_NavajoWhite(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::NavajoWhite",0,0)
  result = Mezzanine::ColourValue::NavajoWhite();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Navy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Navy",0,0)
  result = Mezzanine::ColourValue::Navy();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_OldLace(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::OldLace",0,0)
  result = Mezzanine::ColourValue::OldLace();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Olive(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Olive",0,0)
  result = Mezzanine::ColourValue::Olive();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_OliveDrab(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::OliveDrab",0,0)
  result = Mezzanine::ColourValue::OliveDrab();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Orange(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Orange",0,0)
  result = Mezzanine::ColourValue::Orange();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_OrangeRed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::OrangeRed",0,0)
  result = Mezzanine::ColourValue::OrangeRed();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Orchid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Orchid",0,0)
  result = Mezzanine::ColourValue::Orchid();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PaleGoldenRod(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PaleGoldenRod",0,0)
  result = Mezzanine::ColourValue::PaleGoldenRod();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PaleGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PaleGreen",0,0)
  result = Mezzanine::ColourValue::PaleGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PaleTurquoise(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PaleTurquoise",0,0)
  result = Mezzanine::ColourValue::PaleTurquoise();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PaleVioletRed(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PaleVioletRed",0,0)
  result = Mezzanine::ColourValue::PaleVioletRed();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PapayaWhip(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PapayaWhip",0,0)
  result = Mezzanine::ColourValue::PapayaWhip();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PeachPuff(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PeachPuff",0,0)
  result = Mezzanine::ColourValue::PeachPuff();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Peru(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Peru",0,0)
  result = Mezzanine::ColourValue::Peru();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Pink(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Pink",0,0)
  result = Mezzanine::ColourValue::Pink();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Plum(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Plum",0,0)
  result = Mezzanine::ColourValue::Plum();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_PowderBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::PowderBlue",0,0)
  result = Mezzanine::ColourValue::PowderBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Purple(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Purple",0,0)
  result = Mezzanine::ColourValue::Purple();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Red(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Red",0,0)
  result = Mezzanine::ColourValue::Red();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_RosyBrown(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::RosyBrown",0,0)
  result = Mezzanine::ColourValue::RosyBrown();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_RoyalBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::RoyalBlue",0,0)
  result = Mezzanine::ColourValue::RoyalBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SaddleBrown(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SaddleBrown",0,0)
  result = Mezzanine::ColourValue::SaddleBrown();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Salmon(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Salmon",0,0)
  result = Mezzanine::ColourValue::Salmon();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SandyBrown(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SandyBrown",0,0)
  result = Mezzanine::ColourValue::SandyBrown();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SeaGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SeaGreen",0,0)
  result = Mezzanine::ColourValue::SeaGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SeaShell(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SeaShell",0,0)
  result = Mezzanine::ColourValue::SeaShell();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Sienna(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Sienna",0,0)
  result = Mezzanine::ColourValue::Sienna();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Silver(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Silver",0,0)
  result = Mezzanine::ColourValue::Silver();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SkyBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SkyBlue",0,0)
  result = Mezzanine::ColourValue::SkyBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SlateBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SlateBlue",0,0)
  result = Mezzanine::ColourValue::SlateBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SlateGray(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SlateGray",0,0)
  result = Mezzanine::ColourValue::SlateGray();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Snow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Snow",0,0)
  result = Mezzanine::ColourValue::Snow();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SpringGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SpringGreen",0,0)
  result = Mezzanine::ColourValue::SpringGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_SteelBlue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::SteelBlue",0,0)
  result = Mezzanine::ColourValue::SteelBlue();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Tan(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Tan",0,0)
  result = Mezzanine::ColourValue::Tan();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Teal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Teal",0,0)
  result = Mezzanine::ColourValue::Teal();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Thistle(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Thistle",0,0)
  result = Mezzanine::ColourValue::Thistle();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Tomato(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Tomato",0,0)
  result = Mezzanine::ColourValue::Tomato();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Turquoise(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Turquoise",0,0)
  result = Mezzanine::ColourValue::Turquoise();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Violet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Violet",0,0)
  result = Mezzanine::ColourValue::Violet();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Wheat(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Wheat",0,0)
  result = Mezzanine::ColourValue::Wheat();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_White(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::White",0,0)
  result = Mezzanine::ColourValue::White();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_WhiteSmoke(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::WhiteSmoke",0,0)
  result = Mezzanine::ColourValue::WhiteSmoke();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_Yellow(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::Yellow",0,0)
  result = Mezzanine::ColourValue::Yellow();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_YellowGreen(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::YellowGreen",0,0)
  result = Mezzanine::ColourValue::YellowGreen();
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ProtoSerialize",1,"Mezzanine::ColourValue const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("ColourValue_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::ColourValue const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::ColourValue::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ColourValue::ProtoDeSerialize",1,"Mezzanine::ColourValue *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ColourValue::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ColourValue_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("ColourValue_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ColourValue_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ColourValue::GetSerializableName",0,0)
  result = Mezzanine::ColourValue::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ColourValue(void *obj) {
Mezzanine::ColourValue *arg1 = (Mezzanine::ColourValue *) obj;
delete arg1;
}
static int _proxy__wrap_new_ColourValue(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ColourValue);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ColourValue_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ColourValue_methods[]= {
    { "GetOgreColourValue", _wrap_ColourValue_GetOgreColourValue},
    { "SetRedChannel", _wrap_ColourValue_SetRedChannel},
    { "GetRedChannel", _wrap_ColourValue_GetRedChannel},
    { "SetGreenChannel", _wrap_ColourValue_SetGreenChannel},
    { "GetGreenChannel", _wrap_ColourValue_GetGreenChannel},
    { "SetBlueChannel", _wrap_ColourValue_SetBlueChannel},
    { "GetBlueChannel", _wrap_ColourValue_GetBlueChannel},
    { "SetAlphaChannel", _wrap_ColourValue_SetAlphaChannel},
    { "GetAlphaChannel", _wrap_ColourValue_GetAlphaChannel},
    { "SetValues", _wrap_ColourValue_SetValues},
    { "Average", _wrap_ColourValue_Average},
    { "__add", _wrap_ColourValue___add},
    { "__sub", _wrap_ColourValue___sub},
    { "__mul", _wrap_ColourValue___mul},
    { "__eq", _wrap_ColourValue___eq},
    { "ProtoSerialize", _wrap_ColourValue_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_ColourValue_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_ColourValue_meta[] = {
    { "__add", _wrap_ColourValue___add},
    { "__sub", _wrap_ColourValue___sub},
    { "__mul", _wrap_ColourValue___mul},
    { "__eq", _wrap_ColourValue___eq},
    {0,0}
};

static swig_lua_attribute swig_ColourValue_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ColourValue_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ColourValue_Sf_SwigStatic_methods[]= {
    { "Transparent", _wrap_ColourValue_Transparent},
    { "AliceBlue", _wrap_ColourValue_AliceBlue},
    { "AntiqueWhite", _wrap_ColourValue_AntiqueWhite},
    { "Aqua", _wrap_ColourValue_Aqua},
    { "Aquamarine", _wrap_ColourValue_Aquamarine},
    { "Azure", _wrap_ColourValue_Azure},
    { "Beige", _wrap_ColourValue_Beige},
    { "Bisque", _wrap_ColourValue_Bisque},
    { "Black", _wrap_ColourValue_Black},
    { "Blanchedalmond", _wrap_ColourValue_Blanchedalmond},
    { "Blue", _wrap_ColourValue_Blue},
    { "BlueViolet", _wrap_ColourValue_BlueViolet},
    { "Brown", _wrap_ColourValue_Brown},
    { "BurlyWood", _wrap_ColourValue_BurlyWood},
    { "CadetBlue", _wrap_ColourValue_CadetBlue},
    { "Chartreuse", _wrap_ColourValue_Chartreuse},
    { "Chocolate", _wrap_ColourValue_Chocolate},
    { "Coral", _wrap_ColourValue_Coral},
    { "CornFlowerBlue", _wrap_ColourValue_CornFlowerBlue},
    { "CornSilk", _wrap_ColourValue_CornSilk},
    { "Crimson", _wrap_ColourValue_Crimson},
    { "Cyan", _wrap_ColourValue_Cyan},
    { "DarkBlue", _wrap_ColourValue_DarkBlue},
    { "DarkCyan", _wrap_ColourValue_DarkCyan},
    { "DarkGoldenRod", _wrap_ColourValue_DarkGoldenRod},
    { "DarkGray", _wrap_ColourValue_DarkGray},
    { "DarkGreen", _wrap_ColourValue_DarkGreen},
    { "DarkKhaki", _wrap_ColourValue_DarkKhaki},
    { "DarkMagenta", _wrap_ColourValue_DarkMagenta},
    { "DarkOliveGreen", _wrap_ColourValue_DarkOliveGreen},
    { "DarkOrange", _wrap_ColourValue_DarkOrange},
    { "DarkOrchid", _wrap_ColourValue_DarkOrchid},
    { "DarkRed", _wrap_ColourValue_DarkRed},
    { "DarkSalmon", _wrap_ColourValue_DarkSalmon},
    { "DarkSeaGreen", _wrap_ColourValue_DarkSeaGreen},
    { "DarkSlateBlue", _wrap_ColourValue_DarkSlateBlue},
    { "DarkSlateGray", _wrap_ColourValue_DarkSlateGray},
    { "DarkTurquoise", _wrap_ColourValue_DarkTurquoise},
    { "DarkViolet", _wrap_ColourValue_DarkViolet},
    { "DeepPink", _wrap_ColourValue_DeepPink},
    { "DeepSkyBlue", _wrap_ColourValue_DeepSkyBlue},
    { "DimGray", _wrap_ColourValue_DimGray},
    { "DodgerBlue", _wrap_ColourValue_DodgerBlue},
    { "FireBrick", _wrap_ColourValue_FireBrick},
    { "FloralWhite", _wrap_ColourValue_FloralWhite},
    { "ForestGreen", _wrap_ColourValue_ForestGreen},
    { "Fuchsia", _wrap_ColourValue_Fuchsia},
    { "Gainsboro", _wrap_ColourValue_Gainsboro},
    { "GhostWhite", _wrap_ColourValue_GhostWhite},
    { "Gold", _wrap_ColourValue_Gold},
    { "GoldenRod", _wrap_ColourValue_GoldenRod},
    { "Gray", _wrap_ColourValue_Gray},
    { "Green", _wrap_ColourValue_Green},
    { "GreenYellow", _wrap_ColourValue_GreenYellow},
    { "HoneyDew", _wrap_ColourValue_HoneyDew},
    { "HotPink", _wrap_ColourValue_HotPink},
    { "IndianRed", _wrap_ColourValue_IndianRed},
    { "Indigo", _wrap_ColourValue_Indigo},
    { "Ivory", _wrap_ColourValue_Ivory},
    { "Khaki", _wrap_ColourValue_Khaki},
    { "Lavender", _wrap_ColourValue_Lavender},
    { "LavenderBlush", _wrap_ColourValue_LavenderBlush},
    { "LawnGreen", _wrap_ColourValue_LawnGreen},
    { "LemonChiffon", _wrap_ColourValue_LemonChiffon},
    { "LightBlue", _wrap_ColourValue_LightBlue},
    { "LightCoral", _wrap_ColourValue_LightCoral},
    { "LightCyan", _wrap_ColourValue_LightCyan},
    { "LightGoldenRodYellow", _wrap_ColourValue_LightGoldenRodYellow},
    { "LightGray", _wrap_ColourValue_LightGray},
    { "LightGreen", _wrap_ColourValue_LightGreen},
    { "LightPink", _wrap_ColourValue_LightPink},
    { "LightSalmon", _wrap_ColourValue_LightSalmon},
    { "LightSeaGreen", _wrap_ColourValue_LightSeaGreen},
    { "LightSkyBlue", _wrap_ColourValue_LightSkyBlue},
    { "LightSlateGray", _wrap_ColourValue_LightSlateGray},
    { "LightSteelBlue", _wrap_ColourValue_LightSteelBlue},
    { "LightYellow", _wrap_ColourValue_LightYellow},
    { "Lime", _wrap_ColourValue_Lime},
    { "LimeGreen", _wrap_ColourValue_LimeGreen},
    { "Linen", _wrap_ColourValue_Linen},
    { "Magenta", _wrap_ColourValue_Magenta},
    { "Maroon", _wrap_ColourValue_Maroon},
    { "MediumAquamarine", _wrap_ColourValue_MediumAquamarine},
    { "MediumBlue", _wrap_ColourValue_MediumBlue},
    { "MediumOrchid", _wrap_ColourValue_MediumOrchid},
    { "MediumPurple", _wrap_ColourValue_MediumPurple},
    { "MediumSeaGreen", _wrap_ColourValue_MediumSeaGreen},
    { "MediumSlateBlue", _wrap_ColourValue_MediumSlateBlue},
    { "MediumSpringGreen", _wrap_ColourValue_MediumSpringGreen},
    { "MediumTurquoise", _wrap_ColourValue_MediumTurquoise},
    { "MediumVioletRed", _wrap_ColourValue_MediumVioletRed},
    { "MidnightBlue", _wrap_ColourValue_MidnightBlue},
    { "MintCream", _wrap_ColourValue_MintCream},
    { "MistyRose", _wrap_ColourValue_MistyRose},
    { "Moccasin", _wrap_ColourValue_Moccasin},
    { "NavajoWhite", _wrap_ColourValue_NavajoWhite},
    { "Navy", _wrap_ColourValue_Navy},
    { "OldLace", _wrap_ColourValue_OldLace},
    { "Olive", _wrap_ColourValue_Olive},
    { "OliveDrab", _wrap_ColourValue_OliveDrab},
    { "Orange", _wrap_ColourValue_Orange},
    { "OrangeRed", _wrap_ColourValue_OrangeRed},
    { "Orchid", _wrap_ColourValue_Orchid},
    { "PaleGoldenRod", _wrap_ColourValue_PaleGoldenRod},
    { "PaleGreen", _wrap_ColourValue_PaleGreen},
    { "PaleTurquoise", _wrap_ColourValue_PaleTurquoise},
    { "PaleVioletRed", _wrap_ColourValue_PaleVioletRed},
    { "PapayaWhip", _wrap_ColourValue_PapayaWhip},
    { "PeachPuff", _wrap_ColourValue_PeachPuff},
    { "Peru", _wrap_ColourValue_Peru},
    { "Pink", _wrap_ColourValue_Pink},
    { "Plum", _wrap_ColourValue_Plum},
    { "PowderBlue", _wrap_ColourValue_PowderBlue},
    { "Purple", _wrap_ColourValue_Purple},
    { "Red", _wrap_ColourValue_Red},
    { "RosyBrown", _wrap_ColourValue_RosyBrown},
    { "RoyalBlue", _wrap_ColourValue_RoyalBlue},
    { "SaddleBrown", _wrap_ColourValue_SaddleBrown},
    { "Salmon", _wrap_ColourValue_Salmon},
    { "SandyBrown", _wrap_ColourValue_SandyBrown},
    { "SeaGreen", _wrap_ColourValue_SeaGreen},
    { "SeaShell", _wrap_ColourValue_SeaShell},
    { "Sienna", _wrap_ColourValue_Sienna},
    { "Silver", _wrap_ColourValue_Silver},
    { "SkyBlue", _wrap_ColourValue_SkyBlue},
    { "SlateBlue", _wrap_ColourValue_SlateBlue},
    { "SlateGray", _wrap_ColourValue_SlateGray},
    { "Snow", _wrap_ColourValue_Snow},
    { "SpringGreen", _wrap_ColourValue_SpringGreen},
    { "SteelBlue", _wrap_ColourValue_SteelBlue},
    { "Tan", _wrap_ColourValue_Tan},
    { "Teal", _wrap_ColourValue_Teal},
    { "Thistle", _wrap_ColourValue_Thistle},
    { "Tomato", _wrap_ColourValue_Tomato},
    { "Turquoise", _wrap_ColourValue_Turquoise},
    { "Violet", _wrap_ColourValue_Violet},
    { "Wheat", _wrap_ColourValue_Wheat},
    { "White", _wrap_ColourValue_White},
    { "WhiteSmoke", _wrap_ColourValue_WhiteSmoke},
    { "Yellow", _wrap_ColourValue_Yellow},
    { "YellowGreen", _wrap_ColourValue_YellowGreen},
    { "GetSerializableName", _wrap_ColourValue_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_ColourValue_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ColourValue_Sf_SwigStatic = {
    "ColourValue",
    swig_ColourValue_Sf_SwigStatic_methods,
    swig_ColourValue_Sf_SwigStatic_attributes,
    swig_ColourValue_Sf_SwigStatic_constants,
    swig_ColourValue_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ColourValue_bases[] = {0};
static const char *swig_ColourValue_base_names[] = {0};
static swig_lua_class _wrap_class_ColourValue = { "ColourValue", "ColourValue", &SWIGTYPE_p_Mezzanine__ColourValue,_proxy__wrap_new_ColourValue, swig_delete_ColourValue, swig_ColourValue_methods, swig_ColourValue_attributes, &swig_ColourValue_Sf_SwigStatic, swig_ColourValue_meta, swig_ColourValue_bases, swig_ColourValue_base_names };

static int _wrap_new_AreaEffect__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::AreaEffect *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::AreaEffect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::AreaEffect",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_AreaEffect",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::AreaEffect *)new Mezzanine::AreaEffect(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AreaEffect__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::AreaEffect *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::AreaEffect",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::AreaEffect",1,"Mezzanine::EntityID const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::AreaEffect",2,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("new_AreaEffect",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_AreaEffect",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::AreaEffect *)new Mezzanine::AreaEffect((Mezzanine::EntityID const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AreaEffect__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  Mezzanine::AreaEffect *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::AreaEffect",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::AreaEffect",1,"Mezzanine::EntityID const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::AreaEffect",2,"Mezzanine::Physics::CollisionShape *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::AreaEffect::AreaEffect",3,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("new_AreaEffect",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("new_AreaEffect",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_AreaEffect",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::AreaEffect *)new Mezzanine::AreaEffect((Mezzanine::EntityID const &)*arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffect,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AreaEffect(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AreaEffect__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_AreaEffect__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_AreaEffect__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AreaEffect'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AreaEffect::AreaEffect(Mezzanine::World *)\n"
    "    Mezzanine::AreaEffect::AreaEffect(Mezzanine::EntityID const &,Mezzanine::World *)\n"
    "    Mezzanine::AreaEffect::AreaEffect(Mezzanine::EntityID const &,Mezzanine::Physics::CollisionShape *,Mezzanine::World *)\n");
  lua_error(L);return 0;
}


static int _wrap_AreaEffect_GetType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::EntityType result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetType",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetType",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::EntityType)((Mezzanine::AreaEffect const *)arg1)->GetType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetGhostProxy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Physics::GhostProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetGhostProxy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetGhostProxy",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetGhostProxy",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::Physics::GhostProxy *)((Mezzanine::AreaEffect const *)arg1)->GetGhostProxy();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Physics__GhostProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_ApplyEffect(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::ApplyEffect",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::ApplyEffect",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_ApplyEffect",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  (arg1)->ApplyEffect();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_SetSyncTarget(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Entity *arg2 = (Mezzanine::Entity *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::SetSyncTarget",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::SetSyncTarget",1,"Mezzanine::AreaEffect *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::SetSyncTarget",2,"Mezzanine::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_SetSyncTarget",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("AreaEffect_SetSyncTarget",2,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  (arg1)->SetSyncTarget(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetSyncTarget(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetSyncTarget",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetSyncTarget",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetSyncTarget",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::Entity *)((Mezzanine::AreaEffect const *)arg1)->GetSyncTarget();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetNumOverlappingObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetNumOverlappingObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetNumOverlappingObjects",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetNumOverlappingObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::AreaEffect const *)arg1)->GetNumOverlappingObjects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetNumAddedObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetNumAddedObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetNumAddedObjects",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetNumAddedObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::AreaEffect const *)arg1)->GetNumAddedObjects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetNumRemovedObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetNumRemovedObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetNumRemovedObjects",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetNumRemovedObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::AreaEffect const *)arg1)->GetNumRemovedObjects();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetOverlappingObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::AreaEffect::ObjectContainer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetOverlappingObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetOverlappingObjects",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetOverlappingObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::AreaEffect::ObjectContainer *) &(arg1)->GetOverlappingObjects();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__Entity_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetAddedObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::AreaEffect::ObjectContainer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetAddedObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetAddedObjects",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetAddedObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::AreaEffect::ObjectContainer *) &(arg1)->GetAddedObjects();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__Entity_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetRemovedObjects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::AreaEffect::ObjectContainer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetRemovedObjects",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetRemovedObjects",1,"Mezzanine::AreaEffect *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetRemovedObjects",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = (Mezzanine::AreaEffect::ObjectContainer *) &(arg1)->GetRemovedObjects();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__Entity_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoSerializeProperties",1,"Mezzanine::AreaEffect const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoSerializeProperties",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffect_ProtoSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::AreaEffect const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoDeSerializeProperties",1,"Mezzanine::AreaEffect *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::ProtoDeSerializeProperties",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AreaEffect_ProtoDeSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::GetDerivedSerializableName",1,"Mezzanine::AreaEffect const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  result = ((Mezzanine::AreaEffect const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::GetSerializableName",0,0)
  result = Mezzanine::AreaEffect::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffect__Update(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffect::_Update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffect::_Update",1,"Mezzanine::AreaEffect *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AreaEffect::_Update",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffect,0))){
    SWIG_fail_ptr("AreaEffect__Update",1,SWIGTYPE_p_Mezzanine__AreaEffect);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->_Update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AreaEffect(void *obj) {
Mezzanine::AreaEffect *arg1 = (Mezzanine::AreaEffect *) obj;
delete arg1;
}
static int _proxy__wrap_new_AreaEffect(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AreaEffect);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AreaEffect_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AreaEffect_methods[]= {
    { "GetType", _wrap_AreaEffect_GetType},
    { "GetGhostProxy", _wrap_AreaEffect_GetGhostProxy},
    { "ApplyEffect", _wrap_AreaEffect_ApplyEffect},
    { "SetSyncTarget", _wrap_AreaEffect_SetSyncTarget},
    { "GetSyncTarget", _wrap_AreaEffect_GetSyncTarget},
    { "GetNumOverlappingObjects", _wrap_AreaEffect_GetNumOverlappingObjects},
    { "GetNumAddedObjects", _wrap_AreaEffect_GetNumAddedObjects},
    { "GetNumRemovedObjects", _wrap_AreaEffect_GetNumRemovedObjects},
    { "GetOverlappingObjects", _wrap_AreaEffect_GetOverlappingObjects},
    { "GetAddedObjects", _wrap_AreaEffect_GetAddedObjects},
    { "GetRemovedObjects", _wrap_AreaEffect_GetRemovedObjects},
    { "ProtoSerializeProperties", _wrap_AreaEffect_ProtoSerializeProperties},
    { "ProtoDeSerializeProperties", _wrap_AreaEffect_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_AreaEffect_GetDerivedSerializableName},
    { "_Update", _wrap_AreaEffect__Update},
    {0,0}
};
static swig_lua_method swig_AreaEffect_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AreaEffect_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AreaEffect_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AreaEffect_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_AreaEffect_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_AreaEffect_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AreaEffect_Sf_SwigStatic = {
    "AreaEffect",
    swig_AreaEffect_Sf_SwigStatic_methods,
    swig_AreaEffect_Sf_SwigStatic_attributes,
    swig_AreaEffect_Sf_SwigStatic_constants,
    swig_AreaEffect_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AreaEffect_bases[] = {0,0};
static const char *swig_AreaEffect_base_names[] = {"Mezzanine::Entity *",0};
static swig_lua_class _wrap_class_AreaEffect = { "AreaEffect", "AreaEffect", &SWIGTYPE_p_Mezzanine__AreaEffect,_proxy__wrap_new_AreaEffect, swig_delete_AreaEffect, swig_AreaEffect_methods, swig_AreaEffect_attributes, &swig_AreaEffect_Sf_SwigStatic, swig_AreaEffect_meta, swig_AreaEffect_bases, swig_AreaEffect_base_names };

static void swig_delete_AreaEffectFactory(void *obj) {
Mezzanine::AreaEffectFactory *arg1 = (Mezzanine::AreaEffectFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_AreaEffectFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AreaEffectFactory_methods[]= {
    {0,0}
};
static swig_lua_method swig_AreaEffectFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AreaEffectFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AreaEffectFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AreaEffectFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AreaEffectFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AreaEffectFactory_Sf_SwigStatic = {
    "AreaEffectFactory",
    swig_AreaEffectFactory_Sf_SwigStatic_methods,
    swig_AreaEffectFactory_Sf_SwigStatic_attributes,
    swig_AreaEffectFactory_Sf_SwigStatic_constants,
    swig_AreaEffectFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AreaEffectFactory_bases[] = {0,0};
static const char *swig_AreaEffectFactory_base_names[] = {"Mezzanine::EntityFactory *",0};
static swig_lua_class _wrap_class_AreaEffectFactory = { "AreaEffectFactory", "AreaEffectFactory", &SWIGTYPE_p_Mezzanine__AreaEffectFactory,0, swig_delete_AreaEffectFactory, swig_AreaEffectFactory_methods, swig_AreaEffectFactory_attributes, &swig_AreaEffectFactory_Sf_SwigStatic, swig_AreaEffectFactory_meta, swig_AreaEffectFactory_bases, swig_AreaEffectFactory_base_names };

static int _wrap_Plane_Normal_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Normal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Normal",1,"Mezzanine::Plane *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Plane::Normal",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Normal_set",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Normal_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Normal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Normal_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Normal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Normal",1,"Mezzanine::Plane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Normal_get",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Normal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Distance_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Distance",1,"Mezzanine::Plane *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Plane::Distance",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Distance_set",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Distance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Distance_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Plane::Distance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Distance",1,"Mezzanine::Plane *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Distance_get",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Real) ((arg1)->Distance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",0,0)
  result = (Mezzanine::Plane *)new Mezzanine::Plane();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Plane const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Plane &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Plane &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Plane",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Plane",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Plane",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Plane *arg1 = 0 ;
  Mezzanine::Plane *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Plane",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Plane::Plane",1,"Ogre::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("new_Plane",1,SWIGTYPE_p_Ogre__Plane);
  }
  
  result = (Mezzanine::Plane *)new Mezzanine::Plane((Ogre::Plane const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Plane(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Plane__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Plane__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Plane__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Plane__SWIG_6(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Plane__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Plane__SWIG_5(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Plane'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::Plane()\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Plane const &)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Plane &&)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Plane(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Plane(Ogre::Plane const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_Define__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  Mezzanine::Vector3 *arg4 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::Define",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Define",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Define",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::Define",3,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::Plane::Define",4,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Define",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_Define",4,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Define((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3,(Mezzanine::Vector3 const &)*arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_Define(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_Define__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Plane_Define__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Plane_Define__SWIG_2(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_Define'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Plane::Define(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_GetSide__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  MathTools::PlaneSide result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSide",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetSide",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetSide",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetSide",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->GetSide((Mezzanine::Vector3 const &)*arg2);
  {
    MathTools::PlaneSide * resultptr = new MathTools::PlaneSide((const MathTools::PlaneSide &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MathTools__PlaneSide,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSide__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  MathTools::PlaneSide result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSide",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetSide",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetSide",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Plane::GetSide",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetSide",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetSide",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->GetSide((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  {
    MathTools::PlaneSide * resultptr = new MathTools::PlaneSide((const MathTools::PlaneSide &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MathTools__PlaneSide,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSide(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_GetSide__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Plane_GetSide__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_GetSide'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::GetSide(Mezzanine::Vector3 const &) const\n"
    "    Mezzanine::Plane::GetSide(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_GetDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetDistance",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetDistance",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetDistance",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Plane_GetDistance",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Plane const *)arg1)->GetDistance((Mezzanine::Vector3 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetOverlap(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Ray result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetOverlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetOverlap",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::GetOverlap",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOverlap",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOverlap",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->GetOverlap((Mezzanine::Plane const &)*arg2);
  {
    Mezzanine::Ray * resultptr = new Mezzanine::Ray((const Mezzanine::Ray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::IsOverlapping",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->IsOverlapping((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_IsOverlapping(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Plane_IsOverlapping__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Plane_IsOverlapping'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::Sphere const &) const\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::AxisAlignedBox const &) const\n"
    "    Mezzanine::Plane::IsOverlapping(Mezzanine::Plane const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Plane_Intersects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::Plane::RayTestResult result;
  
  SWIG_check_num_args("Mezzanine::Plane::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::Intersects",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_Intersects",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Plane_Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->Intersects((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::Plane::RayTestResult * resultptr = new Mezzanine::Plane::RayTestResult((const Mezzanine::Plane::RayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MathTools__PlaneTestResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ExtractOgrePlane(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Ogre::Plane *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ExtractOgrePlane",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ExtractOgrePlane",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ExtractOgrePlane",2,"Ogre::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ExtractOgrePlane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Plane,0))){
    SWIG_fail_ptr("Plane_ExtractOgrePlane",2,SWIGTYPE_p_Ogre__Plane);
  }
  
  (arg1)->ExtractOgrePlane((Ogre::Plane const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetOgrePlane(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Ogre::Plane result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetOgrePlane",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::GetOgrePlane",1,"Mezzanine::Plane const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_GetOgrePlane",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = ((Mezzanine::Plane const *)arg1)->GetOgrePlane();
  {
    Ogre::Plane * resultptr = new Ogre::Plane((const Ogre::Plane &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Plane,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ProtoSerialize",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Plane_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Plane const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Plane::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::ProtoDeSerialize",1,"Mezzanine::Plane *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Plane_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Plane::GetSerializableName",0,0)
  result = Mezzanine::Plane::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Plane___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Plane *arg1 = (Mezzanine::Plane *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Plane::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Plane::operator ==",1,"Mezzanine::Plane const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Plane::operator ==",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane___eq",1,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Plane___eq",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Plane const *)arg1)->operator ==((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Plane(void *obj) {
Mezzanine::Plane *arg1 = (Mezzanine::Plane *) obj;
delete arg1;
}
static int _proxy__wrap_new_Plane(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Plane);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Plane_attributes[] = {
    { "Normal", _wrap_Plane_Normal_get, _wrap_Plane_Normal_set },
    { "Distance", _wrap_Plane_Distance_get, _wrap_Plane_Distance_set },
    {0,0,0}
};
static swig_lua_method swig_Plane_methods[]= {
    { "Define", _wrap_Plane_Define},
    { "GetSide", _wrap_Plane_GetSide},
    { "GetDistance", _wrap_Plane_GetDistance},
    { "GetOverlap", _wrap_Plane_GetOverlap},
    { "IsOverlapping", _wrap_Plane_IsOverlapping},
    { "Intersects", _wrap_Plane_Intersects},
    { "ExtractOgrePlane", _wrap_Plane_ExtractOgrePlane},
    { "GetOgrePlane", _wrap_Plane_GetOgrePlane},
    { "ProtoSerialize", _wrap_Plane_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Plane_ProtoDeSerialize},
    { "__eq", _wrap_Plane___eq},
    {0,0}
};
static swig_lua_method swig_Plane_meta[] = {
    { "__eq", _wrap_Plane___eq},
    {0,0}
};

static swig_lua_attribute swig_Plane_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Plane_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Plane_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Plane_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Plane_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Plane_Sf_SwigStatic = {
    "Plane",
    swig_Plane_Sf_SwigStatic_methods,
    swig_Plane_Sf_SwigStatic_attributes,
    swig_Plane_Sf_SwigStatic_constants,
    swig_Plane_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Plane_bases[] = {0};
static const char *swig_Plane_base_names[] = {0};
static swig_lua_class _wrap_class_Plane = { "Plane", "Plane", &SWIGTYPE_p_Mezzanine__Plane,_proxy__wrap_new_Plane, swig_delete_Plane, swig_Plane_methods, swig_Plane_attributes, &swig_Plane_Sf_SwigStatic, swig_Plane_meta, swig_Plane_bases, swig_Plane_base_names };

static int _wrap_AxisAlignedBox_MinExt_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::MinExt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MinExt",1,"Mezzanine::AxisAlignedBox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MinExt",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_MinExt_set",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_MinExt_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->MinExt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_MinExt_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::MinExt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MinExt",1,"Mezzanine::AxisAlignedBox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_MinExt_get",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->MinExt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_MaxExt_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::MaxExt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MaxExt",1,"Mezzanine::AxisAlignedBox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MaxExt",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_MaxExt_set",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_MaxExt_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->MaxExt = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_MaxExt_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::MaxExt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::MaxExt",1,"Mezzanine::AxisAlignedBox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_MaxExt_get",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->MaxExt);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::AxisAlignedBox",0,0)
  result = (Mezzanine::AxisAlignedBox *)new Mezzanine::AxisAlignedBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = 0 ;
  Mezzanine::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("new_AxisAlignedBox",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::AxisAlignedBox *)new Mezzanine::AxisAlignedBox((Mezzanine::AxisAlignedBox const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = 0 ;
  Mezzanine::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,"Mezzanine::AxisAlignedBox &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("new_AxisAlignedBox",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::AxisAlignedBox *)new Mezzanine::AxisAlignedBox((Mezzanine::AxisAlignedBox &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::AxisAlignedBox",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::AxisAlignedBox",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_AxisAlignedBox",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_AxisAlignedBox",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::AxisAlignedBox *)new Mezzanine::AxisAlignedBox((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::AxisAlignedBox *arg1 = 0 ;
  Mezzanine::AxisAlignedBox *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::AxisAlignedBox",1,"Ogre::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__AxisAlignedBox,0))){
    SWIG_fail_ptr("new_AxisAlignedBox",1,SWIGTYPE_p_Ogre__AxisAlignedBox);
  }
  
  result = (Mezzanine::AxisAlignedBox *)new Mezzanine::AxisAlignedBox((Ogre::AxisAlignedBox const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AxisAlignedBox(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AxisAlignedBox__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AxisAlignedBox__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AxisAlignedBox__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_AxisAlignedBox__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_AxisAlignedBox__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AxisAlignedBox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AxisAlignedBox::AxisAlignedBox()\n"
    "    Mezzanine::AxisAlignedBox::AxisAlignedBox(Mezzanine::AxisAlignedBox const &)\n"
    "    Mezzanine::AxisAlignedBox::AxisAlignedBox(Mezzanine::AxisAlignedBox &&)\n"
    "    Mezzanine::AxisAlignedBox::AxisAlignedBox(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::AxisAlignedBox::AxisAlignedBox(Ogre::AxisAlignedBox const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AxisAlignedBox_IsZero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::IsZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsZero",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsZero",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->IsZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetVolume(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetVolume",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetVolume",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Real)((Mezzanine::AxisAlignedBox const *)arg1)->GetVolume();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetOverlap(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::AxisAlignedBox result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetOverlap",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetOverlap",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetOverlap",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetOverlap",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetOverlap",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetOverlap((Mezzanine::AxisAlignedBox const &)*arg2);
  {
    Mezzanine::AxisAlignedBox * resultptr = new Mezzanine::AxisAlignedBox((const Mezzanine::AxisAlignedBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__AxisAlignedBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_Expand__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::Expand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Expand",1,"Mezzanine::AxisAlignedBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Expand",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_Expand",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_Expand",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Expand((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_Expand__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::Expand",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Expand",1,"Mezzanine::AxisAlignedBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Expand",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_Expand",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_Expand",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  (arg1)->Expand((Mezzanine::AxisAlignedBox const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_Expand(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AxisAlignedBox_Expand__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AxisAlignedBox_Expand__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AxisAlignedBox_Expand'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AxisAlignedBox::Expand(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::AxisAlignedBox::Expand(Mezzanine::AxisAlignedBox const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AxisAlignedBox_IsInside(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::IsInside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsInside",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsInside",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsInside",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsInside",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->IsInside((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_IsOverlapping__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->IsOverlapping((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_IsOverlapping__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->IsOverlapping((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_IsOverlapping__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::IsOverlapping",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("AxisAlignedBox_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->IsOverlapping((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_IsOverlapping(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AxisAlignedBox_IsOverlapping__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AxisAlignedBox_IsOverlapping__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_AxisAlignedBox_IsOverlapping__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AxisAlignedBox_IsOverlapping'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::AxisAlignedBox::IsOverlapping(Mezzanine::Sphere const &) const\n"
    "    Mezzanine::AxisAlignedBox::IsOverlapping(Mezzanine::AxisAlignedBox const &) const\n"
    "    Mezzanine::AxisAlignedBox::IsOverlapping(Mezzanine::Plane const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_AxisAlignedBox_Intersects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::AxisAlignedBox::RayTestResult result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Intersects",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_Intersects",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("AxisAlignedBox_Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->Intersects((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::AxisAlignedBox::RayTestResult * resultptr = new Mezzanine::AxisAlignedBox::RayTestResult((const Mezzanine::AxisAlignedBox::RayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MathTools__GeometryRayTestResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_SetExtents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Vector3 *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::SetExtents",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::SetExtents",1,"Mezzanine::AxisAlignedBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::SetExtents",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::SetExtents",3,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_SetExtents",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_SetExtents",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("AxisAlignedBox_SetExtents",3,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetExtents((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Vector3 const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetSize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetSize",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetSize",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetSize();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetHalfSize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetHalfSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetHalfSize",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetHalfSize",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetHalfSize();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetCenter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetCenter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetCenter",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetCenter",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetCenter();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetCorner(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox::AxisExtent arg2 ;
  Mezzanine::AxisAlignedBox::AxisExtent arg3 ;
  Mezzanine::AxisAlignedBox::AxisExtent arg4 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetCorner",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetCorner",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetCorner",2,"Mezzanine::AxisAlignedBox::AxisExtent const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetCorner",3,"Mezzanine::AxisAlignedBox::AxisExtent const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetCorner",4,"Mezzanine::AxisAlignedBox::AxisExtent const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetCorner",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  arg2 = (Mezzanine::AxisAlignedBox::AxisExtent const)(int)lua_tonumber(L, 2);
  arg3 = (Mezzanine::AxisAlignedBox::AxisExtent const)(int)lua_tonumber(L, 3);
  arg4 = (Mezzanine::AxisAlignedBox::AxisExtent const)(int)lua_tonumber(L, 4);
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetCorner(arg2,arg3,arg4);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetSideExtent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox::Side arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetSideExtent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetSideExtent",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetSideExtent",2,"Mezzanine::AxisAlignedBox::Side");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetSideExtent",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  arg2 = (Mezzanine::AxisAlignedBox::Side)(int)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::AxisAlignedBox const *)arg1)->GetSideExtent(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetSidePlane(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox::Side arg2 ;
  Mezzanine::Plane result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetSidePlane",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetSidePlane",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetSidePlane",2,"Mezzanine::AxisAlignedBox::Side");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetSidePlane",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  arg2 = (Mezzanine::AxisAlignedBox::Side)(int)lua_tonumber(L, 2);
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetSidePlane(arg2);
  {
    Mezzanine::Plane * resultptr = new Mezzanine::Plane((const Mezzanine::Plane &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Plane,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_ExtractOgreAABB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Ogre::AxisAlignedBox *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::ExtractOgreAABB",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ExtractOgreAABB",1,"Mezzanine::AxisAlignedBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ExtractOgreAABB",2,"Ogre::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_ExtractOgreAABB",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_ExtractOgreAABB",2,SWIGTYPE_p_Ogre__AxisAlignedBox);
  }
  
  (arg1)->ExtractOgreAABB((Ogre::AxisAlignedBox const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetOgreAABB(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Ogre::AxisAlignedBox result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetOgreAABB",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::GetOgreAABB",1,"Mezzanine::AxisAlignedBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_GetOgreAABB",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::AxisAlignedBox const *)arg1)->GetOgreAABB();
  {
    Ogre::AxisAlignedBox * resultptr = new Ogre::AxisAlignedBox((const Ogre::AxisAlignedBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__AxisAlignedBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ProtoSerialize",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AxisAlignedBox_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::AxisAlignedBox const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ProtoDeSerialize",1,"Mezzanine::AxisAlignedBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("AxisAlignedBox_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::GetSerializableName",0,0)
  result = Mezzanine::AxisAlignedBox::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator <",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator <",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___lt",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___lt",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->operator <((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator <=",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator <=",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___le",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___le",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->operator <=((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AxisAlignedBox___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AxisAlignedBox::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator ==",1,"Mezzanine::AxisAlignedBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AxisAlignedBox::operator ==",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___eq",1,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("AxisAlignedBox___eq",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AxisAlignedBox const *)arg1)->operator ==((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AxisAlignedBox(void *obj) {
Mezzanine::AxisAlignedBox *arg1 = (Mezzanine::AxisAlignedBox *) obj;
delete arg1;
}
static int _proxy__wrap_new_AxisAlignedBox(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AxisAlignedBox);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AxisAlignedBox_attributes[] = {
    { "MinExt", _wrap_AxisAlignedBox_MinExt_get, _wrap_AxisAlignedBox_MinExt_set },
    { "MaxExt", _wrap_AxisAlignedBox_MaxExt_get, _wrap_AxisAlignedBox_MaxExt_set },
    {0,0,0}
};
static swig_lua_method swig_AxisAlignedBox_methods[]= {
    { "IsZero", _wrap_AxisAlignedBox_IsZero},
    { "GetVolume", _wrap_AxisAlignedBox_GetVolume},
    { "GetOverlap", _wrap_AxisAlignedBox_GetOverlap},
    { "Expand", _wrap_AxisAlignedBox_Expand},
    { "IsInside", _wrap_AxisAlignedBox_IsInside},
    { "IsOverlapping", _wrap_AxisAlignedBox_IsOverlapping},
    { "Intersects", _wrap_AxisAlignedBox_Intersects},
    { "SetExtents", _wrap_AxisAlignedBox_SetExtents},
    { "GetSize", _wrap_AxisAlignedBox_GetSize},
    { "GetHalfSize", _wrap_AxisAlignedBox_GetHalfSize},
    { "GetCenter", _wrap_AxisAlignedBox_GetCenter},
    { "GetCorner", _wrap_AxisAlignedBox_GetCorner},
    { "GetSideExtent", _wrap_AxisAlignedBox_GetSideExtent},
    { "GetSidePlane", _wrap_AxisAlignedBox_GetSidePlane},
    { "ExtractOgreAABB", _wrap_AxisAlignedBox_ExtractOgreAABB},
    { "GetOgreAABB", _wrap_AxisAlignedBox_GetOgreAABB},
    { "ProtoSerialize", _wrap_AxisAlignedBox_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_AxisAlignedBox_ProtoDeSerialize},
    { "__lt", _wrap_AxisAlignedBox___lt},
    { "__le", _wrap_AxisAlignedBox___le},
    { "__eq", _wrap_AxisAlignedBox___eq},
    {0,0}
};
static swig_lua_method swig_AxisAlignedBox_meta[] = {
    { "__lt", _wrap_AxisAlignedBox___lt},
    { "__le", _wrap_AxisAlignedBox___le},
    { "__eq", _wrap_AxisAlignedBox___eq},
    {0,0}
};

static swig_lua_attribute swig_AxisAlignedBox_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AxisAlignedBox_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("AE_Min", Mezzanine::AxisAlignedBox::AE_Min)},
    {SWIG_LUA_CONSTTAB_INT("AE_Max", Mezzanine::AxisAlignedBox::AE_Max)},
    {SWIG_LUA_CONSTTAB_INT("SideMinX", Mezzanine::AxisAlignedBox::SideMinX)},
    {SWIG_LUA_CONSTTAB_INT("SideMinY", Mezzanine::AxisAlignedBox::SideMinY)},
    {SWIG_LUA_CONSTTAB_INT("SideMinZ", Mezzanine::AxisAlignedBox::SideMinZ)},
    {SWIG_LUA_CONSTTAB_INT("SideMaxX", Mezzanine::AxisAlignedBox::SideMaxX)},
    {SWIG_LUA_CONSTTAB_INT("SideMaxY", Mezzanine::AxisAlignedBox::SideMaxY)},
    {SWIG_LUA_CONSTTAB_INT("SideMaxZ", Mezzanine::AxisAlignedBox::SideMaxZ)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AxisAlignedBox_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_AxisAlignedBox_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_AxisAlignedBox_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AxisAlignedBox_Sf_SwigStatic = {
    "AxisAlignedBox",
    swig_AxisAlignedBox_Sf_SwigStatic_methods,
    swig_AxisAlignedBox_Sf_SwigStatic_attributes,
    swig_AxisAlignedBox_Sf_SwigStatic_constants,
    swig_AxisAlignedBox_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AxisAlignedBox_bases[] = {0};
static const char *swig_AxisAlignedBox_base_names[] = {0};
static swig_lua_class _wrap_class_AxisAlignedBox = { "AxisAlignedBox", "AxisAlignedBox", &SWIGTYPE_p_Mezzanine__AxisAlignedBox,_proxy__wrap_new_AxisAlignedBox, swig_delete_AxisAlignedBox, swig_AxisAlignedBox_methods, swig_AxisAlignedBox_attributes, &swig_AxisAlignedBox_Sf_SwigStatic, swig_AxisAlignedBox_meta, swig_AxisAlignedBox_bases, swig_AxisAlignedBox_base_names };

static int _wrap_new_BinaryBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",0,0)
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = 0 ;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,"Mezzanine::BinaryTools::BinaryBuffer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("new_BinaryBuffer",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer((Mezzanine::BinaryTools::BinaryBuffer const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Whole arg1 ;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,"Mezzanine::Whole const");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::Whole const)lua_tonumber(L, 1);
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer::Byte *arg1 = (Mezzanine::BinaryTools::BinaryBuffer::Byte *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,"Mezzanine::BinaryTools::BinaryBuffer::Byte *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_signed_char,0))){
    SWIG_fail_ptr("new_BinaryBuffer",1,SWIGTYPE_p_signed_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::String temp1 ;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,"Mezzanine::String const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",2,"Mezzanine::Boole const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer((Mezzanine::String const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::BinaryTools::BinaryBuffer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::BinaryTools::BinaryBuffer *)new Mezzanine::BinaryTools::BinaryBuffer((Mezzanine::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BinaryBuffer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BinaryBuffer__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BinaryBuffer__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BinaryBuffer__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_BinaryBuffer__SWIG_5(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_signed_char, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BinaryBuffer__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_BinaryBuffer__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_BinaryBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer()\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer(Mezzanine::BinaryTools::BinaryBuffer const &)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer(Mezzanine::Whole const)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer(Mezzanine::BinaryTools::BinaryBuffer::Byte *,Mezzanine::Whole const)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer(Mezzanine::String const &,Mezzanine::Boole const)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::BinaryBuffer(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BinaryBuffer_CreateBuffer(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::CreateBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::CreateBuffer",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_CreateBuffer",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  (arg1)->CreateBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_DeleteBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_DeleteBuffer",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->DeleteBuffer(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_DeleteBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_DeleteBuffer",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  (arg1)->DeleteBuffer();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_DeleteBuffer(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_BinaryBuffer_DeleteBuffer__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_BinaryBuffer_DeleteBuffer__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BinaryBuffer_DeleteBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer(Mezzanine::Whole const)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::DeleteBuffer()\n");
  lua_error(L);return 0;
}


static int _wrap_BinaryBuffer_CreateFromBase64(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::CreateFromBase64",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::CreateFromBase64",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::CreateFromBase64",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_CreateFromBase64",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  (arg1)->CreateFromBase64((Mezzanine::String const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_ToBase64String(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::ToBase64String",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::ToBase64String",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_ToBase64String",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  result = (arg1)->ToBase64String();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_Concatenate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::BinaryTools::BinaryBuffer::Byte *arg2 = (Mezzanine::BinaryTools::BinaryBuffer::Byte *) 0 ;
  Mezzanine::Whole arg3 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",2,"Mezzanine::BinaryTools::BinaryBuffer::Byte const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",3,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_Concatenate",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_signed_char,0))){
    SWIG_fail_ptr("BinaryBuffer_Concatenate",2,SWIGTYPE_p_signed_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole const)lua_tonumber(L, 3);
  (arg1)->Concatenate((Mezzanine::BinaryTools::BinaryBuffer::Byte const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_Concatenate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::BinaryTools::BinaryBuffer arg2 ;
  Mezzanine::BinaryTools::BinaryBuffer *argp2 ;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::Concatenate",2,"Mezzanine::BinaryTools::BinaryBuffer const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_Concatenate",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_Concatenate",2,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  arg2 = *argp2;
  
  (arg1)->Concatenate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_Concatenate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BinaryBuffer_Concatenate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_signed_char, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_BinaryBuffer_Concatenate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'BinaryBuffer_Concatenate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::Concatenate(Mezzanine::BinaryTools::BinaryBuffer::Byte const *,Mezzanine::Whole const)\n"
    "    Mezzanine::BinaryTools::BinaryBuffer::Concatenate(Mezzanine::BinaryTools::BinaryBuffer const)\n");
  lua_error(L);return 0;
}


static int _wrap_BinaryBuffer_ToString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::ToString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::ToString",1,"Mezzanine::BinaryTools::BinaryBuffer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_ToString",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  result = (arg1)->ToString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BinaryBuffer_GetSize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::BinaryBuffer::GetSize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::BinaryBuffer::GetSize",1,"Mezzanine::BinaryTools::BinaryBuffer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("BinaryBuffer_GetSize",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::BinaryTools::BinaryBuffer const *)arg1)->GetSize();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BinaryBuffer(void *obj) {
Mezzanine::BinaryTools::BinaryBuffer *arg1 = (Mezzanine::BinaryTools::BinaryBuffer *) obj;
delete arg1;
}
static int _proxy__wrap_new_BinaryBuffer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_BinaryBuffer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_BinaryBuffer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_BinaryBuffer_methods[]= {
    { "CreateBuffer", _wrap_BinaryBuffer_CreateBuffer},
    { "DeleteBuffer", _wrap_BinaryBuffer_DeleteBuffer},
    { "CreateFromBase64", _wrap_BinaryBuffer_CreateFromBase64},
    { "ToBase64String", _wrap_BinaryBuffer_ToBase64String},
    { "Concatenate", _wrap_BinaryBuffer_Concatenate},
    { "ToString", _wrap_BinaryBuffer_ToString},
    { "GetSize", _wrap_BinaryBuffer_GetSize},
    {0,0}
};
static swig_lua_method swig_BinaryBuffer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_BinaryBuffer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_BinaryBuffer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_BinaryBuffer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_BinaryBuffer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_BinaryBuffer_Sf_SwigStatic = {
    "BinaryBuffer",
    swig_BinaryBuffer_Sf_SwigStatic_methods,
    swig_BinaryBuffer_Sf_SwigStatic_attributes,
    swig_BinaryBuffer_Sf_SwigStatic_constants,
    swig_BinaryBuffer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_BinaryBuffer_bases[] = {0};
static const char *swig_BinaryBuffer_base_names[] = {0};
static swig_lua_class _wrap_class_BinaryBuffer = { "BinaryBuffer", "BinaryBuffer", &SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,_proxy__wrap_new_BinaryBuffer, swig_delete_BinaryBuffer, swig_BinaryBuffer_methods, swig_BinaryBuffer_attributes, &swig_BinaryBuffer_Sf_SwigStatic, swig_BinaryBuffer_meta, swig_BinaryBuffer_bases, swig_BinaryBuffer_base_names };

static int _wrap_IsBase64(lua_State* L) {
  int SWIG_arg = 0;
  unsigned char arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::IsBase64",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::IsBase64",1,"unsigned char");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (unsigned char)lua_tonumber(L, 1);
  result = (Mezzanine::Boole)Mezzanine::BinaryTools::IsBase64(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base64Encode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::Base64Encode",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::Base64Encode",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::BinaryTools::Base64Encode((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base64Encode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::BinaryTools::BinaryBuffer *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::Base64Encode",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::Base64Encode",1,"Mezzanine::BinaryTools::BinaryBuffer const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,0))){
    SWIG_fail_ptr("Base64Encode",1,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer);
  }
  
  result = Mezzanine::BinaryTools::Base64Encode((Mezzanine::BinaryTools::BinaryBuffer const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base64Encode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::UInt8 *arg1 = (Mezzanine::UInt8 *) 0 ;
  unsigned int arg2 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::Base64Encode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::Base64Encode",1,"Mezzanine::UInt8 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::BinaryTools::Base64Encode",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_unsigned_char,0))){
    SWIG_fail_ptr("Base64Encode",1,SWIGTYPE_p_unsigned_char);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = Mezzanine::BinaryTools::Base64Encode((unsigned char const *)arg1,arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Base64Encode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Base64Encode__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Base64Encode__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_unsigned_char, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Base64Encode__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Base64Encode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::BinaryTools::Base64Encode(Mezzanine::String const &)\n"
    "    Mezzanine::BinaryTools::Base64Encode(Mezzanine::BinaryTools::BinaryBuffer const &)\n"
    "    Mezzanine::BinaryTools::Base64Encode(Mezzanine::UInt8 const *,unsigned int)\n");
  lua_error(L);return 0;
}


static int _wrap_Base64Decode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::BinaryTools::BinaryBuffer result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::Base64Decode",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::Base64Decode",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::BinaryTools::Base64Decode((std::string const &)*arg1);
  {
    Mezzanine::BinaryTools::BinaryBuffer * resultptr = new Mezzanine::BinaryTools::BinaryBuffer((const Mezzanine::BinaryTools::BinaryBuffer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__BinaryTools__BinaryBuffer,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PredictBinarySizeFromBase64String(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::PredictBinarySizeFromBase64String",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::PredictBinarySizeFromBase64String",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Whole)Mezzanine::BinaryTools::PredictBinarySizeFromBase64String((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PredictBase64StringSizeFromBinarySize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Whole arg1 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::BinaryTools::PredictBase64StringSizeFromBinarySize",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::BinaryTools::PredictBase64StringSizeFromBinarySize",1,"Mezzanine::Whole");
  SWIG_contract_assert((lua_tonumber(L,1)>=0),"number must not be negative")
  arg1 = (Mezzanine::Whole)lua_tonumber(L, 1);
  result = (Mezzanine::Whole)Mezzanine::BinaryTools::PredictBase64StringSizeFromBinarySize(arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Origin_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Origin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Origin",1,"Mezzanine::Ray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Ray::Origin",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Origin_set",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Ray_Origin_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Origin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Origin_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Origin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Origin",1,"Mezzanine::Ray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Origin_get",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Origin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Normal_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Normal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Normal",1,"Mezzanine::Ray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Ray::Normal",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Normal_set",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Ray_Normal_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Normal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Normal_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Normal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Normal",1,"Mezzanine::Ray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Normal_get",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Normal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Ray",0,0)
  result = (Mezzanine::Ray *)new Mezzanine::Ray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Ray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Ray::Ray",1,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Mezzanine::Ray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Ray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Ray::Ray",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Mezzanine::Vector3 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Ray",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Ray::Ray",1,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::Ray",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Ray",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Mezzanine::Vector3 const &)*arg1,(Mezzanine::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Ray *arg1 = 0 ;
  Mezzanine::Ray *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::Ray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Ray::Ray",1,"Ogre::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Ray,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_Ogre__Ray);
  }
  
  result = (Mezzanine::Ray *)new Mezzanine::Ray((Ogre::Ray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Ray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Ray__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Ray__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Ray__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Ray__SWIG_3(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Ray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Ray::Ray()\n"
    "    Mezzanine::Ray::Ray(Mezzanine::Ray const &)\n"
    "    Mezzanine::Ray::Ray(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Ray::Ray(Mezzanine::Vector3 const &,Mezzanine::Vector3 const &)\n"
    "    Mezzanine::Ray::Ray(Ogre::Ray const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Ray_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::GetNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::GetNormal",1,"Mezzanine::Ray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_GetNormal",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Vector3 *) &((Mezzanine::Ray const *)arg1)->GetNormal();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_SetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::SetNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::SetNormal",1,"Mezzanine::Ray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::SetNormal",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_SetNormal",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Ray_SetNormal",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetNormal((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_GetOrigin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::GetOrigin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::GetOrigin",1,"Mezzanine::Ray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_GetOrigin",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Vector3 *) &((Mezzanine::Ray const *)arg1)->GetOrigin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_SetOrigin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::SetOrigin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::SetOrigin",1,"Mezzanine::Ray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::SetOrigin",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_SetOrigin",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Ray_SetOrigin",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetOrigin((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_GetPointAtDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::Ray::GetPointAtDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::GetPointAtDistance",1,"Mezzanine::Ray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Ray::GetPointAtDistance",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_GetPointAtDistance",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Ray const *)arg1)->GetPointAtDistance((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Intersects__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Ray::PlaneRayTestResult result;
  
  SWIG_check_num_args("Mezzanine::Ray::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Intersects",1,"Mezzanine::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::Intersects",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Intersects",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Ray_Intersects",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = ((Mezzanine::Ray const *)arg1)->Intersects((Mezzanine::Plane const &)*arg2);
  {
    Mezzanine::Ray::PlaneRayTestResult * resultptr = new Mezzanine::Ray::PlaneRayTestResult((const Mezzanine::Ray::PlaneRayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MathTools__Point3DTestResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Intersects__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Ray::GeometryRayTestResult result;
  
  SWIG_check_num_args("Mezzanine::Ray::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Intersects",1,"Mezzanine::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::Intersects",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Intersects",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Ray_Intersects",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = ((Mezzanine::Ray const *)arg1)->Intersects((Mezzanine::Sphere const &)*arg2);
  {
    Mezzanine::Ray::GeometryRayTestResult * resultptr = new Mezzanine::Ray::GeometryRayTestResult((const Mezzanine::Ray::GeometryRayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MathTools__GeometryRayTestResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Intersects__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Ray::GeometryRayTestResult result;
  
  SWIG_check_num_args("Mezzanine::Ray::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::Intersects",1,"Mezzanine::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::Intersects",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_Intersects",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Ray_Intersects",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = ((Mezzanine::Ray const *)arg1)->Intersects((Mezzanine::AxisAlignedBox const &)*arg2);
  {
    Mezzanine::Ray::GeometryRayTestResult * resultptr = new Mezzanine::Ray::GeometryRayTestResult((const Mezzanine::Ray::GeometryRayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MathTools__GeometryRayTestResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_Intersects(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Ray_Intersects__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Ray_Intersects__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Ray_Intersects__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Ray_Intersects'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Ray::Intersects(Mezzanine::Plane const &) const\n"
    "    Mezzanine::Ray::Intersects(Mezzanine::Sphere const &) const\n"
    "    Mezzanine::Ray::Intersects(Mezzanine::AxisAlignedBox const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Ray_ExtractOgreRay(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Ogre::Ray *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::ExtractOgreRay",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::ExtractOgreRay",1,"Mezzanine::Ray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::ExtractOgreRay",2,"Ogre::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_ExtractOgreRay",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Ray,0))){
    SWIG_fail_ptr("Ray_ExtractOgreRay",2,SWIGTYPE_p_Ogre__Ray);
  }
  
  (arg1)->ExtractOgreRay((Ogre::Ray const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_GetOgreRay(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Ogre::Ray result;
  
  SWIG_check_num_args("Mezzanine::Ray::GetOgreRay",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::GetOgreRay",1,"Mezzanine::Ray const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_GetOgreRay",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Ray const *)arg1)->GetOgreRay();
  {
    Ogre::Ray * resultptr = new Ogre::Ray((const Ogre::Ray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Ray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::ProtoSerialize",1,"Mezzanine::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Ray_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Ray const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Ray::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::ProtoDeSerialize",1,"Mezzanine::Ray *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Ray_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Ray::GetSerializableName",0,0)
  result = Mezzanine::Ray::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Ray *arg1 = (Mezzanine::Ray *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Ray::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Ray::operator ==",1,"Mezzanine::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Ray::operator ==",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray___eq",1,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Ray___eq",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Ray const *)arg1)->operator ==((Mezzanine::Ray const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Ray(void *obj) {
Mezzanine::Ray *arg1 = (Mezzanine::Ray *) obj;
delete arg1;
}
static int _proxy__wrap_new_Ray(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Ray);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Ray_attributes[] = {
    { "Origin", _wrap_Ray_Origin_get, _wrap_Ray_Origin_set },
    { "Normal", _wrap_Ray_Normal_get, _wrap_Ray_Normal_set },
    {0,0,0}
};
static swig_lua_method swig_Ray_methods[]= {
    { "GetNormal", _wrap_Ray_GetNormal},
    { "SetNormal", _wrap_Ray_SetNormal},
    { "GetOrigin", _wrap_Ray_GetOrigin},
    { "SetOrigin", _wrap_Ray_SetOrigin},
    { "GetPointAtDistance", _wrap_Ray_GetPointAtDistance},
    { "Intersects", _wrap_Ray_Intersects},
    { "ExtractOgreRay", _wrap_Ray_ExtractOgreRay},
    { "GetOgreRay", _wrap_Ray_GetOgreRay},
    { "ProtoSerialize", _wrap_Ray_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Ray_ProtoDeSerialize},
    { "__eq", _wrap_Ray___eq},
    {0,0}
};
static swig_lua_method swig_Ray_meta[] = {
    { "__eq", _wrap_Ray___eq},
    {0,0}
};

static swig_lua_attribute swig_Ray_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Ray_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Ray_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Ray_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Ray_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Ray_Sf_SwigStatic = {
    "Ray",
    swig_Ray_Sf_SwigStatic_methods,
    swig_Ray_Sf_SwigStatic_attributes,
    swig_Ray_Sf_SwigStatic_constants,
    swig_Ray_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Ray_bases[] = {0};
static const char *swig_Ray_base_names[] = {0};
static swig_lua_class _wrap_class_Ray = { "Ray", "Ray", &SWIGTYPE_p_Mezzanine__Ray,_proxy__wrap_new_Ray, swig_delete_Ray, swig_Ray_methods, swig_Ray_attributes, &swig_Ray_Sf_SwigStatic, swig_Ray_meta, swig_Ray_bases, swig_Ray_base_names };

static int _wrap_EntityComponentID_ID_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID *arg1 = (Mezzanine::EntityComponentID *) 0 ;
  Mezzanine::EntityComponentID::IDType arg2 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::ID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentID::ID",1,"Mezzanine::EntityComponentID *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityComponentID::ID",2,"Mezzanine::EntityComponentID::IDType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("EntityComponentID_ID_set",1,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  arg2 = (Mezzanine::EntityComponentID::IDType)lua_tonumber(L, 2);
  if (arg1) (arg1)->ID = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentID_ID_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID *arg1 = (Mezzanine::EntityComponentID *) 0 ;
  Mezzanine::EntityComponentID::IDType result;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::ID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentID::ID",1,"Mezzanine::EntityComponentID *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("EntityComponentID_ID_get",1,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  result = (Mezzanine::EntityComponentID::IDType) ((arg1)->ID);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityComponentID__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::EntityComponentID",0,0)
  result = (Mezzanine::EntityComponentID *)new Mezzanine::EntityComponentID();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponentID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityComponentID__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID::IDType arg1 ;
  Mezzanine::EntityComponentID *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::EntityComponentID",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentID::EntityComponentID",1,"Mezzanine::EntityComponentID::IDType const");
  arg1 = (Mezzanine::EntityComponentID::IDType const)lua_tonumber(L, 1);
  result = (Mezzanine::EntityComponentID *)new Mezzanine::EntityComponentID(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponentID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityComponentID__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID *arg1 = 0 ;
  Mezzanine::EntityComponentID *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::EntityComponentID",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentID::EntityComponentID",1,"Mezzanine::EntityComponentID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("new_EntityComponentID",1,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  result = (Mezzanine::EntityComponentID *)new Mezzanine::EntityComponentID((Mezzanine::EntityComponentID const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponentID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityComponentID__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID *arg1 = 0 ;
  Mezzanine::EntityComponentID *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::EntityComponentID",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentID::EntityComponentID",1,"Mezzanine::EntityComponentID &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("new_EntityComponentID",1,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  result = (Mezzanine::EntityComponentID *)new Mezzanine::EntityComponentID((Mezzanine::EntityComponentID &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponentID,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityComponentID(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EntityComponentID__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityComponentID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EntityComponentID__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityComponentID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EntityComponentID__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_EntityComponentID__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_EntityComponentID'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityComponentID::EntityComponentID()\n"
    "    Mezzanine::EntityComponentID::EntityComponentID(Mezzanine::EntityComponentID::IDType const)\n"
    "    Mezzanine::EntityComponentID::EntityComponentID(Mezzanine::EntityComponentID const &)\n"
    "    Mezzanine::EntityComponentID::EntityComponentID(Mezzanine::EntityComponentID &&)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityComponentID_IsInvalid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID *arg1 = (Mezzanine::EntityComponentID *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::IsInvalid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentID::IsInvalid",1,"Mezzanine::EntityComponentID const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("EntityComponentID_IsInvalid",1,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EntityComponentID const *)arg1)->IsInvalid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentID___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID *arg1 = (Mezzanine::EntityComponentID *) 0 ;
  Mezzanine::EntityComponentID *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentID::operator ==",1,"Mezzanine::EntityComponentID const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityComponentID::operator ==",2,"Mezzanine::EntityComponentID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("EntityComponentID___eq",1,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("EntityComponentID___eq",2,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EntityComponentID const *)arg1)->operator ==((Mezzanine::EntityComponentID const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentID___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID *arg1 = (Mezzanine::EntityComponentID *) 0 ;
  Mezzanine::EntityComponentID *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentID::operator <",1,"Mezzanine::EntityComponentID const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityComponentID::operator <",2,"Mezzanine::EntityComponentID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("EntityComponentID___lt",1,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("EntityComponentID___lt",2,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EntityComponentID const *)arg1)->operator <((Mezzanine::EntityComponentID const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentID_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID *arg1 = (Mezzanine::EntityComponentID *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentID::ProtoSerialize",1,"Mezzanine::EntityComponentID const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityComponentID::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("EntityComponentID_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityComponentID_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::EntityComponentID const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentID_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentID *arg1 = (Mezzanine::EntityComponentID *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentID::ProtoDeSerialize",1,"Mezzanine::EntityComponentID *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityComponentID::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentID,0))){
    SWIG_fail_ptr("EntityComponentID_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__EntityComponentID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityComponentID_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentID_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::EntityComponentID::GetSerializableName",0,0)
  result = Mezzanine::EntityComponentID::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityComponentID(void *obj) {
Mezzanine::EntityComponentID *arg1 = (Mezzanine::EntityComponentID *) obj;
delete arg1;
}
static int _proxy__wrap_new_EntityComponentID(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EntityComponentID);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EntityComponentID_attributes[] = {
    { "ID", _wrap_EntityComponentID_ID_get, _wrap_EntityComponentID_ID_set },
    {0,0,0}
};
static swig_lua_method swig_EntityComponentID_methods[]= {
    { "IsInvalid", _wrap_EntityComponentID_IsInvalid},
    { "__eq", _wrap_EntityComponentID___eq},
    { "__lt", _wrap_EntityComponentID___lt},
    { "ProtoSerialize", _wrap_EntityComponentID_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_EntityComponentID_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_EntityComponentID_meta[] = {
    { "__eq", _wrap_EntityComponentID___eq},
    { "__lt", _wrap_EntityComponentID___lt},
    {0,0}
};

static swig_lua_attribute swig_EntityComponentID_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntityComponentID_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_STRING("InvalidID", "Mezzanine::EntityComponentID::InvalidID")},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityComponentID_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_EntityComponentID_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_EntityComponentID_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityComponentID_Sf_SwigStatic = {
    "EntityComponentID",
    swig_EntityComponentID_Sf_SwigStatic_methods,
    swig_EntityComponentID_Sf_SwigStatic_attributes,
    swig_EntityComponentID_Sf_SwigStatic_constants,
    swig_EntityComponentID_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityComponentID_bases[] = {0};
static const char *swig_EntityComponentID_base_names[] = {0};
static swig_lua_class _wrap_class_EntityComponentID = { "EntityComponentID", "EntityComponentID", &SWIGTYPE_p_Mezzanine__EntityComponentID,_proxy__wrap_new_EntityComponentID, swig_delete_EntityComponentID, swig_EntityComponentID_methods, swig_EntityComponentID_attributes, &swig_EntityComponentID_Sf_SwigStatic, swig_EntityComponentID_meta, swig_EntityComponentID_bases, swig_EntityComponentID_base_names };

static int _wrap_EntityComponent_GetComponentType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::ComponentType result;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::GetComponentType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::GetComponentType",1,"Mezzanine::EntityComponent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_GetComponentType",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  result = (Mezzanine::ComponentType)((Mezzanine::EntityComponent const *)arg1)->GetComponentType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_Activate(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::Activate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::Activate",1,"Mezzanine::EntityComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_Activate",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  (arg1)->Activate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_Deactivate(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::Deactivate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::Deactivate",1,"Mezzanine::EntityComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_Deactivate",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  (arg1)->Deactivate();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_IsActivated(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::IsActivated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::IsActivated",1,"Mezzanine::EntityComponent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_IsActivated",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EntityComponent const *)arg1)->IsActivated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_GetParentEntity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::GetParentEntity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::GetParentEntity",1,"Mezzanine::EntityComponent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_GetParentEntity",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  result = (Mezzanine::Entity *)((Mezzanine::EntityComponent const *)arg1)->GetParentEntity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_GetComponentID(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::EntityComponentID result;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::GetComponentID",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::GetComponentID",1,"Mezzanine::EntityComponent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_GetComponentID",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  result = ((Mezzanine::EntityComponent const *)arg1)->GetComponentID();
  {
    Mezzanine::EntityComponentID * resultptr = new Mezzanine::EntityComponentID((const Mezzanine::EntityComponentID &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__EntityComponentID,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_GetCreator(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::EntityComponentManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::GetCreator",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::GetCreator",1,"Mezzanine::EntityComponent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_GetCreator",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  result = (Mezzanine::EntityComponentManager *)((Mezzanine::EntityComponent const *)arg1)->GetCreator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponentManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::ProtoSerialize",1,"Mezzanine::EntityComponent const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityComponent::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityComponent_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::EntityComponent const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::ProtoSerializeProperties",1,"Mezzanine::EntityComponent const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityComponent::ProtoSerializeProperties",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityComponent_ProtoSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::EntityComponent const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::ProtoDeSerialize",1,"Mezzanine::EntityComponent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityComponent::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityComponent_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::ProtoDeSerializeProperties",1,"Mezzanine::EntityComponent *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityComponent::ProtoDeSerializeProperties",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityComponent_ProtoDeSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::GetDerivedSerializableName",1,"Mezzanine::EntityComponent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  result = ((Mezzanine::EntityComponent const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::GetSerializableName",0,0)
  result = Mezzanine::EntityComponent::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponent__Bind(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) 0 ;
  Mezzanine::Entity *arg2 = (Mezzanine::Entity *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponent::_Bind",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponent::_Bind",1,"Mezzanine::EntityComponent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EntityComponent::_Bind",2,"Mezzanine::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponent__Bind",1,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("EntityComponent__Bind",2,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  (arg1)->_Bind(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityComponent(void *obj) {
Mezzanine::EntityComponent *arg1 = (Mezzanine::EntityComponent *) obj;
delete arg1;
}
static swig_lua_attribute swig_EntityComponent_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityComponent_methods[]= {
    { "GetComponentType", _wrap_EntityComponent_GetComponentType},
    { "Activate", _wrap_EntityComponent_Activate},
    { "Deactivate", _wrap_EntityComponent_Deactivate},
    { "IsActivated", _wrap_EntityComponent_IsActivated},
    { "GetParentEntity", _wrap_EntityComponent_GetParentEntity},
    { "GetComponentID", _wrap_EntityComponent_GetComponentID},
    { "GetCreator", _wrap_EntityComponent_GetCreator},
    { "ProtoSerialize", _wrap_EntityComponent_ProtoSerialize},
    { "ProtoSerializeProperties", _wrap_EntityComponent_ProtoSerializeProperties},
    { "ProtoDeSerialize", _wrap_EntityComponent_ProtoDeSerialize},
    { "ProtoDeSerializeProperties", _wrap_EntityComponent_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_EntityComponent_GetDerivedSerializableName},
    { "_Bind", _wrap_EntityComponent__Bind},
    {0,0}
};
static swig_lua_method swig_EntityComponent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntityComponent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntityComponent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityComponent_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_EntityComponent_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_EntityComponent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityComponent_Sf_SwigStatic = {
    "EntityComponent",
    swig_EntityComponent_Sf_SwigStatic_methods,
    swig_EntityComponent_Sf_SwigStatic_attributes,
    swig_EntityComponent_Sf_SwigStatic_constants,
    swig_EntityComponent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityComponent_bases[] = {0};
static const char *swig_EntityComponent_base_names[] = {0};
static swig_lua_class _wrap_class_EntityComponent = { "EntityComponent", "EntityComponent", &SWIGTYPE_p_Mezzanine__EntityComponent,0, swig_delete_EntityComponent, swig_EntityComponent_methods, swig_EntityComponent_attributes, &swig_EntityComponent_Sf_SwigStatic, swig_EntityComponent_meta, swig_EntityComponent_bases, swig_EntityComponent_base_names };

static int _wrap_EntityProxy_IsStatic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::IsStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::IsStatic",1,"Mezzanine::EntityProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_IsStatic",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::EntityProxy const *)arg1)->IsStatic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetTransform__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Transform *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::SetTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::SetTransform",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::SetTransform",2,"Mezzanine::Transform const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_SetTransform",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Transform,0))){
    SWIG_fail_ptr("EntityProxy_SetTransform",2,SWIGTYPE_p_Mezzanine__Transform);
  }
  
  (arg1)->SetTransform((Mezzanine::Transform const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetTransform__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Quaternion *arg3 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::SetTransform",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::SetTransform",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::SetTransform",2,"Mezzanine::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::EntityProxy::SetTransform",3,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_SetTransform",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("EntityProxy_SetTransform",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("EntityProxy_SetTransform",3,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetTransform((Mezzanine::Vector3 const &)*arg2,(Mezzanine::Quaternion const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetTransform(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Transform, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityProxy_SetTransform__SWIG_0(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EntityProxy_SetTransform__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityProxy_SetTransform'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityProxy::SetTransform(Mezzanine::Transform const &)\n"
    "    Mezzanine::EntityProxy::SetTransform(Mezzanine::Vector3 const &,Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityProxy_GetTransform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Transform result;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::GetTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::GetTransform",1,"Mezzanine::EntityProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_GetTransform",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  result = ((Mezzanine::EntityProxy const *)arg1)->GetTransform();
  {
    Mezzanine::Transform * resultptr = new Mezzanine::Transform((const Mezzanine::Transform &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Transform,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetLocation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::SetLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::SetLocation",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::SetLocation",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_SetLocation",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("EntityProxy_SetLocation",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetLocation((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetLocation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::SetLocation",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::SetLocation",1,"Mezzanine::EntityProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::SetLocation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::EntityProxy::SetLocation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::EntityProxy::SetLocation",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_SetLocation",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetLocation(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetLocation(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityProxy_SetLocation__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_EntityProxy_SetLocation__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityProxy_SetLocation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityProxy::SetLocation(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::EntityProxy::SetLocation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityProxy_GetLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::GetLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::GetLocation",1,"Mezzanine::EntityProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_GetLocation",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  result = ((Mezzanine::EntityProxy const *)arg1)->GetLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetOrientation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::SetOrientation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::SetOrientation",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::SetOrientation",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_SetOrientation",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("EntityProxy_SetOrientation",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->SetOrientation((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetOrientation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  Mezzanine::Real arg5 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::SetOrientation",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::SetOrientation",1,"Mezzanine::EntityProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::SetOrientation",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::EntityProxy::SetOrientation",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::EntityProxy::SetOrientation",4,"Mezzanine::Real const");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::EntityProxy::SetOrientation",5,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_SetOrientation",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  arg5 = (Mezzanine::Real const)lua_tonumber(L, 5);
  (arg1)->SetOrientation(arg2,arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetOrientation(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityProxy_SetOrientation__SWIG_0(L);
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_EntityProxy_SetOrientation__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityProxy_SetOrientation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityProxy::SetOrientation(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::EntityProxy::SetOrientation(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityProxy_GetOrientation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::GetOrientation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::GetOrientation",1,"Mezzanine::EntityProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_GetOrientation",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  result = ((Mezzanine::EntityProxy const *)arg1)->GetOrientation();
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetScale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::SetScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::SetScale",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::SetScale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_SetScale",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("EntityProxy_SetScale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->SetScale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetScale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::SetScale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::SetScale",1,"Mezzanine::EntityProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::SetScale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::EntityProxy::SetScale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::EntityProxy::SetScale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_SetScale",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->SetScale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_SetScale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityProxy_SetScale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_EntityProxy_SetScale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityProxy_SetScale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityProxy::SetScale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::EntityProxy::SetScale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityProxy_GetScale(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::GetScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::GetScale",1,"Mezzanine::EntityProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_GetScale",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  result = ((Mezzanine::EntityProxy const *)arg1)->GetScale();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_Translate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::Translate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::Translate",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::Translate",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_Translate",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("EntityProxy_Translate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Translate((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_Translate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::Translate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::Translate",1,"Mezzanine::EntityProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::Translate",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::EntityProxy::Translate",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::EntityProxy::Translate",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_Translate",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Translate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_Translate(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityProxy_Translate__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_EntityProxy_Translate__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityProxy_Translate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityProxy::Translate(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::EntityProxy::Translate(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityProxy_Yaw(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::Yaw",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::Yaw",1,"Mezzanine::EntityProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::Yaw",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_Yaw",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Yaw(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_Pitch(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::Pitch",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::Pitch",1,"Mezzanine::EntityProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::Pitch",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_Pitch",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Pitch(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_Roll(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::Roll",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::Roll",1,"Mezzanine::EntityProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::Roll",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_Roll",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Roll(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_Rotate__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::Rotate",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::Rotate",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::Rotate",2,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::EntityProxy::Rotate",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_Rotate",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("EntityProxy_Rotate",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->Rotate((Mezzanine::Vector3 const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_Rotate__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::Rotate",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::Rotate",2,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_Rotate",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("EntityProxy_Rotate",2,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  (arg1)->Rotate((Mezzanine::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_Rotate(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityProxy_Rotate__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_EntityProxy_Rotate__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityProxy_Rotate'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityProxy::Rotate(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::EntityProxy::Rotate(Mezzanine::Quaternion const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityProxy_Scale__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::Scale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::Scale",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::Scale",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_Scale",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("EntityProxy_Scale",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  (arg1)->Scale((Mezzanine::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_Scale__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::Scale",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::Scale",1,"Mezzanine::EntityProxy *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::Scale",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::EntityProxy::Scale",3,"Mezzanine::Real const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::EntityProxy::Scale",4,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_Scale",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real const)lua_tonumber(L, 4);
  (arg1)->Scale(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_Scale(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityProxy_Scale__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_EntityProxy_Scale__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityProxy_Scale'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityProxy::Scale(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::EntityProxy::Scale(Mezzanine::Real const,Mezzanine::Real const,Mezzanine::Real const)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityProxy_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoSerialize",1,"Mezzanine::EntityProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityProxy_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::EntityProxy const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_ProtoSerializeIsActivated(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::ProtoSerializeIsActivated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoSerializeIsActivated",1,"Mezzanine::EntityProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoSerializeIsActivated",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_ProtoSerializeIsActivated",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityProxy_ProtoSerializeIsActivated",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::EntityProxy const *)arg1)->ProtoSerializeIsActivated(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoSerializeProperties",1,"Mezzanine::EntityProxy const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoSerializeProperties",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityProxy_ProtoSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::EntityProxy const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoDeSerialize",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityProxy_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_ProtoDeSerializeIsActivated(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::ProtoDeSerializeIsActivated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoDeSerializeIsActivated",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoDeSerializeIsActivated",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_ProtoDeSerializeIsActivated",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityProxy_ProtoDeSerializeIsActivated",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeIsActivated((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoDeSerializeProperties",1,"Mezzanine::EntityProxy *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityProxy::ProtoDeSerializeProperties",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityProxy_ProtoDeSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityProxy::GetDerivedSerializableName",1,"Mezzanine::EntityProxy const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityProxy,0))){
    SWIG_fail_ptr("EntityProxy_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  result = ((Mezzanine::EntityProxy const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityProxy_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::EntityProxy::GetSerializableName",0,0)
  result = Mezzanine::EntityProxy::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityProxy(void *obj) {
Mezzanine::EntityProxy *arg1 = (Mezzanine::EntityProxy *) obj;
delete arg1;
}
static swig_lua_attribute swig_EntityProxy_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityProxy_methods[]= {
    { "IsStatic", _wrap_EntityProxy_IsStatic},
    { "SetTransform", _wrap_EntityProxy_SetTransform},
    { "GetTransform", _wrap_EntityProxy_GetTransform},
    { "SetLocation", _wrap_EntityProxy_SetLocation},
    { "GetLocation", _wrap_EntityProxy_GetLocation},
    { "SetOrientation", _wrap_EntityProxy_SetOrientation},
    { "GetOrientation", _wrap_EntityProxy_GetOrientation},
    { "SetScale", _wrap_EntityProxy_SetScale},
    { "GetScale", _wrap_EntityProxy_GetScale},
    { "Translate", _wrap_EntityProxy_Translate},
    { "Yaw", _wrap_EntityProxy_Yaw},
    { "Pitch", _wrap_EntityProxy_Pitch},
    { "Roll", _wrap_EntityProxy_Roll},
    { "Rotate", _wrap_EntityProxy_Rotate},
    { "Scale", _wrap_EntityProxy_Scale},
    { "ProtoSerialize", _wrap_EntityProxy_ProtoSerialize},
    { "ProtoSerializeIsActivated", _wrap_EntityProxy_ProtoSerializeIsActivated},
    { "ProtoSerializeProperties", _wrap_EntityProxy_ProtoSerializeProperties},
    { "ProtoDeSerialize", _wrap_EntityProxy_ProtoDeSerialize},
    { "ProtoDeSerializeIsActivated", _wrap_EntityProxy_ProtoDeSerializeIsActivated},
    { "ProtoDeSerializeProperties", _wrap_EntityProxy_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_EntityProxy_GetDerivedSerializableName},
    {0,0}
};
static swig_lua_method swig_EntityProxy_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntityProxy_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntityProxy_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityProxy_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_EntityProxy_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_EntityProxy_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityProxy_Sf_SwigStatic = {
    "EntityProxy",
    swig_EntityProxy_Sf_SwigStatic_methods,
    swig_EntityProxy_Sf_SwigStatic_attributes,
    swig_EntityProxy_Sf_SwigStatic_constants,
    swig_EntityProxy_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityProxy_bases[] = {0,0,0};
static const char *swig_EntityProxy_base_names[] = {"Mezzanine::EntityComponent *","Mezzanine::TransformableObject *",0};
static swig_lua_class _wrap_class_EntityProxy = { "EntityProxy", "EntityProxy", &SWIGTYPE_p_Mezzanine__EntityProxy,0, swig_delete_EntityProxy, swig_EntityProxy_methods, swig_EntityProxy_attributes, &swig_EntityProxy_Sf_SwigStatic, swig_EntityProxy_meta, swig_EntityProxy_bases, swig_EntityProxy_base_names };

static int _wrap_ManagerBase_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::Initialize",1,"Mezzanine::ManagerBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_Initialize",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::Deinitialize",1,"Mezzanine::ManagerBase *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_Deinitialize",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_IsInitialized(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::IsInitialized",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::IsInitialized",1,"Mezzanine::ManagerBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_IsInitialized",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::ManagerBase const *)arg1)->IsInitialized();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_GetInterfaceType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::GetInterfaceType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::GetInterfaceType",1,"Mezzanine::ManagerBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_GetInterfaceType",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::ManagerBase const *)arg1)->GetInterfaceType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_GetImplementationTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::GetImplementationTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::GetImplementationTypeName",1,"Mezzanine::ManagerBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_GetImplementationTypeName",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  result = ((Mezzanine::ManagerBase const *)arg1)->GetImplementationTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_GetInterfaceTypeAsString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::GetInterfaceTypeAsString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::GetInterfaceTypeAsString",1,"Mezzanine::ManagerBase const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerBase,0))){
    SWIG_fail_ptr("ManagerBase_GetInterfaceTypeAsString",1,SWIGTYPE_p_Mezzanine__ManagerBase);
  }
  
  result = ((Mezzanine::ManagerBase const *)arg1)->GetInterfaceTypeAsString();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_GetTypeAsString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase::ManagerType *arg1 = 0 ;
  Mezzanine::ManagerBase::ManagerType temp1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::GetTypeAsString",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::GetTypeAsString",1,"Mezzanine::ManagerBase::ManagerType const &");
  temp1=(Mezzanine::ManagerBase::ManagerType)(int)lua_tonumber(L,1); arg1=&temp1;
  result = Mezzanine::ManagerBase::GetTypeAsString((enum Mezzanine::ManagerBase::ManagerType const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerBase_GetTypeFromString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::ManagerBase::GetTypeFromString",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::ManagerBase::GetTypeFromString",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::ManagerBase::ManagerType)Mezzanine::ManagerBase::GetTypeFromString((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ManagerBase(void *obj) {
Mezzanine::ManagerBase *arg1 = (Mezzanine::ManagerBase *) obj;
delete arg1;
}
static swig_lua_attribute swig_ManagerBase_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ManagerBase_methods[]= {
    { "Initialize", _wrap_ManagerBase_Initialize},
    { "Deinitialize", _wrap_ManagerBase_Deinitialize},
    { "IsInitialized", _wrap_ManagerBase_IsInitialized},
    { "GetInterfaceType", _wrap_ManagerBase_GetInterfaceType},
    { "GetImplementationTypeName", _wrap_ManagerBase_GetImplementationTypeName},
    { "GetInterfaceTypeAsString", _wrap_ManagerBase_GetInterfaceTypeAsString},
    {0,0}
};
static swig_lua_method swig_ManagerBase_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ManagerBase_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ManagerBase_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MT_Undefined", Mezzanine::ManagerBase::MT_Undefined)},
    {SWIG_LUA_CONSTTAB_INT("MT_AudioManager", Mezzanine::ManagerBase::MT_AudioManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_AnimationManager", Mezzanine::ManagerBase::MT_AnimationManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_CollisionShapeManager", Mezzanine::ManagerBase::MT_CollisionShapeManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_CompositorManager", Mezzanine::ManagerBase::MT_CompositorManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_GraphicsManager", Mezzanine::ManagerBase::MT_GraphicsManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_InputManager", Mezzanine::ManagerBase::MT_InputManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_LogManager", Mezzanine::ManagerBase::MT_LogManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_MaterialManager", Mezzanine::ManagerBase::MT_MaterialManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_MeshManager", Mezzanine::ManagerBase::MT_MeshManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_NetworkManager", Mezzanine::ManagerBase::MT_NetworkManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_PlayerManager", Mezzanine::ManagerBase::MT_PlayerManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_ResourceManager", Mezzanine::ManagerBase::MT_ResourceManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_ScriptingManager", Mezzanine::ManagerBase::MT_ScriptingManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_TextureManager", Mezzanine::ManagerBase::MT_TextureManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_UIManager", Mezzanine::ManagerBase::MT_UIManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_EntityComponentManagerFirst", Mezzanine::ManagerBase::MT_EntityComponentManagerFirst)},
    {SWIG_LUA_CONSTTAB_INT("MT_PhysicsManager", Mezzanine::ManagerBase::MT_PhysicsManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_SceneManager", Mezzanine::ManagerBase::MT_SceneManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_SoundScapeManager", Mezzanine::ManagerBase::MT_SoundScapeManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_EntityComponentManagerLast", Mezzanine::ManagerBase::MT_EntityComponentManagerLast)},
    {SWIG_LUA_CONSTTAB_INT("MT_EntityManager", Mezzanine::ManagerBase::MT_EntityManager)},
    {SWIG_LUA_CONSTTAB_INT("MT_UserManagerFirst", Mezzanine::ManagerBase::MT_UserManagerFirst)},
    {SWIG_LUA_CONSTTAB_INT("MT_UserCreated", Mezzanine::ManagerBase::MT_UserCreated)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ManagerBase_Sf_SwigStatic_methods[]= {
    { "GetTypeAsString", _wrap_ManagerBase_GetTypeAsString},
    { "GetTypeFromString", _wrap_ManagerBase_GetTypeFromString},
    {0,0}
};
static swig_lua_class* swig_ManagerBase_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ManagerBase_Sf_SwigStatic = {
    "ManagerBase",
    swig_ManagerBase_Sf_SwigStatic_methods,
    swig_ManagerBase_Sf_SwigStatic_attributes,
    swig_ManagerBase_Sf_SwigStatic_constants,
    swig_ManagerBase_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ManagerBase_bases[] = {0};
static const char *swig_ManagerBase_base_names[] = {0};
static swig_lua_class _wrap_class_ManagerBase = { "ManagerBase", "ManagerBase", &SWIGTYPE_p_Mezzanine__ManagerBase,0, swig_delete_ManagerBase, swig_ManagerBase_methods, swig_ManagerBase_attributes, &swig_ManagerBase_Sf_SwigStatic, swig_ManagerBase_meta, swig_ManagerBase_bases, swig_ManagerBase_base_names };

static int _wrap_WorldManager_GetWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManager *arg1 = (Mezzanine::WorldManager *) 0 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldManager::GetWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManager::GetWorld",1,"Mezzanine::WorldManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("WorldManager_GetWorld",1,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  result = (Mezzanine::World *)((Mezzanine::WorldManager const *)arg1)->GetWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldManager_Pause(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManager *arg1 = (Mezzanine::WorldManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  
  SWIG_check_num_args("Mezzanine::WorldManager::Pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManager::Pause",1,"Mezzanine::WorldManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::WorldManager::Pause",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("WorldManager_Pause",1,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  (arg1)->Pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldManager_IsPaused(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManager *arg1 = (Mezzanine::WorldManager *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::WorldManager::IsPaused",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManager::IsPaused",1,"Mezzanine::WorldManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("WorldManager_IsPaused",1,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::WorldManager const *)arg1)->IsPaused();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldManager_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManager *arg1 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldManager::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManager::Initialize",1,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("WorldManager_Initialize",1,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldManager(void *obj) {
Mezzanine::WorldManager *arg1 = (Mezzanine::WorldManager *) obj;
delete arg1;
}
static swig_lua_attribute swig_WorldManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldManager_methods[]= {
    { "GetWorld", _wrap_WorldManager_GetWorld},
    { "Pause", _wrap_WorldManager_Pause},
    { "IsPaused", _wrap_WorldManager_IsPaused},
    { "Initialize", _wrap_WorldManager_Initialize},
    {0,0}
};
static swig_lua_method swig_WorldManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldManager_Sf_SwigStatic = {
    "WorldManager",
    swig_WorldManager_Sf_SwigStatic_methods,
    swig_WorldManager_Sf_SwigStatic_attributes,
    swig_WorldManager_Sf_SwigStatic_constants,
    swig_WorldManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldManager_bases[] = {0,0};
static const char *swig_WorldManager_base_names[] = {"Mezzanine::ManagerBase *",0};
static swig_lua_class _wrap_class_WorldManager = { "WorldManager", "WorldManager", &SWIGTYPE_p_Mezzanine__WorldManager,0, swig_delete_WorldManager, swig_WorldManager_methods, swig_WorldManager_attributes, &swig_WorldManager_Sf_SwigStatic, swig_WorldManager_meta, swig_WorldManager_bases, swig_WorldManager_base_names };

static int _wrap_EntityComponentManager_CreateComponent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentManager *arg1 = (Mezzanine::EntityComponentManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::EntityComponent *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentManager::CreateComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentManager::CreateComponent",1,"Mezzanine::EntityComponentManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityComponentManager::CreateComponent",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentManager,0))){
    SWIG_fail_ptr("EntityComponentManager_CreateComponent",1,SWIGTYPE_p_Mezzanine__EntityComponentManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityComponentManager_CreateComponent",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::EntityComponent *)(arg1)->CreateComponent((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentManager_GetComponentByID(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentManager *arg1 = (Mezzanine::EntityComponentManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  Mezzanine::EntityComponent *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentManager::GetComponentByID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentManager::GetComponentByID",1,"Mezzanine::EntityComponentManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityComponentManager::GetComponentByID",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentManager,0))){
    SWIG_fail_ptr("EntityComponentManager_GetComponentByID",1,SWIGTYPE_p_Mezzanine__EntityComponentManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  result = (Mezzanine::EntityComponent *)((Mezzanine::EntityComponentManager const *)arg1)->GetComponentByID(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponent,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentManager_GetNumComponents__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentManager *arg1 = (Mezzanine::EntityComponentManager *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::EntityComponentManager::GetNumComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentManager::GetNumComponents",1,"Mezzanine::EntityComponentManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentManager,0))){
    SWIG_fail_ptr("EntityComponentManager_GetNumComponents",1,SWIGTYPE_p_Mezzanine__EntityComponentManager);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::EntityComponentManager const *)arg1)->GetNumComponents();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentManager_GetNumComponents__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentManager *arg1 = (Mezzanine::EntityComponentManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::EntityComponentManager::GetNumComponents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentManager::GetNumComponents",1,"Mezzanine::EntityComponentManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityComponentManager::GetNumComponents",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentManager,0))){
    SWIG_fail_ptr("EntityComponentManager_GetNumComponents",1,SWIGTYPE_p_Mezzanine__EntityComponentManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  result = (Mezzanine::UInt32)((Mezzanine::EntityComponentManager const *)arg1)->GetNumComponents(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentManager_GetNumComponents(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityComponentManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EntityComponentManager_GetNumComponents__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityComponentManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EntityComponentManager_GetNumComponents__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityComponentManager_GetNumComponents'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityComponentManager::GetNumComponents() const\n"
    "    Mezzanine::EntityComponentManager::GetNumComponents(Mezzanine::UInt32 const) const\n");
  lua_error(L);return 0;
}


static int _wrap_EntityComponentManager_GetComponents(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentManager *arg1 = (Mezzanine::EntityComponentManager *) 0 ;
  SwigValueWrapper< std::vector< Mezzanine::EntityComponent * > > result;
  
  SWIG_check_num_args("Mezzanine::EntityComponentManager::GetComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentManager::GetComponents",1,"Mezzanine::EntityComponentManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentManager,0))){
    SWIG_fail_ptr("EntityComponentManager_GetComponents",1,SWIGTYPE_p_Mezzanine__EntityComponentManager);
  }
  
  result = ((Mezzanine::EntityComponentManager const *)arg1)->GetComponents();
  {
    Mezzanine::EntityComponentManager::ComponentVec * resultptr = new Mezzanine::EntityComponentManager::ComponentVec((const Mezzanine::EntityComponentManager::ComponentVec &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__EntityComponent_p_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentManager_DestroyComponent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentManager *arg1 = (Mezzanine::EntityComponentManager *) 0 ;
  Mezzanine::EntityComponent *arg2 = (Mezzanine::EntityComponent *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentManager::DestroyComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentManager::DestroyComponent",1,"Mezzanine::EntityComponentManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EntityComponentManager::DestroyComponent",2,"Mezzanine::EntityComponent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentManager,0))){
    SWIG_fail_ptr("EntityComponentManager_DestroyComponent",1,SWIGTYPE_p_Mezzanine__EntityComponentManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityComponent,0))){
    SWIG_fail_ptr("EntityComponentManager_DestroyComponent",2,SWIGTYPE_p_Mezzanine__EntityComponent);
  }
  
  (arg1)->DestroyComponent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentManager_DestroyAllComponents__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentManager *arg1 = (Mezzanine::EntityComponentManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentManager::DestroyAllComponents",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentManager::DestroyAllComponents",1,"Mezzanine::EntityComponentManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityComponentManager::DestroyAllComponents",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentManager,0))){
    SWIG_fail_ptr("EntityComponentManager_DestroyAllComponents",1,SWIGTYPE_p_Mezzanine__EntityComponentManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  (arg1)->DestroyAllComponents(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentManager_DestroyAllComponents__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityComponentManager *arg1 = (Mezzanine::EntityComponentManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityComponentManager::DestroyAllComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityComponentManager::DestroyAllComponents",1,"Mezzanine::EntityComponentManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityComponentManager,0))){
    SWIG_fail_ptr("EntityComponentManager_DestroyAllComponents",1,SWIGTYPE_p_Mezzanine__EntityComponentManager);
  }
  
  (arg1)->DestroyAllComponents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityComponentManager_DestroyAllComponents(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityComponentManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EntityComponentManager_DestroyAllComponents__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityComponentManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EntityComponentManager_DestroyAllComponents__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityComponentManager_DestroyAllComponents'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityComponentManager::DestroyAllComponents(Mezzanine::UInt32 const)\n"
    "    Mezzanine::EntityComponentManager::DestroyAllComponents()\n");
  lua_error(L);return 0;
}


static void swig_delete_EntityComponentManager(void *obj) {
Mezzanine::EntityComponentManager *arg1 = (Mezzanine::EntityComponentManager *) obj;
delete arg1;
}
static swig_lua_attribute swig_EntityComponentManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityComponentManager_methods[]= {
    { "CreateComponent", _wrap_EntityComponentManager_CreateComponent},
    { "GetComponentByID", _wrap_EntityComponentManager_GetComponentByID},
    { "GetNumComponents", _wrap_EntityComponentManager_GetNumComponents},
    { "GetComponents", _wrap_EntityComponentManager_GetComponents},
    { "DestroyComponent", _wrap_EntityComponentManager_DestroyComponent},
    { "DestroyAllComponents", _wrap_EntityComponentManager_DestroyAllComponents},
    {0,0}
};
static swig_lua_method swig_EntityComponentManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntityComponentManager_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntityComponentManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityComponentManager_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EntityComponentManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityComponentManager_Sf_SwigStatic = {
    "EntityComponentManager",
    swig_EntityComponentManager_Sf_SwigStatic_methods,
    swig_EntityComponentManager_Sf_SwigStatic_attributes,
    swig_EntityComponentManager_Sf_SwigStatic_constants,
    swig_EntityComponentManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityComponentManager_bases[] = {0,0};
static const char *swig_EntityComponentManager_base_names[] = {"Mezzanine::WorldManager *",0};
static swig_lua_class _wrap_class_EntityComponentManager = { "EntityComponentManager", "EntityComponentManager", &SWIGTYPE_p_Mezzanine__EntityComponentManager,0, swig_delete_EntityComponentManager, swig_EntityComponentManager_methods, swig_EntityComponentManager_attributes, &swig_EntityComponentManager_Sf_SwigStatic, swig_EntityComponentManager_meta, swig_EntityComponentManager_bases, swig_EntityComponentManager_base_names };

static int _wrap_RayQueryHit_HitLocation_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::HitLocation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::HitLocation",1,"Mezzanine::RayQueryHit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::RayQueryHit::HitLocation",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_HitLocation_set",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("RayQueryHit_HitLocation_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->HitLocation = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_HitLocation_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::HitLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::HitLocation",1,"Mezzanine::RayQueryHit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_HitLocation_get",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->HitLocation);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_HitNormal_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::HitNormal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::HitNormal",1,"Mezzanine::RayQueryHit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::RayQueryHit::HitNormal",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_HitNormal_set",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("RayQueryHit_HitNormal_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->HitNormal = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_HitNormal_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::HitNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::HitNormal",1,"Mezzanine::RayQueryHit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_HitNormal_get",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->HitNormal);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_Distance_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::Distance",1,"Mezzanine::RayQueryHit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::RayQueryHit::Distance",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_Distance_set",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Distance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_Distance_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::Distance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::Distance",1,"Mezzanine::RayQueryHit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_Distance_get",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::Real) ((arg1)->Distance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_SubObject_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Integer arg2 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::SubObject",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::SubObject",1,"Mezzanine::RayQueryHit *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::RayQueryHit::SubObject",2,"Mezzanine::Integer");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_SubObject_set",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  arg2 = (Mezzanine::Integer)lua_tonumber(L, 2);
  if (arg1) (arg1)->SubObject = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_SubObject_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::SubObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::SubObject",1,"Mezzanine::RayQueryHit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_SubObject_get",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::Integer) ((arg1)->SubObject);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_Object_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::EntityProxy *arg2 = (Mezzanine::EntityProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::Object",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::Object",1,"Mezzanine::RayQueryHit *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::RayQueryHit::Object",2,"Mezzanine::EntityProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_Object_set",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityProxy,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("RayQueryHit_Object_set",2,SWIGTYPE_p_Mezzanine__EntityProxy);
  }
  
  if (arg1) (arg1)->Object = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_Object_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::EntityProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::Object",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::Object",1,"Mezzanine::RayQueryHit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_Object_get",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::EntityProxy *) ((arg1)->Object);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RayQueryHit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::RayQueryHit",0,0)
  result = (Mezzanine::RayQueryHit *)new Mezzanine::RayQueryHit();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RayQueryHit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_IsValid(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::IsValid",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::IsValid",1,"Mezzanine::RayQueryHit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_IsValid",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::RayQueryHit const *)arg1)->IsValid();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_IsStatic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::IsStatic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::IsStatic",1,"Mezzanine::RayQueryHit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_IsStatic",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::RayQueryHit const *)arg1)->IsStatic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_IsDynamic(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::IsDynamic",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::IsDynamic",1,"Mezzanine::RayQueryHit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_IsDynamic",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::RayQueryHit const *)arg1)->IsDynamic();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_GetObjectParent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::GetObjectParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::GetObjectParent",1,"Mezzanine::RayQueryHit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_GetObjectParent",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::Entity *)((Mezzanine::RayQueryHit const *)arg1)->GetObjectParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_GetLocalHitLocation(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::GetLocalHitLocation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::GetLocalHitLocation",1,"Mezzanine::RayQueryHit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_GetLocalHitLocation",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = ((Mezzanine::RayQueryHit const *)arg1)->GetLocalHitLocation();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_GetLocalHitNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::GetLocalHitNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::GetLocalHitNormal",1,"Mezzanine::RayQueryHit const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_GetLocalHitNormal",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = ((Mezzanine::RayQueryHit const *)arg1)->GetLocalHitNormal();
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_Reset(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::RayQueryHit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::Reset",1,"Mezzanine::RayQueryHit *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_Reset",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::RayQueryHit *) &(arg1)->Reset();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RayQueryHit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::RayQueryHit *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::operator <",1,"Mezzanine::RayQueryHit const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQueryHit::operator <",2,"Mezzanine::RayQueryHit const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit___lt",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit___lt",2,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::RayQueryHit const *)arg1)->operator <((Mezzanine::RayQueryHit const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::ProtoSerialize",1,"Mezzanine::RayQueryHit const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQueryHit::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("RayQueryHit_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::RayQueryHit const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::World *arg3 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::ProtoDeSerialize",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQueryHit::ProtoDeSerialize",1,"Mezzanine::RayQueryHit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQueryHit::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::RayQueryHit::ProtoDeSerialize",3,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQueryHit,0))){
    SWIG_fail_ptr("RayQueryHit_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__RayQueryHit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("RayQueryHit_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("RayQueryHit_ProtoDeSerialize",3,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryHit_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::RayQueryHit::GetSerializableName",0,0)
  result = Mezzanine::RayQueryHit::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RayQueryHit(void *obj) {
Mezzanine::RayQueryHit *arg1 = (Mezzanine::RayQueryHit *) obj;
delete arg1;
}
static int _proxy__wrap_new_RayQueryHit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RayQueryHit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RayQueryHit_attributes[] = {
    { "HitLocation", _wrap_RayQueryHit_HitLocation_get, _wrap_RayQueryHit_HitLocation_set },
    { "HitNormal", _wrap_RayQueryHit_HitNormal_get, _wrap_RayQueryHit_HitNormal_set },
    { "Distance", _wrap_RayQueryHit_Distance_get, _wrap_RayQueryHit_Distance_set },
    { "SubObject", _wrap_RayQueryHit_SubObject_get, _wrap_RayQueryHit_SubObject_set },
    { "Object", _wrap_RayQueryHit_Object_get, _wrap_RayQueryHit_Object_set },
    {0,0,0}
};
static swig_lua_method swig_RayQueryHit_methods[]= {
    { "IsValid", _wrap_RayQueryHit_IsValid},
    { "IsStatic", _wrap_RayQueryHit_IsStatic},
    { "IsDynamic", _wrap_RayQueryHit_IsDynamic},
    { "GetObjectParent", _wrap_RayQueryHit_GetObjectParent},
    { "GetLocalHitLocation", _wrap_RayQueryHit_GetLocalHitLocation},
    { "GetLocalHitNormal", _wrap_RayQueryHit_GetLocalHitNormal},
    { "Reset", _wrap_RayQueryHit_Reset},
    { "__lt", _wrap_RayQueryHit___lt},
    { "ProtoSerialize", _wrap_RayQueryHit_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_RayQueryHit_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_RayQueryHit_meta[] = {
    { "__lt", _wrap_RayQueryHit___lt},
    {0,0}
};

static swig_lua_attribute swig_RayQueryHit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RayQueryHit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RayQueryHit_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_RayQueryHit_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_RayQueryHit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RayQueryHit_Sf_SwigStatic = {
    "RayQueryHit",
    swig_RayQueryHit_Sf_SwigStatic_methods,
    swig_RayQueryHit_Sf_SwigStatic_attributes,
    swig_RayQueryHit_Sf_SwigStatic_constants,
    swig_RayQueryHit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RayQueryHit_bases[] = {0};
static const char *swig_RayQueryHit_base_names[] = {0};
static swig_lua_class _wrap_class_RayQueryHit = { "RayQueryHit", "RayQueryHit", &SWIGTYPE_p_Mezzanine__RayQueryHit,_proxy__wrap_new_RayQueryHit, swig_delete_RayQueryHit, swig_RayQueryHit_methods, swig_RayQueryHit_attributes, &swig_RayQueryHit_Sf_SwigStatic, swig_RayQueryHit_meta, swig_RayQueryHit_bases, swig_RayQueryHit_base_names };

static int _wrap_RayQuery_SetWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQuery::SetWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::SetWorld",1,"Mezzanine::RayQuery *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::SetWorld",2,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_SetWorld",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("RayQuery_SetWorld",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->SetWorld(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQuery::GetWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::GetWorld",1,"Mezzanine::RayQuery const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_GetWorld",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  result = (Mezzanine::World *)((Mezzanine::RayQuery const *)arg1)->GetWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_SetFilterFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  SwigValueWrapper< std::function< bool (Mezzanine::EntityProxy *) > > arg2 ;
  Mezzanine::RayQuery::FilterFunction *argp2 ;
  
  SWIG_check_num_args("Mezzanine::RayQuery::SetFilterFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::SetFilterFunction",1,"Mezzanine::RayQuery *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::SetFilterFunction",2,"Mezzanine::RayQuery::FilterFunction const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_SetFilterFunction",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__functionT_bool_fMezzanine__EntityProxy_pF_t,0))){
    SWIG_fail_ptr("RayQuery_SetFilterFunction",2,SWIGTYPE_p_std__functionT_bool_fMezzanine__EntityProxy_pF_t);
  }
  arg2 = *argp2;
  
  (arg1)->SetFilterFunction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetFilterFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  SwigValueWrapper< std::function< bool (Mezzanine::EntityProxy *) > > result;
  
  SWIG_check_num_args("Mezzanine::RayQuery::GetFilterFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::GetFilterFunction",1,"Mezzanine::RayQuery const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_GetFilterFunction",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  result = ((Mezzanine::RayQuery const *)arg1)->GetFilterFunction();
  {
    Mezzanine::RayQuery::FilterFunction * resultptr = new Mezzanine::RayQuery::FilterFunction((const Mezzanine::RayQuery::FilterFunction &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_bool_fMezzanine__EntityProxy_pF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_SetQueryFilter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::UInt32 arg2 ;
  
  SWIG_check_num_args("Mezzanine::RayQuery::SetQueryFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::SetQueryFilter",1,"Mezzanine::RayQuery *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::SetQueryFilter",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_SetQueryFilter",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  (arg1)->SetQueryFilter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetQueryFilter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::RayQuery::GetQueryFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::GetQueryFilter",1,"Mezzanine::RayQuery const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_GetQueryFilter",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::RayQuery const *)arg1)->GetQueryFilter();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetFirstAABBResult(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::RayQueryHit result;
  
  SWIG_check_num_args("Mezzanine::RayQuery::GetFirstAABBResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::GetFirstAABBResult",1,"Mezzanine::RayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::GetFirstAABBResult",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_GetFirstAABBResult",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RayQuery_GetFirstAABBResult",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::RayQuery const *)arg1)->GetFirstAABBResult((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::RayQueryHit * resultptr = new Mezzanine::RayQueryHit((const Mezzanine::RayQueryHit &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__RayQueryHit,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetAllAABBResults__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::Whole arg3 ;
  SwigValueWrapper< std::vector< Mezzanine::RayQueryHit > > result;
  
  SWIG_check_num_args("Mezzanine::RayQuery::GetAllAABBResults",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::GetAllAABBResults",1,"Mezzanine::RayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::GetAllAABBResults",2,"Mezzanine::Ray const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::RayQuery::GetAllAABBResults",3,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_GetAllAABBResults",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RayQuery_GetAllAABBResults",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole const)lua_tonumber(L, 3);
  result = ((Mezzanine::RayQuery const *)arg1)->GetAllAABBResults((Mezzanine::Ray const &)*arg2,arg3);
  {
    Mezzanine::RayQuery::ResultContainer * resultptr = new Mezzanine::RayQuery::ResultContainer((const Mezzanine::RayQuery::ResultContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__RayQueryHit_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetAllAABBResults__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::vector< Mezzanine::RayQueryHit > > result;
  
  SWIG_check_num_args("Mezzanine::RayQuery::GetAllAABBResults",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::GetAllAABBResults",1,"Mezzanine::RayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::GetAllAABBResults",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_GetAllAABBResults",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RayQuery_GetAllAABBResults",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::RayQuery const *)arg1)->GetAllAABBResults((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::RayQuery::ResultContainer * resultptr = new Mezzanine::RayQuery::ResultContainer((const Mezzanine::RayQuery::ResultContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__RayQueryHit_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetAllAABBResults(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__RayQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RayQuery_GetAllAABBResults__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__RayQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RayQuery_GetAllAABBResults__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RayQuery_GetAllAABBResults'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RayQuery::GetAllAABBResults(Mezzanine::Ray const &,Mezzanine::Whole const) const\n"
    "    Mezzanine::RayQuery::GetAllAABBResults(Mezzanine::Ray const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_RayQuery_GetFirstShapeResult(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::RayQueryHit result;
  
  SWIG_check_num_args("Mezzanine::RayQuery::GetFirstShapeResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::GetFirstShapeResult",1,"Mezzanine::RayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::GetFirstShapeResult",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_GetFirstShapeResult",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RayQuery_GetFirstShapeResult",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::RayQuery const *)arg1)->GetFirstShapeResult((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::RayQueryHit * resultptr = new Mezzanine::RayQueryHit((const Mezzanine::RayQueryHit &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__RayQueryHit,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetAllShapeResults__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::Whole arg3 ;
  SwigValueWrapper< std::vector< Mezzanine::RayQueryHit > > result;
  
  SWIG_check_num_args("Mezzanine::RayQuery::GetAllShapeResults",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::GetAllShapeResults",1,"Mezzanine::RayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::GetAllShapeResults",2,"Mezzanine::Ray const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::RayQuery::GetAllShapeResults",3,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_GetAllShapeResults",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RayQuery_GetAllShapeResults",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole const)lua_tonumber(L, 3);
  result = ((Mezzanine::RayQuery const *)arg1)->GetAllShapeResults((Mezzanine::Ray const &)*arg2,arg3);
  {
    Mezzanine::RayQuery::ResultContainer * resultptr = new Mezzanine::RayQuery::ResultContainer((const Mezzanine::RayQuery::ResultContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__RayQueryHit_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetAllShapeResults__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::vector< Mezzanine::RayQueryHit > > result;
  
  SWIG_check_num_args("Mezzanine::RayQuery::GetAllShapeResults",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::GetAllShapeResults",1,"Mezzanine::RayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::GetAllShapeResults",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_GetAllShapeResults",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RayQuery_GetAllShapeResults",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::RayQuery const *)arg1)->GetAllShapeResults((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::RayQuery::ResultContainer * resultptr = new Mezzanine::RayQuery::ResultContainer((const Mezzanine::RayQuery::ResultContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__RayQueryHit_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetAllShapeResults(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__RayQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RayQuery_GetAllShapeResults__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__RayQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RayQuery_GetAllShapeResults__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RayQuery_GetAllShapeResults'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::RayQuery::GetAllShapeResults(Mezzanine::Ray const &,Mezzanine::Whole const) const\n"
    "    Mezzanine::RayQuery::GetAllShapeResults(Mezzanine::Ray const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_RayQuery_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQuery::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::ProtoSerialize",1,"Mezzanine::RayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("RayQuery_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::RayQuery const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::RayQuery::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::RayQuery::ProtoDeSerialize",1,"Mezzanine::RayQuery *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::RayQuery::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__RayQuery,0))){
    SWIG_fail_ptr("RayQuery_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__RayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("RayQuery_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQuery_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::RayQuery::GetSerializableName",0,0)
  result = Mezzanine::RayQuery::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RayQuery(void *obj) {
Mezzanine::RayQuery *arg1 = (Mezzanine::RayQuery *) obj;
delete arg1;
}
static swig_lua_attribute swig_RayQuery_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RayQuery_methods[]= {
    { "SetWorld", _wrap_RayQuery_SetWorld},
    { "GetWorld", _wrap_RayQuery_GetWorld},
    { "SetFilterFunction", _wrap_RayQuery_SetFilterFunction},
    { "GetFilterFunction", _wrap_RayQuery_GetFilterFunction},
    { "SetQueryFilter", _wrap_RayQuery_SetQueryFilter},
    { "GetQueryFilter", _wrap_RayQuery_GetQueryFilter},
    { "GetFirstAABBResult", _wrap_RayQuery_GetFirstAABBResult},
    { "GetAllAABBResults", _wrap_RayQuery_GetAllAABBResults},
    { "GetFirstShapeResult", _wrap_RayQuery_GetFirstShapeResult},
    { "GetAllShapeResults", _wrap_RayQuery_GetAllShapeResults},
    { "ProtoSerialize", _wrap_RayQuery_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_RayQuery_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_RayQuery_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RayQuery_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RayQuery_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RayQuery_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_RayQuery_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_RayQuery_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RayQuery_Sf_SwigStatic = {
    "RayQuery",
    swig_RayQuery_Sf_SwigStatic_methods,
    swig_RayQuery_Sf_SwigStatic_attributes,
    swig_RayQuery_Sf_SwigStatic_constants,
    swig_RayQuery_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RayQuery_bases[] = {0};
static const char *swig_RayQuery_base_names[] = {0};
static swig_lua_class _wrap_class_RayQuery = { "RayQuery", "RayQuery", &SWIGTYPE_p_Mezzanine__RayQuery,0, swig_delete_RayQuery, swig_RayQuery_methods, swig_RayQuery_attributes, &swig_RayQuery_Sf_SwigStatic, swig_RayQuery_meta, swig_RayQuery_bases, swig_RayQuery_base_names };

static int _wrap_new_RenderableRayQuery(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::SceneManager *arg1 = (Mezzanine::Graphics::SceneManager *) 0 ;
  Mezzanine::Graphics::RenderableRayQuery *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::RenderableRayQuery",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::RenderableRayQuery",1,"Mezzanine::Graphics::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__SceneManager,0))){
    SWIG_fail_ptr("new_RenderableRayQuery",1,SWIGTYPE_p_Mezzanine__Graphics__SceneManager);
  }
  
  result = (Mezzanine::Graphics::RenderableRayQuery *)new Mezzanine::Graphics::RenderableRayQuery(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_SetWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::SetWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::SetWorld",1,"Mezzanine::Graphics::RenderableRayQuery *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::SetWorld",2,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_SetWorld",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("RenderableRayQuery_SetWorld",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->SetWorld(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetWorld",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetWorld",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetWorld",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  result = (Mezzanine::World *)((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->GetWorld();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_SetFilterFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  SwigValueWrapper< std::function< bool (Mezzanine::EntityProxy *) > > arg2 ;
  Mezzanine::RayQuery::FilterFunction *argp2 ;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::SetFilterFunction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::SetFilterFunction",1,"Mezzanine::Graphics::RenderableRayQuery *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::SetFilterFunction",2,"Mezzanine::RayQuery::FilterFunction const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_SetFilterFunction",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_std__functionT_bool_fMezzanine__EntityProxy_pF_t,0))){
    SWIG_fail_ptr("RenderableRayQuery_SetFilterFunction",2,SWIGTYPE_p_std__functionT_bool_fMezzanine__EntityProxy_pF_t);
  }
  arg2 = *argp2;
  
  (arg1)->SetFilterFunction(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetFilterFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  SwigValueWrapper< std::function< bool (Mezzanine::EntityProxy *) > > result;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetFilterFunction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetFilterFunction",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetFilterFunction",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  result = ((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->GetFilterFunction();
  {
    Mezzanine::RayQuery::FilterFunction * resultptr = new Mezzanine::RayQuery::FilterFunction((const Mezzanine::RayQuery::FilterFunction &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__functionT_bool_fMezzanine__EntityProxy_pF_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_SetQueryFilter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::UInt32 arg2 ;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::SetQueryFilter",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::SetQueryFilter",1,"Mezzanine::Graphics::RenderableRayQuery *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::SetQueryFilter",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_SetQueryFilter",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  (arg1)->SetQueryFilter(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetQueryFilter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetQueryFilter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetQueryFilter",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetQueryFilter",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  result = (Mezzanine::UInt32)((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->GetQueryFilter();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_SetManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::Graphics::SceneManager *arg2 = (Mezzanine::Graphics::SceneManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::SetManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::SetManager",1,"Mezzanine::Graphics::RenderableRayQuery *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::SetManager",2,"Mezzanine::Graphics::SceneManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_SetManager",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Graphics__SceneManager,0))){
    SWIG_fail_ptr("RenderableRayQuery_SetManager",2,SWIGTYPE_p_Mezzanine__Graphics__SceneManager);
  }
  
  (arg1)->SetManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::Graphics::SceneManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetManager",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetManager",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  result = (Mezzanine::Graphics::SceneManager *)((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->GetManager();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Graphics__SceneManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetFirstAABBResult(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::RayQueryHit result;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetFirstAABBResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetFirstAABBResult",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetFirstAABBResult",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetFirstAABBResult",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetFirstAABBResult",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->GetFirstAABBResult((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::RayQueryHit * resultptr = new Mezzanine::RayQueryHit((const Mezzanine::RayQueryHit &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__RayQueryHit,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetAllAABBResults__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::Whole arg3 ;
  SwigValueWrapper< std::vector< Mezzanine::RayQueryHit > > result;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetAllAABBResults",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetAllAABBResults",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetAllAABBResults",2,"Mezzanine::Ray const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetAllAABBResults",3,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetAllAABBResults",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetAllAABBResults",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole const)lua_tonumber(L, 3);
  result = ((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->GetAllAABBResults((Mezzanine::Ray const &)*arg2,arg3);
  {
    Mezzanine::RayQuery::ResultContainer * resultptr = new Mezzanine::RayQuery::ResultContainer((const Mezzanine::RayQuery::ResultContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__RayQueryHit_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetAllAABBResults__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::vector< Mezzanine::RayQueryHit > > result;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetAllAABBResults",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetAllAABBResults",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetAllAABBResults",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetAllAABBResults",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetAllAABBResults",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->GetAllAABBResults((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::RayQuery::ResultContainer * resultptr = new Mezzanine::RayQuery::ResultContainer((const Mezzanine::RayQuery::ResultContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__RayQueryHit_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetAllAABBResults(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RenderableRayQuery_GetAllAABBResults__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderableRayQuery_GetAllAABBResults__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderableRayQuery_GetAllAABBResults'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Graphics::RenderableRayQuery::GetAllAABBResults(Mezzanine::Ray const &,Mezzanine::Whole const) const\n"
    "    Mezzanine::Graphics::RenderableRayQuery::GetAllAABBResults(Mezzanine::Ray const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_RenderableRayQuery_GetFirstShapeResult(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::RayQueryHit result;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetFirstShapeResult",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetFirstShapeResult",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetFirstShapeResult",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetFirstShapeResult",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetFirstShapeResult",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->GetFirstShapeResult((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::RayQueryHit * resultptr = new Mezzanine::RayQueryHit((const Mezzanine::RayQueryHit &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__RayQueryHit,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetAllShapeResults__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::Whole arg3 ;
  SwigValueWrapper< std::vector< Mezzanine::RayQueryHit > > result;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetAllShapeResults",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetAllShapeResults",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetAllShapeResults",2,"Mezzanine::Ray const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetAllShapeResults",3,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetAllShapeResults",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetAllShapeResults",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole const)lua_tonumber(L, 3);
  result = ((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->GetAllShapeResults((Mezzanine::Ray const &)*arg2,arg3);
  {
    Mezzanine::RayQuery::ResultContainer * resultptr = new Mezzanine::RayQuery::ResultContainer((const Mezzanine::RayQuery::ResultContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__RayQueryHit_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetAllShapeResults__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  SwigValueWrapper< std::vector< Mezzanine::RayQueryHit > > result;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetAllShapeResults",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetAllShapeResults",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::GetAllShapeResults",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetAllShapeResults",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("RenderableRayQuery_GetAllShapeResults",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->GetAllShapeResults((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::RayQuery::ResultContainer * resultptr = new Mezzanine::RayQuery::ResultContainer((const Mezzanine::RayQuery::ResultContainer &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_Mezzanine__RayQueryHit_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetAllShapeResults(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_RenderableRayQuery_GetAllShapeResults__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_RenderableRayQuery_GetAllShapeResults__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'RenderableRayQuery_GetAllShapeResults'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Graphics::RenderableRayQuery::GetAllShapeResults(Mezzanine::Ray const &,Mezzanine::Whole const) const\n"
    "    Mezzanine::Graphics::RenderableRayQuery::GetAllShapeResults(Mezzanine::Ray const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_RenderableRayQuery_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::ProtoSerialize",1,"Mezzanine::Graphics::RenderableRayQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("RenderableRayQuery_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Graphics::RenderableRayQuery const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::ProtoDeSerialize",1,"Mezzanine::Graphics::RenderableRayQuery *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Graphics::RenderableRayQuery::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,0))){
    SWIG_fail_ptr("RenderableRayQuery_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("RenderableRayQuery_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RenderableRayQuery_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Graphics::RenderableRayQuery::GetSerializableName",0,0)
  result = Mezzanine::Graphics::RenderableRayQuery::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RenderableRayQuery(void *obj) {
Mezzanine::Graphics::RenderableRayQuery *arg1 = (Mezzanine::Graphics::RenderableRayQuery *) obj;
delete arg1;
}
static int _proxy__wrap_new_RenderableRayQuery(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_RenderableRayQuery);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_RenderableRayQuery_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_RenderableRayQuery_methods[]= {
    { "SetWorld", _wrap_RenderableRayQuery_SetWorld},
    { "GetWorld", _wrap_RenderableRayQuery_GetWorld},
    { "SetFilterFunction", _wrap_RenderableRayQuery_SetFilterFunction},
    { "GetFilterFunction", _wrap_RenderableRayQuery_GetFilterFunction},
    { "SetQueryFilter", _wrap_RenderableRayQuery_SetQueryFilter},
    { "GetQueryFilter", _wrap_RenderableRayQuery_GetQueryFilter},
    { "SetManager", _wrap_RenderableRayQuery_SetManager},
    { "GetManager", _wrap_RenderableRayQuery_GetManager},
    { "GetFirstAABBResult", _wrap_RenderableRayQuery_GetFirstAABBResult},
    { "GetAllAABBResults", _wrap_RenderableRayQuery_GetAllAABBResults},
    { "GetFirstShapeResult", _wrap_RenderableRayQuery_GetFirstShapeResult},
    { "GetAllShapeResults", _wrap_RenderableRayQuery_GetAllShapeResults},
    { "ProtoSerialize", _wrap_RenderableRayQuery_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_RenderableRayQuery_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_RenderableRayQuery_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_RenderableRayQuery_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_RenderableRayQuery_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_RenderableRayQuery_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_RenderableRayQuery_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_RenderableRayQuery_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_RenderableRayQuery_Sf_SwigStatic = {
    "RenderableRayQuery",
    swig_RenderableRayQuery_Sf_SwigStatic_methods,
    swig_RenderableRayQuery_Sf_SwigStatic_attributes,
    swig_RenderableRayQuery_Sf_SwigStatic_constants,
    swig_RenderableRayQuery_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_RenderableRayQuery_bases[] = {0,0};
static const char *swig_RenderableRayQuery_base_names[] = {"Mezzanine::RayQuery *",0};
static swig_lua_class _wrap_class_RenderableRayQuery = { "RenderableRayQuery", "RenderableRayQuery", &SWIGTYPE_p_Mezzanine__Graphics__RenderableRayQuery,_proxy__wrap_new_RenderableRayQuery, swig_delete_RenderableRayQuery, swig_RenderableRayQuery_methods, swig_RenderableRayQuery_attributes, &swig_RenderableRayQuery_Sf_SwigStatic, swig_RenderableRayQuery_meta, swig_RenderableRayQuery_bases, swig_RenderableRayQuery_base_names };

static int _wrap_AngleData_CurrentAngle_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::AngleData::CurrentAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::CurrentAngle",1,"Mezzanine::AngleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AngleData::CurrentAngle",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_CurrentAngle_set",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->CurrentAngle = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleData_CurrentAngle_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::AngleData::CurrentAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::CurrentAngle",1,"Mezzanine::AngleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_CurrentAngle_get",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  result = (Mezzanine::Real) ((arg1)->CurrentAngle);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleData_UpperLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::AngleData::UpperLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::UpperLimit",1,"Mezzanine::AngleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AngleData::UpperLimit",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_UpperLimit_set",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->UpperLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleData_UpperLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::AngleData::UpperLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::UpperLimit",1,"Mezzanine::AngleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_UpperLimit_get",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  result = (Mezzanine::Real) ((arg1)->UpperLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleData_LowerLimit_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::AngleData::LowerLimit",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::LowerLimit",1,"Mezzanine::AngleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AngleData::LowerLimit",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_LowerLimit_set",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->LowerLimit = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleData_LowerLimit_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::AngleData::LowerLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::LowerLimit",1,"Mezzanine::AngleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_LowerLimit_get",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  result = (Mezzanine::Real) ((arg1)->LowerLimit);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AngleData(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AngleData::AngleData",0,0)
  result = (Mezzanine::AngleData *)new Mezzanine::AngleData();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AngleData,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleData_SetLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  
  SWIG_check_num_args("Mezzanine::AngleData::SetLimits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::SetLimits",1,"Mezzanine::AngleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AngleData::SetLimits",2,"Mezzanine::Real const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::AngleData::SetLimits",3,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_SetLimits",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real const)lua_tonumber(L, 3);
  (arg1)->SetLimits(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleData_UnsetLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  
  SWIG_check_num_args("Mezzanine::AngleData::UnsetLimits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::UnsetLimits",1,"Mezzanine::AngleData *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_UnsetLimits",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  (arg1)->UnsetLimits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleData_HasEnforcableLimit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::AngleData::HasEnforcableLimit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::HasEnforcableLimit",1,"Mezzanine::AngleData const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_HasEnforcableLimit",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::AngleData const *)arg1)->HasEnforcableLimit();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleData_SetAngle(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::AngleData::SetAngle",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::SetAngle",1,"Mezzanine::AngleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AngleData::SetAngle",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_SetAngle",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  (arg1)->SetAngle(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AngleData_Rotate(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::AngleData::Rotate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AngleData::Rotate",1,"Mezzanine::AngleData *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::AngleData::Rotate",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AngleData,0))){
    SWIG_fail_ptr("AngleData_Rotate",1,SWIGTYPE_p_Mezzanine__AngleData);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  (arg1)->Rotate(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AngleData(void *obj) {
Mezzanine::AngleData *arg1 = (Mezzanine::AngleData *) obj;
delete arg1;
}
static int _proxy__wrap_new_AngleData(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AngleData);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AngleData_attributes[] = {
    { "CurrentAngle", _wrap_AngleData_CurrentAngle_get, _wrap_AngleData_CurrentAngle_set },
    { "UpperLimit", _wrap_AngleData_UpperLimit_get, _wrap_AngleData_UpperLimit_set },
    { "LowerLimit", _wrap_AngleData_LowerLimit_get, _wrap_AngleData_LowerLimit_set },
    {0,0,0}
};
static swig_lua_method swig_AngleData_methods[]= {
    { "SetLimits", _wrap_AngleData_SetLimits},
    { "UnsetLimits", _wrap_AngleData_UnsetLimits},
    { "HasEnforcableLimit", _wrap_AngleData_HasEnforcableLimit},
    { "SetAngle", _wrap_AngleData_SetAngle},
    { "Rotate", _wrap_AngleData_Rotate},
    {0,0}
};
static swig_lua_method swig_AngleData_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AngleData_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AngleData_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AngleData_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AngleData_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AngleData_Sf_SwigStatic = {
    "AngleData",
    swig_AngleData_Sf_SwigStatic_methods,
    swig_AngleData_Sf_SwigStatic_attributes,
    swig_AngleData_Sf_SwigStatic_constants,
    swig_AngleData_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AngleData_bases[] = {0};
static const char *swig_AngleData_base_names[] = {0};
static swig_lua_class _wrap_class_AngleData = { "AngleData", "AngleData", &SWIGTYPE_p_Mezzanine__AngleData,_proxy__wrap_new_AngleData, swig_delete_AngleData, swig_AngleData_methods, swig_AngleData_attributes, &swig_AngleData_Sf_SwigStatic, swig_AngleData_meta, swig_AngleData_bases, swig_AngleData_base_names };

static int _wrap_new_CameraController__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::CameraController",0,0)
  result = (Mezzanine::CameraController *)new Mezzanine::CameraController();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__CameraController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraController__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Graphics::CameraProxy *arg1 = (Mezzanine::Graphics::CameraProxy *) 0 ;
  Mezzanine::CameraController *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::CameraController",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::CameraController",1,"Mezzanine::Graphics::CameraProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Graphics__CameraProxy,0))){
    SWIG_fail_ptr("new_CameraController",1,SWIGTYPE_p_Mezzanine__Graphics__CameraProxy);
  }
  
  result = (Mezzanine::CameraController *)new Mezzanine::CameraController(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__CameraController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_CameraController(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_CameraController__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__CameraProxy, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_CameraController__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_CameraController'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::CameraController::CameraController()\n"
    "    Mezzanine::CameraController::CameraController(Mezzanine::Graphics::CameraProxy *)\n");
  lua_error(L);return 0;
}


static int _wrap_CameraController_SetControlledCamera(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Graphics::CameraProxy *arg2 = (Mezzanine::Graphics::CameraProxy *) 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetControlledCamera",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetControlledCamera",1,"Mezzanine::CameraController *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetControlledCamera",2,"Mezzanine::Graphics::CameraProxy *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetControlledCamera",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Graphics__CameraProxy,0))){
    SWIG_fail_ptr("CameraController_SetControlledCamera",2,SWIGTYPE_p_Mezzanine__Graphics__CameraProxy);
  }
  
  (arg1)->SetControlledCamera(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_GetControlledCamera(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Graphics::CameraProxy *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::GetControlledCamera",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::GetControlledCamera",1,"Mezzanine::CameraController const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_GetControlledCamera",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  result = (Mezzanine::Graphics::CameraProxy *)((Mezzanine::CameraController const *)arg1)->GetControlledCamera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Graphics__CameraProxy,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_SetMovementMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::CameraController::MovementMode *arg2 = 0 ;
  Mezzanine::CameraController::MovementMode temp2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetMovementMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetMovementMode",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetMovementMode",2,"Mezzanine::CameraController::MovementMode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetMovementMode",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  temp2=(Mezzanine::CameraController::MovementMode)(int)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetMovementMode((Mezzanine::CameraController::MovementMode const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_GetMovementMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::CameraController::MovementMode result;
  
  SWIG_check_num_args("Mezzanine::CameraController::GetMovementMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::GetMovementMode",1,"Mezzanine::CameraController const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_GetMovementMode",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  result = (Mezzanine::CameraController::MovementMode)((Mezzanine::CameraController const *)arg1)->GetMovementMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_SetHoverHeight(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetHoverHeight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetHoverHeight",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetHoverHeight",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetHoverHeight",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  (arg1)->SetHoverHeight((Mezzanine::Real const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_GetHoverHeight(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::CameraController::GetHoverHeight",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::GetHoverHeight",1,"Mezzanine::CameraController const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_GetHoverHeight",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  result = (Mezzanine::Real)((Mezzanine::CameraController const *)arg1)->GetHoverHeight();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_SetYawLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetYawLimits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetYawLimits",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetYawLimits",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::CameraController::SetYawLimits",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetYawLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->SetYawLimits((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_RemoveYawLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::RemoveYawLimits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::RemoveYawLimits",1,"Mezzanine::CameraController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_RemoveYawLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  (arg1)->RemoveYawLimits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_SetPitchLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetPitchLimits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetPitchLimits",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetPitchLimits",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::CameraController::SetPitchLimits",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetPitchLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->SetPitchLimits((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_RemovePitchLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::RemovePitchLimits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::RemovePitchLimits",1,"Mezzanine::CameraController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_RemovePitchLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  (arg1)->RemovePitchLimits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_SetRollLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::SetRollLimits",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::SetRollLimits",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::SetRollLimits",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::CameraController::SetRollLimits",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_SetRollLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->SetRollLimits((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_RemoveRollLimits(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::RemoveRollLimits",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::RemoveRollLimits",1,"Mezzanine::CameraController *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_RemoveRollLimits",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  (arg1)->RemoveRollLimits();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_MoveForward(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::MoveForward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::MoveForward",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::MoveForward",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_MoveForward",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  (arg1)->MoveForward(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_MoveBackward(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::MoveBackward",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::MoveBackward",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::MoveBackward",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_MoveBackward",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  (arg1)->MoveBackward(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_StrafeLeft(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::StrafeLeft",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::StrafeLeft",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::StrafeLeft",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_StrafeLeft",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  (arg1)->StrafeLeft(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_StrafeRight(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::StrafeRight",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::StrafeRight",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::StrafeRight",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_StrafeRight",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  (arg1)->StrafeRight(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_Rotate(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::Rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::Rotate",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::Rotate",2,"Mezzanine::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::CameraController::Rotate",3,"Mezzanine::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::CameraController::Rotate",4,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_Rotate",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real)lua_tonumber(L, 4);
  (arg1)->Rotate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CameraController_Rotate6DOF(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real arg3 ;
  Mezzanine::Real arg4 ;
  
  SWIG_check_num_args("Mezzanine::CameraController::Rotate6DOF",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::CameraController::Rotate6DOF",1,"Mezzanine::CameraController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::CameraController::Rotate6DOF",2,"Mezzanine::Real");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::CameraController::Rotate6DOF",3,"Mezzanine::Real");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::CameraController::Rotate6DOF",4,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__CameraController,0))){
    SWIG_fail_ptr("CameraController_Rotate6DOF",1,SWIGTYPE_p_Mezzanine__CameraController);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  arg3 = (Mezzanine::Real)lua_tonumber(L, 3);
  arg4 = (Mezzanine::Real)lua_tonumber(L, 4);
  (arg1)->Rotate6DOF(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CameraController(void *obj) {
Mezzanine::CameraController *arg1 = (Mezzanine::CameraController *) obj;
delete arg1;
}
static int _proxy__wrap_new_CameraController(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_CameraController);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_CameraController_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_CameraController_methods[]= {
    { "SetControlledCamera", _wrap_CameraController_SetControlledCamera},
    { "GetControlledCamera", _wrap_CameraController_GetControlledCamera},
    { "SetMovementMode", _wrap_CameraController_SetMovementMode},
    { "GetMovementMode", _wrap_CameraController_GetMovementMode},
    { "SetHoverHeight", _wrap_CameraController_SetHoverHeight},
    { "GetHoverHeight", _wrap_CameraController_GetHoverHeight},
    { "SetYawLimits", _wrap_CameraController_SetYawLimits},
    { "RemoveYawLimits", _wrap_CameraController_RemoveYawLimits},
    { "SetPitchLimits", _wrap_CameraController_SetPitchLimits},
    { "RemovePitchLimits", _wrap_CameraController_RemovePitchLimits},
    { "SetRollLimits", _wrap_CameraController_SetRollLimits},
    { "RemoveRollLimits", _wrap_CameraController_RemoveRollLimits},
    { "MoveForward", _wrap_CameraController_MoveForward},
    { "MoveBackward", _wrap_CameraController_MoveBackward},
    { "StrafeLeft", _wrap_CameraController_StrafeLeft},
    { "StrafeRight", _wrap_CameraController_StrafeRight},
    { "Rotate", _wrap_CameraController_Rotate},
    { "Rotate6DOF", _wrap_CameraController_Rotate6DOF},
    {0,0}
};
static swig_lua_method swig_CameraController_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_CameraController_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_CameraController_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("CCM_Fly", Mezzanine::CameraController::CCM_Fly)},
    {SWIG_LUA_CONSTTAB_INT("CCM_Walk", Mezzanine::CameraController::CCM_Walk)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_CameraController_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_CameraController_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_CameraController_Sf_SwigStatic = {
    "CameraController",
    swig_CameraController_Sf_SwigStatic_methods,
    swig_CameraController_Sf_SwigStatic_attributes,
    swig_CameraController_Sf_SwigStatic_constants,
    swig_CameraController_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_CameraController_bases[] = {0};
static const char *swig_CameraController_base_names[] = {0};
static swig_lua_class _wrap_class_CameraController = { "CameraController", "CameraController", &SWIGTYPE_p_Mezzanine__CameraController,_proxy__wrap_new_CameraController, swig_delete_CameraController, swig_CameraController_methods, swig_CameraController_attributes, &swig_CameraController_Sf_SwigStatic, swig_CameraController_meta, swig_CameraController_bases, swig_CameraController_base_names };

static int _wrap_Vector2_X_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::X",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::X",1,"Mezzanine::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::X",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_X_set",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->X = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_X_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::X",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::X",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_X_get",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real) ((arg1)->X);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Y_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Y",1,"Mezzanine::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Y",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Y_set",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Y_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Y",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Y_get",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real) ((arg1)->Y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",0,0)
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Mezzanine::Vector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Mezzanine::Vector2 &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Mezzanine::Vector2 &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Mezzanine::Real const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real *arg1 = 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp1 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Mezzanine::Real const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",2,"Mezzanine::Real const &");
  temp1=(Mezzanine::Real)lua_tonumber(L,1); arg1=&temp1;
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Mezzanine::Real const &)*arg1,(Mezzanine::Real const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Vector2 *arg1 = 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Ogre::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Ogre__Vector2);
  }
  
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2((Ogre::Vector2 const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node arg1 ;
  Mezzanine::XML::Node *argp1 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Vector2",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Vector2",1,"Mezzanine::XML::Node");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&argp1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_Vector2",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  arg1 = *argp1;
  
  result = (Mezzanine::Vector2 *)new Mezzanine::Vector2(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Vector2__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_6(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Vector2__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Vector2__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vector2'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::Vector2()\n"
    "    Mezzanine::Vector2::Vector2(Mezzanine::Vector2 const &)\n"
    "    Mezzanine::Vector2::Vector2(Mezzanine::Vector2 &&)\n"
    "    Mezzanine::Vector2::Vector2(Mezzanine::Real const &)\n"
    "    Mezzanine::Vector2::Vector2(Mezzanine::Real const &,Mezzanine::Real const &)\n"
    "    Mezzanine::Vector2::Vector2(Ogre::Vector2 const &)\n"
    "    Mezzanine::Vector2::Vector2(Mezzanine::XML::Node)\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_GetOgreVector2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::GetOgreVector2",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::GetOgreVector2",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_GetOgreVector2",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->GetOgreVector2();
  {
    Ogre::Vector2 * resultptr = new Ogre::Vector2((const Ogre::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_ExtractOgreVector2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::ExtractOgreVector2",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::ExtractOgreVector2",1,"Mezzanine::Vector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::ExtractOgreVector2",2,"Ogre::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_ExtractOgreVector2",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("Vector2_ExtractOgreVector2",2,SWIGTYPE_p_Ogre__Vector2);
  }
  
  (arg1)->ExtractOgreVector2((Ogre::Vector2 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Unit_X",0,0)
  result = Mezzanine::Vector2::Unit_X();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Unit_Y",0,0)
  result = Mezzanine::Vector2::Unit_Y();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Neg_Unit_X(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Neg_Unit_X",0,0)
  result = Mezzanine::Vector2::Neg_Unit_X();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Neg_Unit_Y(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Neg_Unit_Y",0,0)
  result = Mezzanine::Vector2::Neg_Unit_Y();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SetIdentity(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::SetIdentity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SetIdentity",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SetIdentity",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  (arg1)->SetIdentity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SetValues(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real *arg3 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Real temp3 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::SetValues",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SetValues",1,"Mezzanine::Vector2 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::SetValues",2,"Mezzanine::Real const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::Vector2::SetValues",3,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SetValues",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  temp3=(Mezzanine::Real)lua_tonumber(L,3); arg3=&temp3;
  (arg1)->SetValues((Mezzanine::Real const &)*arg2,(Mezzanine::Real const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_IsZero(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::IsZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::IsZero",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_IsZero",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->IsZero();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___eq__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->operator ==((Mezzanine::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___eq__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Ogre::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator ==",2,"Ogre::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Vector2,0))){
    SWIG_fail_ptr("Vector2___eq",2,SWIGTYPE_p_Ogre__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->operator ==((Ogre::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___eq(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___eq__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Ogre__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___eq__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___eq'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::operator ==(Mezzanine::Vector2 const &) const\n"
    "    Mezzanine::Vector2::operator ==(Ogre::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator <=",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator <=",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___le",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___le",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2 const *)arg1)->operator <=((Mezzanine::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___unm(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator -",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___unm",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (arg1)->operator -();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator *",1,"Mezzanine::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator *",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector2 const *)arg1)->operator *((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real *arg2 = 0 ;
  Mezzanine::Real temp2 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator /",1,"Mezzanine::Vector2 const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator /",2,"Mezzanine::Real const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  temp2=(Mezzanine::Real)lua_tonumber(L,2); arg2=&temp2;
  result = ((Mezzanine::Vector2 const *)arg1)->operator /((Mezzanine::Real const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___add(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator +",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator +",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator +",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___add",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator +((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___sub(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator -",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator -",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator -",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___sub",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator -((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator *",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator *",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___mul",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator *((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___mul__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::operator *(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector2::operator *(Mezzanine::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2___div__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::operator /",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::operator /",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::operator /",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2___div",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->operator /((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2___div(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Vector2___div__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Vector2___div'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vector2::operator /(Mezzanine::Real const &) const\n"
    "    Mezzanine::Vector2::operator /(Mezzanine::Vector2 const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Vector2_CrossProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::CrossProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::CrossProduct",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::CrossProduct",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_CrossProduct",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_CrossProduct",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->CrossProduct((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_DotProduct(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::DotProduct",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::DotProduct",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::DotProduct",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_DotProduct",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_DotProduct",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->DotProduct((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Distance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Distance",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Distance",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Distance",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Distance",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->Distance((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SquaredDistance(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::SquaredDistance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SquaredDistance",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::SquaredDistance",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SquaredDistance",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SquaredDistance",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->SquaredDistance((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Length(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Length",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Length",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Length",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->Length();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_SquaredLength(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::SquaredLength",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::SquaredLength",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_SquaredLength",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->SquaredLength();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Perpendicular(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Perpendicular",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Perpendicular",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Perpendicular",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->Perpendicular();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Reflect(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::Reflect",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Reflect",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::Reflect",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Reflect",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Reflect",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->Reflect((Mezzanine::Vector2 const &)*arg2);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_Normalize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::Normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::Normalize",1,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_Normalize",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Vector2 *) &(arg1)->Normalize();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_GetNormal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::Vector2::GetNormal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::GetNormal",1,"Mezzanine::Vector2 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_GetNormal",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = ((Mezzanine::Vector2 const *)arg1)->GetNormal();
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_AngleTo(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::AngleTo",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::AngleTo",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::AngleTo",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleTo",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleTo",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->AngleTo((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_AngleBetween(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Vector2::AngleBetween",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::AngleBetween",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::AngleBetween",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleBetween",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_AngleBetween",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Real)((Mezzanine::Vector2 const *)arg1)->AngleBetween((Mezzanine::Vector2 const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::ProtoSerialize",1,"Mezzanine::Vector2 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Vector2_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Vector2 const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2::ProtoDeSerialize",1,"Mezzanine::Vector2 *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Vector2_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Vector2_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Vector2::GetSerializableName",0,0)
  result = Mezzanine::Vector2::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2(void *obj) {
Mezzanine::Vector2 *arg1 = (Mezzanine::Vector2 *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector2(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector2);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector2_attributes[] = {
    { "X", _wrap_Vector2_X_get, _wrap_Vector2_X_set },
    { "Y", _wrap_Vector2_Y_get, _wrap_Vector2_Y_set },
    {0,0,0}
};
static swig_lua_method swig_Vector2_methods[]= {
    { "GetOgreVector2", _wrap_Vector2_GetOgreVector2},
    { "ExtractOgreVector2", _wrap_Vector2_ExtractOgreVector2},
    { "SetIdentity", _wrap_Vector2_SetIdentity},
    { "SetValues", _wrap_Vector2_SetValues},
    { "IsZero", _wrap_Vector2_IsZero},
    { "__eq", _wrap_Vector2___eq},
    { "__le", _wrap_Vector2___le},
    { "__unm", _wrap_Vector2___unm},
    { "__add", _wrap_Vector2___add},
    { "__sub", _wrap_Vector2___sub},
    { "__mul", _wrap_Vector2___mul},
    { "__div", _wrap_Vector2___div},
    { "CrossProduct", _wrap_Vector2_CrossProduct},
    { "DotProduct", _wrap_Vector2_DotProduct},
    { "Distance", _wrap_Vector2_Distance},
    { "SquaredDistance", _wrap_Vector2_SquaredDistance},
    { "Length", _wrap_Vector2_Length},
    { "SquaredLength", _wrap_Vector2_SquaredLength},
    { "Perpendicular", _wrap_Vector2_Perpendicular},
    { "Reflect", _wrap_Vector2_Reflect},
    { "Normalize", _wrap_Vector2_Normalize},
    { "GetNormal", _wrap_Vector2_GetNormal},
    { "AngleTo", _wrap_Vector2_AngleTo},
    { "AngleBetween", _wrap_Vector2_AngleBetween},
    { "ProtoSerialize", _wrap_Vector2_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Vector2_ProtoDeSerialize},
    {0,0}
};
static swig_lua_method swig_Vector2_meta[] = {
    { "__eq", _wrap_Vector2___eq},
    { "__le", _wrap_Vector2___le},
    { "__unm", _wrap_Vector2___unm},
    { "__add", _wrap_Vector2___add},
    { "__sub", _wrap_Vector2___sub},
    { "__mul", _wrap_Vector2___mul},
    { "__div", _wrap_Vector2___div},
    {0,0}
};

static swig_lua_attribute swig_Vector2_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector2_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector2_Sf_SwigStatic_methods[]= {
    { "Unit_X", _wrap_Vector2_Unit_X},
    { "Unit_Y", _wrap_Vector2_Unit_Y},
    { "Neg_Unit_X", _wrap_Vector2_Neg_Unit_X},
    { "Neg_Unit_Y", _wrap_Vector2_Neg_Unit_Y},
    { "GetSerializableName", _wrap_Vector2_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Vector2_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector2_Sf_SwigStatic = {
    "Vector2",
    swig_Vector2_Sf_SwigStatic_methods,
    swig_Vector2_Sf_SwigStatic_attributes,
    swig_Vector2_Sf_SwigStatic_constants,
    swig_Vector2_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector2_bases[] = {0};
static const char *swig_Vector2_base_names[] = {0};
static swig_lua_class _wrap_class_Vector2 = { "Vector2", "Vector2", &SWIGTYPE_p_Mezzanine__Vector2,_proxy__wrap_new_Vector2, swig_delete_Vector2, swig_Vector2_methods, swig_Vector2_attributes, &swig_Vector2_Sf_SwigStatic, swig_Vector2_meta, swig_Vector2_bases, swig_Vector2_base_names };

static int _wrap_Vector2LengthCompare___call(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2LengthCompare *arg1 = (Mezzanine::Vector2LengthCompare *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 *arg3 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Vector2LengthCompare::operator ()",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vector2LengthCompare::operator ()",1,"Mezzanine::Vector2LengthCompare const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Vector2LengthCompare::operator ()",2,"Mezzanine::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Vector2LengthCompare::operator ()",3,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2LengthCompare,0))){
    SWIG_fail_ptr("Vector2LengthCompare___call",1,SWIGTYPE_p_Mezzanine__Vector2LengthCompare);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2LengthCompare___call",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Vector2LengthCompare___call",3,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Vector2LengthCompare const *)arg1)->operator ()((Mezzanine::Vector2 const &)*arg2,(Mezzanine::Vector2 const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vector2LengthCompare(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2LengthCompare *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vector2LengthCompare::Vector2LengthCompare",0,0)
  result = (Mezzanine::Vector2LengthCompare *)new Mezzanine::Vector2LengthCompare();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2LengthCompare,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Vector2LengthCompare(void *obj) {
Mezzanine::Vector2LengthCompare *arg1 = (Mezzanine::Vector2LengthCompare *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vector2LengthCompare(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vector2LengthCompare);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vector2LengthCompare_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vector2LengthCompare_methods[]= {
    { "__call", _wrap_Vector2LengthCompare___call},
    {0,0}
};
static swig_lua_method swig_Vector2LengthCompare_meta[] = {
    { "__call", _wrap_Vector2LengthCompare___call},
    {0,0}
};

static swig_lua_attribute swig_Vector2LengthCompare_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vector2LengthCompare_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vector2LengthCompare_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vector2LengthCompare_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vector2LengthCompare_Sf_SwigStatic = {
    "Vector2LengthCompare",
    swig_Vector2LengthCompare_Sf_SwigStatic_methods,
    swig_Vector2LengthCompare_Sf_SwigStatic_attributes,
    swig_Vector2LengthCompare_Sf_SwigStatic_constants,
    swig_Vector2LengthCompare_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vector2LengthCompare_bases[] = {0};
static const char *swig_Vector2LengthCompare_base_names[] = {0};
static swig_lua_class _wrap_class_Vector2LengthCompare = { "Vector2LengthCompare", "Vector2LengthCompare", &SWIGTYPE_p_Mezzanine__Vector2LengthCompare,_proxy__wrap_new_Vector2LengthCompare, swig_delete_Vector2LengthCompare, swig_Vector2LengthCompare_methods, swig_Vector2LengthCompare_attributes, &swig_Vector2LengthCompare_Sf_SwigStatic, swig_Vector2LengthCompare_meta, swig_Vector2LengthCompare_bases, swig_Vector2LengthCompare_base_names };

static int _wrap_Circle_Center_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = (Mezzanine::Circle *) 0 ;
  Mezzanine::Vector2 *arg2 = (Mezzanine::Vector2 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Center",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Circle::Center",1,"Mezzanine::Circle *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Circle::Center",2,"Mezzanine::Vector2 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("Circle_Center_set",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Circle_Center_set",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  if (arg1) (arg1)->Center = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Circle_Center_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = (Mezzanine::Circle *) 0 ;
  Mezzanine::Vector2 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Center",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Circle::Center",1,"Mezzanine::Circle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("Circle_Center_get",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  result = (Mezzanine::Vector2 *)& ((arg1)->Center);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector2,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Circle_Radius_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = (Mezzanine::Circle *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Radius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Circle::Radius",1,"Mezzanine::Circle *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Circle::Radius",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("Circle_Radius_set",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Radius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Circle_Radius_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = (Mezzanine::Circle *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Circle::Radius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Circle::Radius",1,"Mezzanine::Circle *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("Circle_Radius_get",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  result = (Mezzanine::Real) ((arg1)->Radius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Circle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Circle",0,0)
  result = (Mezzanine::Circle *)new Mezzanine::Circle();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Circle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Circle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = 0 ;
  Mezzanine::Circle *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Circle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Circle::Circle",1,"Mezzanine::Circle const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("new_Circle",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  result = (Mezzanine::Circle *)new Mezzanine::Circle((Mezzanine::Circle const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Circle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Circle__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = 0 ;
  Mezzanine::Circle *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Circle",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Circle::Circle",1,"Mezzanine::Circle &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("new_Circle",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  result = (Mezzanine::Circle *)new Mezzanine::Circle((Mezzanine::Circle &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Circle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Circle__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Circle *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Circle",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Circle::Circle",1,"Mezzanine::Vector2 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Circle::Circle",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("new_Circle",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Circle *)new Mezzanine::Circle((Mezzanine::Vector2 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Circle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Circle__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Vector2 *arg3 = 0 ;
  Mezzanine::Circle *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Circle::Circle",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Circle::Circle",1,"Mezzanine::Vector2 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Circle::Circle",2,"Mezzanine::Vector2 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::Circle::Circle",3,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("new_Circle",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("new_Circle",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("new_Circle",3,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Circle *)new Mezzanine::Circle((Mezzanine::Vector2 const &)*arg1,(Mezzanine::Vector2 const &)*arg2,(Mezzanine::Vector2 const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Circle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Circle(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Circle__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Circle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Circle__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Circle, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Circle__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Circle__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_new_Circle__SWIG_4(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Circle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Circle::Circle()\n"
    "    Mezzanine::Circle::Circle(Mezzanine::Circle const &)\n"
    "    Mezzanine::Circle::Circle(Mezzanine::Circle &&)\n"
    "    Mezzanine::Circle::Circle(Mezzanine::Vector2 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Circle::Circle(Mezzanine::Vector2 const &,Mezzanine::Vector2 const &,Mezzanine::Vector2 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Circle_IsInside(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Circle *arg1 = (Mezzanine::Circle *) 0 ;
  Mezzanine::Vector2 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Circle::IsInside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Circle::IsInside",1,"Mezzanine::Circle const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Circle::IsInside",2,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Circle,0))){
    SWIG_fail_ptr("Circle_IsInside",1,SWIGTYPE_p_Mezzanine__Circle);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("Circle_IsInside",2,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Circle const *)arg1)->IsInside((Mezzanine::Vector2 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Circle(void *obj) {
Mezzanine::Circle *arg1 = (Mezzanine::Circle *) obj;
delete arg1;
}
static int _proxy__wrap_new_Circle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Circle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Circle_attributes[] = {
    { "Center", _wrap_Circle_Center_get, _wrap_Circle_Center_set },
    { "Radius", _wrap_Circle_Radius_get, _wrap_Circle_Radius_set },
    {0,0,0}
};
static swig_lua_method swig_Circle_methods[]= {
    { "IsInside", _wrap_Circle_IsInside},
    {0,0}
};
static swig_lua_method swig_Circle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Circle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Circle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Circle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Circle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Circle_Sf_SwigStatic = {
    "Circle",
    swig_Circle_Sf_SwigStatic_methods,
    swig_Circle_Sf_SwigStatic_attributes,
    swig_Circle_Sf_SwigStatic_constants,
    swig_Circle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Circle_bases[] = {0};
static const char *swig_Circle_base_names[] = {0};
static swig_lua_class _wrap_class_Circle = { "Circle", "Circle", &SWIGTYPE_p_Mezzanine__Circle,_proxy__wrap_new_Circle, swig_delete_Circle, swig_Circle_methods, swig_Circle_attributes, &swig_Circle_Sf_SwigStatic, swig_Circle_meta, swig_Circle_bases, swig_Circle_base_names };

static int _wrap_GetPlatform(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::crossplatform::GetPlatform",0,0)
  result = Mezzanine::crossplatform::GetPlatform();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetTimeStamp(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::MaxInt result;
  
  SWIG_check_num_args("Mezzanine::crossplatform::GetTimeStamp",0,0)
  result = (Mezzanine::MaxInt)Mezzanine::crossplatform::GetTimeStamp();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Debris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Debris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Debris::Debris",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Debris::Debris",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_Debris",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Debris *)new Mezzanine::Debris(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Debris,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Debris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::Debris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Debris::Debris",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Debris::Debris",1,"Mezzanine::EntityID const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Debris::Debris",2,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("new_Debris",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_Debris",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Debris *)new Mezzanine::Debris((Mezzanine::EntityID const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Debris,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Debris(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Debris__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Debris__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Debris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Debris::Debris(Mezzanine::World *)\n"
    "    Mezzanine::Debris::Debris(Mezzanine::EntityID const &,Mezzanine::World *)\n");
  lua_error(L);return 0;
}


static int _wrap_Debris_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Debris *arg1 = (Mezzanine::Debris *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Debris::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Debris::ProtoSerializeProperties",1,"Mezzanine::Debris const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Debris::ProtoSerializeProperties",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Debris,0))){
    SWIG_fail_ptr("Debris_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__Debris);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Debris_ProtoSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Debris const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Debris_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Debris *arg1 = (Mezzanine::Debris *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Debris::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Debris::ProtoDeSerializeProperties",1,"Mezzanine::Debris *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Debris::ProtoDeSerializeProperties",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Debris,0))){
    SWIG_fail_ptr("Debris_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__Debris);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Debris_ProtoDeSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Debris_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Debris *arg1 = (Mezzanine::Debris *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Debris::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Debris::GetDerivedSerializableName",1,"Mezzanine::Debris const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Debris,0))){
    SWIG_fail_ptr("Debris_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__Debris);
  }
  
  result = ((Mezzanine::Debris const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Debris_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Debris::GetSerializableName",0,0)
  result = Mezzanine::Debris::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Debris(void *obj) {
Mezzanine::Debris *arg1 = (Mezzanine::Debris *) obj;
delete arg1;
}
static int _proxy__wrap_new_Debris(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Debris);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Debris_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Debris_methods[]= {
    { "ProtoSerializeProperties", _wrap_Debris_ProtoSerializeProperties},
    { "ProtoDeSerializeProperties", _wrap_Debris_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_Debris_GetDerivedSerializableName},
    {0,0}
};
static swig_lua_method swig_Debris_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Debris_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Debris_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Debris_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Debris_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Debris_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Debris_Sf_SwigStatic = {
    "Debris",
    swig_Debris_Sf_SwigStatic_methods,
    swig_Debris_Sf_SwigStatic_attributes,
    swig_Debris_Sf_SwigStatic_constants,
    swig_Debris_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Debris_bases[] = {0,0};
static const char *swig_Debris_base_names[] = {"Mezzanine::Entity *",0};
static swig_lua_class _wrap_class_Debris = { "Debris", "Debris", &SWIGTYPE_p_Mezzanine__Debris,_proxy__wrap_new_Debris, swig_delete_Debris, swig_Debris_methods, swig_Debris_attributes, &swig_Debris_Sf_SwigStatic, swig_Debris_meta, swig_Debris_bases, swig_Debris_base_names };

static void swig_delete_DebrisFactory(void *obj) {
Mezzanine::DebrisFactory *arg1 = (Mezzanine::DebrisFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_DebrisFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DebrisFactory_methods[]= {
    {0,0}
};
static swig_lua_method swig_DebrisFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DebrisFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DebrisFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DebrisFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DebrisFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DebrisFactory_Sf_SwigStatic = {
    "DebrisFactory",
    swig_DebrisFactory_Sf_SwigStatic_methods,
    swig_DebrisFactory_Sf_SwigStatic_attributes,
    swig_DebrisFactory_Sf_SwigStatic_constants,
    swig_DebrisFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DebrisFactory_bases[] = {0,0};
static const char *swig_DebrisFactory_base_names[] = {"Mezzanine::EntityFactory *",0};
static swig_lua_class _wrap_class_DebrisFactory = { "DebrisFactory", "DebrisFactory", &SWIGTYPE_p_Mezzanine__DebrisFactory,0, swig_delete_DebrisFactory, swig_DebrisFactory_methods, swig_DebrisFactory_attributes, &swig_DebrisFactory_Sf_SwigStatic, swig_DebrisFactory_meta, swig_DebrisFactory_bases, swig_DebrisFactory_base_names };

static int _wrap_ManagerFactory_GetManagerImplName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerFactory *arg1 = (Mezzanine::ManagerFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::ManagerFactory::GetManagerImplName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerFactory::GetManagerImplName",1,"Mezzanine::ManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerFactory,0))){
    SWIG_fail_ptr("ManagerFactory_GetManagerImplName",1,SWIGTYPE_p_Mezzanine__ManagerFactory);
  }
  
  result = ((Mezzanine::ManagerFactory const *)arg1)->GetManagerImplName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ManagerFactory_GetManagerType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerFactory *arg1 = (Mezzanine::ManagerFactory *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::ManagerFactory::GetManagerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ManagerFactory::GetManagerType",1,"Mezzanine::ManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ManagerFactory,0))){
    SWIG_fail_ptr("ManagerFactory_GetManagerType",1,SWIGTYPE_p_Mezzanine__ManagerFactory);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::ManagerFactory const *)arg1)->GetManagerType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ManagerFactory(void *obj) {
Mezzanine::ManagerFactory *arg1 = (Mezzanine::ManagerFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_ManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ManagerFactory_methods[]= {
    { "GetManagerImplName", _wrap_ManagerFactory_GetManagerImplName},
    { "GetManagerType", _wrap_ManagerFactory_GetManagerType},
    {0,0}
};
static swig_lua_method swig_ManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ManagerFactory_Sf_SwigStatic = {
    "ManagerFactory",
    swig_ManagerFactory_Sf_SwigStatic_methods,
    swig_ManagerFactory_Sf_SwigStatic_attributes,
    swig_ManagerFactory_Sf_SwigStatic_constants,
    swig_ManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ManagerFactory_bases[] = {0};
static const char *swig_ManagerFactory_base_names[] = {0};
static swig_lua_class _wrap_class_ManagerFactory = { "ManagerFactory", "ManagerFactory", &SWIGTYPE_p_Mezzanine__ManagerFactory,0, swig_delete_ManagerFactory, swig_ManagerFactory_methods, swig_ManagerFactory_attributes, &swig_ManagerFactory_Sf_SwigStatic, swig_ManagerFactory_meta, swig_ManagerFactory_bases, swig_ManagerFactory_base_names };

static int _wrap_WorldManagerFactory_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",1,"Mezzanine::WorldManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",3,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::NameValuePairList const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldManagerFactory_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",1,"Mezzanine::WorldManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::CreateManager",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("WorldManagerFactory_CreateManager",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::XML::Node const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WorldManagerFactory_CreateManager(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldManagerFactory_CreateManager__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_WorldManagerFactory_CreateManager__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'WorldManagerFactory_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::WorldManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::WorldManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_WorldManagerFactory_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::WorldManagerFactory::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::DestroyManager",1,"Mezzanine::WorldManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::WorldManagerFactory::DestroyManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("WorldManagerFactory_DestroyManager",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("WorldManagerFactory_DestroyManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WorldManagerFactory(void *obj) {
Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_WorldManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WorldManagerFactory_methods[]= {
    { "CreateManager", _wrap_WorldManagerFactory_CreateManager},
    { "DestroyManager", _wrap_WorldManagerFactory_DestroyManager},
    {0,0}
};
static swig_lua_method swig_WorldManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WorldManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WorldManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WorldManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WorldManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WorldManagerFactory_Sf_SwigStatic = {
    "WorldManagerFactory",
    swig_WorldManagerFactory_Sf_SwigStatic_methods,
    swig_WorldManagerFactory_Sf_SwigStatic_attributes,
    swig_WorldManagerFactory_Sf_SwigStatic_constants,
    swig_WorldManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WorldManagerFactory_bases[] = {0,0};
static const char *swig_WorldManagerFactory_base_names[] = {"Mezzanine::ManagerFactory *",0};
static swig_lua_class _wrap_class_WorldManagerFactory = { "WorldManagerFactory", "WorldManagerFactory", &SWIGTYPE_p_Mezzanine__WorldManagerFactory,0, swig_delete_WorldManagerFactory, swig_WorldManagerFactory_methods, swig_WorldManagerFactory_attributes, &swig_WorldManagerFactory_Sf_SwigStatic, swig_WorldManagerFactory_meta, swig_WorldManagerFactory_bases, swig_WorldManagerFactory_base_names };

static int _wrap_new_Attribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::Attribute",0,0)
  result = (Mezzanine::XML::Attribute *)new Mezzanine::XML::Attribute();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Attribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeStruct *arg1 = (Mezzanine::XML::AttributeStruct *) 0 ;
  Mezzanine::XML::Attribute *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::Attribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Attribute",1,"Mezzanine::XML::AttributeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeStruct,0))){
    SWIG_fail_ptr("new_Attribute",1,SWIGTYPE_p_Mezzanine__XML__AttributeStruct);
  }
  
  result = (Mezzanine::XML::Attribute *)new Mezzanine::XML::Attribute(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Attribute(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Attribute__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeStruct, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Attribute__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Attribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::Attribute()\n"
    "    Mezzanine::XML::Attribute::Attribute(Mezzanine::XML::AttributeStruct *)\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute___lt",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute___lt",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->operator <((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <=",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <=",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute___le",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute___le",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->operator <=((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Empty",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_Empty",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Name",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_Name",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_Value(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Value",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_Value",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",1,"Mezzanine::XML::Attribute const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsString",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->AsString((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsString",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Attribute const *)arg1)->AsString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsString__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Attribute_AsString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsString(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Attribute::AsString() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsInt",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)((Mezzanine::XML::Attribute const *)arg1)->AsInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  int result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsInt",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (int)((Mezzanine::XML::Attribute const *)arg1)->AsInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsInt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsInt__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsInt__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Attribute_AsInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsInt(int) const\n"
    "    Mezzanine::XML::Attribute::AsInt() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsUint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsUint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsUint",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)((Mezzanine::XML::Attribute const *)arg1)->AsUint(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsUint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsUint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsUint",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (unsigned int)((Mezzanine::XML::Attribute const *)arg1)->AsUint();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsUint(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsUint__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsUint__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Attribute_AsUint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsUint(unsigned int) const\n"
    "    Mezzanine::XML::Attribute::AsUint() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Mezzanine::XML::Attribute const *)arg1)->AsDouble(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  double result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (double)((Mezzanine::XML::Attribute const *)arg1)->AsDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsDouble(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsDouble__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsDouble__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Attribute_AsDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsDouble(double) const\n"
    "    Mezzanine::XML::Attribute::AsDouble() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((Mezzanine::XML::Attribute const *)arg1)->AsFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  float result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (float)((Mezzanine::XML::Attribute const *)arg1)->AsFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsFloat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsFloat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsFloat__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Attribute_AsFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsFloat(float) const\n"
    "    Mezzanine::XML::Attribute::AsFloat() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsReal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsReal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsReal",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::XML::Attribute const *)arg1)->AsReal(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsReal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsReal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsReal",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (Mezzanine::Real)((Mezzanine::XML::Attribute const *)arg1)->AsReal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsReal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsReal__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsReal__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Attribute_AsReal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsReal(Mezzanine::Real) const\n"
    "    Mezzanine::XML::Attribute::AsReal() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsWhole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsWhole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Whole)((Mezzanine::XML::Attribute const *)arg1)->AsWhole(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsWhole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsWhole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::XML::Attribute const *)arg1)->AsWhole();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsWhole(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsWhole__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsWhole__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Attribute_AsWhole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsWhole(Mezzanine::Whole) const\n"
    "    Mezzanine::XML::Attribute::AsWhole() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsInteger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Integer arg2 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInteger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",2,"Mezzanine::Integer");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  arg2 = (Mezzanine::Integer)lua_tonumber(L, 2);
  result = (Mezzanine::Integer)((Mezzanine::XML::Attribute const *)arg1)->AsInteger(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsInteger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInteger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (Mezzanine::Integer)((Mezzanine::XML::Attribute const *)arg1)->AsInteger();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsInteger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsInteger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsInteger__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Attribute_AsInteger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsInteger(Mezzanine::Integer) const\n"
    "    Mezzanine::XML::Attribute::AsInteger() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_AsBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",1,"Mezzanine::XML::Attribute const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsBool",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->AsBool(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_AsBool",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (bool)((Mezzanine::XML::Attribute const *)arg1)->AsBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_AsBool(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Attribute_AsBool__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Attribute_AsBool__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Attribute_AsBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsBool(bool) const\n"
    "    Mezzanine::XML::Attribute::AsBool() const\n");
  lua_error(L);return 0;
}


static int _wrap_Attribute_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetName",1,"Mezzanine::XML::Attribute *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetName",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_SetName",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->SetName((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_SetValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetValue",1,"Mezzanine::XML::Attribute *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetValue",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_SetValue",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->SetValue((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_GetNextAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::GetNextAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::GetNextAttribute",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_GetNextAttribute",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = ((Mezzanine::XML::Attribute const *)arg1)->GetNextAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_GetPreviousAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::GetPreviousAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::GetPreviousAttribute",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_GetPreviousAttribute",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = ((Mezzanine::XML::Attribute const *)arg1)->GetPreviousAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_HashValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::HashValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::HashValue",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_HashValue",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = ((Mezzanine::XML::Attribute const *)arg1)->HashValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Attribute_InternalObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) 0 ;
  Mezzanine::XML::AttributeStruct *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::InternalObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::InternalObject",1,"Mezzanine::XML::Attribute const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Attribute_InternalObject",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (Mezzanine::XML::AttributeStruct *)((Mezzanine::XML::Attribute const *)arg1)->InternalObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__AttributeStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Attribute(void *obj) {
Mezzanine::XML::Attribute *arg1 = (Mezzanine::XML::Attribute *) obj;
delete arg1;
}
static int _proxy__wrap_new_Attribute(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Attribute);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Attribute_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Attribute_methods[]= {
    { "__lt", _wrap_Attribute___lt},
    { "__le", _wrap_Attribute___le},
    { "Empty", _wrap_Attribute_Empty},
    { "Name", _wrap_Attribute_Name},
    { "Value", _wrap_Attribute_Value},
    { "AsString", _wrap_Attribute_AsString},
    { "AsInt", _wrap_Attribute_AsInt},
    { "AsUint", _wrap_Attribute_AsUint},
    { "AsDouble", _wrap_Attribute_AsDouble},
    { "AsFloat", _wrap_Attribute_AsFloat},
    { "AsReal", _wrap_Attribute_AsReal},
    { "AsWhole", _wrap_Attribute_AsWhole},
    { "AsInteger", _wrap_Attribute_AsInteger},
    { "AsBool", _wrap_Attribute_AsBool},
    { "SetName", _wrap_Attribute_SetName},
    { "SetValue", _wrap_Attribute_SetValue},
    { "GetNextAttribute", _wrap_Attribute_GetNextAttribute},
    { "GetPreviousAttribute", _wrap_Attribute_GetPreviousAttribute},
    { "HashValue", _wrap_Attribute_HashValue},
    { "InternalObject", _wrap_Attribute_InternalObject},
    {0,0}
};
static swig_lua_method swig_Attribute_meta[] = {
    { "__lt", _wrap_Attribute___lt},
    { "__le", _wrap_Attribute___le},
    {0,0}
};

static swig_lua_attribute swig_Attribute_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Attribute_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Attribute_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Attribute_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Attribute_Sf_SwigStatic = {
    "Attribute",
    swig_Attribute_Sf_SwigStatic_methods,
    swig_Attribute_Sf_SwigStatic_attributes,
    swig_Attribute_Sf_SwigStatic_constants,
    swig_Attribute_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Attribute_bases[] = {0};
static const char *swig_Attribute_base_names[] = {0};
static swig_lua_class _wrap_class_Attribute = { "Attribute", "Attribute", &SWIGTYPE_p_Mezzanine__XML__Attribute,_proxy__wrap_new_Attribute, swig_delete_Attribute, swig_Attribute_methods, swig_Attribute_attributes, &swig_Attribute_Sf_SwigStatic, swig_Attribute_meta, swig_Attribute_bases, swig_Attribute_base_names };

static int _wrap_ParseMinimal_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseMinimal",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseMinimal;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParsePi_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParsePi",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParsePi;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseComments_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseComments",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseComments;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseCdata_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseCdata",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseCdata;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseWsPcdata_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseWsPcdata",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseWsPcdata;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseEscapes_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseEscapes",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseEscapes;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseEol_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseEol",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseEol;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseWconvAttribute_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseWconvAttribute",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseWconvAttribute;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseWnormAttribute_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseWnormAttribute",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseWnormAttribute;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseDeclaration_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseDeclaration",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseDeclaration;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseDocType_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseDocType",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseDocType;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseWsPcdata_single_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseWsPcdata_single",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseWsPcdata_single;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseDefault_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseDefault",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseDefault;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseFull_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseFull",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::ParseFull;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatIndent_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::FormatIndent",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatIndent;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatWriteBom_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::FormatWriteBom",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatWriteBom;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatRaw_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::FormatRaw",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatRaw;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatNoDeclaration_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::FormatNoDeclaration",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatNoDeclaration;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatNoEscapes_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::FormatNoEscapes",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatNoEscapes;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatSaveFileText_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::FormatSaveFileText",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatSaveFileText;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_FormatDefault_get(lua_State* L) {
  int SWIG_arg = 0;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::FormatDefault",0,0)
  result = (unsigned int)(unsigned int)Mezzanine::XML::FormatDefault;
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Node__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Node",0,0)
  result = (Mezzanine::XML::Node *)new Mezzanine::XML::Node();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Node__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeStruct *arg1 = (Mezzanine::XML::NodeStruct *) 0 ;
  Mezzanine::XML::Node *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Node",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Node",1,"Mezzanine::XML::NodeStruct *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeStruct,0))){
    SWIG_fail_ptr("new_Node",1,SWIGTYPE_p_Mezzanine__XML__NodeStruct);
  }
  
  result = (Mezzanine::XML::Node *)new Mezzanine::XML::Node(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Node(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Node__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeStruct, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Node__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Node'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Node()\n"
    "    Mezzanine::XML::Node::Node(Mezzanine::XML::NodeStruct *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node___lt",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node___lt",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)((Mezzanine::XML::Node const *)arg1)->operator <((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node___le",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node___le",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)((Mezzanine::XML::Node const *)arg1)->operator <=((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Empty",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Empty",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)((Mezzanine::XML::Node const *)arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Type(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Type",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Type",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::XML::NodeType)((Mezzanine::XML::Node const *)arg1)->Type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Name",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Name",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Value(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Value",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Value",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetFirstAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstAttribute",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetFirstAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->GetFirstAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetLastAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetLastAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastAttribute",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetLastAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->GetLastAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetFirstChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstChild",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetFirstChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->GetFirstChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetLastChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetLastChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastChild",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetLastChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->GetLastChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetNextSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->GetNextSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetPreviousSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->GetPreviousSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetParent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetParent",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetParent",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->GetParent();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetRoot(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetRoot",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetRoot",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->GetRoot();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetText(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeText result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetText",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetText",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->GetText();
  {
    Mezzanine::XML::NodeText * resultptr = new Mezzanine::XML::NodeText((const Mezzanine::XML::NodeText &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeText,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",1,"Mezzanine::XML::Node const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = ((Mezzanine::XML::Node const *)arg1)->GetChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetNextSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetNextSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetNextSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_GetNextSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_GetNextSibling__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_GetNextSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetNextSibling() const\n"
    "    Mezzanine::XML::Node::GetNextSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_GetPreviousSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetPreviousSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetPreviousSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_GetPreviousSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_GetPreviousSibling__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_GetPreviousSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetPreviousSibling() const\n"
    "    Mezzanine::XML::Node::GetPreviousSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_GetChildValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->GetChildValue();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChildValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::Node const *)arg1)->GetChildValue((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChildValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_GetChildValue__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_GetChildValue__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_GetChildValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildValue() const\n"
    "    Mezzanine::XML::Node::GetChildValue(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",1,"Mezzanine::XML::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_SetName",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(arg1)->SetName((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_SetValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_SetValue",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->SetValue((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",1,"Mezzanine::XML::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->AppendAttribute((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (arg1)->PrependAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertAttributeAfter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertAttributeAfter",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertAttributeAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (arg1)->InsertAttributeAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertAttributeBefore(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertAttributeBefore",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertAttributeBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (arg1)->InsertAttributeBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (arg1)->AppendCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (arg1)->PrependCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertCopyAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (arg1)->InsertCopyAfter((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertCopyBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (arg1)->InsertCopyBefore((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::XML::NodeType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (arg1)->AppendChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (arg1)->AppendChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::XML::NodeType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (arg1)->PrependChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::Node *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (arg1)->PrependChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertChildAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (arg1)->InsertChildAfter(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertChildBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::Node *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (arg1)->InsertChildBefore(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->AppendChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_AppendChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_AppendChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_AppendChild__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_AppendChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::AppendChild()\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_PrependChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::Node *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (arg1)->PrependChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_PrependChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_PrependChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_PrependChild__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_PrependChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::PrependChild()\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_InsertChildAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (arg1)->InsertChildAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertChildAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertChildAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertChildAfter__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_InsertChildAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_InsertChildBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (arg1)->InsertChildBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertChildBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertChildBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertChildBefore__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_InsertChildBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_AppendCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (arg1)->AppendCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_AppendCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_AppendCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_AppendCopy__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_AppendCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_PrependCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (arg1)->PrependCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_PrependCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_PrependCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_PrependCopy__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_PrependCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_InsertCopyAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (arg1)->InsertCopyAfter((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertCopyAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertCopyAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertCopyAfter__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_InsertCopyAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_InsertCopyBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (arg1)->InsertCopyBefore((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InsertCopyBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertCopyBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_InsertCopyBefore__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_InsertCopyBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_RemoveAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("Node_RemoveAttribute",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (bool)(arg1)->RemoveAttribute((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_RemoveAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->RemoveAttribute((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_RemoveAttribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_RemoveAttribute__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_RemoveAttribute__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_RemoveAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_RemoveChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_RemoveChild",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)(arg1)->RemoveChild((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_RemoveChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::Node *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->RemoveChild((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_RemoveChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_RemoveChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_RemoveChild__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_RemoveChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Node_FindChildbyAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg4 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",4,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  arg4 = (Mezzanine::Char8 *)lua_tostring(L, 4);
  result = ((Mezzanine::XML::Node const *)arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3,(Mezzanine::Char8 const *)arg4);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindChildbyAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  result = ((Mezzanine::XML::Node const *)arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindChildbyAttribute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_FindChildbyAttribute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_Node_FindChildbyAttribute__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_FindChildbyAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_Path__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 arg2 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Path",2,"Mezzanine::Char8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Path",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = ((Mezzanine::XML::Node const *)arg1)->Path(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Path__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Path",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->Path();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Path(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_Path__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_Node_Path__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_Path'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Path(Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::Path() const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_FirstElementByPath__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 arg3 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",3,"Mezzanine::Char8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  result = ((Mezzanine::XML::Node const *)arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FirstElementByPath__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FirstElementByPath(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_FirstElementByPath__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_Node_FirstElementByPath__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_FirstElementByPath'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *,Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_Traverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::TreeWalker *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Traverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",1,"Mezzanine::XML::Node *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",2,"Mezzanine::XML::TreeWalker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Traverse",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("Node_Traverse",2,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }
  
  result = (bool)(arg1)->Traverse(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindSingleNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNode result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",3,"Mezzanine::XML::XPathVariableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("Node_FindSingleNode",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindSingleNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNode result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindSingleNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNode result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::XML::XPathQuery const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("Node_FindSingleNode",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->FindSingleNode((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindSingleNode(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_FindSingleNode__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_FindSingleNode__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_FindSingleNode__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_FindSingleNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_FindNodes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNodeSet result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",3,"Mezzanine::XML::XPathVariableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("Node_FindNodes",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->FindNodes((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindNodes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNodeSet result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->FindNodes((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindNodes__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::XML::XPathQuery const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("Node_FindNodes",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->FindNodes((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_FindNodes(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_FindNodes__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_FindNodes__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Node_FindNodes__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_FindNodes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_Print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::XML::Node::Print",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::XML::Node::Print",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::Node const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_Print",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("Node_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  ((Mezzanine::XML::Node const *)arg1)->Print(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_Print(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_Print__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_Print__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Node_Print__SWIG_13(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_Print__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_Print__SWIG_12(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Node_Print__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Node_Print__SWIG_11(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Node_Print__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Node_Print__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Node_Print__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Node_Print__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Node_Print__SWIG_10(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Node_Print__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_Node_Print__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_Print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *,unsigned int,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node::iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::begin",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_begin",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->begin();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_c_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node::iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::end",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_c_end",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->end();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_attributes_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::attributes_begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_begin",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_attributes_begin",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->attributes_begin();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_attributes_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::attributes_end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_end",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_attributes_end",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->attributes_end();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChildren__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > > result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->GetChildren();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChildren__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > > result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::Node const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = ((Mezzanine::XML::Node const *)arg1)->GetChildren((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_GetChildren(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Node_GetChildren__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Node_GetChildren__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Node_GetChildren'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildren() const\n"
    "    Mezzanine::XML::Node::GetChildren(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Node_attributes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > > result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::attributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_attributes",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->attributes();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_OffSetDebug(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  ptrdiff_t result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::OffSetDebug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::OffSetDebug",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_OffSetDebug",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->OffSetDebug();
  {
    ptrdiff_t * resultptr = new ptrdiff_t((const ptrdiff_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ptrdiff_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_HashValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::HashValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::HashValue",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_HashValue",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = ((Mezzanine::XML::Node const *)arg1)->HashValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Node_InternalObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) 0 ;
  Mezzanine::XML::NodeStruct *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InternalObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InternalObject",1,"Mezzanine::XML::Node const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Node_InternalObject",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::XML::NodeStruct *)((Mezzanine::XML::Node const *)arg1)->InternalObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Node(void *obj) {
Mezzanine::XML::Node *arg1 = (Mezzanine::XML::Node *) obj;
delete arg1;
}
static int _proxy__wrap_new_Node(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Node);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Node_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Node_methods[]= {
    { "__lt", _wrap_Node___lt},
    { "__le", _wrap_Node___le},
    { "Empty", _wrap_Node_Empty},
    { "Type", _wrap_Node_Type},
    { "Name", _wrap_Node_Name},
    { "Value", _wrap_Node_Value},
    { "GetFirstAttribute", _wrap_Node_GetFirstAttribute},
    { "GetLastAttribute", _wrap_Node_GetLastAttribute},
    { "GetFirstChild", _wrap_Node_GetFirstChild},
    { "GetLastChild", _wrap_Node_GetLastChild},
    { "GetParent", _wrap_Node_GetParent},
    { "GetRoot", _wrap_Node_GetRoot},
    { "GetText", _wrap_Node_GetText},
    { "GetChild", _wrap_Node_GetChild},
    { "GetAttribute", _wrap_Node_GetAttribute},
    { "GetNextSibling", _wrap_Node_GetNextSibling},
    { "GetPreviousSibling", _wrap_Node_GetPreviousSibling},
    { "GetChildValue", _wrap_Node_GetChildValue},
    { "SetName", _wrap_Node_SetName},
    { "SetValue", _wrap_Node_SetValue},
    { "AppendAttribute", _wrap_Node_AppendAttribute},
    { "PrependAttribute", _wrap_Node_PrependAttribute},
    { "InsertAttributeAfter", _wrap_Node_InsertAttributeAfter},
    { "InsertAttributeBefore", _wrap_Node_InsertAttributeBefore},
    { "AppendChild", _wrap_Node_AppendChild},
    { "PrependChild", _wrap_Node_PrependChild},
    { "InsertChildAfter", _wrap_Node_InsertChildAfter},
    { "InsertChildBefore", _wrap_Node_InsertChildBefore},
    { "AppendCopy", _wrap_Node_AppendCopy},
    { "PrependCopy", _wrap_Node_PrependCopy},
    { "InsertCopyAfter", _wrap_Node_InsertCopyAfter},
    { "InsertCopyBefore", _wrap_Node_InsertCopyBefore},
    { "RemoveAttribute", _wrap_Node_RemoveAttribute},
    { "RemoveChild", _wrap_Node_RemoveChild},
    { "FindChildbyAttribute", _wrap_Node_FindChildbyAttribute},
    { "Path", _wrap_Node_Path},
    { "FirstElementByPath", _wrap_Node_FirstElementByPath},
    { "Traverse", _wrap_Node_Traverse},
    { "FindSingleNode", _wrap_Node_FindSingleNode},
    { "FindNodes", _wrap_Node_FindNodes},
    { "Print", _wrap_Node_Print},
    { "begin", _wrap_Node_begin},
    { "c_end", _wrap_Node_c_end},
    { "attributes_begin", _wrap_Node_attributes_begin},
    { "attributes_end", _wrap_Node_attributes_end},
    { "GetChildren", _wrap_Node_GetChildren},
    { "attributes", _wrap_Node_attributes},
    { "OffSetDebug", _wrap_Node_OffSetDebug},
    { "HashValue", _wrap_Node_HashValue},
    { "InternalObject", _wrap_Node_InternalObject},
    {0,0}
};
static swig_lua_method swig_Node_meta[] = {
    { "__lt", _wrap_Node___lt},
    { "__le", _wrap_Node___le},
    {0,0}
};

static swig_lua_attribute swig_Node_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Node_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Node_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Node_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Node_Sf_SwigStatic = {
    "Node",
    swig_Node_Sf_SwigStatic_methods,
    swig_Node_Sf_SwigStatic_attributes,
    swig_Node_Sf_SwigStatic_constants,
    swig_Node_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Node_bases[] = {0};
static const char *swig_Node_base_names[] = {0};
static swig_lua_class _wrap_class_Node = { "Node", "Node", &SWIGTYPE_p_Mezzanine__XML__Node,_proxy__wrap_new_Node, swig_delete_Node, swig_Node_methods, swig_Node_attributes, &swig_Node_Sf_SwigStatic, swig_Node_meta, swig_Node_bases, swig_Node_base_names };

static int _wrap_new_AttributeIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::AttributeIterator::AttributeIterator",0,0)
  result = (Mezzanine::XML::AttributeIterator *)new Mezzanine::XML::AttributeIterator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttributeIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::AttributeIterator *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::AttributeIterator::AttributeIterator",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::AttributeIterator",1,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::AttributeIterator",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("new_AttributeIterator",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_AttributeIterator",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::XML::AttributeIterator *)new Mezzanine::XML::AttributeIterator((Mezzanine::XML::Attribute const &)*arg1,(Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_AttributeIterator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_AttributeIterator__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_AttributeIterator__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_AttributeIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::AttributeIterator::AttributeIterator()\n"
    "    Mezzanine::XML::AttributeIterator::AttributeIterator(Mezzanine::XML::Attribute const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::AttributeIterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::AttributeIterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::operator ==",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::operator ==",2,"Mezzanine::XML::AttributeIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___eq",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___eq",2,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (bool)((Mezzanine::XML::AttributeIterator const *)arg1)->operator ==((Mezzanine::XML::AttributeIterator const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator___ref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::AttributeIterator::operator *",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::operator *",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___ref__",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (Mezzanine::XML::Attribute *) &((Mezzanine::XML::AttributeIterator const *)arg1)->operator *();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Attribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator___deref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::AttributeIterator::operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::AttributeIterator::operator ->",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___deref__",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (Mezzanine::XML::Attribute *)((Mezzanine::XML::AttributeIterator const *)arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Attribute,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___lt",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("AttributeIterator___lt",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (bool)(*arg1)->operator <((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <=",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::operator <=",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator___le",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("AttributeIterator___le",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (bool)(*arg1)->operator <=((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Empty",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_Empty",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (bool)(*arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Name",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_Name",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (Mezzanine::Char8 *)(*arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_Value(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::Value",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_Value",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (Mezzanine::Char8 *)(*arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",1,"Mezzanine::XML::AttributeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsString",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)(*arg1)->AsString((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsString",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsString",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (Mezzanine::Char8 *)(*arg1)->AsString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsString__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsString(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Attribute::AsString() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsInt",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)(*arg1)->AsInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  int result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInt",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsInt",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (int)(*arg1)->AsInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsInt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsInt__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsInt__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsInt(int) const\n"
    "    Mezzanine::XML::Attribute::AsInt() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsUint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsUint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsUint",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)(*arg1)->AsUint(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsUint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsUint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsUint",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsUint",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (unsigned int)(*arg1)->AsUint();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsUint(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsUint__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsUint__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsUint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsUint(unsigned int) const\n"
    "    Mezzanine::XML::Attribute::AsUint() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)(*arg1)->AsDouble(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  double result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsDouble",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (double)(*arg1)->AsDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsDouble(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsDouble__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsDouble__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsDouble(double) const\n"
    "    Mezzanine::XML::Attribute::AsDouble() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(*arg1)->AsFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  float result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsFloat",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (float)(*arg1)->AsFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsFloat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsFloat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsFloat__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsFloat(float) const\n"
    "    Mezzanine::XML::Attribute::AsFloat() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsReal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsReal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsReal",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = (Mezzanine::Real)(*arg1)->AsReal(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsReal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsReal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsReal",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsReal",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (Mezzanine::Real)(*arg1)->AsReal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsReal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsReal__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsReal__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsReal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsReal(Mezzanine::Real) const\n"
    "    Mezzanine::XML::Attribute::AsReal() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsWhole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsWhole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Whole)(*arg1)->AsWhole(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsWhole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsWhole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsWhole",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (Mezzanine::Whole)(*arg1)->AsWhole();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsWhole(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsWhole__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsWhole__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsWhole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsWhole(Mezzanine::Whole) const\n"
    "    Mezzanine::XML::Attribute::AsWhole() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsInteger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Integer arg2 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInteger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",2,"Mezzanine::Integer");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  arg2 = (Mezzanine::Integer)lua_tonumber(L, 2);
  result = (Mezzanine::Integer)(*arg1)->AsInteger(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsInteger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsInteger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsInteger",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (Mezzanine::Integer)(*arg1)->AsInteger();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsInteger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsInteger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsInteger__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsInteger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsInteger(Mezzanine::Integer) const\n"
    "    Mezzanine::XML::Attribute::AsInteger() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_AsBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",1,"Mezzanine::XML::AttributeIterator const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsBool",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(*arg1)->AsBool(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::AsBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::AsBool",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_AsBool",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (bool)(*arg1)->AsBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_AsBool(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AttributeIterator_AsBool__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__AttributeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_AttributeIterator_AsBool__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AttributeIterator_AsBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Attribute::AsBool(bool) const\n"
    "    Mezzanine::XML::Attribute::AsBool() const\n");
  lua_error(L);return 0;
}


static int _wrap_AttributeIterator_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetName",1,"Mezzanine::XML::AttributeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetName",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_SetName",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(*arg1)->SetName((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_SetValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetValue",1,"Mezzanine::XML::AttributeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Attribute::SetValue",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_SetValue",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(*arg1)->SetValue((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_GetNextAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::GetNextAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::GetNextAttribute",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_GetNextAttribute",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (*arg1)->GetNextAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_GetPreviousAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::GetPreviousAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::GetPreviousAttribute",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_GetPreviousAttribute",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (*arg1)->GetPreviousAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_HashValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::HashValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::HashValue",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_HashValue",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (*arg1)->HashValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AttributeIterator_InternalObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) 0 ;
  Mezzanine::XML::AttributeStruct *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Attribute::InternalObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Attribute::InternalObject",1,"Mezzanine::XML::AttributeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,0))){
    SWIG_fail_ptr("AttributeIterator_InternalObject",1,SWIGTYPE_p_Mezzanine__XML__AttributeIterator);
  }
  
  result = (Mezzanine::XML::AttributeStruct *)(*arg1)->InternalObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__AttributeStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AttributeIterator(void *obj) {
Mezzanine::XML::AttributeIterator *arg1 = (Mezzanine::XML::AttributeIterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_AttributeIterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AttributeIterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AttributeIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AttributeIterator_methods[]= {
    { "__eq", _wrap_AttributeIterator___eq},
    { "__ref__", _wrap_AttributeIterator___ref__},
    { "__deref__", _wrap_AttributeIterator___deref__},
    { "__lt", _wrap_AttributeIterator___lt},
    { "__le", _wrap_AttributeIterator___le},
    { "Empty", _wrap_AttributeIterator_Empty},
    { "Name", _wrap_AttributeIterator_Name},
    { "Value", _wrap_AttributeIterator_Value},
    { "AsString", _wrap_AttributeIterator_AsString},
    { "AsInt", _wrap_AttributeIterator_AsInt},
    { "AsUint", _wrap_AttributeIterator_AsUint},
    { "AsDouble", _wrap_AttributeIterator_AsDouble},
    { "AsFloat", _wrap_AttributeIterator_AsFloat},
    { "AsReal", _wrap_AttributeIterator_AsReal},
    { "AsWhole", _wrap_AttributeIterator_AsWhole},
    { "AsInteger", _wrap_AttributeIterator_AsInteger},
    { "AsBool", _wrap_AttributeIterator_AsBool},
    { "SetName", _wrap_AttributeIterator_SetName},
    { "SetValue", _wrap_AttributeIterator_SetValue},
    { "GetNextAttribute", _wrap_AttributeIterator_GetNextAttribute},
    { "GetPreviousAttribute", _wrap_AttributeIterator_GetPreviousAttribute},
    { "HashValue", _wrap_AttributeIterator_HashValue},
    { "InternalObject", _wrap_AttributeIterator_InternalObject},
    {0,0}
};
static swig_lua_method swig_AttributeIterator_meta[] = {
    { "__eq", _wrap_AttributeIterator___eq},
    { "__ref__", _wrap_AttributeIterator___ref__},
    { "__deref__", _wrap_AttributeIterator___deref__},
    { "__lt", _wrap_AttributeIterator___lt},
    { "__le", _wrap_AttributeIterator___le},
    {0,0}
};

static swig_lua_attribute swig_AttributeIterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AttributeIterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AttributeIterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AttributeIterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AttributeIterator_Sf_SwigStatic = {
    "AttributeIterator",
    swig_AttributeIterator_Sf_SwigStatic_methods,
    swig_AttributeIterator_Sf_SwigStatic_attributes,
    swig_AttributeIterator_Sf_SwigStatic_constants,
    swig_AttributeIterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AttributeIterator_bases[] = {0};
static const char *swig_AttributeIterator_base_names[] = {0};
static swig_lua_class _wrap_class_AttributeIterator = { "AttributeIterator", "AttributeIterator", &SWIGTYPE_p_Mezzanine__XML__AttributeIterator,_proxy__wrap_new_AttributeIterator, swig_delete_AttributeIterator, swig_AttributeIterator_methods, swig_AttributeIterator_attributes, &swig_AttributeIterator_Sf_SwigStatic, swig_AttributeIterator_meta, swig_AttributeIterator_bases, swig_AttributeIterator_base_names };

static int _wrap_ParseResult_Status_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  Mezzanine::XML::ParseStatus arg2 ;
  
  SWIG_check_num_args("Mezzanine::XML::ParseResult::Status",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Status",1,"Mezzanine::XML::ParseResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Status",2,"Mezzanine::XML::ParseStatus");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_Status_set",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }
  
  arg2 = (Mezzanine::XML::ParseStatus)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->Status = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_Status_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  Mezzanine::XML::ParseStatus result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseResult::Status",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Status",1,"Mezzanine::XML::ParseResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_Status_get",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }
  
  result = (Mezzanine::XML::ParseStatus) ((arg1)->Status);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_Offset_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  ptrdiff_t arg2 ;
  ptrdiff_t *argp2 ;
  
  SWIG_check_num_args("Mezzanine::XML::ParseResult::Offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Offset",1,"Mezzanine::XML::ParseResult *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Offset",2,"ptrdiff_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_Offset_set",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ptrdiff_t,0))){
    SWIG_fail_ptr("ParseResult_Offset_set",2,SWIGTYPE_p_ptrdiff_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->Offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_Offset_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  ptrdiff_t result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseResult::Offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Offset",1,"Mezzanine::XML::ParseResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_Offset_get",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }
  
  result =  ((arg1)->Offset);
  {
    ptrdiff_t * resultptr = new ptrdiff_t((const ptrdiff_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ptrdiff_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_DocumentEncoding_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  Mezzanine::XML::Encoding arg2 ;
  
  SWIG_check_num_args("Mezzanine::XML::ParseResult::DocumentEncoding",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::DocumentEncoding",1,"Mezzanine::XML::ParseResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::ParseResult::DocumentEncoding",2,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_DocumentEncoding_set",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }
  
  arg2 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->DocumentEncoding = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_DocumentEncoding_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  Mezzanine::XML::Encoding result;
  
  SWIG_check_num_args("Mezzanine::XML::ParseResult::DocumentEncoding",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::DocumentEncoding",1,"Mezzanine::XML::ParseResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_DocumentEncoding_get",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }
  
  result = (Mezzanine::XML::Encoding) ((arg1)->DocumentEncoding);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_ParseResult(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::ParseResult::ParseResult",0,0)
  result = (Mezzanine::XML::ParseResult *)new Mezzanine::XML::ParseResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ParseResult_Description(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::ParseResult::Description",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::ParseResult::Description",1,"Mezzanine::XML::ParseResult const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__ParseResult,0))){
    SWIG_fail_ptr("ParseResult_Description",1,SWIGTYPE_p_Mezzanine__XML__ParseResult);
  }
  
  result = (char *)((Mezzanine::XML::ParseResult const *)arg1)->Description();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ParseResult(void *obj) {
Mezzanine::XML::ParseResult *arg1 = (Mezzanine::XML::ParseResult *) obj;
delete arg1;
}
static int _proxy__wrap_new_ParseResult(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ParseResult);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ParseResult_attributes[] = {
    { "Status", _wrap_ParseResult_Status_get, _wrap_ParseResult_Status_set },
    { "Offset", _wrap_ParseResult_Offset_get, _wrap_ParseResult_Offset_set },
    { "DocumentEncoding", _wrap_ParseResult_DocumentEncoding_get, _wrap_ParseResult_DocumentEncoding_set },
    {0,0,0}
};
static swig_lua_method swig_ParseResult_methods[]= {
    { "Description", _wrap_ParseResult_Description},
    {0,0}
};
static swig_lua_method swig_ParseResult_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ParseResult_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ParseResult_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ParseResult_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ParseResult_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ParseResult_Sf_SwigStatic = {
    "ParseResult",
    swig_ParseResult_Sf_SwigStatic_methods,
    swig_ParseResult_Sf_SwigStatic_attributes,
    swig_ParseResult_Sf_SwigStatic_constants,
    swig_ParseResult_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ParseResult_bases[] = {0};
static const char *swig_ParseResult_base_names[] = {0};
static swig_lua_class _wrap_class_ParseResult = { "ParseResult", "ParseResult", &SWIGTYPE_p_Mezzanine__XML__ParseResult,_proxy__wrap_new_ParseResult, swig_delete_ParseResult, swig_ParseResult_methods, swig_ParseResult_attributes, &swig_ParseResult_Sf_SwigStatic, swig_ParseResult_meta, swig_ParseResult_bases, swig_ParseResult_base_names };

static int _wrap_Writer_Write(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Writer *arg1 = (Mezzanine::XML::Writer *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Mezzanine::XML::Writer::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Writer::Write",1,"Mezzanine::XML::Writer *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Writer::Write",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Writer::Write",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("Writer_Write",1,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Writer_Write");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Write((void const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Writer(void *obj) {
Mezzanine::XML::Writer *arg1 = (Mezzanine::XML::Writer *) obj;
delete arg1;
}
static swig_lua_attribute swig_Writer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Writer_methods[]= {
    { "Write", _wrap_Writer_Write},
    {0,0}
};
static swig_lua_method swig_Writer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Writer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Writer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Writer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Writer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Writer_Sf_SwigStatic = {
    "Writer",
    swig_Writer_Sf_SwigStatic_methods,
    swig_Writer_Sf_SwigStatic_attributes,
    swig_Writer_Sf_SwigStatic_constants,
    swig_Writer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Writer_bases[] = {0};
static const char *swig_Writer_base_names[] = {0};
static swig_lua_class _wrap_class_Writer = { "Writer", "Writer", &SWIGTYPE_p_Mezzanine__XML__Writer,0, swig_delete_Writer, swig_Writer_methods, swig_Writer_attributes, &swig_Writer_Sf_SwigStatic, swig_Writer_meta, swig_Writer_bases, swig_Writer_base_names };

static int _wrap_new_WriterFile(lua_State* L) {
  int SWIG_arg = 0;
  void *arg1 = (void *) 0 ;
  Mezzanine::XML::WriterFile *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::WriterFile::WriterFile",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::WriterFile::WriterFile",1,"void *");
  arg1=(void *)SWIG_MustGetPtr(L,1,0,0,1,"new_WriterFile");
  result = (Mezzanine::XML::WriterFile *)new Mezzanine::XML::WriterFile(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__WriterFile,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_WriterFile_Write(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::WriterFile *arg1 = (Mezzanine::XML::WriterFile *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Mezzanine::XML::WriterFile::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::WriterFile::Write",1,"Mezzanine::XML::WriterFile *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::WriterFile::Write",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::WriterFile::Write",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__WriterFile,0))){
    SWIG_fail_ptr("WriterFile_Write",1,SWIGTYPE_p_Mezzanine__XML__WriterFile);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WriterFile_Write");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Write((void const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WriterFile(void *obj) {
Mezzanine::XML::WriterFile *arg1 = (Mezzanine::XML::WriterFile *) obj;
delete arg1;
}
static int _proxy__wrap_new_WriterFile(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WriterFile);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WriterFile_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WriterFile_methods[]= {
    { "Write", _wrap_WriterFile_Write},
    {0,0}
};
static swig_lua_method swig_WriterFile_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WriterFile_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WriterFile_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WriterFile_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WriterFile_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WriterFile_Sf_SwigStatic = {
    "WriterFile",
    swig_WriterFile_Sf_SwigStatic_methods,
    swig_WriterFile_Sf_SwigStatic_attributes,
    swig_WriterFile_Sf_SwigStatic_constants,
    swig_WriterFile_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WriterFile_bases[] = {0,0};
static const char *swig_WriterFile_base_names[] = {"Mezzanine::XML::Writer *",0};
static swig_lua_class _wrap_class_WriterFile = { "WriterFile", "WriterFile", &SWIGTYPE_p_Mezzanine__XML__WriterFile,_proxy__wrap_new_WriterFile, swig_delete_WriterFile, swig_WriterFile_methods, swig_WriterFile_attributes, &swig_WriterFile_Sf_SwigStatic, swig_WriterFile_meta, swig_WriterFile_bases, swig_WriterFile_base_names };

static int _wrap_new_WriterStream__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  std::basic_ostream< char,std::char_traits< char > > *arg1 = 0 ;
  Mezzanine::XML::WriterStream *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::WriterStream::WriterStream",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::WriterStream::WriterStream",1,"std::basic_ostream< char,std::char_traits< char > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("new_WriterStream",1,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  result = (Mezzanine::XML::WriterStream *)new Mezzanine::XML::WriterStream(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__WriterStream,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WriterStream__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg1 = 0 ;
  Mezzanine::XML::WriterStream *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::WriterStream::WriterStream",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::WriterStream::WriterStream",1,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("new_WriterStream",1,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  result = (Mezzanine::XML::WriterStream *)new Mezzanine::XML::WriterStream(*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__WriterStream,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_WriterStream(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WriterStream__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_WriterStream__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_WriterStream'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::WriterStream::WriterStream(std::basic_ostream< char,std::char_traits< char > > &)\n"
    "    Mezzanine::XML::WriterStream::WriterStream(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &)\n");
  lua_error(L);return 0;
}


static int _wrap_WriterStream_Write(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::WriterStream *arg1 = (Mezzanine::XML::WriterStream *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  
  SWIG_check_num_args("Mezzanine::XML::WriterStream::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::WriterStream::Write",1,"Mezzanine::XML::WriterStream *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::WriterStream::Write",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::WriterStream::Write",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__WriterStream,0))){
    SWIG_fail_ptr("WriterStream_Write",1,SWIGTYPE_p_Mezzanine__XML__WriterStream);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"WriterStream_Write");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  (arg1)->Write((void const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_WriterStream(void *obj) {
Mezzanine::XML::WriterStream *arg1 = (Mezzanine::XML::WriterStream *) obj;
delete arg1;
}
static int _proxy__wrap_new_WriterStream(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_WriterStream);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_WriterStream_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_WriterStream_methods[]= {
    { "Write", _wrap_WriterStream_Write},
    {0,0}
};
static swig_lua_method swig_WriterStream_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_WriterStream_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_WriterStream_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_WriterStream_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_WriterStream_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_WriterStream_Sf_SwigStatic = {
    "WriterStream",
    swig_WriterStream_Sf_SwigStatic_methods,
    swig_WriterStream_Sf_SwigStatic_attributes,
    swig_WriterStream_Sf_SwigStatic_constants,
    swig_WriterStream_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_WriterStream_bases[] = {0,0};
static const char *swig_WriterStream_base_names[] = {"Mezzanine::XML::Writer *",0};
static swig_lua_class _wrap_class_WriterStream = { "WriterStream", "WriterStream", &SWIGTYPE_p_Mezzanine__XML__WriterStream,_proxy__wrap_new_WriterStream, swig_delete_WriterStream, swig_WriterStream_methods, swig_WriterStream_attributes, &swig_WriterStream_Sf_SwigStatic, swig_WriterStream_meta, swig_WriterStream_bases, swig_WriterStream_base_names };

static int _wrap_XMLStreamWrapper_Write(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XMLStreamWrapper *arg1 = (Mezzanine::XML::XMLStreamWrapper *) 0 ;
  void *arg2 = (void *) 0 ;
  StreamSize arg3 ;
  StreamSize *argp3 ;
  
  SWIG_check_num_args("Mezzanine::XML::XMLStreamWrapper::Write",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XMLStreamWrapper::Write",1,"Mezzanine::XML::XMLStreamWrapper *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::XMLStreamWrapper::Write",2,"void const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::XMLStreamWrapper::Write",3,"StreamSize");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XMLStreamWrapper,0))){
    SWIG_fail_ptr("XMLStreamWrapper_Write",1,SWIGTYPE_p_Mezzanine__XML__XMLStreamWrapper);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"XMLStreamWrapper_Write");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_StreamSize,0))){
    SWIG_fail_ptr("XMLStreamWrapper_Write",3,SWIGTYPE_p_StreamSize);
  }
  arg3 = *argp3;
  
  (arg1)->Write((void const *)arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XMLStreamWrapper(void *obj) {
Mezzanine::XML::XMLStreamWrapper *arg1 = (Mezzanine::XML::XMLStreamWrapper *) obj;
delete arg1;
}
static swig_lua_attribute swig_XMLStreamWrapper_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_XMLStreamWrapper_methods[]= {
    { "Write", _wrap_XMLStreamWrapper_Write},
    {0,0}
};
static swig_lua_method swig_XMLStreamWrapper_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_XMLStreamWrapper_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XMLStreamWrapper_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XMLStreamWrapper_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XMLStreamWrapper_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XMLStreamWrapper_Sf_SwigStatic = {
    "XMLStreamWrapper",
    swig_XMLStreamWrapper_Sf_SwigStatic_methods,
    swig_XMLStreamWrapper_Sf_SwigStatic_attributes,
    swig_XMLStreamWrapper_Sf_SwigStatic_constants,
    swig_XMLStreamWrapper_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XMLStreamWrapper_bases[] = {0,0};
static const char *swig_XMLStreamWrapper_base_names[] = {"Mezzanine::XML::Writer *",0};
static swig_lua_class _wrap_class_XMLStreamWrapper = { "XMLStreamWrapper", "XMLStreamWrapper", &SWIGTYPE_p_Mezzanine__XML__XMLStreamWrapper,0, swig_delete_XMLStreamWrapper, swig_XMLStreamWrapper_methods, swig_XMLStreamWrapper_attributes, &swig_XMLStreamWrapper_Sf_SwigStatic, swig_XMLStreamWrapper_meta, swig_XMLStreamWrapper_bases, swig_XMLStreamWrapper_base_names };

static int _wrap_new_Document(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Document",0,0)
  result = (Mezzanine::XML::Document *)new Mezzanine::XML::Document();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Document,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Reset",1,"Mezzanine::XML::Document *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Reset",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Document *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Reset",1,"Mezzanine::XML::Document *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Reset",2,"Mezzanine::XML::Document const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Reset",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Reset",2,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  (arg1)->Reset((Mezzanine::XML::Document const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Reset(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Document_Reset__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Document_Reset__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Document_Reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::Reset()\n"
    "    Mezzanine::XML::Document::Reset(Mezzanine::XML::Document const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_Load__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_istream< char,std::char_traits< char > > *arg2 = 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::Encoding arg4 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Load",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Load",1,"Mezzanine::XML::Document *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Load",2,"std::basic_istream< char,std::char_traits< char > > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Load",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::Load",4,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Load",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Document_Load",2,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 4);
  result = (arg1)->Load(*arg2,arg3,arg4);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Load__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_istream< char,std::char_traits< char > > *arg2 = 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Load",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Load",1,"Mezzanine::XML::Document *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Load",2,"std::basic_istream< char,std::char_traits< char > > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Load",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Load",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Document_Load",2,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (arg1)->Load(*arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Load__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_istream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Load",1,"Mezzanine::XML::Document *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Load",2,"std::basic_istream< char,std::char_traits< char > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Load",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Document_Load",2,SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t);
  }
  
  result = (arg1)->Load(*arg2);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Load__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_istream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Load",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Load",1,"Mezzanine::XML::Document *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Load",2,"std::basic_istream< wchar_t,std::char_traits< wchar_t > > &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Load",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Load",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("Document_Load",2,SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (arg1)->Load(*arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Load__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_istream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Load",1,"Mezzanine::XML::Document *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Load",2,"std::basic_istream< wchar_t,std::char_traits< wchar_t > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Load",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("Document_Load",2,SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  result = (arg1)->Load(*arg2);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Load__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Load",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Load",1,"Mezzanine::XML::Document *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Load",2,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Load",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Load",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (arg1)->Load((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Load__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Load",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Load",1,"Mezzanine::XML::Document *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Load",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Load",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (arg1)->Load((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Load(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Document_Load__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Document_Load__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Document_Load__SWIG_6(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_Load__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_Load__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_Load__SWIG_5(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_Load__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Document_Load'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::Load(std::basic_istream< char,std::char_traits< char > > &,unsigned int,Mezzanine::XML::Encoding)\n"
    "    Mezzanine::XML::Document::Load(std::basic_istream< char,std::char_traits< char > > &,unsigned int)\n"
    "    Mezzanine::XML::Document::Load(std::basic_istream< char,std::char_traits< char > > &)\n"
    "    Mezzanine::XML::Document::Load(std::basic_istream< wchar_t,std::char_traits< wchar_t > > &,unsigned int)\n"
    "    Mezzanine::XML::Document::Load(std::basic_istream< wchar_t,std::char_traits< wchar_t > > &)\n"
    "    Mezzanine::XML::Document::Load(Mezzanine::Char8 const *,unsigned int)\n"
    "    Mezzanine::XML::Document::Load(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_LoadFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::Encoding arg4 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",1,"Mezzanine::XML::Document *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",4,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 4);
  result = (arg1)->LoadFile((char const *)arg2,arg3,arg4);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",1,"Mezzanine::XML::Document *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",2,"char const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (arg1)->LoadFile((char const *)arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadFile__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",1,"Mezzanine::XML::Document *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (arg1)->LoadFile((char const *)arg2);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadFile__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::Encoding arg4 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",2,"wchar_t const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",3,"unsigned int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",4,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_wchar_t,0))){
    SWIG_fail_ptr("Document_LoadFile",2,SWIGTYPE_p_wchar_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  arg4 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 4);
  result = (arg1)->LoadFile((wchar_t const *)arg2,arg3,arg4);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadFile__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  unsigned int arg3 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",2,"wchar_t const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",3,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_wchar_t,0))){
    SWIG_fail_ptr("Document_LoadFile",2,SWIGTYPE_p_wchar_t);
  }
  
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (unsigned int)lua_tonumber(L, 3);
  result = (arg1)->LoadFile((wchar_t const *)arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadFile__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadFile",2,"wchar_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_wchar_t,0))){
    SWIG_fail_ptr("Document_LoadFile",2,SWIGTYPE_p_wchar_t);
  }
  
  result = (arg1)->LoadFile((wchar_t const *)arg2);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadFile(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_wchar_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Document_LoadFile__SWIG_5(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Document_LoadFile__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_wchar_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_LoadFile__SWIG_4(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_LoadFile__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_wchar_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_LoadFile__SWIG_3(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_LoadFile__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Document_LoadFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::LoadFile(char const *,unsigned int,Mezzanine::XML::Encoding)\n"
    "    Mezzanine::XML::Document::LoadFile(char const *,unsigned int)\n"
    "    Mezzanine::XML::Document::LoadFile(char const *)\n"
    "    Mezzanine::XML::Document::LoadFile(wchar_t const *,unsigned int,Mezzanine::XML::Encoding)\n"
    "    Mezzanine::XML::Document::LoadFile(wchar_t const *,unsigned int)\n"
    "    Mezzanine::XML::Document::LoadFile(wchar_t const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_LoadBuffer__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadBuffer",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBuffer",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBuffer");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  result = (arg1)->LoadBuffer((void const *)arg2,arg3,arg4,arg5);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBuffer__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadBuffer",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBuffer",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBuffer");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (arg1)->LoadBuffer((void const *)arg2,arg3,arg4);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBuffer__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadBuffer",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",2,"void const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBuffer",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBuffer",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBuffer");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->LoadBuffer((void const *)arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBuffer(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_LoadBuffer__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_LoadBuffer__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Document_LoadBuffer__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Document_LoadBuffer'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::LoadBuffer(void const *,size_t,unsigned int,Mezzanine::XML::Encoding)\n"
    "    Mezzanine::XML::Document::LoadBuffer(void const *,size_t,unsigned int)\n"
    "    Mezzanine::XML::Document::LoadBuffer(void const *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_LoadBufferInplace__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplace",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplace",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplace");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  result = (arg1)->LoadBufferInplace(arg2,arg3,arg4,arg5);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplace__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplace",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplace",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplace");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (arg1)->LoadBufferInplace(arg2,arg3,arg4);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplace__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplace",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplace",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplace",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplace");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->LoadBufferInplace(arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplace(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_LoadBufferInplace__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_LoadBufferInplace__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Document_LoadBufferInplace__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Document_LoadBufferInplace'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::LoadBufferInplace(void *,size_t,unsigned int,Mezzanine::XML::Encoding)\n"
    "    Mezzanine::XML::Document::LoadBufferInplace(void *,size_t,unsigned int)\n"
    "    Mezzanine::XML::Document::LoadBufferInplace(void *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_LoadBufferInplaceOwn__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplaceOwn",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplaceOwn",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplaceOwn");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  result = (arg1)->LoadBufferInplaceOwn(arg2,arg3,arg4,arg5);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplaceOwn__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  unsigned int arg4 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplaceOwn",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",3,"size_t");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplaceOwn",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplaceOwn");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (arg1)->LoadBufferInplaceOwn(arg2,arg3,arg4);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplaceOwn__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  void *arg2 = (void *) 0 ;
  size_t arg3 ;
  Mezzanine::XML::ParseResult result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::LoadBufferInplaceOwn",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",1,"Mezzanine::XML::Document *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",2,"void *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::LoadBufferInplaceOwn",3,"size_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_LoadBufferInplaceOwn",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2=(void *)SWIG_MustGetPtr(L,2,0,0,2,"Document_LoadBufferInplaceOwn");
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  result = (arg1)->LoadBufferInplaceOwn(arg2,arg3);
  {
    Mezzanine::XML::ParseResult * resultptr = new Mezzanine::XML::ParseResult((const Mezzanine::XML::ParseResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ParseResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_LoadBufferInplaceOwn(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_LoadBufferInplaceOwn__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_LoadBufferInplaceOwn__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, 0, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Document_LoadBufferInplaceOwn__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Document_LoadBufferInplaceOwn'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::LoadBufferInplaceOwn(void *,size_t,unsigned int,Mezzanine::XML::Encoding)\n"
    "    Mezzanine::XML::Document::LoadBufferInplaceOwn(void *,size_t,unsigned int)\n"
    "    Mezzanine::XML::Document::LoadBufferInplaceOwn(void *,size_t)\n");
  lua_error(L);return 0;
}


static int _wrap_Document_Save__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Save",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::Save",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Document::Save",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Save",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::Save",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Save",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"Mezzanine::XML::Writer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Save",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::Save",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Document::Save",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Save",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::Save",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Save",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"std::basic_ostream< char,std::char_traits< char > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Save",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::Save",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::Save",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Document::Save",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::Save",1,"Mezzanine::XML::Document const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::Save",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_Save",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("Document_Save",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  ((Mezzanine::XML::Document const *)arg1)->Save(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_Save(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Document_Save__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Document_Save__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Document_Save__SWIG_10(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_Save__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_Save__SWIG_9(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_Save__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_Save__SWIG_8(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_Save__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_Save__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Document_Save__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Document_Save__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Document_Save'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::Save(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding) const\n"
    "    Mezzanine::XML::Document::Save(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Document::Save(Mezzanine::XML::Writer &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Document::Save(Mezzanine::XML::Writer &) const\n"
    "    Mezzanine::XML::Document::Save(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding) const\n"
    "    Mezzanine::XML::Document::Save(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Document::Save(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Document::Save(std::basic_ostream< char,std::char_traits< char > > &) const\n"
    "    Mezzanine::XML::Document::Save(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Document::Save(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Document::Save(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Document_SaveFile__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::SaveFile",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",1,"Mezzanine::XML::Document const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_SaveFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((char const *)arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_SaveFile__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::SaveFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",1,"Mezzanine::XML::Document const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_SaveFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((char const *)arg2,(Mezzanine::Char8 const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_SaveFile__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::SaveFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",1,"Mezzanine::XML::Document const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",2,"char const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_SaveFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((char const *)arg2,(Mezzanine::Char8 const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_SaveFile__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::SaveFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",1,"Mezzanine::XML::Document const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",2,"char const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_SaveFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  arg2 = (char *)lua_tostring(L, 2);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((char const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_SaveFile__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::SaveFile",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",1,"Mezzanine::XML::Document const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",2,"wchar_t const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_SaveFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_wchar_t,0))){
    SWIG_fail_ptr("Document_SaveFile",2,SWIGTYPE_p_wchar_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((wchar_t const *)arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_SaveFile__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::SaveFile",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",1,"Mezzanine::XML::Document const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",2,"wchar_t const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_SaveFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_wchar_t,0))){
    SWIG_fail_ptr("Document_SaveFile",2,SWIGTYPE_p_wchar_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((wchar_t const *)arg2,(Mezzanine::Char8 const *)arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_SaveFile__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::SaveFile",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",1,"Mezzanine::XML::Document const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",2,"wchar_t const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_SaveFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_wchar_t,0))){
    SWIG_fail_ptr("Document_SaveFile",2,SWIGTYPE_p_wchar_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((wchar_t const *)arg2,(Mezzanine::Char8 const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_SaveFile__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  wchar_t *arg2 = (wchar_t *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::SaveFile",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",1,"Mezzanine::XML::Document const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::Document::SaveFile",2,"wchar_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_SaveFile",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_wchar_t,0))){
    SWIG_fail_ptr("Document_SaveFile",2,SWIGTYPE_p_wchar_t);
  }
  
  result = (bool)((Mezzanine::XML::Document const *)arg1)->SaveFile((wchar_t const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Document_SaveFile(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_wchar_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Document_SaveFile__SWIG_7(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Document_SaveFile__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_wchar_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_SaveFile__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_Document_SaveFile__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_wchar_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_SaveFile__SWIG_5(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_Document_SaveFile__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_wchar_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Document_SaveFile__SWIG_4(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Document, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_Document_SaveFile__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Document_SaveFile'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Document::SaveFile(char const *,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding) const\n"
    "    Mezzanine::XML::Document::SaveFile(char const *,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Document::SaveFile(char const *,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Document::SaveFile(char const *) const\n"
    "    Mezzanine::XML::Document::SaveFile(wchar_t const *,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding) const\n"
    "    Mezzanine::XML::Document::SaveFile(wchar_t const *,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Document::SaveFile(wchar_t const *,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Document::SaveFile(wchar_t const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_Document_DocumentElement(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Document::DocumentElement",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Document::DocumentElement",1,"Mezzanine::XML::Document const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Document,0))){
    SWIG_fail_ptr("Document_DocumentElement",1,SWIGTYPE_p_Mezzanine__XML__Document);
  }
  
  result = ((Mezzanine::XML::Document const *)arg1)->DocumentElement();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Document(void *obj) {
Mezzanine::XML::Document *arg1 = (Mezzanine::XML::Document *) obj;
delete arg1;
}
static int _proxy__wrap_new_Document(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Document);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Document_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Document_methods[]= {
    { "Reset", _wrap_Document_Reset},
    { "Load", _wrap_Document_Load},
    { "LoadFile", _wrap_Document_LoadFile},
    { "LoadBuffer", _wrap_Document_LoadBuffer},
    { "LoadBufferInplace", _wrap_Document_LoadBufferInplace},
    { "LoadBufferInplaceOwn", _wrap_Document_LoadBufferInplaceOwn},
    { "Save", _wrap_Document_Save},
    { "SaveFile", _wrap_Document_SaveFile},
    { "DocumentElement", _wrap_Document_DocumentElement},
    {0,0}
};
static swig_lua_method swig_Document_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Document_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Document_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Document_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Document_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Document_Sf_SwigStatic = {
    "Document",
    swig_Document_Sf_SwigStatic_methods,
    swig_Document_Sf_SwigStatic_attributes,
    swig_Document_Sf_SwigStatic_constants,
    swig_Document_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Document_bases[] = {0,0};
static const char *swig_Document_base_names[] = {"Mezzanine::XML::Node *",0};
static swig_lua_class _wrap_class_Document = { "Document", "Document", &SWIGTYPE_p_Mezzanine__XML__Document,_proxy__wrap_new_Document, swig_delete_Document, swig_Document_methods, swig_Document_attributes, &swig_Document_Sf_SwigStatic, swig_Document_meta, swig_Document_bases, swig_Document_base_names };

static int _wrap_SetMemoryManagementFunctions(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AllocationFunction arg1 = (Mezzanine::XML::AllocationFunction) 0 ;
  Mezzanine::XML::DeAllocationFunction arg2 = (Mezzanine::XML::DeAllocationFunction) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::SetMemoryManagementFunctions",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::SetMemoryManagementFunctions",1,"Mezzanine::XML::AllocationFunction");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::SetMemoryManagementFunctions",2,"Mezzanine::XML::DeAllocationFunction");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_f_size_t__p_void,0))){
    SWIG_fail_ptr("SetMemoryManagementFunctions",1,SWIGTYPE_p_f_size_t__p_void);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_f_p_void__void,0))){
    SWIG_fail_ptr("SetMemoryManagementFunctions",2,SWIGTYPE_p_f_p_void__void);
  }
  
  Mezzanine::XML::SetMemoryManagementFunctions(arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMemoryAllocationFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::AllocationFunction result;
  
  SWIG_check_num_args("Mezzanine::XML::GetMemoryAllocationFunction",0,0)
  result = (Mezzanine::XML::AllocationFunction)Mezzanine::XML::GetMemoryAllocationFunction();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_size_t__p_void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_GetMemoryDeallocationFunction(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::DeAllocationFunction result;
  
  SWIG_check_num_args("Mezzanine::XML::GetMemoryDeallocationFunction",0,0)
  result = (Mezzanine::XML::DeAllocationFunction)Mezzanine::XML::GetMemoryDeallocationFunction();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_f_p_void__void,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NodeIterator::NodeIterator",0,0)
  result = (Mezzanine::XML::NodeIterator *)new Mezzanine::XML::NodeIterator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::XML::NodeIterator *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NodeIterator::NodeIterator",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeIterator::NodeIterator",1,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_NodeIterator",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::XML::NodeIterator *)new Mezzanine::XML::NodeIterator((Mezzanine::XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NodeIterator(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NodeIterator__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_NodeIterator__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NodeIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeIterator::NodeIterator()\n"
    "    Mezzanine::XML::NodeIterator::NodeIterator(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeIterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeIterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeIterator::operator ==",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeIterator::operator ==",2,"Mezzanine::XML::NodeIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___eq",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___eq",2,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (bool)((Mezzanine::XML::NodeIterator const *)arg1)->operator ==((Mezzanine::XML::NodeIterator const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator___ref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NodeIterator::operator *",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeIterator::operator *",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___ref__",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (Mezzanine::XML::Node *) &((Mezzanine::XML::NodeIterator const *)arg1)->operator *();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator___deref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NodeIterator::operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeIterator::operator ->",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___deref__",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (Mezzanine::XML::Node *)((Mezzanine::XML::NodeIterator const *)arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___lt",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator___lt",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)(*arg1)->operator <((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator___le",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator___le",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)(*arg1)->operator <=((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Empty",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Empty",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (bool)(*arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Type(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Type",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Type",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (Mezzanine::XML::NodeType)(*arg1)->Type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Name",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Name",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (Mezzanine::Char8 *)(*arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Value(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Value",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Value",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (Mezzanine::Char8 *)(*arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetFirstAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstAttribute",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetFirstAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->GetFirstAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetLastAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetLastAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastAttribute",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetLastAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->GetLastAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetFirstChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstChild",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetFirstChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->GetFirstChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetLastChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetLastChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastChild",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetLastChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->GetLastChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetNextSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->GetNextSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetNextSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetNextSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetNextSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_GetNextSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_GetNextSibling__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_GetNextSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetNextSibling() const\n"
    "    Mezzanine::XML::Node::GetNextSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_GetPreviousSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->GetPreviousSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetPreviousSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetPreviousSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetPreviousSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_GetPreviousSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_GetPreviousSibling__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_GetPreviousSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetPreviousSibling() const\n"
    "    Mezzanine::XML::Node::GetPreviousSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_GetParent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetParent",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetParent",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->GetParent();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetRoot(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetRoot",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetRoot",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->GetRoot();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetText(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeText result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetText",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetText",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->GetText();
  {
    Mezzanine::XML::NodeText * resultptr = new Mezzanine::XML::NodeText((const Mezzanine::XML::NodeText &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeText,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->GetChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_GetChildValue__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_GetChildValue__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_GetChildValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildValue() const\n"
    "    Mezzanine::XML::Node::GetChildValue(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_SetName",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(*arg1)->SetName((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_SetValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_SetValue",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->SetValue((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->AppendAttribute((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->PrependAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertAttributeAfter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertAttributeAfter",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertAttributeAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->InsertAttributeAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertAttributeBefore(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertAttributeBefore",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertAttributeBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->InsertAttributeBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->AppendCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->AppendCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_AppendCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_AppendCopy__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_AppendCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_PrependCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->PrependCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->PrependCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_PrependCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_PrependCopy__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_PrependCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_InsertCopyAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertCopyAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertCopyAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertCopyAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertCopyAfter__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_InsertCopyAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_InsertCopyBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertCopyBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertCopyBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertCopyBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertCopyBefore__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_InsertCopyBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_AppendChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::XML::NodeType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (*arg1)->AppendChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->AppendChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->AppendChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_AppendChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_AppendChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_AppendChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_AppendChild__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_AppendChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::AppendChild()\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_PrependChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::XML::NodeType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (*arg1)->PrependChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->PrependChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->PrependChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_PrependChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_PrependChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_PrependChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_PrependChild__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_PrependChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::PrependChild()\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_InsertChildAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertChildAfter(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertChildAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertChildAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertChildAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertChildAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertChildAfter__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_InsertChildAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_InsertChildBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertChildBefore(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertChildBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertChildBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InsertChildBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertChildBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_InsertChildBefore__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_InsertChildBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_RemoveAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NodeIterator_RemoveAttribute",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_RemoveAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_RemoveAttribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_RemoveAttribute__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_RemoveAttribute__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_RemoveAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_RemoveChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NodeIterator_RemoveChild",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)(*arg1)->RemoveChild((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_RemoveChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::NodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->RemoveChild((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_RemoveChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_RemoveChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_RemoveChild__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_RemoveChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_FindChildbyAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg4 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",4,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  arg4 = (Mezzanine::Char8 *)lua_tostring(L, 4);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3,(Mezzanine::Char8 const *)arg4);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindChildbyAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindChildbyAttribute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeIterator_FindChildbyAttribute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_NodeIterator_FindChildbyAttribute__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_FindChildbyAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_Path__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 arg2 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Path",2,"Mezzanine::Char8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Path",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (*arg1)->Path(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Path__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Path",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->Path();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Path(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_Path__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_NodeIterator_Path__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_Path'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Path(Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::Path() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_FirstElementByPath__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 arg3 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",3,"Mezzanine::Char8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FirstElementByPath__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FirstElementByPath(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_FirstElementByPath__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_NodeIterator_FirstElementByPath__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_FirstElementByPath'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *,Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_Traverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::TreeWalker *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Traverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",1,"Mezzanine::XML::NodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",2,"Mezzanine::XML::TreeWalker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Traverse",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("NodeIterator_Traverse",2,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }
  
  result = (bool)(*arg1)->Traverse(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindSingleNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNode result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",3,"Mezzanine::XML::XPathVariableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("NodeIterator_FindSingleNode",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindSingleNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNode result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindSingleNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNode result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::XML::XPathQuery const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("NodeIterator_FindSingleNode",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  result = (*arg1)->FindSingleNode((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindSingleNode(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_FindSingleNode__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_FindSingleNode__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_FindSingleNode__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_FindSingleNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_FindNodes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNodeSet result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",3,"Mezzanine::XML::XPathVariableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("NodeIterator_FindNodes",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindNodes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNodeSet result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindNodes__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::XML::XPathQuery const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("NodeIterator_FindNodes",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  result = (*arg1)->FindNodes((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_FindNodes(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_FindNodes__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_FindNodes__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NodeIterator_FindNodes__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_FindNodes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_Print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::XML::Node::Print",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  (*arg1)->Print(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::XML::Node::Print",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  (*arg1)->Print(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("NodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  (*arg1)->Print(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_Print(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_Print__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_Print__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NodeIterator_Print__SWIG_13(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeIterator_Print__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeIterator_Print__SWIG_12(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NodeIterator_Print__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NodeIterator_Print__SWIG_11(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NodeIterator_Print__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NodeIterator_Print__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NodeIterator_Print__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NodeIterator_Print__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NodeIterator_Print__SWIG_10(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_NodeIterator_Print__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_NodeIterator_Print__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_Print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *,unsigned int,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node::iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::begin",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_begin",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->begin();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_c_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node::iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::end",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_c_end",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->end();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_attributes_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::attributes_begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_begin",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_attributes_begin",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->attributes_begin();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_attributes_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::attributes_end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_end",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_attributes_end",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->attributes_end();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildren__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > > result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->GetChildren();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildren__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > > result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::NodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetChildren((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_GetChildren(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeIterator_GetChildren__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeIterator_GetChildren__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeIterator_GetChildren'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildren() const\n"
    "    Mezzanine::XML::Node::GetChildren(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeIterator_attributes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > > result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::attributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_attributes",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->attributes();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_OffSetDebug(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  ptrdiff_t result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::OffSetDebug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::OffSetDebug",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_OffSetDebug",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->OffSetDebug();
  {
    ptrdiff_t * resultptr = new ptrdiff_t((const ptrdiff_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ptrdiff_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_HashValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::HashValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::HashValue",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_HashValue",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (*arg1)->HashValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeIterator_InternalObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) 0 ;
  Mezzanine::XML::NodeStruct *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InternalObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InternalObject",1,"Mezzanine::XML::NodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeIterator,0))){
    SWIG_fail_ptr("NodeIterator_InternalObject",1,SWIGTYPE_p_Mezzanine__XML__NodeIterator);
  }
  
  result = (Mezzanine::XML::NodeStruct *)(*arg1)->InternalObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NodeIterator(void *obj) {
Mezzanine::XML::NodeIterator *arg1 = (Mezzanine::XML::NodeIterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_NodeIterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NodeIterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NodeIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NodeIterator_methods[]= {
    { "__eq", _wrap_NodeIterator___eq},
    { "__ref__", _wrap_NodeIterator___ref__},
    { "__deref__", _wrap_NodeIterator___deref__},
    { "__lt", _wrap_NodeIterator___lt},
    { "__le", _wrap_NodeIterator___le},
    { "Empty", _wrap_NodeIterator_Empty},
    { "Type", _wrap_NodeIterator_Type},
    { "Name", _wrap_NodeIterator_Name},
    { "Value", _wrap_NodeIterator_Value},
    { "GetFirstAttribute", _wrap_NodeIterator_GetFirstAttribute},
    { "GetLastAttribute", _wrap_NodeIterator_GetLastAttribute},
    { "GetFirstChild", _wrap_NodeIterator_GetFirstChild},
    { "GetLastChild", _wrap_NodeIterator_GetLastChild},
    { "GetNextSibling", _wrap_NodeIterator_GetNextSibling},
    { "GetPreviousSibling", _wrap_NodeIterator_GetPreviousSibling},
    { "GetParent", _wrap_NodeIterator_GetParent},
    { "GetRoot", _wrap_NodeIterator_GetRoot},
    { "GetText", _wrap_NodeIterator_GetText},
    { "GetChild", _wrap_NodeIterator_GetChild},
    { "GetAttribute", _wrap_NodeIterator_GetAttribute},
    { "GetChildValue", _wrap_NodeIterator_GetChildValue},
    { "SetName", _wrap_NodeIterator_SetName},
    { "SetValue", _wrap_NodeIterator_SetValue},
    { "AppendAttribute", _wrap_NodeIterator_AppendAttribute},
    { "PrependAttribute", _wrap_NodeIterator_PrependAttribute},
    { "InsertAttributeAfter", _wrap_NodeIterator_InsertAttributeAfter},
    { "InsertAttributeBefore", _wrap_NodeIterator_InsertAttributeBefore},
    { "AppendCopy", _wrap_NodeIterator_AppendCopy},
    { "PrependCopy", _wrap_NodeIterator_PrependCopy},
    { "InsertCopyAfter", _wrap_NodeIterator_InsertCopyAfter},
    { "InsertCopyBefore", _wrap_NodeIterator_InsertCopyBefore},
    { "AppendChild", _wrap_NodeIterator_AppendChild},
    { "PrependChild", _wrap_NodeIterator_PrependChild},
    { "InsertChildAfter", _wrap_NodeIterator_InsertChildAfter},
    { "InsertChildBefore", _wrap_NodeIterator_InsertChildBefore},
    { "RemoveAttribute", _wrap_NodeIterator_RemoveAttribute},
    { "RemoveChild", _wrap_NodeIterator_RemoveChild},
    { "FindChildbyAttribute", _wrap_NodeIterator_FindChildbyAttribute},
    { "Path", _wrap_NodeIterator_Path},
    { "FirstElementByPath", _wrap_NodeIterator_FirstElementByPath},
    { "Traverse", _wrap_NodeIterator_Traverse},
    { "FindSingleNode", _wrap_NodeIterator_FindSingleNode},
    { "FindNodes", _wrap_NodeIterator_FindNodes},
    { "Print", _wrap_NodeIterator_Print},
    { "begin", _wrap_NodeIterator_begin},
    { "c_end", _wrap_NodeIterator_c_end},
    { "attributes_begin", _wrap_NodeIterator_attributes_begin},
    { "attributes_end", _wrap_NodeIterator_attributes_end},
    { "GetChildren", _wrap_NodeIterator_GetChildren},
    { "attributes", _wrap_NodeIterator_attributes},
    { "OffSetDebug", _wrap_NodeIterator_OffSetDebug},
    { "HashValue", _wrap_NodeIterator_HashValue},
    { "InternalObject", _wrap_NodeIterator_InternalObject},
    {0,0}
};
static swig_lua_method swig_NodeIterator_meta[] = {
    { "__eq", _wrap_NodeIterator___eq},
    { "__ref__", _wrap_NodeIterator___ref__},
    { "__deref__", _wrap_NodeIterator___deref__},
    { "__lt", _wrap_NodeIterator___lt},
    { "__le", _wrap_NodeIterator___le},
    {0,0}
};

static swig_lua_attribute swig_NodeIterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NodeIterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NodeIterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NodeIterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NodeIterator_Sf_SwigStatic = {
    "NodeIterator",
    swig_NodeIterator_Sf_SwigStatic_methods,
    swig_NodeIterator_Sf_SwigStatic_attributes,
    swig_NodeIterator_Sf_SwigStatic_constants,
    swig_NodeIterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NodeIterator_bases[] = {0};
static const char *swig_NodeIterator_base_names[] = {0};
static swig_lua_class _wrap_class_NodeIterator = { "NodeIterator", "NodeIterator", &SWIGTYPE_p_Mezzanine__XML__NodeIterator,_proxy__wrap_new_NodeIterator, swig_delete_NodeIterator, swig_NodeIterator_methods, swig_NodeIterator_attributes, &swig_NodeIterator_Sf_SwigStatic, swig_NodeIterator_meta, swig_NodeIterator_bases, swig_NodeIterator_base_names };

static int _wrap_new_NamedNodeIterator__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NamedNodeIterator::NamedNodeIterator",0,0)
  result = (Mezzanine::XML::NamedNodeIterator *)new Mezzanine::XML::NamedNodeIterator();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NamedNodeIterator__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::NamedNodeIterator *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NamedNodeIterator::NamedNodeIterator",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::NamedNodeIterator",1,"Mezzanine::XML::Node const &");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::NamedNodeIterator",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_NamedNodeIterator",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::XML::NamedNodeIterator *)new Mezzanine::XML::NamedNodeIterator((Mezzanine::XML::Node const &)*arg1,(Mezzanine::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_NamedNodeIterator(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_NamedNodeIterator__SWIG_0(L);
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_NamedNodeIterator__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_NamedNodeIterator'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NamedNodeIterator::NamedNodeIterator()\n"
    "    Mezzanine::XML::NamedNodeIterator::NamedNodeIterator(Mezzanine::XML::Node const &,Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NamedNodeIterator *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::NamedNodeIterator::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::operator ==",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::operator ==",2,"Mezzanine::XML::NamedNodeIterator const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___eq",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___eq",2,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (bool)((Mezzanine::XML::NamedNodeIterator const *)arg1)->operator ==((Mezzanine::XML::NamedNodeIterator const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator___ref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NamedNodeIterator::operator *",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::operator *",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___ref__",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (Mezzanine::XML::Node *) &((Mezzanine::XML::NamedNodeIterator const *)arg1)->operator *();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator___deref__(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NamedNodeIterator::operator ->",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NamedNodeIterator::operator ->",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___deref__",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (Mezzanine::XML::Node *)((Mezzanine::XML::NamedNodeIterator const *)arg1)->operator ->();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Node,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___lt",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator___lt",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)(*arg1)->operator <((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::operator <=",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator___le",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator___le",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)(*arg1)->operator <=((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Empty",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Empty",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (bool)(*arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Type(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Type",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Type",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (Mezzanine::XML::NodeType)(*arg1)->Type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Name",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Name",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (Mezzanine::Char8 *)(*arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Value(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Value",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Value",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Value",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (Mezzanine::Char8 *)(*arg1)->Value();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetFirstAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstAttribute",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetFirstAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->GetFirstAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetLastAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetLastAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastAttribute",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetLastAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->GetLastAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetFirstChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetFirstChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetFirstChild",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetFirstChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->GetFirstChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetLastChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetLastChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetLastChild",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetLastChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->GetLastChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetNextSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->GetNextSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetNextSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetNextSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetNextSibling",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetNextSibling",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetNextSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetNextSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_GetNextSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_GetNextSibling__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_GetNextSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetNextSibling() const\n"
    "    Mezzanine::XML::Node::GetNextSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_GetPreviousSibling__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->GetPreviousSibling();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetPreviousSibling__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetPreviousSibling",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetPreviousSibling",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetPreviousSibling",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetPreviousSibling((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetPreviousSibling(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_GetPreviousSibling__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_GetPreviousSibling__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_GetPreviousSibling'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetPreviousSibling() const\n"
    "    Mezzanine::XML::Node::GetPreviousSibling(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_GetParent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetParent",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetParent",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->GetParent();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetRoot(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetRoot",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetRoot",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetRoot",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->GetRoot();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetText(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeText result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetText",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetText",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetText",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->GetText();
  {
    Mezzanine::XML::NodeText * resultptr = new Mezzanine::XML::NodeText((const Mezzanine::XML::NodeText &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeText,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChild(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChild",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->GetChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetAttribute",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildValue__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildValue__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildValue",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetChildValue",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)(*arg1)->GetChildValue((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildValue(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_GetChildValue__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_GetChildValue__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_GetChildValue'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildValue() const\n"
    "    Mezzanine::XML::Node::GetChildValue(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_SetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::SetName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetName",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_SetName",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (bool)(*arg1)->SetName((Mezzanine::String const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_SetValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::SetValue",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::SetValue",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_SetValue",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->SetValue((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendAttribute",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->AppendAttribute((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependAttribute",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->PrependAttribute((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertAttributeAfter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeAfter",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertAttributeAfter",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertAttributeAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->InsertAttributeAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertAttributeBefore(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertAttributeBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertAttributeBefore",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertAttributeBefore",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertAttributeBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->InsertAttributeBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->AppendCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendCopy",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendCopy",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->AppendCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_AppendCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_AppendCopy__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_AppendCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::AppendCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_PrependCopy__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->PrependCopy((Mezzanine::XML::Attribute const &)*arg2);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependCopy__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependCopy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependCopy",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependCopy",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependCopy",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->PrependCopy((Mezzanine::XML::Node const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependCopy(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_PrependCopy__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_PrependCopy__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_PrependCopy'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::PrependCopy(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_InsertCopyAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertCopyAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyAfter",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertCopyAfter((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertCopyAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertCopyAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertCopyAfter__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_InsertCopyAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyAfter(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_InsertCopyBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  Mezzanine::XML::Attribute *arg3 = 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Attribute const &)*arg2,(Mezzanine::XML::Attribute const &)*arg3);
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertCopyBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertCopyBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",2,"Mezzanine::XML::Node const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertCopyBefore",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertCopyBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertCopyBefore((Mezzanine::XML::Node const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertCopyBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertCopyBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertCopyBefore__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_InsertCopyBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Attribute const &,Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::InsertCopyBefore(Mezzanine::XML::Node const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_AppendChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::XML::NodeType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (*arg1)->AppendChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NamedNodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->AppendChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::AppendChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::AppendChild",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_AppendChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->AppendChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_AppendChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_AppendChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_AppendChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_AppendChild__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_AppendChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::AppendChild()\n"
    "    Mezzanine::XML::Node::AppendChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_PrependChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::XML::NodeType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  result = (*arg1)->PrependChild(arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NamedNodeIterator *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->PrependChild();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependChild__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::PrependChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::PrependChild",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_PrependChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (*arg1)->PrependChild((Mezzanine::String const &)*arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_PrependChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_PrependChild__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_PrependChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_PrependChild__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_PrependChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::XML::NodeType)\n"
    "    Mezzanine::XML::Node::PrependChild()\n"
    "    Mezzanine::XML::Node::PrependChild(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_InsertChildAfter__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertChildAfter(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertChildAfter__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildAfter",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildAfter",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildAfter",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildAfter",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertChildAfter((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertChildAfter(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertChildAfter__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertChildAfter__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_InsertChildAfter'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildAfter(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_InsertChildBefore__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeType arg2 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::XML::NodeType");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::XML::NodeType)(int)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertChildBefore(arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertChildBefore__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InsertChildBefore",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::InsertChildBefore",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildBefore",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_InsertChildBefore",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (*arg1)->InsertChildBefore((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::Node const &)*arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InsertChildBefore(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertChildBefore__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_InsertChildBefore__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_InsertChildBefore'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::XML::NodeType,Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::InsertChildBefore(Mezzanine::Char8 const *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_RemoveAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Attribute *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::XML::Attribute const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveAttribute",2,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::XML::Attribute const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_RemoveAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveAttribute",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveAttribute",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->RemoveAttribute((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_RemoveAttribute(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_RemoveAttribute__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_RemoveAttribute__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_RemoveAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::XML::Attribute const &)\n"
    "    Mezzanine::XML::Node::RemoveAttribute(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_RemoveChild__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveChild",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)(*arg1)->RemoveChild((Mezzanine::XML::Node const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_RemoveChild__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::RemoveChild",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::RemoveChild",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_RemoveChild",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(*arg1)->RemoveChild((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_RemoveChild(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_RemoveChild__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_RemoveChild__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_RemoveChild'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::Node::RemoveChild(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_FindChildbyAttribute__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg4 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",4,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  arg4 = (Mezzanine::Char8 *)lua_tostring(L, 4);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3,(Mezzanine::Char8 const *)arg4);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindChildbyAttribute__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindChildbyAttribute",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindChildbyAttribute",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindChildbyAttribute",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  result = (*arg1)->FindChildbyAttribute((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindChildbyAttribute(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NamedNodeIterator_FindChildbyAttribute__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = SWIG_lua_isnilstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_NamedNodeIterator_FindChildbyAttribute__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_FindChildbyAttribute'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindChildbyAttribute(Mezzanine::Char8 const *,Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_Path__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 arg2 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Path",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Path",2,"Mezzanine::Char8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Path",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (lua_tostring(L, 2))[0];
  result = (*arg1)->Path(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Path__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Path",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Path",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Path",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->Path();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Path(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_Path__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]) && (lua_rawlen(L,argv[1])==1);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_Path__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_Path'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Path(Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::Path() const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_FirstElementByPath__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 arg3 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",3,"Mezzanine::Char8");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (lua_tostring(L, 3))[0];
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FirstElementByPath__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FirstElementByPath",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FirstElementByPath",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FirstElementByPath",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FirstElementByPath((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FirstElementByPath(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_FirstElementByPath__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]) && (lua_rawlen(L,argv[2])==1);
        }
        if (_v) {
          return _wrap_NamedNodeIterator_FirstElementByPath__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_FirstElementByPath'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *,Mezzanine::Char8) const\n"
    "    Mezzanine::XML::Node::FirstElementByPath(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_Traverse(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::TreeWalker *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Traverse",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",1,"Mezzanine::XML::NamedNodeIterator *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Traverse",2,"Mezzanine::XML::TreeWalker &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Traverse",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("NamedNodeIterator_Traverse",2,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }
  
  result = (bool)(*arg1)->Traverse(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindSingleNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNode result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",3,"Mezzanine::XML::XPathVariableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindSingleNode",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindSingleNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNode result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FindSingleNode((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindSingleNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNode result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindSingleNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindSingleNode",2,"Mezzanine::XML::XPathQuery const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindSingleNode",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindSingleNode",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  result = (*arg1)->FindSingleNode((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindSingleNode(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_FindSingleNode__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_FindSingleNode__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_FindSingleNode__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_FindSingleNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindSingleNode(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_FindNodes__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg3 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathNodeSet result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",3,"Mezzanine::XML::XPathVariableSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindNodes",3,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2,arg3);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindNodes__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNodeSet result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->FindNodes((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindNodes__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::XPathQuery *arg2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::FindNodes",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::FindNodes",2,"Mezzanine::XML::XPathQuery const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindNodes",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("NamedNodeIterator_FindNodes",2,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  result = (*arg1)->FindNodes((Mezzanine::XML::XPathQuery const &)*arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_FindNodes(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_FindNodes__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_FindNodes__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_NamedNodeIterator_FindNodes__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_FindNodes'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::FindNodes(Mezzanine::XML::XPathQuery const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_Print__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::XML::Node::Print",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Writer *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"Mezzanine::XML::Writer &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Writer,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_Mezzanine__XML__Writer);
  }
  
  (*arg1)->Print(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  unsigned int arg6 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",6,6)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  if(!lua_isnumber(L,6)) SWIG_fail_arg("Mezzanine::XML::Node::Print",6,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  SWIG_contract_assert((lua_tonumber(L,6)>=0),"number must not be negative")
  arg6 = (unsigned int)lua_tonumber(L, 6);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5,arg6);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  Mezzanine::XML::Encoding arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"Mezzanine::XML::Encoding");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  arg5 = (Mezzanine::XML::Encoding)(int)lua_tonumber(L, 5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_9(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< char,std::char_traits< char > > *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< char,std::char_traits< char > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t);
  }
  
  (*arg1)->Print(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_10(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  unsigned int arg5 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("Mezzanine::XML::Node::Print",5,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  SWIG_contract_assert((lua_tonumber(L,5)>=0),"number must not be negative")
  arg5 = (unsigned int)lua_tonumber(L, 5);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4,arg5);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_11(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  unsigned int arg4 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("Mezzanine::XML::Node::Print",4,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  SWIG_contract_assert((lua_tonumber(L,4)>=0),"number must not be negative")
  arg4 = (unsigned int)lua_tonumber(L, 4);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_12(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::Node::Print",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  (*arg1)->Print(*arg2,(Mezzanine::Char8 const *)arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print__SWIG_13(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::Print",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::Print",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::Print",2,"std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,0))){
    SWIG_fail_ptr("NamedNodeIterator_Print",2,SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t);
  }
  
  (*arg1)->Print(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_Print(lua_State* L) {
  int argc;
  int argv[7]={
    1,2,3,4,5,6,7
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_Print__SWIG_4(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_Print__SWIG_9(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_NamedNodeIterator_Print__SWIG_13(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NamedNodeIterator_Print__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NamedNodeIterator_Print__SWIG_12(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_NamedNodeIterator_Print__SWIG_8(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NamedNodeIterator_Print__SWIG_11(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NamedNodeIterator_Print__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_NamedNodeIterator_Print__SWIG_7(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NamedNodeIterator_Print__SWIG_6(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NamedNodeIterator_Print__SWIG_1(L);
            }
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_NamedNodeIterator_Print__SWIG_10(L);
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Writer, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_NamedNodeIterator_Print__SWIG_0(L);
              }
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              {
                _v = lua_isnumber(L,argv[5]);
              }
              if (_v) {
                return _wrap_NamedNodeIterator_Print__SWIG_5(L);
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_Print'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::Print(Mezzanine::XML::Writer &) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int,Mezzanine::XML::Encoding) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< char,std::char_traits< char > > &) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *,unsigned int,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *,unsigned int) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &,Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::Node::Print(std::basic_ostream< wchar_t,std::char_traits< wchar_t > > &) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node::iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::begin",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_begin",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->begin();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_c_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node::iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::end",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_c_end",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->end();
  {
    Mezzanine::XML::Node::iterator * resultptr = new Mezzanine::XML::Node::iterator((const Mezzanine::XML::Node::iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__NodeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_attributes_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::attributes_begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_begin",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_attributes_begin",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->attributes_begin();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_attributes_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::Node::attribute_iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::attributes_end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes_end",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_attributes_end",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->attributes_end();
  {
    Mezzanine::XML::Node::attribute_iterator * resultptr = new Mezzanine::XML::Node::attribute_iterator((const Mezzanine::XML::Node::attribute_iterator &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__AttributeIterator,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildren__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > > result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->GetChildren();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildren__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > > result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::GetChildren",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",1,"Mezzanine::XML::NamedNodeIterator const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::Node::GetChildren",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_GetChildren",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (*arg1)->GetChildren((Mezzanine::Char8 const *)arg2);
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_GetChildren(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NamedNodeIterator_GetChildren__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NamedNodeIterator_GetChildren__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NamedNodeIterator_GetChildren'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::Node::GetChildren() const\n"
    "    Mezzanine::XML::Node::GetChildren(Mezzanine::Char8 const *) const\n");
  lua_error(L);return 0;
}


static int _wrap_NamedNodeIterator_attributes(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  SwigValueWrapper< Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > > result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::attributes",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::attributes",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_attributes",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->attributes();
  {
    Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > * resultptr = new Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator >((const Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_OffSetDebug(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  ptrdiff_t result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::OffSetDebug",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::OffSetDebug",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_OffSetDebug",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->OffSetDebug();
  {
    ptrdiff_t * resultptr = new ptrdiff_t((const ptrdiff_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ptrdiff_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_HashValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Mezzanine::XML::Node::HashValue",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::HashValue",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_HashValue",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (*arg1)->HashValue();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NamedNodeIterator_InternalObject(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) 0 ;
  Mezzanine::XML::NodeStruct *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::Node::InternalObject",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::Node::InternalObject",1,"Mezzanine::XML::NamedNodeIterator const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,0))){
    SWIG_fail_ptr("NamedNodeIterator_InternalObject",1,SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator);
  }
  
  result = (Mezzanine::XML::NodeStruct *)(*arg1)->InternalObject();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeStruct,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NamedNodeIterator(void *obj) {
Mezzanine::XML::NamedNodeIterator *arg1 = (Mezzanine::XML::NamedNodeIterator *) obj;
delete arg1;
}
static int _proxy__wrap_new_NamedNodeIterator(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NamedNodeIterator);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NamedNodeIterator_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NamedNodeIterator_methods[]= {
    { "__eq", _wrap_NamedNodeIterator___eq},
    { "__ref__", _wrap_NamedNodeIterator___ref__},
    { "__deref__", _wrap_NamedNodeIterator___deref__},
    { "__lt", _wrap_NamedNodeIterator___lt},
    { "__le", _wrap_NamedNodeIterator___le},
    { "Empty", _wrap_NamedNodeIterator_Empty},
    { "Type", _wrap_NamedNodeIterator_Type},
    { "Name", _wrap_NamedNodeIterator_Name},
    { "Value", _wrap_NamedNodeIterator_Value},
    { "GetFirstAttribute", _wrap_NamedNodeIterator_GetFirstAttribute},
    { "GetLastAttribute", _wrap_NamedNodeIterator_GetLastAttribute},
    { "GetFirstChild", _wrap_NamedNodeIterator_GetFirstChild},
    { "GetLastChild", _wrap_NamedNodeIterator_GetLastChild},
    { "GetNextSibling", _wrap_NamedNodeIterator_GetNextSibling},
    { "GetPreviousSibling", _wrap_NamedNodeIterator_GetPreviousSibling},
    { "GetParent", _wrap_NamedNodeIterator_GetParent},
    { "GetRoot", _wrap_NamedNodeIterator_GetRoot},
    { "GetText", _wrap_NamedNodeIterator_GetText},
    { "GetChild", _wrap_NamedNodeIterator_GetChild},
    { "GetAttribute", _wrap_NamedNodeIterator_GetAttribute},
    { "GetChildValue", _wrap_NamedNodeIterator_GetChildValue},
    { "SetName", _wrap_NamedNodeIterator_SetName},
    { "SetValue", _wrap_NamedNodeIterator_SetValue},
    { "AppendAttribute", _wrap_NamedNodeIterator_AppendAttribute},
    { "PrependAttribute", _wrap_NamedNodeIterator_PrependAttribute},
    { "InsertAttributeAfter", _wrap_NamedNodeIterator_InsertAttributeAfter},
    { "InsertAttributeBefore", _wrap_NamedNodeIterator_InsertAttributeBefore},
    { "AppendCopy", _wrap_NamedNodeIterator_AppendCopy},
    { "PrependCopy", _wrap_NamedNodeIterator_PrependCopy},
    { "InsertCopyAfter", _wrap_NamedNodeIterator_InsertCopyAfter},
    { "InsertCopyBefore", _wrap_NamedNodeIterator_InsertCopyBefore},
    { "AppendChild", _wrap_NamedNodeIterator_AppendChild},
    { "PrependChild", _wrap_NamedNodeIterator_PrependChild},
    { "InsertChildAfter", _wrap_NamedNodeIterator_InsertChildAfter},
    { "InsertChildBefore", _wrap_NamedNodeIterator_InsertChildBefore},
    { "RemoveAttribute", _wrap_NamedNodeIterator_RemoveAttribute},
    { "RemoveChild", _wrap_NamedNodeIterator_RemoveChild},
    { "FindChildbyAttribute", _wrap_NamedNodeIterator_FindChildbyAttribute},
    { "Path", _wrap_NamedNodeIterator_Path},
    { "FirstElementByPath", _wrap_NamedNodeIterator_FirstElementByPath},
    { "Traverse", _wrap_NamedNodeIterator_Traverse},
    { "FindSingleNode", _wrap_NamedNodeIterator_FindSingleNode},
    { "FindNodes", _wrap_NamedNodeIterator_FindNodes},
    { "Print", _wrap_NamedNodeIterator_Print},
    { "begin", _wrap_NamedNodeIterator_begin},
    { "c_end", _wrap_NamedNodeIterator_c_end},
    { "attributes_begin", _wrap_NamedNodeIterator_attributes_begin},
    { "attributes_end", _wrap_NamedNodeIterator_attributes_end},
    { "GetChildren", _wrap_NamedNodeIterator_GetChildren},
    { "attributes", _wrap_NamedNodeIterator_attributes},
    { "OffSetDebug", _wrap_NamedNodeIterator_OffSetDebug},
    { "HashValue", _wrap_NamedNodeIterator_HashValue},
    { "InternalObject", _wrap_NamedNodeIterator_InternalObject},
    {0,0}
};
static swig_lua_method swig_NamedNodeIterator_meta[] = {
    { "__eq", _wrap_NamedNodeIterator___eq},
    { "__ref__", _wrap_NamedNodeIterator___ref__},
    { "__deref__", _wrap_NamedNodeIterator___deref__},
    { "__lt", _wrap_NamedNodeIterator___lt},
    { "__le", _wrap_NamedNodeIterator___le},
    {0,0}
};

static swig_lua_attribute swig_NamedNodeIterator_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NamedNodeIterator_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NamedNodeIterator_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NamedNodeIterator_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NamedNodeIterator_Sf_SwigStatic = {
    "NamedNodeIterator",
    swig_NamedNodeIterator_Sf_SwigStatic_methods,
    swig_NamedNodeIterator_Sf_SwigStatic_attributes,
    swig_NamedNodeIterator_Sf_SwigStatic_constants,
    swig_NamedNodeIterator_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NamedNodeIterator_bases[] = {0};
static const char *swig_NamedNodeIterator_base_names[] = {0};
static swig_lua_class _wrap_class_NamedNodeIterator = { "NamedNodeIterator", "NamedNodeIterator", &SWIGTYPE_p_Mezzanine__XML__NamedNodeIterator,_proxy__wrap_new_NamedNodeIterator, swig_delete_NamedNodeIterator, swig_NamedNodeIterator_methods, swig_NamedNodeIterator_attributes, &swig_NamedNodeIterator_Sf_SwigStatic, swig_NamedNodeIterator_meta, swig_NamedNodeIterator_bases, swig_NamedNodeIterator_base_names };

static int _wrap_new_NodeText(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::NodeText",0,0)
  result = (Mezzanine::XML::NodeText *)new Mezzanine::XML::NodeText();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__NodeText,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::Empty",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_Empty",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (bool)((Mezzanine::XML::NodeText const *)arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_GetString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::GetString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::GetString",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_GetString",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (Mezzanine::Char8 *)((Mezzanine::XML::NodeText const *)arg1)->GetString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsString",1,"Mezzanine::XML::NodeText const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsString",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsString",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::Char8 *)((Mezzanine::XML::NodeText const *)arg1)->AsString((Mezzanine::Char8 const *)arg2);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsString",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsString",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (Mezzanine::Char8 *)((Mezzanine::XML::NodeText const *)arg1)->AsString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsString(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsString__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsString__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeText_AsString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsString(Mezzanine::Char8 const *) const\n"
    "    Mezzanine::XML::NodeText::AsString() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsInt__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  int arg2 ;
  int result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsInt",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInt",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInt",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsInt",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (int)((Mezzanine::XML::NodeText const *)arg1)->AsInt(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsInt__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  int result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsInt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInt",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsInt",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (int)((Mezzanine::XML::NodeText const *)arg1)->AsInt();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsInt(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsInt__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsInt__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeText_AsInt'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsInt(int) const\n"
    "    Mezzanine::XML::NodeText::AsInt() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsUint__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  unsigned int arg2 ;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsUint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsUint",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsUint",2,"unsigned int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsUint",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (unsigned int)lua_tonumber(L, 2);
  result = (unsigned int)((Mezzanine::XML::NodeText const *)arg1)->AsUint(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsUint__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  unsigned int result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsUint",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsUint",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsUint",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (unsigned int)((Mezzanine::XML::NodeText const *)arg1)->AsUint();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsUint(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsUint__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsUint__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeText_AsUint'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsUint(unsigned int) const\n"
    "    Mezzanine::XML::NodeText::AsUint() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsDouble__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  double arg2 ;
  double result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsDouble",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsDouble",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsDouble",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (double)((Mezzanine::XML::NodeText const *)arg1)->AsDouble(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsDouble__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  double result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsDouble",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsDouble",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsDouble",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (double)((Mezzanine::XML::NodeText const *)arg1)->AsDouble();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsDouble(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsDouble__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsDouble__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeText_AsDouble'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsDouble(double) const\n"
    "    Mezzanine::XML::NodeText::AsDouble() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsFloat__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsFloat",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsFloat",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsFloat",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)((Mezzanine::XML::NodeText const *)arg1)->AsFloat(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsFloat__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  float result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsFloat",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsFloat",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsFloat",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (float)((Mezzanine::XML::NodeText const *)arg1)->AsFloat();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsFloat(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsFloat__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsFloat__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeText_AsFloat'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsFloat(float) const\n"
    "    Mezzanine::XML::NodeText::AsFloat() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsReal__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsReal",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsReal",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsReal",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsReal",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  result = (Mezzanine::Real)((Mezzanine::XML::NodeText const *)arg1)->AsReal(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsReal__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsReal",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsReal",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsReal",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (Mezzanine::Real)((Mezzanine::XML::NodeText const *)arg1)->AsReal();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsReal(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsReal__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsReal__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeText_AsReal'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsReal(Mezzanine::Real) const\n"
    "    Mezzanine::XML::NodeText::AsReal() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsWhole__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsWhole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsWhole",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsWhole",2,"Mezzanine::Whole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole)lua_tonumber(L, 2);
  result = (Mezzanine::Whole)((Mezzanine::XML::NodeText const *)arg1)->AsWhole(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsWhole__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsWhole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsWhole",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsWhole",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::XML::NodeText const *)arg1)->AsWhole();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsWhole(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsWhole__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsWhole__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeText_AsWhole'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsWhole(Mezzanine::Whole) const\n"
    "    Mezzanine::XML::NodeText::AsWhole() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsInteger__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Integer arg2 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsInteger",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInteger",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInteger",2,"Mezzanine::Integer");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  arg2 = (Mezzanine::Integer)lua_tonumber(L, 2);
  result = (Mezzanine::Integer)((Mezzanine::XML::NodeText const *)arg1)->AsInteger(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsInteger__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsInteger",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsInteger",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsInteger",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (Mezzanine::Integer)((Mezzanine::XML::NodeText const *)arg1)->AsInteger();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsInteger(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsInteger__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsInteger__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeText_AsInteger'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsInteger(Mezzanine::Integer) const\n"
    "    Mezzanine::XML::NodeText::AsInteger() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_AsBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsBool",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsBool",1,"Mezzanine::XML::NodeText const *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsBool",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsBool",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)((Mezzanine::XML::NodeText const *)arg1)->AsBool(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::AsBool",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::AsBool",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_AsBool",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = (bool)((Mezzanine::XML::NodeText const *)arg1)->AsBool();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_AsBool(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_NodeText_AsBool__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__NodeText, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_NodeText_AsBool__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'NodeText_AsBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::NodeText::AsBool(bool) const\n"
    "    Mezzanine::XML::NodeText::AsBool() const\n");
  lua_error(L);return 0;
}


static int _wrap_NodeText_Set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::Set",1,"Mezzanine::XML::NodeText *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::NodeText::Set",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_Set",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_NodeText_data(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::NodeText::data",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::NodeText::data",1,"Mezzanine::XML::NodeText const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__NodeText,0))){
    SWIG_fail_ptr("NodeText_data",1,SWIGTYPE_p_Mezzanine__XML__NodeText);
  }
  
  result = ((Mezzanine::XML::NodeText const *)arg1)->data();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_NodeText(void *obj) {
Mezzanine::XML::NodeText *arg1 = (Mezzanine::XML::NodeText *) obj;
delete arg1;
}
static int _proxy__wrap_new_NodeText(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_NodeText);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_NodeText_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_NodeText_methods[]= {
    { "Empty", _wrap_NodeText_Empty},
    { "GetString", _wrap_NodeText_GetString},
    { "AsString", _wrap_NodeText_AsString},
    { "AsInt", _wrap_NodeText_AsInt},
    { "AsUint", _wrap_NodeText_AsUint},
    { "AsDouble", _wrap_NodeText_AsDouble},
    { "AsFloat", _wrap_NodeText_AsFloat},
    { "AsReal", _wrap_NodeText_AsReal},
    { "AsWhole", _wrap_NodeText_AsWhole},
    { "AsInteger", _wrap_NodeText_AsInteger},
    { "AsBool", _wrap_NodeText_AsBool},
    { "Set", _wrap_NodeText_Set},
    { "data", _wrap_NodeText_data},
    {0,0}
};
static swig_lua_method swig_NodeText_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_NodeText_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_NodeText_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_NodeText_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_NodeText_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_NodeText_Sf_SwigStatic = {
    "NodeText",
    swig_NodeText_Sf_SwigStatic_methods,
    swig_NodeText_Sf_SwigStatic_attributes,
    swig_NodeText_Sf_SwigStatic_constants,
    swig_NodeText_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_NodeText_bases[] = {0};
static const char *swig_NodeText_base_names[] = {0};
static swig_lua_class _wrap_class_NodeText = { "NodeText", "NodeText", &SWIGTYPE_p_Mezzanine__XML__NodeText,_proxy__wrap_new_NodeText, swig_delete_NodeText, swig_NodeText_methods, swig_NodeText_attributes, &swig_NodeText_Sf_SwigStatic, swig_NodeText_meta, swig_NodeText_bases, swig_NodeText_base_names };

static int _wrap_TreeWalker_OnTraversalBegin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::TreeWalker::OnTraversalBegin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnTraversalBegin",1,"Mezzanine::XML::TreeWalker *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnTraversalBegin",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("TreeWalker_OnTraversalBegin",1,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("TreeWalker_OnTraversalBegin",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)(arg1)->OnTraversalBegin(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeWalker_OnEachNode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::TreeWalker::OnEachNode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnEachNode",1,"Mezzanine::XML::TreeWalker *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnEachNode",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("TreeWalker_OnEachNode",1,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("TreeWalker_OnEachNode",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)(arg1)->OnEachNode(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TreeWalker_OnTraversalEnd(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::TreeWalker::OnTraversalEnd",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnTraversalEnd",1,"Mezzanine::XML::TreeWalker *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::TreeWalker::OnTraversalEnd",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__TreeWalker,0))){
    SWIG_fail_ptr("TreeWalker_OnTraversalEnd",1,SWIGTYPE_p_Mezzanine__XML__TreeWalker);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("TreeWalker_OnTraversalEnd",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (bool)(arg1)->OnTraversalEnd(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TreeWalker(void *obj) {
Mezzanine::XML::TreeWalker *arg1 = (Mezzanine::XML::TreeWalker *) obj;
delete arg1;
}
static swig_lua_attribute swig_TreeWalker_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TreeWalker_methods[]= {
    { "OnTraversalBegin", _wrap_TreeWalker_OnTraversalBegin},
    { "OnEachNode", _wrap_TreeWalker_OnEachNode},
    { "OnTraversalEnd", _wrap_TreeWalker_OnTraversalEnd},
    {0,0}
};
static swig_lua_method swig_TreeWalker_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TreeWalker_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TreeWalker_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TreeWalker_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TreeWalker_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TreeWalker_Sf_SwigStatic = {
    "TreeWalker",
    swig_TreeWalker_Sf_SwigStatic_methods,
    swig_TreeWalker_Sf_SwigStatic_attributes,
    swig_TreeWalker_Sf_SwigStatic_constants,
    swig_TreeWalker_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TreeWalker_bases[] = {0};
static const char *swig_TreeWalker_base_names[] = {0};
static swig_lua_class _wrap_class_TreeWalker = { "TreeWalker", "TreeWalker", &SWIGTYPE_p_Mezzanine__XML__TreeWalker,0, swig_delete_TreeWalker, swig_TreeWalker_methods, swig_TreeWalker_attributes, &swig_TreeWalker_Sf_SwigStatic, swig_TreeWalker_meta, swig_TreeWalker_bases, swig_TreeWalker_base_names };

static int _wrap_AsUtf8__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  wchar_t *arg1 = (wchar_t *) 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;
  
  SWIG_check_num_args("Mezzanine::XML::AsUtf8",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::AsUtf8",1,"wchar_t const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_wchar_t,0))){
    SWIG_fail_ptr("AsUtf8",1,SWIGTYPE_p_wchar_t);
  }
  
  result = Mezzanine::XML::AsUtf8((wchar_t const *)arg1);
  {
    std::basic_string< char,std::char_traits< char >,std::allocator< char > > * resultptr = new std::basic_string< char,std::char_traits< char >,std::allocator< char > >((const std::basic_string< char,std::char_traits< char >,std::allocator< char > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsUtf8__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > *arg1 = 0 ;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > result;
  
  SWIG_check_num_args("Mezzanine::XML::AsUtf8",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::AsUtf8",1,"std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,0))){
    SWIG_fail_ptr("AsUtf8",1,SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t);
  }
  
  result = Mezzanine::XML::AsUtf8((std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > const &)*arg1);
  {
    std::basic_string< char,std::char_traits< char >,std::allocator< char > > * resultptr = new std::basic_string< char,std::char_traits< char >,std::allocator< char > >((const std::basic_string< char,std::char_traits< char >,std::allocator< char > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsUtf8(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_wchar_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AsUtf8__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AsUtf8__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AsUtf8'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::AsUtf8(wchar_t const *)\n"
    "    Mezzanine::XML::AsUtf8(std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_AsWide__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > result;
  
  SWIG_check_num_args("Mezzanine::XML::AsWide",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::XML::AsWide",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  result = Mezzanine::XML::AsWide((char const *)arg1);
  {
    std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > * resultptr = new std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > >((const std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsWide__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::basic_string< char,std::char_traits< char >,std::allocator< char > > *arg1 = 0 ;
  std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > result;
  
  SWIG_check_num_args("Mezzanine::XML::AsWide",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::AsWide",1,"std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,0))){
    SWIG_fail_ptr("AsWide",1,SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t);
  }
  
  result = Mezzanine::XML::AsWide((std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)*arg1);
  {
    std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > * resultptr = new std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > >((const std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AsWide(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_AsWide__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_AsWide__SWIG_0(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'AsWide'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::AsWide(char const *)\n"
    "    Mezzanine::XML::AsWide(std::basic_string< char,std::char_traits< char >,std::allocator< char > > const &)\n");
  lua_error(L);return 0;
}


static int _wrap_GetOneTag(lua_State* L) {
  int SWIG_arg = 0;
  std::istream *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::XML::GetOneTag",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::GetOneTag",1,"std::istream &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__istream,0))){
    SWIG_fail_ptr("GetOneTag",1,SWIGTYPE_p_std__istream);
  }
  
  result = Mezzanine::XML::GetOneTag(*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PreParseClassFromSingleTag__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::String temp3 ;
  Mezzanine::XML::Document *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::PreParseClassFromSingleTag",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::XML::PreParseClassFromSingleTag",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::PreParseClassFromSingleTag",2,"Mezzanine::String const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::XML::PreParseClassFromSingleTag",3,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (Mezzanine::XML::Document *)Mezzanine::XML::PreParseClassFromSingleTag((std::string const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Document,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PreParseClassFromSingleTag__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::XML::Document *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::PreParseClassFromSingleTag",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::XML::PreParseClassFromSingleTag",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::XML::PreParseClassFromSingleTag",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::XML::Document *)Mezzanine::XML::PreParseClassFromSingleTag((std::string const &)*arg1,(std::string const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__Document,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_PreParseClassFromSingleTag(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_PreParseClassFromSingleTag__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_PreParseClassFromSingleTag__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'PreParseClassFromSingleTag'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::PreParseClassFromSingleTag(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::String const &)\n"
    "    Mezzanine::XML::PreParseClassFromSingleTag(Mezzanine::String const &,Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EscapeXML(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::XML::EscapeXML",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::XML::EscapeXML",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::XML::EscapeXML((std::string const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNode__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNode *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNode::XPathNode",0,0)
  result = (Mezzanine::XML::XPathNode *)new Mezzanine::XML::XPathNode();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNode__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::XML::XPathNode *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNode::XPathNode",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::XPathNode",1,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_XPathNode",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::XML::XPathNode *)new Mezzanine::XML::XPathNode((Mezzanine::XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNode__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Attribute *arg1 = 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::XML::XPathNode *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNode::XPathNode",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::XPathNode",1,"Mezzanine::XML::Attribute const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathNode::XPathNode",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Attribute,0))){
    SWIG_fail_ptr("new_XPathNode",1,SWIGTYPE_p_Mezzanine__XML__Attribute);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_XPathNode",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::XML::XPathNode *)new Mezzanine::XML::XPathNode((Mezzanine::XML::Attribute const &)*arg1,(Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNode(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_XPathNode__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_XPathNode__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Attribute, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_XPathNode__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_XPathNode'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathNode::XPathNode()\n"
    "    Mezzanine::XML::XPathNode::XPathNode(Mezzanine::XML::Node const &)\n"
    "    Mezzanine::XML::XPathNode::XPathNode(Mezzanine::XML::Attribute const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_XPathNode_GetNode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNode::GetNode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::GetNode",1,"Mezzanine::XML::XPathNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathNode_GetNode",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  result = ((Mezzanine::XML::XPathNode const *)arg1)->GetNode();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNode_GetAttribute(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  Mezzanine::XML::Attribute result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNode::GetAttribute",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::GetAttribute",1,"Mezzanine::XML::XPathNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathNode_GetAttribute",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  result = ((Mezzanine::XML::XPathNode const *)arg1)->GetAttribute();
  {
    Mezzanine::XML::Attribute * resultptr = new Mezzanine::XML::Attribute((const Mezzanine::XML::Attribute &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Attribute,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNode_GetParent(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  Mezzanine::XML::Node result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNode::GetParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::GetParent",1,"Mezzanine::XML::XPathNode const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathNode_GetParent",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  result = ((Mezzanine::XML::XPathNode const *)arg1)->GetParent();
  {
    Mezzanine::XML::Node * resultptr = new Mezzanine::XML::Node((const Mezzanine::XML::Node &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__Node,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNode___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNode::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNode::operator ==",1,"Mezzanine::XML::XPathNode const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathNode::operator ==",2,"Mezzanine::XML::XPathNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathNode___eq",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathNode___eq",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  result = (bool)((Mezzanine::XML::XPathNode const *)arg1)->operator ==((Mezzanine::XML::XPathNode const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XPathNode(void *obj) {
Mezzanine::XML::XPathNode *arg1 = (Mezzanine::XML::XPathNode *) obj;
delete arg1;
}
static int _proxy__wrap_new_XPathNode(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_XPathNode);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_XPathNode_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_XPathNode_methods[]= {
    { "GetNode", _wrap_XPathNode_GetNode},
    { "GetAttribute", _wrap_XPathNode_GetAttribute},
    { "GetParent", _wrap_XPathNode_GetParent},
    { "__eq", _wrap_XPathNode___eq},
    {0,0}
};
static swig_lua_method swig_XPathNode_meta[] = {
    { "__eq", _wrap_XPathNode___eq},
    {0,0}
};

static swig_lua_attribute swig_XPathNode_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XPathNode_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XPathNode_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XPathNode_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XPathNode_Sf_SwigStatic = {
    "XPathNode",
    swig_XPathNode_Sf_SwigStatic_methods,
    swig_XPathNode_Sf_SwigStatic_attributes,
    swig_XPathNode_Sf_SwigStatic_constants,
    swig_XPathNode_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XPathNode_bases[] = {0};
static const char *swig_XPathNode_base_names[] = {0};
static swig_lua_class _wrap_class_XPathNode = { "XPathNode", "XPathNode", &SWIGTYPE_p_Mezzanine__XML__XPathNode,_proxy__wrap_new_XPathNode, swig_delete_XPathNode, swig_XPathNode_methods, swig_XPathNode_attributes, &swig_XPathNode_Sf_SwigStatic, swig_XPathNode_meta, swig_XPathNode_bases, swig_XPathNode_base_names };

static int _wrap_new_XPathNodeSet__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::XPathNodeSet",0,0)
  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNodeSet__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet::const_iterator arg1 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator arg2 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet::CollectionType arg3 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::XPathNodeSet",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",1,"Mezzanine::XML::XPathNodeSet::const_iterator");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",2,"Mezzanine::XML::XPathNodeSet::const_iterator");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",3,"Mezzanine::XML::XPathNodeSet::CollectionType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("new_XPathNodeSet",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("new_XPathNodeSet",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  arg3 = (Mezzanine::XML::XPathNodeSet::CollectionType)(int)lua_tonumber(L, 3);
  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNodeSet__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet::const_iterator arg1 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator arg2 = (Mezzanine::XML::XPathNodeSet::const_iterator) 0 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::XPathNodeSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",1,"Mezzanine::XML::XPathNodeSet::const_iterator");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",2,"Mezzanine::XML::XPathNodeSet::const_iterator");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("new_XPathNodeSet",1,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("new_XPathNodeSet",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNodeSet__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = 0 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::XPathNodeSet",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::XPathNodeSet",1,"Mezzanine::XML::XPathNodeSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("new_XPathNodeSet",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  result = (Mezzanine::XML::XPathNodeSet *)new Mezzanine::XML::XPathNodeSet((Mezzanine::XML::XPathNodeSet const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathNodeSet(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_XPathNodeSet__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_XPathNodeSet__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_XPathNodeSet__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_XPathNodeSet__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_XPathNodeSet'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathNodeSet::XPathNodeSet()\n"
    "    Mezzanine::XML::XPathNodeSet::XPathNodeSet(Mezzanine::XML::XPathNodeSet::const_iterator,Mezzanine::XML::XPathNodeSet::const_iterator,Mezzanine::XML::XPathNodeSet::CollectionType)\n"
    "    Mezzanine::XML::XPathNodeSet::XPathNodeSet(Mezzanine::XML::XPathNodeSet::const_iterator,Mezzanine::XML::XPathNodeSet::const_iterator)\n"
    "    Mezzanine::XML::XPathNodeSet::XPathNodeSet(Mezzanine::XML::XPathNodeSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_XPathNodeSet_Type(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  Mezzanine::XML::XPathNodeSet::CollectionType result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::Type",1,"Mezzanine::XML::XPathNodeSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_Type",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  result = (Mezzanine::XML::XPathNodeSet::CollectionType)((Mezzanine::XML::XPathNodeSet const *)arg1)->Type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_size(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  size_t result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::size",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::size",1,"Mezzanine::XML::XPathNodeSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_size",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  result = ((Mezzanine::XML::XPathNodeSet const *)arg1)->size();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_begin(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::begin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::begin",1,"Mezzanine::XML::XPathNodeSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_begin",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  result = (Mezzanine::XML::XPathNodeSet::const_iterator)((Mezzanine::XML::XPathNodeSet const *)arg1)->begin();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_c_end(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  Mezzanine::XML::XPathNodeSet::const_iterator result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::end",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::end",1,"Mezzanine::XML::XPathNodeSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_c_end",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  result = (Mezzanine::XML::XPathNodeSet::const_iterator)((Mezzanine::XML::XPathNodeSet const *)arg1)->end();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNode,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_sort__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::sort",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::sort",1,"Mezzanine::XML::XPathNodeSet *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::sort",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_sort",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->sort(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_sort__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::sort",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::sort",1,"Mezzanine::XML::XPathNodeSet *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_sort",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  (arg1)->sort();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_sort(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_XPathNodeSet_sort__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_XPathNodeSet_sort__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XPathNodeSet_sort'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathNodeSet::sort(bool)\n"
    "    Mezzanine::XML::XPathNodeSet::sort()\n");
  lua_error(L);return 0;
}


static int _wrap_XPathNodeSet_first(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  Mezzanine::XML::XPathNode result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::first",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::first",1,"Mezzanine::XML::XPathNodeSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_first",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  result = ((Mezzanine::XML::XPathNodeSet const *)arg1)->first();
  {
    Mezzanine::XML::XPathNode * resultptr = new Mezzanine::XML::XPathNode((const Mezzanine::XML::XPathNode &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNode,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathNodeSet_Empty(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathNodeSet::Empty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathNodeSet::Empty",1,"Mezzanine::XML::XPathNodeSet const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathNodeSet_Empty",1,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  result = (bool)((Mezzanine::XML::XPathNodeSet const *)arg1)->Empty();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XPathNodeSet(void *obj) {
Mezzanine::XML::XPathNodeSet *arg1 = (Mezzanine::XML::XPathNodeSet *) obj;
delete arg1;
}
static int _proxy__wrap_new_XPathNodeSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_XPathNodeSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_XPathNodeSet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_XPathNodeSet_methods[]= {
    { "Type", _wrap_XPathNodeSet_Type},
    { "size", _wrap_XPathNodeSet_size},
    { "begin", _wrap_XPathNodeSet_begin},
    { "c_end", _wrap_XPathNodeSet_c_end},
    { "sort", _wrap_XPathNodeSet_sort},
    { "first", _wrap_XPathNodeSet_first},
    { "Empty", _wrap_XPathNodeSet_Empty},
    {0,0}
};
static swig_lua_method swig_XPathNodeSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_XPathNodeSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XPathNodeSet_Sf_SwigStatic_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("TypeUnsorted", Mezzanine::XML::XPathNodeSet::TypeUnsorted)},
    {SWIG_LUA_CONSTTAB_INT("TypeSorted", Mezzanine::XML::XPathNodeSet::TypeSorted)},
    {SWIG_LUA_CONSTTAB_INT("TypeSortedReverse", Mezzanine::XML::XPathNodeSet::TypeSortedReverse)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XPathNodeSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XPathNodeSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XPathNodeSet_Sf_SwigStatic = {
    "XPathNodeSet",
    swig_XPathNodeSet_Sf_SwigStatic_methods,
    swig_XPathNodeSet_Sf_SwigStatic_attributes,
    swig_XPathNodeSet_Sf_SwigStatic_constants,
    swig_XPathNodeSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XPathNodeSet_bases[] = {0};
static const char *swig_XPathNodeSet_base_names[] = {0};
static swig_lua_class _wrap_class_XPathNodeSet = { "XPathNodeSet", "XPathNodeSet", &SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,_proxy__wrap_new_XPathNodeSet, swig_delete_XPathNodeSet, swig_XPathNodeSet_methods, swig_XPathNodeSet_attributes, &swig_XPathNodeSet_Sf_SwigStatic, swig_XPathNodeSet_meta, swig_XPathNodeSet_bases, swig_XPathNodeSet_base_names };

static int _wrap_XPathParseResult_Offset_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) 0 ;
  ptrdiff_t arg2 ;
  ptrdiff_t *argp2 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathParseResult::Offset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathParseResult::Offset",1,"Mezzanine::XML::XPathParseResult *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathParseResult::Offset",2,"ptrdiff_t");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult,0))){
    SWIG_fail_ptr("XPathParseResult_Offset_set",1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_ptrdiff_t,0))){
    SWIG_fail_ptr("XPathParseResult_Offset_set",2,SWIGTYPE_p_ptrdiff_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->Offset = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathParseResult_Offset_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) 0 ;
  ptrdiff_t result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathParseResult::Offset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathParseResult::Offset",1,"Mezzanine::XML::XPathParseResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult,0))){
    SWIG_fail_ptr("XPathParseResult_Offset_get",1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult);
  }
  
  result =  ((arg1)->Offset);
  {
    ptrdiff_t * resultptr = new ptrdiff_t((const ptrdiff_t &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_ptrdiff_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathParseResult(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathParseResult *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathParseResult::XPathParseResult",0,0)
  result = (Mezzanine::XML::XPathParseResult *)new Mezzanine::XML::XPathParseResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathParseResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathParseResult_Description(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathParseResult::Description",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathParseResult::Description",1,"Mezzanine::XML::XPathParseResult const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult,0))){
    SWIG_fail_ptr("XPathParseResult_Description",1,SWIGTYPE_p_Mezzanine__XML__XPathParseResult);
  }
  
  result = (char *)((Mezzanine::XML::XPathParseResult const *)arg1)->Description();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XPathParseResult(void *obj) {
Mezzanine::XML::XPathParseResult *arg1 = (Mezzanine::XML::XPathParseResult *) obj;
delete arg1;
}
static int _proxy__wrap_new_XPathParseResult(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_XPathParseResult);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_XPathParseResult_attributes[] = {
    { "Offset", _wrap_XPathParseResult_Offset_get, _wrap_XPathParseResult_Offset_set },
    {0,0,0}
};
static swig_lua_method swig_XPathParseResult_methods[]= {
    { "Description", _wrap_XPathParseResult_Description},
    {0,0}
};
static swig_lua_method swig_XPathParseResult_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_XPathParseResult_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XPathParseResult_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XPathParseResult_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XPathParseResult_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XPathParseResult_Sf_SwigStatic = {
    "XPathParseResult",
    swig_XPathParseResult_Sf_SwigStatic_methods,
    swig_XPathParseResult_Sf_SwigStatic_attributes,
    swig_XPathParseResult_Sf_SwigStatic_constants,
    swig_XPathParseResult_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XPathParseResult_bases[] = {0};
static const char *swig_XPathParseResult_base_names[] = {0};
static swig_lua_class _wrap_class_XPathParseResult = { "XPathParseResult", "XPathParseResult", &SWIGTYPE_p_Mezzanine__XML__XPathParseResult,_proxy__wrap_new_XPathParseResult, swig_delete_XPathParseResult, swig_XPathParseResult_methods, swig_XPathParseResult_attributes, &swig_XPathParseResult_Sf_SwigStatic, swig_XPathParseResult_meta, swig_XPathParseResult_bases, swig_XPathParseResult_base_names };

static int _wrap_XPathVariable_Name(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Name",1,"Mezzanine::XML::XPathVariable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Name",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }
  
  result = (Mezzanine::Char8 *)((Mezzanine::XML::XPathVariable const *)arg1)->Name();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Type(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::XML::XPathValueType result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Type",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Type",1,"Mezzanine::XML::XPathVariable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Type",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }
  
  result = (Mezzanine::XML::XPathValueType)((Mezzanine::XML::XPathVariable const *)arg1)->Type();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_GetBoole(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariable::GetBoole",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::GetBoole",1,"Mezzanine::XML::XPathVariable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_GetBoole",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }
  
  result = (bool)((Mezzanine::XML::XPathVariable const *)arg1)->GetBoole();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_GetNumber(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  double result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariable::GetNumber",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::GetNumber",1,"Mezzanine::XML::XPathVariable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_GetNumber",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }
  
  result = (double)((Mezzanine::XML::XPathVariable const *)arg1)->GetNumber();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_GetString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::Char8 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariable::GetString",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::GetString",1,"Mezzanine::XML::XPathVariable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_GetString",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }
  
  result = (Mezzanine::Char8 *)((Mezzanine::XML::XPathVariable const *)arg1)->GetString();
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_GetNodeSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::XML::XPathNodeSet *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariable::GetNodeSet",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::GetNodeSet",1,"Mezzanine::XML::XPathVariable const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_GetNodeSet",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }
  
  result = (Mezzanine::XML::XPathNodeSet *) &((Mezzanine::XML::XPathVariable const *)arg1)->GetNodeSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  bool arg2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",1,"Mezzanine::XML::XPathVariable *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (bool)(arg1)->Set(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  double arg2 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",1,"Mezzanine::XML::XPathVariable *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",2,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }
  
  arg2 = (double)lua_tonumber(L, 2);
  result = (bool)(arg1)->Set(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",1,"Mezzanine::XML::XPathVariable *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) 0 ;
  Mezzanine::XML::XPathNodeSet *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariable::Set",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",1,"Mezzanine::XML::XPathVariable *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariable::Set",2,"Mezzanine::XML::XPathNodeSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0))){
    SWIG_fail_ptr("XPathVariable_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariable);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathVariable_Set",2,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  result = (bool)(arg1)->Set((Mezzanine::XML::XPathNodeSet const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariable_Set(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_XPathVariable_Set__SWIG_3(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_XPathVariable_Set__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_XPathVariable_Set__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariable, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_XPathVariable_Set__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XPathVariable_Set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathVariable::Set(bool)\n"
    "    Mezzanine::XML::XPathVariable::Set(double)\n"
    "    Mezzanine::XML::XPathVariable::Set(Mezzanine::Char8 const *)\n"
    "    Mezzanine::XML::XPathVariable::Set(Mezzanine::XML::XPathNodeSet const &)\n");
  lua_error(L);return 0;
}


static void swig_delete_XPathVariable(void *obj) {
Mezzanine::XML::XPathVariable *arg1 = (Mezzanine::XML::XPathVariable *) obj;
delete arg1;
}
static swig_lua_attribute swig_XPathVariable_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_XPathVariable_methods[]= {
    { "Name", _wrap_XPathVariable_Name},
    { "Type", _wrap_XPathVariable_Type},
    { "GetBoole", _wrap_XPathVariable_GetBoole},
    { "GetNumber", _wrap_XPathVariable_GetNumber},
    { "GetString", _wrap_XPathVariable_GetString},
    { "GetNodeSet", _wrap_XPathVariable_GetNodeSet},
    { "Set", _wrap_XPathVariable_Set},
    {0,0}
};
static swig_lua_method swig_XPathVariable_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_XPathVariable_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XPathVariable_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XPathVariable_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XPathVariable_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XPathVariable_Sf_SwigStatic = {
    "XPathVariable",
    swig_XPathVariable_Sf_SwigStatic_methods,
    swig_XPathVariable_Sf_SwigStatic_attributes,
    swig_XPathVariable_Sf_SwigStatic_constants,
    swig_XPathVariable_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XPathVariable_bases[] = {0};
static const char *swig_XPathVariable_base_names[] = {0};
static swig_lua_class _wrap_class_XPathVariable = { "XPathVariable", "XPathVariable", &SWIGTYPE_p_Mezzanine__XML__XPathVariable,0, swig_delete_XPathVariable, swig_XPathVariable_methods, swig_XPathVariable_attributes, &swig_XPathVariable_Sf_SwigStatic, swig_XPathVariable_meta, swig_XPathVariable_bases, swig_XPathVariable_base_names };

static int _wrap_new_XPathVariableSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::XPathVariableSet",0,0)
  result = (Mezzanine::XML::XPathVariableSet *)new Mezzanine::XML::XPathVariableSet();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Add(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathValueType arg3 ;
  Mezzanine::XML::XPathVariable *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Add",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Add",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Add",2,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Add",3,"Mezzanine::XML::XPathValueType");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Add",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::XML::XPathValueType)(int)lua_tonumber(L, 3);
  result = (Mezzanine::XML::XPathVariable *)(arg1)->Add((Mezzanine::Char8 const *)arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Set__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  bool arg3 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",2,"Mezzanine::Char8 const *");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Set__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  double arg3 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",2,"Mezzanine::Char8 const *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",3,"double");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (double)lua_tonumber(L, 3);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Set__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::Char8 *arg3 = (Mezzanine::Char8 *) 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",2,"Mezzanine::Char8 const *");
  if(!SWIG_lua_isnilstring(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",3,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  arg3 = (Mezzanine::Char8 *)lua_tostring(L, 3);
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,(Mezzanine::Char8 const *)arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Set__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathNodeSet *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Set",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",2,"Mezzanine::Char8 const *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Set",3,"Mezzanine::XML::XPathNodeSet const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Set",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Set",3,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet);
  }
  
  result = (bool)(arg1)->Set((Mezzanine::Char8 const *)arg2,(Mezzanine::XML::XPathNodeSet const &)*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathVariableSet_Set(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNodeSet, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_XPathVariableSet_Set__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_XPathVariableSet_Set__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_XPathVariableSet_Set__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = SWIG_lua_isnilstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_XPathVariableSet_Set__SWIG_2(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XPathVariableSet_Set'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathVariableSet::Set(Mezzanine::Char8 const *,bool)\n"
    "    Mezzanine::XML::XPathVariableSet::Set(Mezzanine::Char8 const *,double)\n"
    "    Mezzanine::XML::XPathVariableSet::Set(Mezzanine::Char8 const *,Mezzanine::Char8 const *)\n"
    "    Mezzanine::XML::XPathVariableSet::Set(Mezzanine::Char8 const *,Mezzanine::XML::XPathNodeSet const &)\n");
  lua_error(L);return 0;
}


static int _wrap_XPathVariableSet_Get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariable *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathVariableSet::Get",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Get",1,"Mezzanine::XML::XPathVariableSet *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathVariableSet::Get",2,"Mezzanine::Char8 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("XPathVariableSet_Get",1,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  result = (Mezzanine::XML::XPathVariable *)(arg1)->Get((Mezzanine::Char8 const *)arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathVariable,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XPathVariableSet(void *obj) {
Mezzanine::XML::XPathVariableSet *arg1 = (Mezzanine::XML::XPathVariableSet *) obj;
delete arg1;
}
static int _proxy__wrap_new_XPathVariableSet(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_XPathVariableSet);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_XPathVariableSet_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_XPathVariableSet_methods[]= {
    { "Add", _wrap_XPathVariableSet_Add},
    { "Set", _wrap_XPathVariableSet_Set},
    { "Get", _wrap_XPathVariableSet_Get},
    {0,0}
};
static swig_lua_method swig_XPathVariableSet_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_XPathVariableSet_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XPathVariableSet_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XPathVariableSet_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XPathVariableSet_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XPathVariableSet_Sf_SwigStatic = {
    "XPathVariableSet",
    swig_XPathVariableSet_Sf_SwigStatic_methods,
    swig_XPathVariableSet_Sf_SwigStatic_attributes,
    swig_XPathVariableSet_Sf_SwigStatic_constants,
    swig_XPathVariableSet_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XPathVariableSet_bases[] = {0};
static const char *swig_XPathVariableSet_base_names[] = {0};
static swig_lua_class _wrap_class_XPathVariableSet = { "XPathVariableSet", "XPathVariableSet", &SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,_proxy__wrap_new_XPathVariableSet, swig_delete_XPathVariableSet, swig_XPathVariableSet_methods, swig_XPathVariableSet_attributes, &swig_XPathVariableSet_Sf_SwigStatic, swig_XPathVariableSet_meta, swig_XPathVariableSet_bases, swig_XPathVariableSet_base_names };

static int _wrap_new_XPathQuery__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 *arg1 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathVariableSet *arg2 = (Mezzanine::XML::XPathVariableSet *) 0 ;
  Mezzanine::XML::XPathQuery *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathQuery::XPathQuery",2,2)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::XPathQuery",1,"Mezzanine::Char8 const *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::XPathQuery",2,"Mezzanine::XML::XPathVariableSet *");
  arg1 = (Mezzanine::Char8 *)lua_tostring(L, 1);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet,0))){
    SWIG_fail_ptr("new_XPathQuery",2,SWIGTYPE_p_Mezzanine__XML__XPathVariableSet);
  }
  
  result = (Mezzanine::XML::XPathQuery *)new Mezzanine::XML::XPathQuery((Mezzanine::Char8 const *)arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathQuery,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathQuery__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 *arg1 = (Mezzanine::Char8 *) 0 ;
  Mezzanine::XML::XPathQuery *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathQuery::XPathQuery",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::XPathQuery",1,"Mezzanine::Char8 const *");
  arg1 = (Mezzanine::Char8 *)lua_tostring(L, 1);
  result = (Mezzanine::XML::XPathQuery *)new Mezzanine::XML::XPathQuery((Mezzanine::Char8 const *)arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathQuery,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_XPathQuery(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_XPathQuery__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = SWIG_lua_isnilstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathVariableSet, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_XPathQuery__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_XPathQuery'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathQuery::XPathQuery(Mezzanine::Char8 const *,Mezzanine::XML::XPathVariableSet *)\n"
    "    Mezzanine::XML::XPathQuery::XPathQuery(Mezzanine::Char8 const *)\n");
  lua_error(L);return 0;
}


static int _wrap_XPathQuery_ReturnType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathValueType result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathQuery::ReturnType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::ReturnType",1,"Mezzanine::XML::XPathQuery const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_ReturnType",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  result = (Mezzanine::XML::XPathValueType)((Mezzanine::XML::XPathQuery const *)arg1)->ReturnType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_EvaluateBoole(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathQuery::EvaluateBoole",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateBoole",1,"Mezzanine::XML::XPathQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateBoole",2,"Mezzanine::XML::XPathNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateBoole",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateBoole",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  result = (bool)((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateBoole((Mezzanine::XML::XPathNode const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_EvaluateNumber(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  double result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathQuery::EvaluateNumber",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateNumber",1,"Mezzanine::XML::XPathQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateNumber",2,"Mezzanine::XML::XPathNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateNumber",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateNumber",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  result = (double)((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateNumber((Mezzanine::XML::XPathNode const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_EvaluateString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathQuery::EvaluateString",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",1,"Mezzanine::XML::XPathQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",2,"Mezzanine::XML::XPathNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateString",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateString",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  result = ((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateString((Mezzanine::XML::XPathNode const &)*arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_EvaluateString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::Char8 *arg2 = (Mezzanine::Char8 *) 0 ;
  size_t arg3 ;
  Mezzanine::XML::XPathNode *arg4 = 0 ;
  size_t result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathQuery::EvaluateString",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",1,"Mezzanine::XML::XPathQuery const *");
  if(!SWIG_lua_isnilstring(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",2,"Mezzanine::Char8 *");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",3,"size_t");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateString",4,"Mezzanine::XML::XPathNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateString",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  arg2 = (Mezzanine::Char8 *)lua_tostring(L, 2);
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (size_t)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateString",4,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  result = ((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateString(arg2,arg3,(Mezzanine::XML::XPathNode const &)*arg4);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_EvaluateString(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_XPathQuery_EvaluateString__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathQuery, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = SWIG_lua_isnilstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__XPathNode, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_XPathQuery_EvaluateString__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'XPathQuery_EvaluateString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::XML::XPathQuery::EvaluateString(Mezzanine::XML::XPathNode const &) const\n"
    "    Mezzanine::XML::XPathQuery::EvaluateString(Mezzanine::Char8 *,size_t,Mezzanine::XML::XPathNode const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_XPathQuery_EvaluateNodeSet(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathNode *arg2 = 0 ;
  Mezzanine::XML::XPathNodeSet result;
  
  SWIG_check_num_args("Mezzanine::XML::XPathQuery::EvaluateNodeSet",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateNodeSet",1,"Mezzanine::XML::XPathQuery const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::EvaluateNodeSet",2,"Mezzanine::XML::XPathNode const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateNodeSet",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__XPathNode,0))){
    SWIG_fail_ptr("XPathQuery_EvaluateNodeSet",2,SWIGTYPE_p_Mezzanine__XML__XPathNode);
  }
  
  result = ((Mezzanine::XML::XPathQuery const *)arg1)->EvaluateNodeSet((Mezzanine::XML::XPathNode const &)*arg2);
  {
    Mezzanine::XML::XPathNodeSet * resultptr = new Mezzanine::XML::XPathNodeSet((const Mezzanine::XML::XPathNodeSet &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__XML__XPathNodeSet,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_XPathQuery_Result(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) 0 ;
  Mezzanine::XML::XPathParseResult *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::XML::XPathQuery::Result",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::XML::XPathQuery::Result",1,"Mezzanine::XML::XPathQuery const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__XPathQuery,0))){
    SWIG_fail_ptr("XPathQuery_Result",1,SWIGTYPE_p_Mezzanine__XML__XPathQuery);
  }
  
  result = (Mezzanine::XML::XPathParseResult *) &((Mezzanine::XML::XPathQuery const *)arg1)->Result();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__XML__XPathParseResult,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_XPathQuery(void *obj) {
Mezzanine::XML::XPathQuery *arg1 = (Mezzanine::XML::XPathQuery *) obj;
delete arg1;
}
static int _proxy__wrap_new_XPathQuery(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_XPathQuery);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_XPathQuery_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_XPathQuery_methods[]= {
    { "ReturnType", _wrap_XPathQuery_ReturnType},
    { "EvaluateBoole", _wrap_XPathQuery_EvaluateBoole},
    { "EvaluateNumber", _wrap_XPathQuery_EvaluateNumber},
    { "EvaluateString", _wrap_XPathQuery_EvaluateString},
    { "EvaluateNodeSet", _wrap_XPathQuery_EvaluateNodeSet},
    { "Result", _wrap_XPathQuery_Result},
    {0,0}
};
static swig_lua_method swig_XPathQuery_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_XPathQuery_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_XPathQuery_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_XPathQuery_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_XPathQuery_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_XPathQuery_Sf_SwigStatic = {
    "XPathQuery",
    swig_XPathQuery_Sf_SwigStatic_methods,
    swig_XPathQuery_Sf_SwigStatic_attributes,
    swig_XPathQuery_Sf_SwigStatic_constants,
    swig_XPathQuery_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_XPathQuery_bases[] = {0};
static const char *swig_XPathQuery_base_names[] = {0};
static swig_lua_class _wrap_class_XPathQuery = { "XPathQuery", "XPathQuery", &SWIGTYPE_p_Mezzanine__XML__XPathQuery,_proxy__wrap_new_XPathQuery, swig_delete_XPathQuery, swig_XPathQuery_methods, swig_XPathQuery_attributes, &swig_XPathQuery_Sf_SwigStatic, swig_XPathQuery_meta, swig_XPathQuery_bases, swig_XPathQuery_base_names };

static int _wrap_new_ActorUpdateWorkUnit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::ActorUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorUpdateWorkUnit::ActorUpdateWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorUpdateWorkUnit::ActorUpdateWorkUnit",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("new_ActorUpdateWorkUnit",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::ActorUpdateWorkUnit *)new Mezzanine::ActorUpdateWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ActorUpdateWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ActorUpdateWorkUnit *arg1 = (Mezzanine::ActorUpdateWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::ActorUpdateWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::ActorUpdateWorkUnit::DoWork",1,"Mezzanine::ActorUpdateWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::ActorUpdateWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit,0))){
    SWIG_fail_ptr("ActorUpdateWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("ActorUpdateWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_ActorUpdateWorkUnit(void *obj) {
Mezzanine::ActorUpdateWorkUnit *arg1 = (Mezzanine::ActorUpdateWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_ActorUpdateWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_ActorUpdateWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_ActorUpdateWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_ActorUpdateWorkUnit_methods[]= {
    { "DoWork", _wrap_ActorUpdateWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_ActorUpdateWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_ActorUpdateWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_ActorUpdateWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_ActorUpdateWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_ActorUpdateWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_ActorUpdateWorkUnit_Sf_SwigStatic = {
    "ActorUpdateWorkUnit",
    swig_ActorUpdateWorkUnit_Sf_SwigStatic_methods,
    swig_ActorUpdateWorkUnit_Sf_SwigStatic_attributes,
    swig_ActorUpdateWorkUnit_Sf_SwigStatic_constants,
    swig_ActorUpdateWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_ActorUpdateWorkUnit_bases[] = {0};
static const char *swig_ActorUpdateWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_ActorUpdateWorkUnit = { "ActorUpdateWorkUnit", "ActorUpdateWorkUnit", &SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit,_proxy__wrap_new_ActorUpdateWorkUnit, swig_delete_ActorUpdateWorkUnit, swig_ActorUpdateWorkUnit_methods, swig_ActorUpdateWorkUnit_attributes, &swig_ActorUpdateWorkUnit_Sf_SwigStatic, swig_ActorUpdateWorkUnit_meta, swig_ActorUpdateWorkUnit_bases, swig_ActorUpdateWorkUnit_base_names };

static int _wrap_new_AreaEffectUpdateWorkUnit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::AreaEffectUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectUpdateWorkUnit::AreaEffectUpdateWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectUpdateWorkUnit::AreaEffectUpdateWorkUnit",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("new_AreaEffectUpdateWorkUnit",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::AreaEffectUpdateWorkUnit *)new Mezzanine::AreaEffectUpdateWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_AreaEffectUpdateWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::AreaEffectUpdateWorkUnit *arg1 = (Mezzanine::AreaEffectUpdateWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::AreaEffectUpdateWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::AreaEffectUpdateWorkUnit::DoWork",1,"Mezzanine::AreaEffectUpdateWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::AreaEffectUpdateWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit,0))){
    SWIG_fail_ptr("AreaEffectUpdateWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("AreaEffectUpdateWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_AreaEffectUpdateWorkUnit(void *obj) {
Mezzanine::AreaEffectUpdateWorkUnit *arg1 = (Mezzanine::AreaEffectUpdateWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_AreaEffectUpdateWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_AreaEffectUpdateWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_AreaEffectUpdateWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_AreaEffectUpdateWorkUnit_methods[]= {
    { "DoWork", _wrap_AreaEffectUpdateWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_AreaEffectUpdateWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic = {
    "AreaEffectUpdateWorkUnit",
    swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_methods,
    swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_attributes,
    swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_constants,
    swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_AreaEffectUpdateWorkUnit_bases[] = {0};
static const char *swig_AreaEffectUpdateWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_AreaEffectUpdateWorkUnit = { "AreaEffectUpdateWorkUnit", "AreaEffectUpdateWorkUnit", &SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit,_proxy__wrap_new_AreaEffectUpdateWorkUnit, swig_delete_AreaEffectUpdateWorkUnit, swig_AreaEffectUpdateWorkUnit_methods, swig_AreaEffectUpdateWorkUnit_attributes, &swig_AreaEffectUpdateWorkUnit_Sf_SwigStatic, swig_AreaEffectUpdateWorkUnit_meta, swig_AreaEffectUpdateWorkUnit_bases, swig_AreaEffectUpdateWorkUnit_base_names };

static int _wrap_new_DebrisUpdateWorkUnit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::DebrisUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisUpdateWorkUnit::DebrisUpdateWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisUpdateWorkUnit::DebrisUpdateWorkUnit",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("new_DebrisUpdateWorkUnit",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::DebrisUpdateWorkUnit *)new Mezzanine::DebrisUpdateWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DebrisUpdateWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DebrisUpdateWorkUnit *arg1 = (Mezzanine::DebrisUpdateWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::DebrisUpdateWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DebrisUpdateWorkUnit::DoWork",1,"Mezzanine::DebrisUpdateWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::DebrisUpdateWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit,0))){
    SWIG_fail_ptr("DebrisUpdateWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("DebrisUpdateWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DebrisUpdateWorkUnit(void *obj) {
Mezzanine::DebrisUpdateWorkUnit *arg1 = (Mezzanine::DebrisUpdateWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_DebrisUpdateWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DebrisUpdateWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DebrisUpdateWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DebrisUpdateWorkUnit_methods[]= {
    { "DoWork", _wrap_DebrisUpdateWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_DebrisUpdateWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DebrisUpdateWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DebrisUpdateWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DebrisUpdateWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DebrisUpdateWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DebrisUpdateWorkUnit_Sf_SwigStatic = {
    "DebrisUpdateWorkUnit",
    swig_DebrisUpdateWorkUnit_Sf_SwigStatic_methods,
    swig_DebrisUpdateWorkUnit_Sf_SwigStatic_attributes,
    swig_DebrisUpdateWorkUnit_Sf_SwigStatic_constants,
    swig_DebrisUpdateWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DebrisUpdateWorkUnit_bases[] = {0};
static const char *swig_DebrisUpdateWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_DebrisUpdateWorkUnit = { "DebrisUpdateWorkUnit", "DebrisUpdateWorkUnit", &SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit,_proxy__wrap_new_DebrisUpdateWorkUnit, swig_delete_DebrisUpdateWorkUnit, swig_DebrisUpdateWorkUnit_methods, swig_DebrisUpdateWorkUnit_attributes, &swig_DebrisUpdateWorkUnit_Sf_SwigStatic, swig_DebrisUpdateWorkUnit_meta, swig_DebrisUpdateWorkUnit_bases, swig_DebrisUpdateWorkUnit_base_names };

static int _wrap_new_TerrainUpdateWorkUnit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::TerrainUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::TerrainUpdateWorkUnit::TerrainUpdateWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TerrainUpdateWorkUnit::TerrainUpdateWorkUnit",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("new_TerrainUpdateWorkUnit",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::TerrainUpdateWorkUnit *)new Mezzanine::TerrainUpdateWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__TerrainUpdateWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_TerrainUpdateWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::TerrainUpdateWorkUnit *arg1 = (Mezzanine::TerrainUpdateWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::TerrainUpdateWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::TerrainUpdateWorkUnit::DoWork",1,"Mezzanine::TerrainUpdateWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::TerrainUpdateWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__TerrainUpdateWorkUnit,0))){
    SWIG_fail_ptr("TerrainUpdateWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__TerrainUpdateWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("TerrainUpdateWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_TerrainUpdateWorkUnit(void *obj) {
Mezzanine::TerrainUpdateWorkUnit *arg1 = (Mezzanine::TerrainUpdateWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_TerrainUpdateWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_TerrainUpdateWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_TerrainUpdateWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_TerrainUpdateWorkUnit_methods[]= {
    { "DoWork", _wrap_TerrainUpdateWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_TerrainUpdateWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_TerrainUpdateWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_TerrainUpdateWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_TerrainUpdateWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_TerrainUpdateWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_TerrainUpdateWorkUnit_Sf_SwigStatic = {
    "TerrainUpdateWorkUnit",
    swig_TerrainUpdateWorkUnit_Sf_SwigStatic_methods,
    swig_TerrainUpdateWorkUnit_Sf_SwigStatic_attributes,
    swig_TerrainUpdateWorkUnit_Sf_SwigStatic_constants,
    swig_TerrainUpdateWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_TerrainUpdateWorkUnit_bases[] = {0};
static const char *swig_TerrainUpdateWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_TerrainUpdateWorkUnit = { "TerrainUpdateWorkUnit", "TerrainUpdateWorkUnit", &SWIGTYPE_p_Mezzanine__TerrainUpdateWorkUnit,_proxy__wrap_new_TerrainUpdateWorkUnit, swig_delete_TerrainUpdateWorkUnit, swig_TerrainUpdateWorkUnit_methods, swig_TerrainUpdateWorkUnit_attributes, &swig_TerrainUpdateWorkUnit_Sf_SwigStatic, swig_TerrainUpdateWorkUnit_meta, swig_TerrainUpdateWorkUnit_bases, swig_TerrainUpdateWorkUnit_base_names };

static int _wrap_new_VehicleUpdateWorkUnit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::VehicleUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::VehicleUpdateWorkUnit::VehicleUpdateWorkUnit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::VehicleUpdateWorkUnit::VehicleUpdateWorkUnit",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("new_VehicleUpdateWorkUnit",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::VehicleUpdateWorkUnit *)new Mezzanine::VehicleUpdateWorkUnit(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__VehicleUpdateWorkUnit,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_VehicleUpdateWorkUnit_DoWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::VehicleUpdateWorkUnit *arg1 = (Mezzanine::VehicleUpdateWorkUnit *) 0 ;
  Mezzanine::Threading::DefaultThreadSpecificStorage::Type *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::VehicleUpdateWorkUnit::DoWork",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::VehicleUpdateWorkUnit::DoWork",1,"Mezzanine::VehicleUpdateWorkUnit *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::VehicleUpdateWorkUnit::DoWork",2,"Mezzanine::Threading::DefaultThreadSpecificStorage::Type &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__VehicleUpdateWorkUnit,0))){
    SWIG_fail_ptr("VehicleUpdateWorkUnit_DoWork",1,SWIGTYPE_p_Mezzanine__VehicleUpdateWorkUnit);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,0))){
    SWIG_fail_ptr("VehicleUpdateWorkUnit_DoWork",2,SWIGTYPE_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type);
  }
  
  (arg1)->DoWork(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_VehicleUpdateWorkUnit(void *obj) {
Mezzanine::VehicleUpdateWorkUnit *arg1 = (Mezzanine::VehicleUpdateWorkUnit *) obj;
delete arg1;
}
static int _proxy__wrap_new_VehicleUpdateWorkUnit(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_VehicleUpdateWorkUnit);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_VehicleUpdateWorkUnit_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VehicleUpdateWorkUnit_methods[]= {
    { "DoWork", _wrap_VehicleUpdateWorkUnit_DoWork},
    {0,0}
};
static swig_lua_method swig_VehicleUpdateWorkUnit_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VehicleUpdateWorkUnit_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VehicleUpdateWorkUnit_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VehicleUpdateWorkUnit_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VehicleUpdateWorkUnit_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VehicleUpdateWorkUnit_Sf_SwigStatic = {
    "VehicleUpdateWorkUnit",
    swig_VehicleUpdateWorkUnit_Sf_SwigStatic_methods,
    swig_VehicleUpdateWorkUnit_Sf_SwigStatic_attributes,
    swig_VehicleUpdateWorkUnit_Sf_SwigStatic_constants,
    swig_VehicleUpdateWorkUnit_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VehicleUpdateWorkUnit_bases[] = {0};
static const char *swig_VehicleUpdateWorkUnit_base_names[] = {0};
static swig_lua_class _wrap_class_VehicleUpdateWorkUnit = { "VehicleUpdateWorkUnit", "VehicleUpdateWorkUnit", &SWIGTYPE_p_Mezzanine__VehicleUpdateWorkUnit,_proxy__wrap_new_VehicleUpdateWorkUnit, swig_delete_VehicleUpdateWorkUnit, swig_VehicleUpdateWorkUnit_methods, swig_VehicleUpdateWorkUnit_attributes, &swig_VehicleUpdateWorkUnit_Sf_SwigStatic, swig_VehicleUpdateWorkUnit_meta, swig_VehicleUpdateWorkUnit_bases, swig_VehicleUpdateWorkUnit_base_names };

static int _wrap_EntityManagementEvent_ManagedEntityName_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManagementEvent *arg1 = (Mezzanine::EntityManagementEvent *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManagementEvent::ManagedEntityName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManagementEvent::ManagedEntityName",1,"Mezzanine::EntityManagementEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManagementEvent,0))){
    SWIG_fail_ptr("EntityManagementEvent_ManagedEntityName_get",1,SWIGTYPE_p_Mezzanine__EntityManagementEvent);
  }
  
  result = (Mezzanine::String *) & ((arg1)->ManagedEntityName);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityManagementEvent(lua_State* L) {
  int SWIG_arg = 0;
  EventNameType *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::EntityManagementEvent *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManagementEvent::EntityManagementEvent",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::EntityManagementEvent::EntityManagementEvent",1,"EventNameType const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EntityManagementEvent::EntityManagementEvent",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_EventNameType,0))){
    SWIG_fail_ptr("new_EntityManagementEvent",1,SWIGTYPE_p_EventNameType);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::EntityManagementEvent *)new Mezzanine::EntityManagementEvent((EventNameType const &)*arg1,(Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityManagementEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityManagementEvent(void *obj) {
Mezzanine::EntityManagementEvent *arg1 = (Mezzanine::EntityManagementEvent *) obj;
delete arg1;
}
static int _proxy__wrap_new_EntityManagementEvent(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EntityManagementEvent);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EntityManagementEvent_attributes[] = {
    { "ManagedEntityName", _wrap_EntityManagementEvent_ManagedEntityName_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_method swig_EntityManagementEvent_methods[]= {
    {0,0}
};
static swig_lua_method swig_EntityManagementEvent_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntityManagementEvent_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_EntityManagementEvent_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityManagementEvent_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_EntityManagementEvent_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityManagementEvent_Sf_SwigStatic = {
    "EntityManagementEvent",
    swig_EntityManagementEvent_Sf_SwigStatic_methods,
    swig_EntityManagementEvent_Sf_SwigStatic_attributes,
    swig_EntityManagementEvent_Sf_SwigStatic_constants,
    swig_EntityManagementEvent_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityManagementEvent_bases[] = {0};
static const char *swig_EntityManagementEvent_base_names[] = {0};
static swig_lua_class _wrap_class_EntityManagementEvent = { "EntityManagementEvent", "EntityManagementEvent", &SWIGTYPE_p_Mezzanine__EntityManagementEvent,_proxy__wrap_new_EntityManagementEvent, swig_delete_EntityManagementEvent, swig_EntityManagementEvent_methods, swig_EntityManagementEvent_attributes, &swig_EntityManagementEvent_Sf_SwigStatic, swig_EntityManagementEvent_meta, swig_EntityManagementEvent_bases, swig_EntityManagementEvent_base_names };

static int _wrap_EntityManager_ImplementationName_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::ImplementationName",0,0)
  result = (Mezzanine::String *) &Mezzanine::EntityManager::ImplementationName;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_InterfaceType_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::EntityManager::InterfaceType",0,0)
  result = (Mezzanine::ManagerBase::ManagerType)(Mezzanine::ManagerBase::ManagerType)Mezzanine::EntityManager::InterfaceType;
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_EventEntityCreated_get(lua_State* L) {
  int SWIG_arg = 0;
  EventNameType result;
  
  SWIG_check_num_args("Mezzanine::EntityManager::EventEntityCreated",0,0)
  result = (EventNameType)Mezzanine::EntityManager::EventEntityCreated;
  {
    EventNameType * resultptr = new EventNameType((const EventNameType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_EventNameType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_EventEntityDestroyed_get(lua_State* L) {
  int SWIG_arg = 0;
  EventNameType result;
  
  SWIG_check_num_args("Mezzanine::EntityManager::EventEntityDestroyed",0,0)
  result = (EventNameType)Mezzanine::EntityManager::EventEntityDestroyed;
  {
    EventNameType * resultptr = new EventNameType((const EventNameType &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_EventNameType,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::EntityManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::EntityManager",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::EntityManager",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_EntityManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::EntityManager *)new Mezzanine::EntityManager(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::EntityManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::EntityManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::EntityManager",1,"Mezzanine::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::EntityManager",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_EntityManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_EntityManager",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::EntityManager *)new Mezzanine::EntityManager(arg1,(Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityManager,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EntityManager(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EntityManager__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_EntityManager__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_EntityManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::EntityManager(Mezzanine::World *)\n"
    "    Mezzanine::EntityManager::EntityManager(Mezzanine::World *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_CreateFieldOfForce__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::FieldOfForce *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateFieldOfForce",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateFieldOfForce",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateFieldOfForce",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::FieldOfForce *)(arg1)->CreateFieldOfForce();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FieldOfForce,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateFieldOfForce__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::FieldOfForce *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateFieldOfForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateFieldOfForce",1,"Mezzanine::EntityManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateFieldOfForce",2,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateFieldOfForce",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("EntityManager_CreateFieldOfForce",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::FieldOfForce *)(arg1)->CreateFieldOfForce(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FieldOfForce,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateFieldOfForce__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::FieldOfForce *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateFieldOfForce",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateFieldOfForce",1,"Mezzanine::EntityManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateFieldOfForce",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateFieldOfForce",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityManager_CreateFieldOfForce",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::FieldOfForce *)(arg1)->CreateFieldOfForce((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__FieldOfForce,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateFieldOfForce(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EntityManager_CreateFieldOfForce__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityManager_CreateFieldOfForce__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityManager_CreateFieldOfForce__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityManager_CreateFieldOfForce'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::CreateFieldOfForce()\n"
    "    Mezzanine::EntityManager::CreateFieldOfForce(Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::EntityManager::CreateFieldOfForce(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_CreateGravityField__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::GravityField *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateGravityField",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateGravityField",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateGravityField",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::GravityField *)(arg1)->CreateGravityField();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityField,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateGravityField__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::GravityField *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateGravityField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateGravityField",1,"Mezzanine::EntityManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateGravityField",2,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateGravityField",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("EntityManager_CreateGravityField",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::GravityField *)(arg1)->CreateGravityField(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityField,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateGravityField__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::GravityField *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateGravityField",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateGravityField",1,"Mezzanine::EntityManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateGravityField",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateGravityField",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityManager_CreateGravityField",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::GravityField *)(arg1)->CreateGravityField((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityField,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateGravityField(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EntityManager_CreateGravityField__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityManager_CreateGravityField__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityManager_CreateGravityField__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityManager_CreateGravityField'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::CreateGravityField()\n"
    "    Mezzanine::EntityManager::CreateGravityField(Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::EntityManager::CreateGravityField(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_CreateGravityWell__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::GravityWell *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateGravityWell",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateGravityWell",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateGravityWell",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::GravityWell *)(arg1)->CreateGravityWell();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityWell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateGravityWell__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::Physics::CollisionShape *arg2 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::GravityWell *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateGravityWell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateGravityWell",1,"Mezzanine::EntityManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateGravityWell",2,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateGravityWell",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("EntityManager_CreateGravityWell",2,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::GravityWell *)(arg1)->CreateGravityWell(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityWell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateGravityWell__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::GravityWell *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateGravityWell",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateGravityWell",1,"Mezzanine::EntityManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateGravityWell",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateGravityWell",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityManager_CreateGravityWell",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::GravityWell *)(arg1)->CreateGravityWell((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__GravityWell,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateGravityWell(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EntityManager_CreateGravityWell__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityManager_CreateGravityWell__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityManager_CreateGravityWell__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityManager_CreateGravityWell'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::CreateGravityWell()\n"
    "    Mezzanine::EntityManager::CreateGravityWell(Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::EntityManager::CreateGravityWell(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_CreateRigidDebris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::RigidDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateRigidDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateRigidDebris",1,"Mezzanine::EntityManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateRigidDebris",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateRigidDebris",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::RigidDebris *)(arg1)->CreateRigidDebris(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RigidDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateRigidDebris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Graphics::Mesh *arg3 = (Mezzanine::Graphics::Mesh *) 0 ;
  Mezzanine::Physics::CollisionShape *arg4 = (Mezzanine::Physics::CollisionShape *) 0 ;
  Mezzanine::RigidDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateRigidDebris",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateRigidDebris",1,"Mezzanine::EntityManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateRigidDebris",2,"Mezzanine::Real const");
  if(!SWIG_isptrtype(L,3)) SWIG_fail_arg("Mezzanine::EntityManager::CreateRigidDebris",3,"Mezzanine::Graphics::Mesh *");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("Mezzanine::EntityManager::CreateRigidDebris",4,"Mezzanine::Physics::CollisionShape *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateRigidDebris",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Graphics__Mesh,0))){
    SWIG_fail_ptr("EntityManager_CreateRigidDebris",3,SWIGTYPE_p_Mezzanine__Graphics__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_Mezzanine__Physics__CollisionShape,0))){
    SWIG_fail_ptr("EntityManager_CreateRigidDebris",4,SWIGTYPE_p_Mezzanine__Physics__CollisionShape);
  }
  
  result = (Mezzanine::RigidDebris *)(arg1)->CreateRigidDebris(arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RigidDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateRigidDebris__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::RigidDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateRigidDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateRigidDebris",1,"Mezzanine::EntityManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateRigidDebris",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateRigidDebris",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityManager_CreateRigidDebris",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::RigidDebris *)(arg1)->CreateRigidDebris((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__RigidDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateRigidDebris(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityManager_CreateRigidDebris__SWIG_2(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EntityManager_CreateRigidDebris__SWIG_0(L);
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (SWIG_isptrtype(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Graphics__Mesh, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__CollisionShape, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_EntityManager_CreateRigidDebris__SWIG_1(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityManager_CreateRigidDebris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::CreateRigidDebris(Mezzanine::Real const)\n"
    "    Mezzanine::EntityManager::CreateRigidDebris(Mezzanine::Real const,Mezzanine::Graphics::Mesh *,Mezzanine::Physics::CollisionShape *)\n"
    "    Mezzanine::EntityManager::CreateRigidDebris(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_CreateSoftDebris__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::SoftDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateSoftDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateSoftDebris",1,"Mezzanine::EntityManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateSoftDebris",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateSoftDebris",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::SoftDebris *)(arg1)->CreateSoftDebris(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SoftDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateSoftDebris__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::SoftDebris *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateSoftDebris",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateSoftDebris",1,"Mezzanine::EntityManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateSoftDebris",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateSoftDebris",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityManager_CreateSoftDebris",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::SoftDebris *)(arg1)->CreateSoftDebris((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__SoftDebris,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateSoftDebris(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityManager_CreateSoftDebris__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EntityManager_CreateSoftDebris__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityManager_CreateSoftDebris'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::CreateSoftDebris(Mezzanine::Real const)\n"
    "    Mezzanine::EntityManager::CreateSoftDebris(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_CreateEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::NameValuePairMap *arg3 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateEntity",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateEntity",1,"Mezzanine::EntityManager *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateEntity",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::EntityManager::CreateEntity",3,"Mezzanine::NameValuePairMap const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateEntity",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__mapT_std__string_std__string_t,0))){
    SWIG_fail_ptr("EntityManager_CreateEntity",3,SWIGTYPE_p_std__mapT_std__string_std__string_t);
  }
  
  result = (Mezzanine::Entity *)(arg1)->CreateEntity((Mezzanine::String const &)*arg2,(Mezzanine::NameValuePairMap const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::CreateEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::CreateEntity",1,"Mezzanine::EntityManager *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::CreateEntity",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_CreateEntity",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("EntityManager_CreateEntity",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::Entity *)(arg1)->CreateEntity((Mezzanine::XML::Node const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_CreateEntity(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityManager_CreateEntity__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__mapT_std__string_std__string_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_EntityManager_CreateEntity__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityManager_CreateEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::CreateEntity(Mezzanine::String const &,Mezzanine::NameValuePairMap const &)\n"
    "    Mezzanine::EntityManager::CreateEntity(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_GetEntityByIndex(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetEntityByIndex",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetEntityByIndex",1,"Mezzanine::EntityManager const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::GetEntityByIndex",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetEntityByIndex",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::Entity *)((Mezzanine::EntityManager const *)arg1)->GetEntityByIndex(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetEntityByID(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::EntityID *arg2 = 0 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetEntityByID",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetEntityByID",1,"Mezzanine::EntityManager const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::GetEntityByID",2,"Mezzanine::EntityID const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetEntityByID",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("EntityManager_GetEntityByID",2,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  result = (Mezzanine::Entity *)((Mezzanine::EntityManager const *)arg1)->GetEntityByID((Mezzanine::EntityID const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetEntityByName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::Entity *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetEntityByName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetEntityByName",1,"Mezzanine::EntityManager const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::GetEntityByName",2,"Mezzanine::String const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetEntityByName",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = (Mezzanine::Entity *)((Mezzanine::EntityManager const *)arg1)->GetEntityByName((Mezzanine::String const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetNumEntities(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetNumEntities",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetNumEntities",1,"Mezzanine::EntityManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetNumEntities",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::Whole)((Mezzanine::EntityManager const *)arg1)->GetNumEntities();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_DestroyEntity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::DestroyEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::DestroyEntity",1,"Mezzanine::EntityManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::DestroyEntity",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_DestroyEntity",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->DestroyEntity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_DestroyEntity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::Entity *arg2 = (Mezzanine::Entity *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::DestroyEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::DestroyEntity",1,"Mezzanine::EntityManager *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::DestroyEntity",2,"Mezzanine::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_DestroyEntity",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Entity,0))){
    SWIG_fail_ptr("EntityManager_DestroyEntity",2,SWIGTYPE_p_Mezzanine__Entity);
  }
  
  (arg1)->DestroyEntity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_DestroyEntity(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Entity, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_EntityManager_DestroyEntity__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_EntityManager_DestroyEntity__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityManager_DestroyEntity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::DestroyEntity(Mezzanine::Whole const)\n"
    "    Mezzanine::EntityManager::DestroyEntity(Mezzanine::Entity *)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_DestroyAllEntities(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::DestroyAllEntities",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::DestroyAllEntities",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_DestroyAllEntities",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  (arg1)->DestroyAllEntities();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_AddEntityFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityFactory *arg1 = (Mezzanine::EntityFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::AddEntityFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::AddEntityFactory",1,"Mezzanine::EntityFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityFactory,0))){
    SWIG_fail_ptr("EntityManager_AddEntityFactory",1,SWIGTYPE_p_Mezzanine__EntityFactory);
  }
  
  Mezzanine::EntityManager::AddEntityFactory(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_RemoveEntityFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityFactory *arg1 = (Mezzanine::EntityFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::RemoveEntityFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::RemoveEntityFactory",1,"Mezzanine::EntityFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityFactory,0))){
    SWIG_fail_ptr("EntityManager_RemoveEntityFactory",1,SWIGTYPE_p_Mezzanine__EntityFactory);
  }
  
  Mezzanine::EntityManager::RemoveEntityFactory(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_RemoveEntityFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::RemoveEntityFactory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::RemoveEntityFactory",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  Mezzanine::EntityManager::RemoveEntityFactory((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_RemoveEntityFactory(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EntityManager_RemoveEntityFactory__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_EntityManager_RemoveEntityFactory__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityManager_RemoveEntityFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::RemoveEntityFactory(Mezzanine::EntityFactory *)\n"
    "    Mezzanine::EntityManager::RemoveEntityFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_DestroyEntityFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityFactory *arg1 = (Mezzanine::EntityFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::DestroyEntityFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::DestroyEntityFactory",1,"Mezzanine::EntityFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityFactory,0))){
    SWIG_fail_ptr("EntityManager_DestroyEntityFactory",1,SWIGTYPE_p_Mezzanine__EntityFactory);
  }
  
  Mezzanine::EntityManager::DestroyEntityFactory(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_DestroyEntityFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::DestroyEntityFactory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::DestroyEntityFactory",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  Mezzanine::EntityManager::DestroyEntityFactory((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_DestroyEntityFactory(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EntityManager_DestroyEntityFactory__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_EntityManager_DestroyEntityFactory__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityManager_DestroyEntityFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::DestroyEntityFactory(Mezzanine::EntityFactory *)\n"
    "    Mezzanine::EntityManager::DestroyEntityFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_DestroyAllEntityFactories(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("Mezzanine::EntityManager::DestroyAllEntityFactories",0,0)
  Mezzanine::EntityManager::DestroyAllEntityFactories();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_AddAllDefaultEntityFactories(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("Mezzanine::EntityManager::AddAllDefaultEntityFactories",0,0)
  Mezzanine::EntityManager::AddAllDefaultEntityFactories();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_Pause(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::UInt32 arg2 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::Pause",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::Pause",1,"Mezzanine::EntityManager *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::EntityManager::Pause",2,"Mezzanine::UInt32 const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_Pause",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::UInt32 const)lua_tonumber(L, 2);
  (arg1)->Pause(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_MainLoopInitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::MainLoopInitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::MainLoopInitialize",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_MainLoopInitialize",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  (arg1)->MainLoopInitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::Initialize",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_Initialize",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::Deinitialize",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_Deinitialize",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetPublisher__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  DefaultEventPublisher *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetPublisher",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetPublisher",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetPublisher",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (DefaultEventPublisher *) &(arg1)->GetPublisher();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DefaultEventPublisher,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetPublisher__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  DefaultEventPublisher *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetPublisher",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetPublisher",1,"Mezzanine::EntityManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetPublisher",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (DefaultEventPublisher *) &((Mezzanine::EntityManager const *)arg1)->GetPublisher();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_DefaultEventPublisher,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetPublisher(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EntityManager_GetPublisher__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityManager, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_EntityManager_GetPublisher__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'EntityManager_GetPublisher'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::EntityManager::GetPublisher()\n"
    "    Mezzanine::EntityManager::GetPublisher() const\n");
  lua_error(L);return 0;
}


static int _wrap_EntityManager_GetActorUpdateWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::ActorUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetActorUpdateWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetActorUpdateWork",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetActorUpdateWork",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::ActorUpdateWorkUnit *)(arg1)->GetActorUpdateWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__ActorUpdateWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetAreaEffectUpdateWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::AreaEffectUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetAreaEffectUpdateWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetAreaEffectUpdateWork",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetAreaEffectUpdateWork",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::AreaEffectUpdateWorkUnit *)(arg1)->GetAreaEffectUpdateWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__AreaEffectUpdateWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetDebrisUpdateWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::DebrisUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetDebrisUpdateWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetDebrisUpdateWork",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetDebrisUpdateWork",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::DebrisUpdateWorkUnit *)(arg1)->GetDebrisUpdateWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DebrisUpdateWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetTerrainUpdateWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::TerrainUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetTerrainUpdateWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetTerrainUpdateWork",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetTerrainUpdateWork",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::TerrainUpdateWorkUnit *)(arg1)->GetTerrainUpdateWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__TerrainUpdateWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetVehicleUpdateWork(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::VehicleUpdateWorkUnit *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetVehicleUpdateWork",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetVehicleUpdateWork",1,"Mezzanine::EntityManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetVehicleUpdateWork",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::VehicleUpdateWorkUnit *)(arg1)->GetVehicleUpdateWork();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__VehicleUpdateWorkUnit,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetInterfaceType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetInterfaceType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetInterfaceType",1,"Mezzanine::EntityManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetInterfaceType",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::EntityManager const *)arg1)->GetInterfaceType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EntityManager_GetImplementationTypeName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::EntityManager::GetImplementationTypeName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::EntityManager::GetImplementationTypeName",1,"Mezzanine::EntityManager const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityManager,0))){
    SWIG_fail_ptr("EntityManager_GetImplementationTypeName",1,SWIGTYPE_p_Mezzanine__EntityManager);
  }
  
  result = ((Mezzanine::EntityManager const *)arg1)->GetImplementationTypeName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EntityManager(void *obj) {
Mezzanine::EntityManager *arg1 = (Mezzanine::EntityManager *) obj;
delete arg1;
}
static int _proxy__wrap_new_EntityManager(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_EntityManager);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_EntityManager_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_EntityManager_methods[]= {
    { "CreateFieldOfForce", _wrap_EntityManager_CreateFieldOfForce},
    { "CreateGravityField", _wrap_EntityManager_CreateGravityField},
    { "CreateGravityWell", _wrap_EntityManager_CreateGravityWell},
    { "CreateRigidDebris", _wrap_EntityManager_CreateRigidDebris},
    { "CreateSoftDebris", _wrap_EntityManager_CreateSoftDebris},
    { "CreateEntity", _wrap_EntityManager_CreateEntity},
    { "GetEntityByIndex", _wrap_EntityManager_GetEntityByIndex},
    { "GetEntityByID", _wrap_EntityManager_GetEntityByID},
    { "GetEntityByName", _wrap_EntityManager_GetEntityByName},
    { "GetNumEntities", _wrap_EntityManager_GetNumEntities},
    { "DestroyEntity", _wrap_EntityManager_DestroyEntity},
    { "DestroyAllEntities", _wrap_EntityManager_DestroyAllEntities},
    { "Pause", _wrap_EntityManager_Pause},
    { "MainLoopInitialize", _wrap_EntityManager_MainLoopInitialize},
    { "Initialize", _wrap_EntityManager_Initialize},
    { "Deinitialize", _wrap_EntityManager_Deinitialize},
    { "GetPublisher", _wrap_EntityManager_GetPublisher},
    { "GetActorUpdateWork", _wrap_EntityManager_GetActorUpdateWork},
    { "GetAreaEffectUpdateWork", _wrap_EntityManager_GetAreaEffectUpdateWork},
    { "GetDebrisUpdateWork", _wrap_EntityManager_GetDebrisUpdateWork},
    { "GetTerrainUpdateWork", _wrap_EntityManager_GetTerrainUpdateWork},
    { "GetVehicleUpdateWork", _wrap_EntityManager_GetVehicleUpdateWork},
    { "GetInterfaceType", _wrap_EntityManager_GetInterfaceType},
    { "GetImplementationTypeName", _wrap_EntityManager_GetImplementationTypeName},
    {0,0}
};
static swig_lua_method swig_EntityManager_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_EntityManager_Sf_SwigStatic_attributes[] = {
    { "ImplementationName", _wrap_EntityManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "InterfaceType", _wrap_EntityManager_InterfaceType_get, SWIG_Lua_set_immutable },
    { "EventEntityCreated", _wrap_EntityManager_EventEntityCreated_get, SWIG_Lua_set_immutable },
    { "EventEntityDestroyed", _wrap_EntityManager_EventEntityDestroyed_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_EntityManager_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_EntityManager_Sf_SwigStatic_methods[]= {
    { "AddEntityFactory", _wrap_EntityManager_AddEntityFactory},
    { "RemoveEntityFactory", _wrap_EntityManager_RemoveEntityFactory},
    { "DestroyEntityFactory", _wrap_EntityManager_DestroyEntityFactory},
    { "DestroyAllEntityFactories", _wrap_EntityManager_DestroyAllEntityFactories},
    { "AddAllDefaultEntityFactories", _wrap_EntityManager_AddAllDefaultEntityFactories},
    {0,0}
};
static swig_lua_class* swig_EntityManager_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_EntityManager_Sf_SwigStatic = {
    "EntityManager",
    swig_EntityManager_Sf_SwigStatic_methods,
    swig_EntityManager_Sf_SwigStatic_attributes,
    swig_EntityManager_Sf_SwigStatic_constants,
    swig_EntityManager_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_EntityManager_bases[] = {0,0};
static const char *swig_EntityManager_base_names[] = {"Mezzanine::WorldManager *",0};
static swig_lua_class _wrap_class_EntityManager = { "EntityManager", "EntityManager", &SWIGTYPE_p_Mezzanine__EntityManager,_proxy__wrap_new_EntityManager, swig_delete_EntityManager, swig_EntityManager_methods, swig_EntityManager_attributes, &swig_EntityManager_Sf_SwigStatic, swig_EntityManager_meta, swig_EntityManager_bases, swig_EntityManager_base_names };

static int _wrap_new_DefaultEntityManagerFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEntityManagerFactory *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultEntityManagerFactory::DefaultEntityManagerFactory",0,0)
  result = (Mezzanine::DefaultEntityManagerFactory *)new Mezzanine::DefaultEntityManagerFactory();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultEntityManagerFactory_GetManagerImplName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEntityManagerFactory *arg1 = (Mezzanine::DefaultEntityManagerFactory *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::DefaultEntityManagerFactory::GetManagerImplName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultEntityManagerFactory::GetManagerImplName",1,"Mezzanine::DefaultEntityManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory,0))){
    SWIG_fail_ptr("DefaultEntityManagerFactory_GetManagerImplName",1,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory);
  }
  
  result = ((Mezzanine::DefaultEntityManagerFactory const *)arg1)->GetManagerImplName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultEntityManagerFactory_GetManagerType(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEntityManagerFactory *arg1 = (Mezzanine::DefaultEntityManagerFactory *) 0 ;
  Mezzanine::ManagerBase::ManagerType result;
  
  SWIG_check_num_args("Mezzanine::DefaultEntityManagerFactory::GetManagerType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultEntityManagerFactory::GetManagerType",1,"Mezzanine::DefaultEntityManagerFactory const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory,0))){
    SWIG_fail_ptr("DefaultEntityManagerFactory_GetManagerType",1,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory);
  }
  
  result = (Mezzanine::ManagerBase::ManagerType)((Mezzanine::DefaultEntityManagerFactory const *)arg1)->GetManagerType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultEntityManagerFactory_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEntityManagerFactory *arg1 = (Mezzanine::DefaultEntityManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultEntityManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultEntityManagerFactory::CreateManager",1,"Mezzanine::DefaultEntityManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultEntityManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::DefaultEntityManagerFactory::CreateManager",3,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory,0))){
    SWIG_fail_ptr("DefaultEntityManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DefaultEntityManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("DefaultEntityManagerFactory_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::NameValuePairList const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultEntityManagerFactory_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEntityManagerFactory *arg1 = (Mezzanine::DefaultEntityManagerFactory *) 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultEntityManagerFactory::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultEntityManagerFactory::CreateManager",1,"Mezzanine::DefaultEntityManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultEntityManagerFactory::CreateManager",2,"Mezzanine::World *");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::DefaultEntityManagerFactory::CreateManager",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory,0))){
    SWIG_fail_ptr("DefaultEntityManagerFactory_CreateManager",1,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("DefaultEntityManagerFactory_CreateManager",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("DefaultEntityManagerFactory_CreateManager",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager(arg2,(Mezzanine::XML::Node const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_DefaultEntityManagerFactory_CreateManager(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DefaultEntityManagerFactory_CreateManager__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_DefaultEntityManagerFactory_CreateManager__SWIG_1(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'DefaultEntityManagerFactory_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::DefaultEntityManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::DefaultEntityManagerFactory::CreateManager(Mezzanine::World *,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_DefaultEntityManagerFactory_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::DefaultEntityManagerFactory *arg1 = (Mezzanine::DefaultEntityManagerFactory *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::DefaultEntityManagerFactory::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::DefaultEntityManagerFactory::DestroyManager",1,"Mezzanine::DefaultEntityManagerFactory *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::DefaultEntityManagerFactory::DestroyManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory,0))){
    SWIG_fail_ptr("DefaultEntityManagerFactory_DestroyManager",1,SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("DefaultEntityManagerFactory_DestroyManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_DefaultEntityManagerFactory(void *obj) {
Mezzanine::DefaultEntityManagerFactory *arg1 = (Mezzanine::DefaultEntityManagerFactory *) obj;
delete arg1;
}
static int _proxy__wrap_new_DefaultEntityManagerFactory(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_DefaultEntityManagerFactory);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_DefaultEntityManagerFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_DefaultEntityManagerFactory_methods[]= {
    { "GetManagerImplName", _wrap_DefaultEntityManagerFactory_GetManagerImplName},
    { "GetManagerType", _wrap_DefaultEntityManagerFactory_GetManagerType},
    { "CreateManager", _wrap_DefaultEntityManagerFactory_CreateManager},
    { "DestroyManager", _wrap_DefaultEntityManagerFactory_DestroyManager},
    {0,0}
};
static swig_lua_method swig_DefaultEntityManagerFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_DefaultEntityManagerFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_DefaultEntityManagerFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_DefaultEntityManagerFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_DefaultEntityManagerFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_DefaultEntityManagerFactory_Sf_SwigStatic = {
    "DefaultEntityManagerFactory",
    swig_DefaultEntityManagerFactory_Sf_SwigStatic_methods,
    swig_DefaultEntityManagerFactory_Sf_SwigStatic_attributes,
    swig_DefaultEntityManagerFactory_Sf_SwigStatic_constants,
    swig_DefaultEntityManagerFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_DefaultEntityManagerFactory_bases[] = {0,0};
static const char *swig_DefaultEntityManagerFactory_base_names[] = {"Mezzanine::WorldManagerFactory *",0};
static swig_lua_class _wrap_class_DefaultEntityManagerFactory = { "DefaultEntityManagerFactory", "DefaultEntityManagerFactory", &SWIGTYPE_p_Mezzanine__DefaultEntityManagerFactory,_proxy__wrap_new_DefaultEntityManagerFactory, swig_delete_DefaultEntityManagerFactory, swig_DefaultEntityManagerFactory_methods, swig_DefaultEntityManagerFactory_attributes, &swig_DefaultEntityManagerFactory_Sf_SwigStatic, swig_DefaultEntityManagerFactory_meta, swig_DefaultEntityManagerFactory_bases, swig_DefaultEntityManagerFactory_base_names };

static int _wrap_Sphere_Center_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Vector3 *arg2 = (Mezzanine::Vector3 *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Center",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Center",1,"Mezzanine::Sphere *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Sphere::Center",2,"Mezzanine::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_Center_set",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Sphere_Center_set",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  if (arg1) (arg1)->Center = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_Center_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Vector3 *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Center",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Center",1,"Mezzanine::Sphere *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_Center_get",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Vector3 *)& ((arg1)->Center);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_Radius_set(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Real arg2 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Radius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Radius",1,"Mezzanine::Sphere *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Sphere::Radius",2,"Mezzanine::Real");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_Radius_set",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  arg2 = (Mezzanine::Real)lua_tonumber(L, 2);
  if (arg1) (arg1)->Radius = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_Radius_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::Sphere::Radius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Radius",1,"Mezzanine::Sphere *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_Radius_get",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Real) ((arg1)->Radius);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",0,0)
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = 0 ;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",1,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("new_Sphere",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere((Mezzanine::Sphere const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = 0 ;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",1,"Mezzanine::Sphere &&");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("new_Sphere",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere((Mezzanine::Sphere &&)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Real arg1 ;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",1,"Mezzanine::Real const");
  arg1 = (Mezzanine::Real const)lua_tonumber(L, 1);
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::Real arg2 ;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",1,"Mezzanine::Vector3 const &");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",2,"Mezzanine::Real const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("new_Sphere",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  arg2 = (Mezzanine::Real const)lua_tonumber(L, 2);
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere((Mezzanine::Vector3 const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  Ogre::Sphere *arg1 = 0 ;
  Mezzanine::Sphere *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::Sphere",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Sphere",1,"Ogre::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Ogre__Sphere,0))){
    SWIG_fail_ptr("new_Sphere",1,SWIGTYPE_p_Ogre__Sphere);
  }
  
  result = (Mezzanine::Sphere *)new Mezzanine::Sphere((Ogre::Sphere const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Sphere,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Sphere(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Sphere__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Sphere__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Sphere__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Ogre__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Sphere__SWIG_5(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Sphere__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Sphere__SWIG_4(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Sphere'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Sphere::Sphere()\n"
    "    Mezzanine::Sphere::Sphere(Mezzanine::Sphere const &)\n"
    "    Mezzanine::Sphere::Sphere(Mezzanine::Sphere &&)\n"
    "    Mezzanine::Sphere::Sphere(Mezzanine::Real const)\n"
    "    Mezzanine::Sphere::Sphere(Mezzanine::Vector3 const &,Mezzanine::Real const)\n"
    "    Mezzanine::Sphere::Sphere(Ogre::Sphere const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Sphere_IsInside(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Vector3 *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::IsInside",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::IsInside",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::IsInside",2,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_IsInside",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("Sphere_IsInside",2,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->IsInside((Mezzanine::Vector3 const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_IsOverlapping__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->IsOverlapping((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_IsOverlapping__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::AxisAlignedBox *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",2,"Mezzanine::AxisAlignedBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__AxisAlignedBox,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",2,SWIGTYPE_p_Mezzanine__AxisAlignedBox);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->IsOverlapping((Mezzanine::AxisAlignedBox const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_IsOverlapping__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Plane *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::IsOverlapping",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::IsOverlapping",2,"Mezzanine::Plane const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Plane,0))){
    SWIG_fail_ptr("Sphere_IsOverlapping",2,SWIGTYPE_p_Mezzanine__Plane);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->IsOverlapping((Mezzanine::Plane const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_IsOverlapping(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Sphere_IsOverlapping__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__AxisAlignedBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Sphere_IsOverlapping__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Sphere, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Plane, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Sphere_IsOverlapping__SWIG_2(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Sphere_IsOverlapping'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Sphere::IsOverlapping(Mezzanine::Sphere const &) const\n"
    "    Mezzanine::Sphere::IsOverlapping(Mezzanine::AxisAlignedBox const &) const\n"
    "    Mezzanine::Sphere::IsOverlapping(Mezzanine::Plane const &) const\n");
  lua_error(L);return 0;
}


static int _wrap_Sphere_Intersects(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Ray *arg2 = 0 ;
  Mezzanine::Sphere::RayTestResult result;
  
  SWIG_check_num_args("Mezzanine::Sphere::Intersects",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::Intersects",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::Intersects",2,"Mezzanine::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_Intersects",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Ray,0))){
    SWIG_fail_ptr("Sphere_Intersects",2,SWIGTYPE_p_Mezzanine__Ray);
  }
  
  result = ((Mezzanine::Sphere const *)arg1)->Intersects((Mezzanine::Ray const &)*arg2);
  {
    Mezzanine::Sphere::RayTestResult * resultptr = new Mezzanine::Sphere::RayTestResult((const Mezzanine::Sphere::RayTestResult &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_MathTools__GeometryRayTestResult,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_ExtractOgreSphere(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Ogre::Sphere *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::ExtractOgreSphere",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::ExtractOgreSphere",1,"Mezzanine::Sphere *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::ExtractOgreSphere",2,"Ogre::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_ExtractOgreSphere",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Ogre__Sphere,0))){
    SWIG_fail_ptr("Sphere_ExtractOgreSphere",2,SWIGTYPE_p_Ogre__Sphere);
  }
  
  (arg1)->ExtractOgreSphere((Ogre::Sphere const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_GetOgreSphere(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Ogre::Sphere result;
  
  SWIG_check_num_args("Mezzanine::Sphere::GetOgreSphere",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::GetOgreSphere",1,"Mezzanine::Sphere const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_GetOgreSphere",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = ((Mezzanine::Sphere const *)arg1)->GetOgreSphere();
  {
    Ogre::Sphere * resultptr = new Ogre::Sphere((const Ogre::Sphere &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Ogre__Sphere,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::ProtoSerialize",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Sphere_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::Sphere const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::Sphere::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::ProtoDeSerialize",1,"Mezzanine::Sphere *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("Sphere_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Sphere::GetSerializableName",0,0)
  result = Mezzanine::Sphere::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere___lt(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::operator <",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::operator <",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::operator <",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___lt",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___lt",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->operator <((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere___le(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::operator <=",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::operator <=",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::operator <=",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___le",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___le",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->operator <=((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Sphere___eq(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) 0 ;
  Mezzanine::Sphere *arg2 = 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Sphere::operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Sphere::operator ==",1,"Mezzanine::Sphere const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::Sphere::operator ==",2,"Mezzanine::Sphere const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___eq",1,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Sphere,0))){
    SWIG_fail_ptr("Sphere___eq",2,SWIGTYPE_p_Mezzanine__Sphere);
  }
  
  result = (Mezzanine::Boole)((Mezzanine::Sphere const *)arg1)->operator ==((Mezzanine::Sphere const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Sphere(void *obj) {
Mezzanine::Sphere *arg1 = (Mezzanine::Sphere *) obj;
delete arg1;
}
static int _proxy__wrap_new_Sphere(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Sphere);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Sphere_attributes[] = {
    { "Center", _wrap_Sphere_Center_get, _wrap_Sphere_Center_set },
    { "Radius", _wrap_Sphere_Radius_get, _wrap_Sphere_Radius_set },
    {0,0,0}
};
static swig_lua_method swig_Sphere_methods[]= {
    { "IsInside", _wrap_Sphere_IsInside},
    { "IsOverlapping", _wrap_Sphere_IsOverlapping},
    { "Intersects", _wrap_Sphere_Intersects},
    { "ExtractOgreSphere", _wrap_Sphere_ExtractOgreSphere},
    { "GetOgreSphere", _wrap_Sphere_GetOgreSphere},
    { "ProtoSerialize", _wrap_Sphere_ProtoSerialize},
    { "ProtoDeSerialize", _wrap_Sphere_ProtoDeSerialize},
    { "__lt", _wrap_Sphere___lt},
    { "__le", _wrap_Sphere___le},
    { "__eq", _wrap_Sphere___eq},
    {0,0}
};
static swig_lua_method swig_Sphere_meta[] = {
    { "__lt", _wrap_Sphere___lt},
    { "__le", _wrap_Sphere___le},
    { "__eq", _wrap_Sphere___eq},
    {0,0}
};

static swig_lua_attribute swig_Sphere_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Sphere_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Sphere_Sf_SwigStatic_methods[]= {
    { "GetSerializableName", _wrap_Sphere_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_Sphere_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Sphere_Sf_SwigStatic = {
    "Sphere",
    swig_Sphere_Sf_SwigStatic_methods,
    swig_Sphere_Sf_SwigStatic_attributes,
    swig_Sphere_Sf_SwigStatic_constants,
    swig_Sphere_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Sphere_bases[] = {0};
static const char *swig_Sphere_base_names[] = {0};
static swig_lua_class _wrap_class_Sphere = { "Sphere", "Sphere", &SWIGTYPE_p_Mezzanine__Sphere,_proxy__wrap_new_Sphere, swig_delete_Sphere, swig_Sphere_methods, swig_Sphere_attributes, &swig_Sphere_Sf_SwigStatic, swig_Sphere_meta, swig_Sphere_bases, swig_Sphere_base_names };

static int _wrap_Blank_get(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::Blank",0,0)
  result = (Mezzanine::String *) &Mezzanine::StringTools::Blank;
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsDigit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsDigit",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsDigit",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsDigit(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsLowerAlphaLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsLowerAlphaLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsLowerAlphaLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsLowerAlphaLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsUpperAlphaLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsUpperAlphaLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsUpperAlphaLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsUpperAlphaLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsAlphaLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsAlphaLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsAlphaLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsAlphaLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsLowerHexLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsLowerHexLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsLowerHexLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsLowerHexLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsUpperHexLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsUpperHexLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsUpperHexLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsUpperHexLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsHexLetter(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsHexLetter",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsHexLetter",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsHexLetter(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsHexDigit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsHexDigit",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsHexDigit",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsHexDigit(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_IsAlphanumeric(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Char8 arg1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::IsAlphanumeric",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::IsAlphanumeric",1,"Mezzanine::Char8 const");
  arg1 = (lua_tostring(L, 1))[0];
  result = (Mezzanine::Boole)Mezzanine::StringTools::IsAlphanumeric(arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trim__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::Boole arg3 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::Trim",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Trim",1,"Mezzanine::String &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::StringTools::Trim",2,"Mezzanine::Boole");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::StringTools::Trim",3,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Trim",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  Mezzanine::StringTools::Trim(*arg1,arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trim__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::Trim",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Trim",1,"Mezzanine::String &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::StringTools::Trim",2,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Trim",1,SWIGTYPE_p_std__string);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  Mezzanine::StringTools::Trim(*arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trim__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::Trim",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Trim",1,"Mezzanine::String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("Trim",1,SWIGTYPE_p_std__string);
  }
  
  Mezzanine::StringTools::Trim(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Trim(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Trim__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_Trim__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_std__string, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Trim__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Trim'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::StringTools::Trim(Mezzanine::String &,Mezzanine::Boole,Mezzanine::Boole)\n"
    "    Mezzanine::StringTools::Trim(Mezzanine::String &,Mezzanine::Boole)\n"
    "    Mezzanine::StringTools::Trim(Mezzanine::String &)\n");
  lua_error(L);return 0;
}


static int _wrap_Split__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Whole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("Mezzanine::StringTools::Split",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Split",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::StringTools::Split",2,"Mezzanine::String const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("Mezzanine::StringTools::Split",3,"Mezzanine::Whole const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  SWIG_contract_assert((lua_tonumber(L,3)>=0),"number must not be negative")
  arg3 = (Mezzanine::Whole const)lua_tonumber(L, 3);
  result = Mezzanine::StringTools::Split((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  {
    Mezzanine::StringVector * resultptr = new Mezzanine::StringVector((const Mezzanine::StringVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Split__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("Mezzanine::StringTools::Split",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Split",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::StringTools::Split",2,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  result = Mezzanine::StringTools::Split((std::string const &)*arg1,(std::string const &)*arg2);
  {
    Mezzanine::StringVector * resultptr = new Mezzanine::StringVector((const Mezzanine::StringVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Split__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  SwigValueWrapper< std::vector< std::string > > result;
  
  SWIG_check_num_args("Mezzanine::StringTools::Split",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::Split",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::Split((std::string const &)*arg1);
  {
    Mezzanine::StringVector * resultptr = new Mezzanine::StringVector((const Mezzanine::StringVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__string_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Split(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_Split__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Split__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Split__SWIG_0(L);
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Split'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::StringTools::Split(Mezzanine::String const &,Mezzanine::String const &,Mezzanine::Whole const)\n"
    "    Mezzanine::StringTools::Split(Mezzanine::String const &,Mezzanine::String const &)\n"
    "    Mezzanine::StringTools::Split(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ToUpperCase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::ToUpperCase",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ToUpperCase",1,"Mezzanine::String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ToUpperCase",1,SWIGTYPE_p_std__string);
  }
  
  Mezzanine::StringTools::ToUpperCase(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_UpperCaseCopy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String arg1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::UpperCaseCopy",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::UpperCaseCopy",1,"Mezzanine::String");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = Mezzanine::StringTools::UpperCaseCopy(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToLowerCase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::ToLowerCase",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ToLowerCase",1,"Mezzanine::String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ToLowerCase",1,SWIGTYPE_p_std__string);
  }
  
  Mezzanine::StringTools::ToLowerCase(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LowerCaseCopy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String arg1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::LowerCaseCopy",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::LowerCaseCopy",1,"Mezzanine::String");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = Mezzanine::StringTools::LowerCaseCopy(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ToCamelCase(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::ToCamelCase",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ToCamelCase",1,"Mezzanine::String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("ToCamelCase",1,SWIGTYPE_p_std__string);
  }
  
  Mezzanine::StringTools::ToCamelCase(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CamelCaseCopy(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String arg1 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::CamelCaseCopy",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::CamelCaseCopy",1,"Mezzanine::String");
  (&arg1)->assign(lua_tostring(L,1),lua_rawlen(L,1));
  result = Mezzanine::StringTools::CamelCaseCopy(arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_StartsWith(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::StartsWith",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::StartsWith",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::StringTools::StartsWith",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::StringTools::StartsWith",3,"Mezzanine::Boole const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Mezzanine::Boole)Mezzanine::StringTools::StartsWith((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EndsWith(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::Boole arg3 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp2 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::EndsWith",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::EndsWith",1,"Mezzanine::String const &");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::StringTools::EndsWith",2,"Mezzanine::String const &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("Mezzanine::StringTools::EndsWith",3,"Mezzanine::Boole const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (Mezzanine::Boole)Mezzanine::StringTools::EndsWith((std::string const &)*arg1,(std::string const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RemoveDuplicateWhitespaces(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  
  SWIG_check_num_args("Mezzanine::StringTools::RemoveDuplicateWhitespaces",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::RemoveDuplicateWhitespaces",1,"Mezzanine::String &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_std__string,0))){
    SWIG_fail_ptr("RemoveDuplicateWhitespaces",1,SWIGTYPE_p_std__string);
  }
  
  Mezzanine::StringTools::RemoveDuplicateWhitespaces(*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToVector2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Vector2 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToVector2",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToVector2",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::ConvertToVector2((std::string const &)*arg1);
  {
    Mezzanine::Vector2 * resultptr = new Mezzanine::Vector2((const Mezzanine::Vector2 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector2,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector2 *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToString",1,"Mezzanine::Vector2 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector2,0))){
    SWIG_fail_ptr("ConvertToString",1,SWIGTYPE_p_Mezzanine__Vector2);
  }
  
  result = Mezzanine::StringTools::ConvertToString((Mezzanine::Vector2 const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToVector3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Vector3 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToVector3",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToVector3",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::ConvertToVector3((std::string const &)*arg1);
  {
    Mezzanine::Vector3 * resultptr = new Mezzanine::Vector3((const Mezzanine::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Vector3 *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToString",1,"Mezzanine::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Vector3,0))){
    SWIG_fail_ptr("ConvertToString",1,SWIGTYPE_p_Mezzanine__Vector3);
  }
  
  result = Mezzanine::StringTools::ConvertToString((Mezzanine::Vector3 const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Quaternion result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToQuaternion",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToQuaternion",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::ConvertToQuaternion((std::string const &)*arg1);
  {
    Mezzanine::Quaternion * resultptr = new Mezzanine::Quaternion((const Mezzanine::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Quaternion *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToString",1,"Mezzanine::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Quaternion,0))){
    SWIG_fail_ptr("ConvertToString",1,SWIGTYPE_p_Mezzanine__Quaternion);
  }
  
  result = Mezzanine::StringTools::ConvertToString((Mezzanine::Quaternion const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToColourValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToColourValue",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToColourValue",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::ConvertToColourValue((std::string const &)*arg1);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToString",1,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ConvertToString",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = Mezzanine::StringTools::ConvertToString((Mezzanine::ColourValue const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToString(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector2, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConvertToString__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConvertToString__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConvertToString__SWIG_2(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__ColourValue, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_ConvertToString__SWIG_3(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConvertToString'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::StringTools::ConvertToString(Mezzanine::Vector2 const &)\n"
    "    Mezzanine::StringTools::ConvertToString(Mezzanine::Vector3 const &)\n"
    "    Mezzanine::StringTools::ConvertToString(Mezzanine::Quaternion const &)\n"
    "    Mezzanine::StringTools::ConvertToString(Mezzanine::ColourValue const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ConvertHexToColourValue(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::ColourValue result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertHexToColourValue",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertHexToColourValue",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = Mezzanine::StringTools::ConvertHexToColourValue((std::string const &)*arg1);
  {
    Mezzanine::ColourValue * resultptr = new Mezzanine::ColourValue((const Mezzanine::ColourValue &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Mezzanine__ColourValue,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToHexString(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::ColourValue *arg1 = 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToHexString",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToHexString",1,"Mezzanine::ColourValue const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__ColourValue,0))){
    SWIG_fail_ptr("ConvertToHexString",1,SWIGTYPE_p_Mezzanine__ColourValue);
  }
  
  result = Mezzanine::StringTools::ConvertToHexString((Mezzanine::ColourValue const &)*arg1);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToBool__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Boole arg2 ;
  Mezzanine::String temp1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToBool",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToBool",1,"Mezzanine::String const &");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToBool",2,"Mezzanine::Boole const");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (Mezzanine::Boole)Mezzanine::StringTools::ConvertToBool((std::string const &)*arg1,arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToBool__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToBool",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToBool",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Boole)Mezzanine::StringTools::ConvertToBool((std::string const &)*arg1);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToBool(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_ConvertToBool__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_ConvertToBool__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'ConvertToBool'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::StringTools::ConvertToBool(Mezzanine::String const &,Mezzanine::Boole const)\n"
    "    Mezzanine::StringTools::ConvertToBool(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_ConvertToReal(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Real result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToReal",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToReal",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Real)Mezzanine::StringTools::ConvertToReal((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToInteger(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Integer result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToInteger",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToInteger",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Integer)Mezzanine::StringTools::ConvertToInteger((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToWhole(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToWhole",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToWhole",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Whole)Mezzanine::StringTools::ConvertToWhole((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToInt8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Int8 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToInt8",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToInt8",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Int8)Mezzanine::StringTools::ConvertToInt8((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToUInt8(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::UInt8 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToUInt8",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToUInt8",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::UInt8)Mezzanine::StringTools::ConvertToUInt8((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToInt16(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Int16 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToInt16",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToInt16",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Int16)Mezzanine::StringTools::ConvertToInt16((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToUInt16(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::UInt16 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToUInt16",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToUInt16",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::UInt16)Mezzanine::StringTools::ConvertToUInt16((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToInt32(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::Int32 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToInt32",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToInt32",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::Int32)Mezzanine::StringTools::ConvertToInt32((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_ConvertToUInt32(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::UInt32 result;
  
  SWIG_check_num_args("Mezzanine::StringTools::ConvertToUInt32",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::StringTools::ConvertToUInt32",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::UInt32)Mezzanine::StringTools::ConvertToUInt32((std::string const &)*arg1);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Timer(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Timer::Timer",0,0)
  result = (Mezzanine::Timer *)new Mezzanine::Timer();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Timer,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_SetCurrentTime(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Timer::SetCurrentTime",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::SetCurrentTime",1,"Mezzanine::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Timer::SetCurrentTime",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_SetCurrentTime",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->SetCurrentTime(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_SetCurrentTimeInMilliseconds(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Timer::SetCurrentTimeInMilliseconds",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::SetCurrentTimeInMilliseconds",1,"Mezzanine::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Timer::SetCurrentTimeInMilliseconds",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_SetCurrentTimeInMilliseconds",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->SetCurrentTimeInMilliseconds(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_GetCurrentTime(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Timer::GetCurrentTime",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::GetCurrentTime",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_GetCurrentTime",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  result = (Mezzanine::Whole)(arg1)->GetCurrentTime();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_GetCurrentTimeInMilliseconds(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole result;
  
  SWIG_check_num_args("Mezzanine::Timer::GetCurrentTimeInMilliseconds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::GetCurrentTimeInMilliseconds",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_GetCurrentTimeInMilliseconds",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  result = (Mezzanine::Whole)(arg1)->GetCurrentTimeInMilliseconds();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_SetCountMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::CountMode arg2 ;
  
  SWIG_check_num_args("Mezzanine::Timer::SetCountMode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::SetCountMode",1,"Mezzanine::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Timer::SetCountMode",2,"Mezzanine::CountMode const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_SetCountMode",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  arg2 = (Mezzanine::CountMode const)(int)lua_tonumber(L, 2);
  (arg1)->SetCountMode(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_GetCountMode(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::CountMode result;
  
  SWIG_check_num_args("Mezzanine::Timer::GetCountMode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::GetCountMode",1,"Mezzanine::Timer const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_GetCountMode",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  result = (Mezzanine::CountMode)((Mezzanine::Timer const *)arg1)->GetCountMode();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Start(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Timer::Start",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::Start",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_Start",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  (arg1)->Start();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Stop(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Timer::Stop",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::Stop",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_Stop",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  (arg1)->Stop();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Reset__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::Timer::Reset",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::Reset",1,"Mezzanine::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Timer::Reset",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_Reset",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->Reset(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Reset__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  
  SWIG_check_num_args("Mezzanine::Timer::Reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::Reset",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_Reset",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  (arg1)->Reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_Reset(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Timer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Timer_Reset__SWIG_1(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__Timer, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_Timer_Reset__SWIG_0(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'Timer_Reset'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Timer::Reset(Mezzanine::Whole const)\n"
    "    Mezzanine::Timer::Reset()\n");
  lua_error(L);return 0;
}


static int _wrap_Timer_IsTicking(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Timer::IsTicking",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::IsTicking",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_IsTicking",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  result = (Mezzanine::Boole)(arg1)->IsTicking();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_IsStopped(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::Timer::IsStopped",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::IsStopped",1,"Mezzanine::Timer *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_IsStopped",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  result = (Mezzanine::Boole)(arg1)->IsStopped();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Timer_GetTimeAsText(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::Timer *arg1 = (Mezzanine::Timer *) 0 ;
  Mezzanine::TimeFormat arg2 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::Timer::GetTimeAsText",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Timer::GetTimeAsText",1,"Mezzanine::Timer *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::Timer::GetTimeAsText",2,"Mezzanine::TimeFormat const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__Timer,0))){
    SWIG_fail_ptr("Timer_GetTimeAsText",1,SWIGTYPE_p_Mezzanine__Timer);
  }
  
  arg2 = (Mezzanine::TimeFormat const)(int)lua_tonumber(L, 2);
  result = (arg1)->GetTimeAsText(arg2);
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Timer(void *obj) {
Mezzanine::Timer *arg1 = (Mezzanine::Timer *) obj;
delete arg1;
}
static int _proxy__wrap_new_Timer(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Timer);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Timer_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Timer_methods[]= {
    { "SetCurrentTime", _wrap_Timer_SetCurrentTime},
    { "SetCurrentTimeInMilliseconds", _wrap_Timer_SetCurrentTimeInMilliseconds},
    { "GetCurrentTime", _wrap_Timer_GetCurrentTime},
    { "GetCurrentTimeInMilliseconds", _wrap_Timer_GetCurrentTimeInMilliseconds},
    { "SetCountMode", _wrap_Timer_SetCountMode},
    { "GetCountMode", _wrap_Timer_GetCountMode},
    { "Start", _wrap_Timer_Start},
    { "Stop", _wrap_Timer_Stop},
    { "Reset", _wrap_Timer_Reset},
    { "IsTicking", _wrap_Timer_IsTicking},
    { "IsStopped", _wrap_Timer_IsStopped},
    { "GetTimeAsText", _wrap_Timer_GetTimeAsText},
    {0,0}
};
static swig_lua_method swig_Timer_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Timer_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Timer_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Timer_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Timer_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Timer_Sf_SwigStatic = {
    "Timer",
    swig_Timer_Sf_SwigStatic_methods,
    swig_Timer_Sf_SwigStatic_attributes,
    swig_Timer_Sf_SwigStatic_constants,
    swig_Timer_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Timer_bases[] = {0};
static const char *swig_Timer_base_names[] = {0};
static swig_lua_class _wrap_class_Timer = { "Timer", "Timer", &SWIGTYPE_p_Mezzanine__Timer,_proxy__wrap_new_Timer, swig_delete_Timer, swig_Timer_methods, swig_Timer_attributes, &swig_Timer_Sf_SwigStatic, swig_Timer_meta, swig_Timer_bases, swig_Timer_base_names };

static int _wrap_new_Vehicle__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Vehicle *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vehicle::Vehicle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::Vehicle::Vehicle",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_Vehicle",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Vehicle *)new Mezzanine::Vehicle(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vehicle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vehicle__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::EntityID *arg1 = 0 ;
  Mezzanine::World *arg2 = (Mezzanine::World *) 0 ;
  Mezzanine::Vehicle *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::Vehicle::Vehicle",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::Vehicle::Vehicle",1,"Mezzanine::EntityID const &");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::Vehicle::Vehicle",2,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__EntityID,0))){
    SWIG_fail_ptr("new_Vehicle",1,SWIGTYPE_p_Mezzanine__EntityID);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("new_Vehicle",2,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::Vehicle *)new Mezzanine::Vehicle((Mezzanine::EntityID const &)*arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__Vehicle,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Vehicle(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Vehicle__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__EntityID, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Vehicle__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_Vehicle'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::Vehicle::Vehicle(Mezzanine::World *)\n"
    "    Mezzanine::Vehicle::Vehicle(Mezzanine::EntityID const &,Mezzanine::World *)\n");
  lua_error(L);return 0;
}


static void swig_delete_Vehicle(void *obj) {
Mezzanine::Vehicle *arg1 = (Mezzanine::Vehicle *) obj;
delete arg1;
}
static int _proxy__wrap_new_Vehicle(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_Vehicle);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_Vehicle_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_Vehicle_methods[]= {
    {0,0}
};
static swig_lua_method swig_Vehicle_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_Vehicle_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_Vehicle_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_Vehicle_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_Vehicle_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_Vehicle_Sf_SwigStatic = {
    "Vehicle",
    swig_Vehicle_Sf_SwigStatic_methods,
    swig_Vehicle_Sf_SwigStatic_attributes,
    swig_Vehicle_Sf_SwigStatic_constants,
    swig_Vehicle_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_Vehicle_bases[] = {0,0};
static const char *swig_Vehicle_base_names[] = {"Mezzanine::Entity *",0};
static swig_lua_class _wrap_class_Vehicle = { "Vehicle", "Vehicle", &SWIGTYPE_p_Mezzanine__Vehicle,_proxy__wrap_new_Vehicle, swig_delete_Vehicle, swig_Vehicle_methods, swig_Vehicle_attributes, &swig_Vehicle_Sf_SwigStatic, swig_Vehicle_meta, swig_Vehicle_bases, swig_Vehicle_base_names };

static void swig_delete_VehicleFactory(void *obj) {
Mezzanine::VehicleFactory *arg1 = (Mezzanine::VehicleFactory *) obj;
delete arg1;
}
static swig_lua_attribute swig_VehicleFactory_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_VehicleFactory_methods[]= {
    {0,0}
};
static swig_lua_method swig_VehicleFactory_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_VehicleFactory_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_VehicleFactory_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_VehicleFactory_Sf_SwigStatic_methods[]= {
    {0,0}
};
static swig_lua_class* swig_VehicleFactory_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_VehicleFactory_Sf_SwigStatic = {
    "VehicleFactory",
    swig_VehicleFactory_Sf_SwigStatic_methods,
    swig_VehicleFactory_Sf_SwigStatic_attributes,
    swig_VehicleFactory_Sf_SwigStatic_constants,
    swig_VehicleFactory_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_VehicleFactory_bases[] = {0,0};
static const char *swig_VehicleFactory_base_names[] = {"Mezzanine::EntityFactory *",0};
static swig_lua_class _wrap_class_VehicleFactory = { "VehicleFactory", "VehicleFactory", &SWIGTYPE_p_Mezzanine__VehicleFactory,0, swig_delete_VehicleFactory, swig_VehicleFactory_methods, swig_VehicleFactory_attributes, &swig_VehicleFactory_Sf_SwigStatic, swig_VehicleFactory_meta, swig_VehicleFactory_bases, swig_VehicleFactory_base_names };

static int _wrap_new_World__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::World",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::World",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  result = (Mezzanine::World *)new Mezzanine::World((Mezzanine::String const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_World__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::World::WorldManagerContainer *arg2 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::World",2,2)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::World",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::World",2,"Mezzanine::World::WorldManagerContainer const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t,0))){
    SWIG_fail_ptr("new_World",2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t);
  }
  
  result = (Mezzanine::World *)new Mezzanine::World((Mezzanine::String const &)*arg1,(Mezzanine::World::WorldManagerContainer const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_World__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::Physics::ManagerConstructionInfo *arg2 = 0 ;
  Mezzanine::String *arg3 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp3 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::World",3,3)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::World",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::World",2,"Mezzanine::Physics::ManagerConstructionInfo const &");
  if(!lua_isstring(L,3)) SWIG_fail_arg("Mezzanine::World::World",3,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("new_World",2,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  temp3.assign(lua_tostring(L,3),lua_rawlen(L,3)); arg3=&temp3;
  result = (Mezzanine::World *)new Mezzanine::World((Mezzanine::String const &)*arg1,(Mezzanine::Physics::ManagerConstructionInfo const &)*arg2,(Mezzanine::String const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_World__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::World::WorldManagerContainer *arg2 = 0 ;
  Mezzanine::Physics::ManagerConstructionInfo *arg3 = 0 ;
  Mezzanine::String *arg4 = 0 ;
  Mezzanine::String temp1 ;
  Mezzanine::String temp4 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::World",4,4)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::World",1,"Mezzanine::String const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::World",2,"Mezzanine::World::WorldManagerContainer const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::World::World",3,"Mezzanine::Physics::ManagerConstructionInfo const &");
  if(!lua_isstring(L,4)) SWIG_fail_arg("Mezzanine::World::World",4,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t,0))){
    SWIG_fail_ptr("new_World",2,SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo,0))){
    SWIG_fail_ptr("new_World",3,SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo);
  }
  
  temp4.assign(lua_tostring(L,4),lua_rawlen(L,4)); arg4=&temp4;
  result = (Mezzanine::World *)new Mezzanine::World((Mezzanine::String const &)*arg1,(Mezzanine::World::WorldManagerContainer const &)*arg2,(Mezzanine::Physics::ManagerConstructionInfo const &)*arg3,(Mezzanine::String const &)*arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_World__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::XML::Node *arg1 = 0 ;
  Mezzanine::World *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::World",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("Mezzanine::World::World",1,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("new_World",1,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::World *)new Mezzanine::World((Mezzanine::XML::Node const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__World,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_World(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_World__SWIG_4(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_World__SWIG_0(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_World__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isstring(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_World__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__Physics__ManagerConstructionInfo, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isstring(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_World__SWIG_3(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'new_World'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::World::World(Mezzanine::String const &)\n"
    "    Mezzanine::World::World(Mezzanine::String const &,Mezzanine::World::WorldManagerContainer const &)\n"
    "    Mezzanine::World::World(Mezzanine::String const &,Mezzanine::Physics::ManagerConstructionInfo const &,Mezzanine::String const &)\n"
    "    Mezzanine::World::World(Mezzanine::String const &,Mezzanine::World::WorldManagerContainer const &,Mezzanine::Physics::ManagerConstructionInfo const &,Mezzanine::String const &)\n"
    "    Mezzanine::World::World(Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_World_GetName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::GetName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::GetName",1,"Mezzanine::World const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_GetName",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::String *) &((Mezzanine::World const *)arg1)->GetName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_PauseWorld(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Boole arg2 ;
  
  SWIG_check_num_args("Mezzanine::World::PauseWorld",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::PauseWorld",1,"Mezzanine::World *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("Mezzanine::World::PauseWorld",2,"Mezzanine::Boole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_PauseWorld",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->PauseWorld(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_Clear(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::Clear",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::Clear",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_Clear",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->Clear();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_Initialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::Initialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::Initialize",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_Initialize",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->Initialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_Deinitialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::Deinitialize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::Deinitialize",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_Deinitialize",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->Deinitialize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_PreMainLoopInit(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::PreMainLoopInit",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::PreMainLoopInit",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_PreMainLoopInit",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->PreMainLoopInit();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_CreateManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::CreateManager",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::CreateManager",1,"Mezzanine::World *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::World::CreateManager",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::World::CreateManager",3,"Mezzanine::NameValuePairList const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::World::CreateManager",4,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_CreateManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("World_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager((Mezzanine::String const &)*arg2,(Mezzanine::NameValuePairList const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_CreateManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::NameValuePairList *arg3 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::CreateManager",1,"Mezzanine::World *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::World::CreateManager",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::World::CreateManager",3,"Mezzanine::NameValuePairList const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_CreateManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t,0))){
    SWIG_fail_ptr("World_CreateManager",3,SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager((Mezzanine::String const &)*arg2,(Mezzanine::NameValuePairList const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_CreateManager__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::Boole arg4 ;
  Mezzanine::String temp2 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::CreateManager",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::CreateManager",1,"Mezzanine::World *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::World::CreateManager",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::World::CreateManager",3,"Mezzanine::XML::Node const &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("Mezzanine::World::CreateManager",4,"Mezzanine::Boole");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_CreateManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_CreateManager",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager((Mezzanine::String const &)*arg2,(Mezzanine::XML::Node const &)*arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_CreateManager__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String *arg2 = 0 ;
  Mezzanine::XML::Node *arg3 = 0 ;
  Mezzanine::String temp2 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::CreateManager",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::CreateManager",1,"Mezzanine::World *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("Mezzanine::World::CreateManager",2,"Mezzanine::String const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("Mezzanine::World::CreateManager",3,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_CreateManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  temp2.assign(lua_tostring(L,2),lua_rawlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_CreateManager",3,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  result = (Mezzanine::WorldManager *)(arg1)->CreateManager((Mezzanine::String const &)*arg2,(Mezzanine::XML::Node const &)*arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_CreateManager(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_World_CreateManager__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_World_CreateManager__SWIG_3(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_Mezzanine__XML__Node, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_World_CreateManager__SWIG_2(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__listT_std__pairT_std__string_std__string_t_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_World_CreateManager__SWIG_0(L);
          }
        }
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'World_CreateManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::World::CreateManager(Mezzanine::String const &,Mezzanine::NameValuePairList const &,Mezzanine::Boole)\n"
    "    Mezzanine::World::CreateManager(Mezzanine::String const &,Mezzanine::NameValuePairList const &)\n"
    "    Mezzanine::World::CreateManager(Mezzanine::String const &,Mezzanine::XML::Node const &,Mezzanine::Boole)\n"
    "    Mezzanine::World::CreateManager(Mezzanine::String const &,Mezzanine::XML::Node const &)\n");
  lua_error(L);return 0;
}


static int _wrap_World_DestroyManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::DestroyManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::DestroyManager",1,"Mezzanine::World *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::World::DestroyManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_DestroyManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("World_DestroyManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->DestroyManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_DestroyAllManagers(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::DestroyAllManagers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::DestroyAllManagers",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_DestroyAllManagers",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->DestroyAllManagers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_AddManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  Mezzanine::Boole result;
  
  SWIG_check_num_args("Mezzanine::World::AddManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::AddManager",1,"Mezzanine::World *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::World::AddManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_AddManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("World_AddManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  result = (Mezzanine::Boole)(arg1)->AddManager(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_GetManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::WorldManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::GetManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::GetManager",1,"Mezzanine::World const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::World::GetManager",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_GetManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::WorldManager *)((Mezzanine::World const *)arg1)->GetManager(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__WorldManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_GetEntityManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::EntityManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::GetEntityManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::GetEntityManager",1,"Mezzanine::World const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::World::GetEntityManager",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_GetEntityManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::EntityManager *)((Mezzanine::World const *)arg1)->GetEntityManager(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_GetComponentManager(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Whole arg2 ;
  Mezzanine::EntityComponentManager *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::GetComponentManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::GetComponentManager",1,"Mezzanine::World const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::World::GetComponentManager",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_GetComponentManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  result = (Mezzanine::EntityComponentManager *)((Mezzanine::World const *)arg1)->GetComponentManager(arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Mezzanine__EntityComponentManager,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManager__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::WorldManager *arg2 = (Mezzanine::WorldManager *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::RemoveManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::RemoveManager",1,"Mezzanine::World *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("Mezzanine::World::RemoveManager",2,"Mezzanine::WorldManager *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_RemoveManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__WorldManager,0))){
    SWIG_fail_ptr("World_RemoveManager",2,SWIGTYPE_p_Mezzanine__WorldManager);
  }
  
  (arg1)->RemoveManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManager__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::Whole arg2 ;
  
  SWIG_check_num_args("Mezzanine::World::RemoveManager",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::RemoveManager",1,"Mezzanine::World *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("Mezzanine::World::RemoveManager",2,"Mezzanine::Whole const");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_RemoveManager",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  SWIG_contract_assert((lua_tonumber(L,2)>=0),"number must not be negative")
  arg2 = (Mezzanine::Whole const)lua_tonumber(L, 2);
  (arg1)->RemoveManager(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManager(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (SWIG_isptrtype(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldManager, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_World_RemoveManager__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__World, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_World_RemoveManager__SWIG_1(L);
      }
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'World_RemoveManager'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::World::RemoveManager(Mezzanine::WorldManager *)\n"
    "    Mezzanine::World::RemoveManager(Mezzanine::Whole const)\n");
  lua_error(L);return 0;
}


static int _wrap_World_RemoveAllManagers(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::RemoveAllManagers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::RemoveAllManagers",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_RemoveAllManagers",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  (arg1)->RemoveAllManagers();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_GetWorldManagers(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::World::WorldManagerContainer *result = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::GetWorldManagers",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::GetWorldManagers",1,"Mezzanine::World *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_GetWorldManagers",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = (Mezzanine::World::WorldManagerContainer *) &(arg1)->GetWorldManagers();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_Mezzanine__WorldManager_p_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_AddManagerFactory(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::AddManagerFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::AddManagerFactory",1,"Mezzanine::WorldManagerFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("World_AddManagerFactory",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  Mezzanine::World::AddManagerFactory(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManagerFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::RemoveManagerFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::RemoveManagerFactory",1,"Mezzanine::WorldManagerFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("World_RemoveManagerFactory",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  Mezzanine::World::RemoveManagerFactory(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManagerFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  
  SWIG_check_num_args("Mezzanine::World::RemoveManagerFactory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::RemoveManagerFactory",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  Mezzanine::World::RemoveManagerFactory((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_RemoveManagerFactory(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_World_RemoveManagerFactory__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_World_RemoveManagerFactory__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'World_RemoveManagerFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::World::RemoveManagerFactory(Mezzanine::WorldManagerFactory *)\n"
    "    Mezzanine::World::RemoveManagerFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_World_DestroyManagerFactory__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::WorldManagerFactory *arg1 = (Mezzanine::WorldManagerFactory *) 0 ;
  
  SWIG_check_num_args("Mezzanine::World::DestroyManagerFactory",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::DestroyManagerFactory",1,"Mezzanine::WorldManagerFactory *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__WorldManagerFactory,0))){
    SWIG_fail_ptr("World_DestroyManagerFactory",1,SWIGTYPE_p_Mezzanine__WorldManagerFactory);
  }
  
  Mezzanine::World::DestroyManagerFactory(arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_DestroyManagerFactory__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String *arg1 = 0 ;
  Mezzanine::String temp1 ;
  
  SWIG_check_num_args("Mezzanine::World::DestroyManagerFactory",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("Mezzanine::World::DestroyManagerFactory",1,"Mezzanine::String const &");
  temp1.assign(lua_tostring(L,1),lua_rawlen(L,1)); arg1=&temp1;
  Mezzanine::World::DestroyManagerFactory((std::string const &)*arg1);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_DestroyManagerFactory(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_Mezzanine__WorldManagerFactory, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_World_DestroyManagerFactory__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_World_DestroyManagerFactory__SWIG_1(L);
    }
  }
  
  SWIG_Lua_pusherrstring(L,"Wrong arguments for overloaded function 'World_DestroyManagerFactory'\n"
    "  Possible C/C++ prototypes are:\n"
    "    Mezzanine::World::DestroyManagerFactory(Mezzanine::WorldManagerFactory *)\n"
    "    Mezzanine::World::DestroyManagerFactory(Mezzanine::String const &)\n");
  lua_error(L);return 0;
}


static int _wrap_World_DestroyAllManagerFactories(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("Mezzanine::World::DestroyAllManagerFactories",0,0)
  Mezzanine::World::DestroyAllManagerFactories();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_AddAllEngineDefaultManagerFactories(lua_State* L) {
  int SWIG_arg = 0;
  
  SWIG_check_num_args("Mezzanine::World::AddAllEngineDefaultManagerFactories",0,0)
  Mezzanine::World::AddAllEngineDefaultManagerFactories();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_ProtoSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::ProtoSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::ProtoSerialize",1,"Mezzanine::World const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::ProtoSerialize",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_ProtoSerialize",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_ProtoSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::World const *)arg1)->ProtoSerialize(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_ProtoSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::ProtoSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::ProtoSerializeProperties",1,"Mezzanine::World const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::ProtoSerializeProperties",2,"Mezzanine::XML::Node &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_ProtoSerializeProperties",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_ProtoSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  ((Mezzanine::World const *)arg1)->ProtoSerializeProperties(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_ProtoDeSerialize(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::ProtoDeSerialize",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::ProtoDeSerialize",1,"Mezzanine::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::ProtoDeSerialize",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_ProtoDeSerialize",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_ProtoDeSerialize",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerialize((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_ProtoDeSerializeProperties(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::XML::Node *arg2 = 0 ;
  
  SWIG_check_num_args("Mezzanine::World::ProtoDeSerializeProperties",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::ProtoDeSerializeProperties",1,"Mezzanine::World *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("Mezzanine::World::ProtoDeSerializeProperties",2,"Mezzanine::XML::Node const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_ProtoDeSerializeProperties",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Mezzanine__XML__Node,0))){
    SWIG_fail_ptr("World_ProtoDeSerializeProperties",2,SWIGTYPE_p_Mezzanine__XML__Node);
  }
  
  (arg1)->ProtoDeSerializeProperties((Mezzanine::XML::Node const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_GetDerivedSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::World *arg1 = (Mezzanine::World *) 0 ;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::World::GetDerivedSerializableName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("Mezzanine::World::GetDerivedSerializableName",1,"Mezzanine::World const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_Mezzanine__World,0))){
    SWIG_fail_ptr("World_GetDerivedSerializableName",1,SWIGTYPE_p_Mezzanine__World);
  }
  
  result = ((Mezzanine::World const *)arg1)->GetDerivedSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_World_GetSerializableName(lua_State* L) {
  int SWIG_arg = 0;
  Mezzanine::String result;
  
  SWIG_check_num_args("Mezzanine::World::GetSerializableName",0,0)
  result = Mezzanine::World::GetSerializableName();
  lua_pushlstring(L,(&result)->data(),(&result)->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_World(void *obj) {
Mezzanine::World *arg1 = (Mezzanine::World *) obj;
delete arg1;
}
static int _proxy__wrap_new_World(lua_State *L) {
    assert(lua_istable(L,1));
    lua_pushcfunction(L,_wrap_new_World);
    assert(!lua_isnil(L,-1));
    lua_replace(L,1); /* replace our table with real constructor */
    lua_call(L,lua_gettop(L)-1,1);
    return 1;
}
static swig_lua_attribute swig_World_attributes[] = {
    {0,0,0}
};
static swig_lua_method swig_World_methods[]= {
    { "GetName", _wrap_World_GetName},
    { "PauseWorld", _wrap_World_PauseWorld},
    { "Clear", _wrap_World_Clear},
    { "Initialize", _wrap_World_Initialize},
    { "Deinitialize", _wrap_World_Deinitialize},
    { "PreMainLoopInit", _wrap_World_PreMainLoopInit},
    { "CreateManager", _wrap_World_CreateManager},
    { "DestroyManager", _wrap_World_DestroyManager},
    { "DestroyAllManagers", _wrap_World_DestroyAllManagers},
    { "AddManager", _wrap_World_AddManager},
    { "GetManager", _wrap_World_GetManager},
    { "GetEntityManager", _wrap_World_GetEntityManager},
    { "GetComponentManager", _wrap_World_GetComponentManager},
    { "RemoveManager", _wrap_World_RemoveManager},
    { "RemoveAllManagers", _wrap_World_RemoveAllManagers},
    { "GetWorldManagers", _wrap_World_GetWorldManagers},
    { "ProtoSerialize", _wrap_World_ProtoSerialize},
    { "ProtoSerializeProperties", _wrap_World_ProtoSerializeProperties},
    { "ProtoDeSerialize", _wrap_World_ProtoDeSerialize},
    { "ProtoDeSerializeProperties", _wrap_World_ProtoDeSerializeProperties},
    { "GetDerivedSerializableName", _wrap_World_GetDerivedSerializableName},
    {0,0}
};
static swig_lua_method swig_World_meta[] = {
    {0,0}
};

static swig_lua_attribute swig_World_Sf_SwigStatic_attributes[] = {
    {0,0,0}
};
static swig_lua_const_info swig_World_Sf_SwigStatic_constants[]= {
    {0,0,0,0,0,0}
};
static swig_lua_method swig_World_Sf_SwigStatic_methods[]= {
    { "AddManagerFactory", _wrap_World_AddManagerFactory},
    { "RemoveManagerFactory", _wrap_World_RemoveManagerFactory},
    { "DestroyManagerFactory", _wrap_World_DestroyManagerFactory},
    { "DestroyAllManagerFactories", _wrap_World_DestroyAllManagerFactories},
    { "AddAllEngineDefaultManagerFactories", _wrap_World_AddAllEngineDefaultManagerFactories},
    { "GetSerializableName", _wrap_World_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_World_Sf_SwigStatic_classes[]= {
    0
};

static swig_lua_namespace swig_World_Sf_SwigStatic = {
    "World",
    swig_World_Sf_SwigStatic_methods,
    swig_World_Sf_SwigStatic_attributes,
    swig_World_Sf_SwigStatic_constants,
    swig_World_Sf_SwigStatic_classes,
    0
};
static swig_lua_class *swig_World_bases[] = {0};
static const char *swig_World_base_names[] = {0};
static swig_lua_class _wrap_class_World = { "World", "World", &SWIGTYPE_p_Mezzanine__World,_proxy__wrap_new_World, swig_delete_World, swig_World_methods, swig_World_attributes, &swig_World_Sf_SwigStatic, swig_World_meta, swig_World_bases, swig_World_base_names };

static swig_lua_attribute swig_SwigModule_attributes[] = {
    { "ParseMinimal", _wrap_ParseMinimal_get, SWIG_Lua_set_immutable },
    { "ParsePi", _wrap_ParsePi_get, SWIG_Lua_set_immutable },
    { "ParseComments", _wrap_ParseComments_get, SWIG_Lua_set_immutable },
    { "ParseCdata", _wrap_ParseCdata_get, SWIG_Lua_set_immutable },
    { "ParseWsPcdata", _wrap_ParseWsPcdata_get, SWIG_Lua_set_immutable },
    { "ParseEscapes", _wrap_ParseEscapes_get, SWIG_Lua_set_immutable },
    { "ParseEol", _wrap_ParseEol_get, SWIG_Lua_set_immutable },
    { "ParseWconvAttribute", _wrap_ParseWconvAttribute_get, SWIG_Lua_set_immutable },
    { "ParseWnormAttribute", _wrap_ParseWnormAttribute_get, SWIG_Lua_set_immutable },
    { "ParseDeclaration", _wrap_ParseDeclaration_get, SWIG_Lua_set_immutable },
    { "ParseDocType", _wrap_ParseDocType_get, SWIG_Lua_set_immutable },
    { "ParseWsPcdata_single", _wrap_ParseWsPcdata_single_get, SWIG_Lua_set_immutable },
    { "ParseDefault", _wrap_ParseDefault_get, SWIG_Lua_set_immutable },
    { "ParseFull", _wrap_ParseFull_get, SWIG_Lua_set_immutable },
    { "FormatIndent", _wrap_FormatIndent_get, SWIG_Lua_set_immutable },
    { "FormatWriteBom", _wrap_FormatWriteBom_get, SWIG_Lua_set_immutable },
    { "FormatRaw", _wrap_FormatRaw_get, SWIG_Lua_set_immutable },
    { "FormatNoDeclaration", _wrap_FormatNoDeclaration_get, SWIG_Lua_set_immutable },
    { "FormatNoEscapes", _wrap_FormatNoEscapes_get, SWIG_Lua_set_immutable },
    { "FormatSaveFileText", _wrap_FormatSaveFileText_get, SWIG_Lua_set_immutable },
    { "FormatDefault", _wrap_FormatDefault_get, SWIG_Lua_set_immutable },
    { "EntityManager_ImplementationName", _wrap_EntityManager_ImplementationName_get, SWIG_Lua_set_immutable },
    { "EntityManager_InterfaceType", _wrap_EntityManager_InterfaceType_get, SWIG_Lua_set_immutable },
    { "EntityManager_EventEntityCreated", _wrap_EntityManager_EventEntityCreated_get, SWIG_Lua_set_immutable },
    { "EntityManager_EventEntityDestroyed", _wrap_EntityManager_EventEntityDestroyed_get, SWIG_Lua_set_immutable },
    { "Blank", _wrap_Blank_get, SWIG_Lua_set_immutable },
    {0,0,0}
};
static swig_lua_const_info swig_SwigModule_constants[]= {
    {SWIG_LUA_CONSTTAB_INT("MEZZANINE_CORE", 1)},
    {SWIG_LUA_CONSTTAB_INT("MEZZ_FRAMESTOTRACK", 10)},
    {SWIG_LUA_CONSTTAB_INT("Att_None", Mezzanine::Att_None)},
    {SWIG_LUA_CONSTTAB_INT("Att_Linear", Mezzanine::Att_Linear)},
    {SWIG_LUA_CONSTTAB_INT("Att_Quadratic", Mezzanine::Att_Quadratic)},
    {SWIG_LUA_CONSTTAB_INT("CT_ComponentLast", Mezzanine::CT_ComponentLast)},
    {SWIG_LUA_CONSTTAB_INT("CT_ProxyFirst", Mezzanine::CT_ProxyFirst)},
    {SWIG_LUA_CONSTTAB_INT("CT_Audio_First", Mezzanine::CT_Audio_First)},
    {SWIG_LUA_CONSTTAB_INT("CT_Audio_Listener", Mezzanine::CT_Audio_Listener)},
    {SWIG_LUA_CONSTTAB_INT("CT_Audio_SoundProxy", Mezzanine::CT_Audio_SoundProxy)},
    {SWIG_LUA_CONSTTAB_INT("CT_Audio_Last", Mezzanine::CT_Audio_Last)},
    {SWIG_LUA_CONSTTAB_INT("CT_Graphics_First", Mezzanine::CT_Graphics_First)},
    {SWIG_LUA_CONSTTAB_INT("CT_Graphics_BillboardSetProxy", Mezzanine::CT_Graphics_BillboardSetProxy)},
    {SWIG_LUA_CONSTTAB_INT("CT_Graphics_CameraProxy", Mezzanine::CT_Graphics_CameraProxy)},
    {SWIG_LUA_CONSTTAB_INT("CT_Graphics_ItemProxy", Mezzanine::CT_Graphics_ItemProxy)},
    {SWIG_LUA_CONSTTAB_INT("CT_Graphics_LightProxy", Mezzanine::CT_Graphics_LightProxy)},
    {SWIG_LUA_CONSTTAB_INT("CT_Graphics_LineGroupProxy", Mezzanine::CT_Graphics_LineGroupProxy)},
    {SWIG_LUA_CONSTTAB_INT("CT_Graphics_ParticleSystemProxy", Mezzanine::CT_Graphics_ParticleSystemProxy)},
    {SWIG_LUA_CONSTTAB_INT("CT_Graphics_Last", Mezzanine::CT_Graphics_Last)},
    {SWIG_LUA_CONSTTAB_INT("CT_Physics_First", Mezzanine::CT_Physics_First)},
    {SWIG_LUA_CONSTTAB_INT("CT_Physics_GhostProxy", Mezzanine::CT_Physics_GhostProxy)},
    {SWIG_LUA_CONSTTAB_INT("CT_Physics_RigidProxy", Mezzanine::CT_Physics_RigidProxy)},
    {SWIG_LUA_CONSTTAB_INT("CT_Physics_SoftProxy", Mezzanine::CT_Physics_SoftProxy)},
    {SWIG_LUA_CONSTTAB_INT("CT_Physics_Last", Mezzanine::CT_Physics_Last)},
    {SWIG_LUA_CONSTTAB_INT("ET_None", Mezzanine::ET_None)},
    {SWIG_LUA_CONSTTAB_INT("ET_Generic", Mezzanine::ET_Generic)},
    {SWIG_LUA_CONSTTAB_INT("ET_TerrainFirst", Mezzanine::ET_TerrainFirst)},
    {SWIG_LUA_CONSTTAB_INT("ET_MeshTerrain", Mezzanine::ET_MeshTerrain)},
    {SWIG_LUA_CONSTTAB_INT("ET_HeightfieldTerrain", Mezzanine::ET_HeightfieldTerrain)},
    {SWIG_LUA_CONSTTAB_INT("ET_VectorFieldTerrain", Mezzanine::ET_VectorFieldTerrain)},
    {SWIG_LUA_CONSTTAB_INT("ET_VoxelTerrain", Mezzanine::ET_VoxelTerrain)},
    {SWIG_LUA_CONSTTAB_INT("ET_MarchingCubeTerrain", Mezzanine::ET_MarchingCubeTerrain)},
    {SWIG_LUA_CONSTTAB_INT("ET_UnknownTerrain", Mezzanine::ET_UnknownTerrain)},
    {SWIG_LUA_CONSTTAB_INT("ET_TerrainLast", Mezzanine::ET_TerrainLast)},
    {SWIG_LUA_CONSTTAB_INT("ET_AllTerrains", Mezzanine::ET_AllTerrains)},
    {SWIG_LUA_CONSTTAB_INT("ET_DebrisFirst", Mezzanine::ET_DebrisFirst)},
    {SWIG_LUA_CONSTTAB_INT("ET_RigidDebris", Mezzanine::ET_RigidDebris)},
    {SWIG_LUA_CONSTTAB_INT("ET_SoftDebris", Mezzanine::ET_SoftDebris)},
    {SWIG_LUA_CONSTTAB_INT("ET_UnknownDebris", Mezzanine::ET_UnknownDebris)},
    {SWIG_LUA_CONSTTAB_INT("ET_DebrisLast", Mezzanine::ET_DebrisLast)},
    {SWIG_LUA_CONSTTAB_INT("ET_AllDebris", Mezzanine::ET_AllDebris)},
    {SWIG_LUA_CONSTTAB_INT("ET_AreaEffectFirst", Mezzanine::ET_AreaEffectFirst)},
    {SWIG_LUA_CONSTTAB_INT("ET_AreaEffectGravityField", Mezzanine::ET_AreaEffectGravityField)},
    {SWIG_LUA_CONSTTAB_INT("ET_AreaEffectGravityWell", Mezzanine::ET_AreaEffectGravityWell)},
    {SWIG_LUA_CONSTTAB_INT("ET_AreaEffectFieldOfForce", Mezzanine::ET_AreaEffectFieldOfForce)},
    {SWIG_LUA_CONSTTAB_INT("ET_AreaEffectPlaceHolder1", Mezzanine::ET_AreaEffectPlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("ET_AreaEffectPlaceHolder2", Mezzanine::ET_AreaEffectPlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("ET_AreaEffectUnknown", Mezzanine::ET_AreaEffectUnknown)},
    {SWIG_LUA_CONSTTAB_INT("ET_AreaEffectLast", Mezzanine::ET_AreaEffectLast)},
    {SWIG_LUA_CONSTTAB_INT("ET_AllAreaEffects", Mezzanine::ET_AllAreaEffects)},
    {SWIG_LUA_CONSTTAB_INT("ET_ActorFirst", Mezzanine::ET_ActorFirst)},
    {SWIG_LUA_CONSTTAB_INT("ET_ActorPlaceHolder1", Mezzanine::ET_ActorPlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("ET_ActorPlaceHolder2", Mezzanine::ET_ActorPlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("ET_ActorPlaceHolder3", Mezzanine::ET_ActorPlaceHolder3)},
    {SWIG_LUA_CONSTTAB_INT("ET_ActorLast", Mezzanine::ET_ActorLast)},
    {SWIG_LUA_CONSTTAB_INT("ET_AllActors", Mezzanine::ET_AllActors)},
    {SWIG_LUA_CONSTTAB_INT("ET_VehicleFirst", Mezzanine::ET_VehicleFirst)},
    {SWIG_LUA_CONSTTAB_INT("ET_MultiBodyVehicle", Mezzanine::ET_MultiBodyVehicle)},
    {SWIG_LUA_CONSTTAB_INT("ET_RaycastVehicle", Mezzanine::ET_RaycastVehicle)},
    {SWIG_LUA_CONSTTAB_INT("ET_SimpleVehicle", Mezzanine::ET_SimpleVehicle)},
    {SWIG_LUA_CONSTTAB_INT("ET_VehiclePlaceHolder1", Mezzanine::ET_VehiclePlaceHolder1)},
    {SWIG_LUA_CONSTTAB_INT("ET_VehiclePlaceHolder2", Mezzanine::ET_VehiclePlaceHolder2)},
    {SWIG_LUA_CONSTTAB_INT("ET_VehicleLast", Mezzanine::ET_VehicleLast)},
    {SWIG_LUA_CONSTTAB_INT("ET_AllVehicles", Mezzanine::ET_AllVehicles)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_0", Mezzanine::OM_Degree_0)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_90", Mezzanine::OM_Degree_90)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_180", Mezzanine::OM_Degree_180)},
    {SWIG_LUA_CONSTTAB_INT("OM_Degree_270", Mezzanine::OM_Degree_270)},
    {SWIG_LUA_CONSTTAB_INT("OM_Portrait", Mezzanine::OM_Portrait)},
    {SWIG_LUA_CONSTTAB_INT("OM_LandscapeRight", Mezzanine::OM_LandscapeRight)},
    {SWIG_LUA_CONSTTAB_INT("OM_LandscapeLeft", Mezzanine::OM_LandscapeLeft)},
    {SWIG_LUA_CONSTTAB_INT("PL_Unpaused", Mezzanine::PL_Unpaused)},
    {SWIG_LUA_CONSTTAB_INT("PL_PausePhysics", Mezzanine::PL_PausePhysics)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseParticles", Mezzanine::PL_PauseParticles)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseAnimations", Mezzanine::PL_PauseAnimations)},
    {SWIG_LUA_CONSTTAB_INT("PL_PauseAll", Mezzanine::PL_PauseAll)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Invalid", Mezzanine::Axis_Invalid)},
    {SWIG_LUA_CONSTTAB_INT("Axis_X", Mezzanine::Axis_X)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Min", Mezzanine::Axis_Min)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Y", Mezzanine::Axis_Y)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Z", Mezzanine::Axis_Z)},
    {SWIG_LUA_CONSTTAB_INT("Axis_Max", Mezzanine::Axis_Max)},
    {SWIG_LUA_CONSTTAB_INT("TT_Simple", Mezzanine::TT_Simple)},
    {SWIG_LUA_CONSTTAB_INT("TT_Spline", Mezzanine::TT_Spline)},
    {SWIG_LUA_CONSTTAB_INT("TT_Bezier", Mezzanine::TT_Bezier)},
    {SWIG_LUA_CONSTTAB_INT("TS_Local", Mezzanine::TS_Local)},
    {SWIG_LUA_CONSTTAB_INT("TS_Parent", Mezzanine::TS_Parent)},
    {SWIG_LUA_CONSTTAB_INT("TS_World", Mezzanine::TS_World)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_FIRST_EXCEPTION", Mezzanine::ExceptionBase::FIRST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_EXCEPTION", Mezzanine::ExceptionBase::IO_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_FILE_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_FILE_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_DIRECTORY_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_DIRECTORY_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_URL_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_URL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_NETWORK_PERMISSION_EXCEPTION", Mezzanine::ExceptionBase::IO_NETWORK_PERMISSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_WRITE_EXCEPTION", Mezzanine::ExceptionBase::IO_WRITE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_IO_READ_EXCEPTION", Mezzanine::ExceptionBase::IO_READ_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_EXCEPTION", Mezzanine::ExceptionBase::II_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_IDENTITY_INVALID_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_INVALID_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_IDENTITY_NOT_FOUND_EXCEPTION", Mezzanine::ExceptionBase::II_IDENTITY_NOT_FOUND_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_II_DUPLICATE_IDENTITY_EXCEPTION", Mezzanine::ExceptionBase::II_DUPLICATE_IDENTITY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_MM_EXCEPTION", Mezzanine::ExceptionBase::MM_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_MM_OUT_OF_MEMORY_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_MEMORY_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_MM_OUT_OF_BOUNDS_EXCEPTION", Mezzanine::ExceptionBase::MM_OUT_OF_BOUNDS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION_XML", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XML)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION_XPATH", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_XPATH)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SYNTAX_ERROR_EXCEPTION_LUA", Mezzanine::ExceptionBase::SYNTAX_ERROR_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA_YIELD", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_YIELD)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA_RUNTIME", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_RUNTIME)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_SCRIPT_EXCEPTION_LUA_ERRERR", Mezzanine::ExceptionBase::SCRIPT_EXCEPTION_LUA_ERRERR)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_PARAMETERS_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_PARAMETERS_CAST_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_CAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_PARAMETERS_RANGE_EXCEPTION", Mezzanine::ExceptionBase::PARAMETERS_RANGE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_ARITHMETIC_EXCEPTION", Mezzanine::ExceptionBase::ARITHMETIC_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INVALID_VERSION_EXCEPTION", Mezzanine::ExceptionBase::INVALID_VERSION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INVALID_STATE_EXCEPTION", Mezzanine::ExceptionBase::INVALID_STATE_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_RENDERINGAPI_EXCEPTION", Mezzanine::ExceptionBase::RENDERINGAPI_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_RT_ASSERTION_EXCEPTION", Mezzanine::ExceptionBase::RT_ASSERTION_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INTERNAL_EXCEPTION", Mezzanine::ExceptionBase::INTERNAL_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_NOT_IMPLEMENTED_EXCEPTION", Mezzanine::ExceptionBase::NOT_IMPLEMENTED_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_INVALID_ASSIGNMENT", Mezzanine::ExceptionBase::INVALID_ASSIGNMENT)},
    {SWIG_LUA_CONSTTAB_INT("ExceptionBase_LAST_EXCEPTION", Mezzanine::ExceptionBase::LAST_EXCEPTION)},
    {SWIG_LUA_CONSTTAB_INT("IOException_ExceptionCode", Mezzanine::IOException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileException_ExceptionCode", Mezzanine::FileException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileReadException_ExceptionCode", Mezzanine::FileReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileWriteException_ExceptionCode", Mezzanine::FileWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FileNotFoundException_ExceptionCode", Mezzanine::FileNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("FilePermissionException_ExceptionCode", Mezzanine::FilePermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryException_ExceptionCode", Mezzanine::DirectoryException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryReadException_ExceptionCode", Mezzanine::DirectoryReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryWriteException_ExceptionCode", Mezzanine::DirectoryWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryNotFoundException_ExceptionCode", Mezzanine::DirectoryNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("DirectoryPermissionException_ExceptionCode", Mezzanine::DirectoryPermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkException_ExceptionCode", Mezzanine::NetworkException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkReadException_ExceptionCode", Mezzanine::NetworkReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkWriteException_ExceptionCode", Mezzanine::NetworkWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkNotFoundException_ExceptionCode", Mezzanine::NetworkNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkURLException_ExceptionCode", Mezzanine::NetworkURLException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NetworkPermissionException_ExceptionCode", Mezzanine::NetworkPermissionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("IOWriteException_ExceptionCode", Mezzanine::IOWriteException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("IOReadException_ExceptionCode", Mezzanine::IOReadException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityException_ExceptionCode", Mezzanine::InstanceIdentityException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityInvalidException_ExceptionCode", Mezzanine::InstanceIdentityInvalidException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityNotFoundException_ExceptionCode", Mezzanine::InstanceIdentityNotFoundException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InstanceIdentityDuplicateException_ExceptionCode", Mezzanine::InstanceIdentityDuplicateException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("MemoryManagementException_ExceptionCode", Mezzanine::MemoryManagementException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("OutOfMemoryException_ExceptionCode", Mezzanine::OutOfMemoryException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("MemoryOutOfBoundsException_ExceptionCode", Mezzanine::MemoryOutOfBoundsException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorException_ExceptionCode", Mezzanine::SyntaxErrorException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorXMLException_ExceptionCode", Mezzanine::SyntaxErrorXMLException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorXPathException_ExceptionCode", Mezzanine::SyntaxErrorXPathException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("SyntaxErrorLuaException_ExceptionCode", Mezzanine::SyntaxErrorLuaException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptException_ExceptionCode", Mezzanine::ScriptException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaException_ExceptionCode", Mezzanine::ScriptLuaException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaYieldException_ExceptionCode", Mezzanine::ScriptLuaYieldException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaRuntimeException_ExceptionCode", Mezzanine::ScriptLuaRuntimeException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ScriptLuaErrErrException_ExceptionCode", Mezzanine::ScriptLuaErrErrException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersException_ExceptionCode", Mezzanine::ParametersException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersCastException_ExceptionCode", Mezzanine::ParametersCastException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ParametersRangeException_ExceptionCode", Mezzanine::ParametersRangeException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("ArithmeticException_ExceptionCode", Mezzanine::ArithmeticException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidVersionException_ExceptionCode", Mezzanine::InvalidVersionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidStateException_ExceptionCode", Mezzanine::InvalidStateException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("RenderingAPIException_ExceptionCode", Mezzanine::RenderingAPIException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("RuntimeAssertionException_ExceptionCode", Mezzanine::RuntimeAssertionException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InternalException_ExceptionCode", Mezzanine::InternalException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("NotImplementedException_ExceptionCode", Mezzanine::NotImplementedException::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("InvalidAssignment_ExceptionCode", Mezzanine::InvalidAssignment::ExceptionCode)},
    {SWIG_LUA_CONSTTAB_INT("CastNoneError", Mezzanine::CastNoneError)},
    {SWIG_LUA_CONSTTAB_INT("CastNoneReturnZero", Mezzanine::CastNoneReturnZero)},
    {SWIG_LUA_CONSTTAB_INT("CastImplicit", Mezzanine::CastImplicit)},
    {SWIG_LUA_CONSTTAB_INT("CastStatic", Mezzanine::CastStatic)},
    {SWIG_LUA_CONSTTAB_INT("CastDynamic", Mezzanine::CastDynamic)},
    {SWIG_LUA_CONSTTAB_STRING("EntityID_InvalidID", "Mezzanine::EntityID::InvalidID")},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_AE_Min", Mezzanine::AxisAlignedBox::AE_Min)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_AE_Max", Mezzanine::AxisAlignedBox::AE_Max)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMinX", Mezzanine::AxisAlignedBox::SideMinX)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMinY", Mezzanine::AxisAlignedBox::SideMinY)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMinZ", Mezzanine::AxisAlignedBox::SideMinZ)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMaxX", Mezzanine::AxisAlignedBox::SideMaxX)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMaxY", Mezzanine::AxisAlignedBox::SideMaxY)},
    {SWIG_LUA_CONSTTAB_INT("AxisAlignedBox_SideMaxZ", Mezzanine::AxisAlignedBox::SideMaxZ)},
    {SWIG_LUA_CONSTTAB_STRING("EntityComponentID_InvalidID", "Mezzanine::EntityComponentID::InvalidID")},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_Undefined", Mezzanine::ManagerBase::MT_Undefined)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_AudioManager", Mezzanine::ManagerBase::MT_AudioManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_AnimationManager", Mezzanine::ManagerBase::MT_AnimationManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_CollisionShapeManager", Mezzanine::ManagerBase::MT_CollisionShapeManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_CompositorManager", Mezzanine::ManagerBase::MT_CompositorManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_GraphicsManager", Mezzanine::ManagerBase::MT_GraphicsManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_InputManager", Mezzanine::ManagerBase::MT_InputManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_LogManager", Mezzanine::ManagerBase::MT_LogManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_MaterialManager", Mezzanine::ManagerBase::MT_MaterialManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_MeshManager", Mezzanine::ManagerBase::MT_MeshManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_NetworkManager", Mezzanine::ManagerBase::MT_NetworkManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_PlayerManager", Mezzanine::ManagerBase::MT_PlayerManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_ResourceManager", Mezzanine::ManagerBase::MT_ResourceManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_ScriptingManager", Mezzanine::ManagerBase::MT_ScriptingManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_TextureManager", Mezzanine::ManagerBase::MT_TextureManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_UIManager", Mezzanine::ManagerBase::MT_UIManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_EntityComponentManagerFirst", Mezzanine::ManagerBase::MT_EntityComponentManagerFirst)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_PhysicsManager", Mezzanine::ManagerBase::MT_PhysicsManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_SceneManager", Mezzanine::ManagerBase::MT_SceneManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_SoundScapeManager", Mezzanine::ManagerBase::MT_SoundScapeManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_EntityComponentManagerLast", Mezzanine::ManagerBase::MT_EntityComponentManagerLast)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_EntityManager", Mezzanine::ManagerBase::MT_EntityManager)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_UserManagerFirst", Mezzanine::ManagerBase::MT_UserManagerFirst)},
    {SWIG_LUA_CONSTTAB_INT("ManagerBase_MT_UserCreated", Mezzanine::ManagerBase::MT_UserCreated)},
    {SWIG_LUA_CONSTTAB_INT("CameraController_CCM_Fly", Mezzanine::CameraController::CCM_Fly)},
    {SWIG_LUA_CONSTTAB_INT("CameraController_CCM_Walk", Mezzanine::CameraController::CCM_Walk)},
    {SWIG_LUA_CONSTTAB_INT("XML_VERSION", 100)},
    {SWIG_LUA_CONSTTAB_INT("EncodingAuto", Mezzanine::XML::EncodingAuto)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF8", Mezzanine::XML::EncodingUTF8)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF16LE", Mezzanine::XML::EncodingUTF16LE)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF16BE", Mezzanine::XML::EncodingUTF16BE)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF16", Mezzanine::XML::EncodingUTF16)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF32LE", Mezzanine::XML::EncodingUTF32LE)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF32BE", Mezzanine::XML::EncodingUTF32BE)},
    {SWIG_LUA_CONSTTAB_INT("EncodingUTF32", Mezzanine::XML::EncodingUTF32)},
    {SWIG_LUA_CONSTTAB_INT("Encodingwchar_t", Mezzanine::XML::Encodingwchar_t)},
    {SWIG_LUA_CONSTTAB_INT("EncodingLatin1", Mezzanine::XML::EncodingLatin1)},
    {SWIG_LUA_CONSTTAB_INT("NodeNull", Mezzanine::XML::NodeNull)},
    {SWIG_LUA_CONSTTAB_INT("NodeDocument", Mezzanine::XML::NodeDocument)},
    {SWIG_LUA_CONSTTAB_INT("NodeElement", Mezzanine::XML::NodeElement)},
    {SWIG_LUA_CONSTTAB_INT("NodePcdata", Mezzanine::XML::NodePcdata)},
    {SWIG_LUA_CONSTTAB_INT("NodeCdata", Mezzanine::XML::NodeCdata)},
    {SWIG_LUA_CONSTTAB_INT("NodeComment", Mezzanine::XML::NodeComment)},
    {SWIG_LUA_CONSTTAB_INT("NodePi", Mezzanine::XML::NodePi)},
    {SWIG_LUA_CONSTTAB_INT("NodeDeclaration", Mezzanine::XML::NodeDeclaration)},
    {SWIG_LUA_CONSTTAB_INT("NodeDocType", Mezzanine::XML::NodeDocType)},
    {SWIG_LUA_CONSTTAB_INT("StatusOk", Mezzanine::XML::StatusOk)},
    {SWIG_LUA_CONSTTAB_INT("StatusFileNotFound", Mezzanine::XML::StatusFileNotFound)},
    {SWIG_LUA_CONSTTAB_INT("StatusIOError", Mezzanine::XML::StatusIOError)},
    {SWIG_LUA_CONSTTAB_INT("StatusOutOfMemory", Mezzanine::XML::StatusOutOfMemory)},
    {SWIG_LUA_CONSTTAB_INT("StatusInternalError", Mezzanine::XML::StatusInternalError)},
    {SWIG_LUA_CONSTTAB_INT("StatusUnrecognizedTag", Mezzanine::XML::StatusUnrecognizedTag)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadProcessingInstruction", Mezzanine::XML::StatusBadProcessingInstruction)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadComment", Mezzanine::XML::StatusBadComment)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadCdata", Mezzanine::XML::StatusBadCdata)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadDocType", Mezzanine::XML::StatusBadDocType)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadPcdata", Mezzanine::XML::StatusBadPcdata)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadStartElement", Mezzanine::XML::StatusBadStartElement)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadAttribute", Mezzanine::XML::StatusBadAttribute)},
    {SWIG_LUA_CONSTTAB_INT("StatusBadEndElement", Mezzanine::XML::StatusBadEndElement)},
    {SWIG_LUA_CONSTTAB_INT("StatusEndElementMismatch", Mezzanine::XML::StatusEndElementMismatch)},
    {SWIG_LUA_CONSTTAB_INT("XPathTypeNone", Mezzanine::XML::XPathTypeNone)},
    {SWIG_LUA_CONSTTAB_INT("XPathTypeNodeSet", Mezzanine::XML::XPathTypeNodeSet)},
    {SWIG_LUA_CONSTTAB_INT("XPathTypeNumber", Mezzanine::XML::XPathTypeNumber)},
    {SWIG_LUA_CONSTTAB_INT("XPathTypeString", Mezzanine::XML::XPathTypeString)},
    {SWIG_LUA_CONSTTAB_INT("XPathTypeBoole", Mezzanine::XML::XPathTypeBoole)},
    {SWIG_LUA_CONSTTAB_INT("XPathNodeSet_TypeUnsorted", Mezzanine::XML::XPathNodeSet::TypeUnsorted)},
    {SWIG_LUA_CONSTTAB_INT("XPathNodeSet_TypeSorted", Mezzanine::XML::XPathNodeSet::TypeSorted)},
    {SWIG_LUA_CONSTTAB_INT("XPathNodeSet_TypeSortedReverse", Mezzanine::XML::XPathNodeSet::TypeSortedReverse)},
    {SWIG_LUA_CONSTTAB_INT("TF_RawMicro", Mezzanine::TF_RawMicro)},
    {SWIG_LUA_CONSTTAB_INT("TF_RawMilli", Mezzanine::TF_RawMilli)},
    {SWIG_LUA_CONSTTAB_INT("TF_Seconds", Mezzanine::TF_Seconds)},
    {SWIG_LUA_CONSTTAB_INT("TF_SecondsMilli", Mezzanine::TF_SecondsMilli)},
    {SWIG_LUA_CONSTTAB_INT("TF_MinutesSeconds", Mezzanine::TF_MinutesSeconds)},
    {SWIG_LUA_CONSTTAB_INT("CM_CountUp", Mezzanine::CM_CountUp)},
    {SWIG_LUA_CONSTTAB_INT("CM_CountDown", Mezzanine::CM_CountDown)},
    {0,0,0,0,0,0}
};
static swig_lua_method swig_SwigModule_methods[]= {
    { "EnumBit", _wrap_EnumBit},
    { "SerializeError", _wrap_SerializeError},
    { "DeSerializeError", _wrap_DeSerializeError},
    { "Vector3_Unit_X", _wrap_Vector3_Unit_X},
    { "Vector3_Unit_Y", _wrap_Vector3_Unit_Y},
    { "Vector3_Unit_Z", _wrap_Vector3_Unit_Z},
    { "Vector3_Neg_Unit_X", _wrap_Vector3_Neg_Unit_X},
    { "Vector3_Neg_Unit_Y", _wrap_Vector3_Neg_Unit_Y},
    { "Vector3_Neg_Unit_Z", _wrap_Vector3_Neg_Unit_Z},
    { "Vector3_UnitOnAxis", _wrap_Vector3_UnitOnAxis},
    { "Vector3_GetSerializableName", _wrap_Vector3_GetSerializableName},
    { "__add", _wrap___add},
    { "__sub", _wrap___sub},
    { "__mul", _wrap___mul},
    { "__div", _wrap___div},
    { "Quaternion_GetSerializableName", _wrap_Quaternion_GetSerializableName},
    { "Transform_GetSerializableName", _wrap_Transform_GetSerializableName},
    { "EntityID_GetSerializableName", _wrap_EntityID_GetSerializableName},
    { "ComponentCompare", _wrap_ComponentCompare},
    { "Entity_GetSerializableName", _wrap_Entity_GetSerializableName},
    { "ColourValue_Transparent", _wrap_ColourValue_Transparent},
    { "ColourValue_AliceBlue", _wrap_ColourValue_AliceBlue},
    { "ColourValue_AntiqueWhite", _wrap_ColourValue_AntiqueWhite},
    { "ColourValue_Aqua", _wrap_ColourValue_Aqua},
    { "ColourValue_Aquamarine", _wrap_ColourValue_Aquamarine},
    { "ColourValue_Azure", _wrap_ColourValue_Azure},
    { "ColourValue_Beige", _wrap_ColourValue_Beige},
    { "ColourValue_Bisque", _wrap_ColourValue_Bisque},
    { "ColourValue_Black", _wrap_ColourValue_Black},
    { "ColourValue_Blanchedalmond", _wrap_ColourValue_Blanchedalmond},
    { "ColourValue_Blue", _wrap_ColourValue_Blue},
    { "ColourValue_BlueViolet", _wrap_ColourValue_BlueViolet},
    { "ColourValue_Brown", _wrap_ColourValue_Brown},
    { "ColourValue_BurlyWood", _wrap_ColourValue_BurlyWood},
    { "ColourValue_CadetBlue", _wrap_ColourValue_CadetBlue},
    { "ColourValue_Chartreuse", _wrap_ColourValue_Chartreuse},
    { "ColourValue_Chocolate", _wrap_ColourValue_Chocolate},
    { "ColourValue_Coral", _wrap_ColourValue_Coral},
    { "ColourValue_CornFlowerBlue", _wrap_ColourValue_CornFlowerBlue},
    { "ColourValue_CornSilk", _wrap_ColourValue_CornSilk},
    { "ColourValue_Crimson", _wrap_ColourValue_Crimson},
    { "ColourValue_Cyan", _wrap_ColourValue_Cyan},
    { "ColourValue_DarkBlue", _wrap_ColourValue_DarkBlue},
    { "ColourValue_DarkCyan", _wrap_ColourValue_DarkCyan},
    { "ColourValue_DarkGoldenRod", _wrap_ColourValue_DarkGoldenRod},
    { "ColourValue_DarkGray", _wrap_ColourValue_DarkGray},
    { "ColourValue_DarkGreen", _wrap_ColourValue_DarkGreen},
    { "ColourValue_DarkKhaki", _wrap_ColourValue_DarkKhaki},
    { "ColourValue_DarkMagenta", _wrap_ColourValue_DarkMagenta},
    { "ColourValue_DarkOliveGreen", _wrap_ColourValue_DarkOliveGreen},
    { "ColourValue_DarkOrange", _wrap_ColourValue_DarkOrange},
    { "ColourValue_DarkOrchid", _wrap_ColourValue_DarkOrchid},
    { "ColourValue_DarkRed", _wrap_ColourValue_DarkRed},
    { "ColourValue_DarkSalmon", _wrap_ColourValue_DarkSalmon},
    { "ColourValue_DarkSeaGreen", _wrap_ColourValue_DarkSeaGreen},
    { "ColourValue_DarkSlateBlue", _wrap_ColourValue_DarkSlateBlue},
    { "ColourValue_DarkSlateGray", _wrap_ColourValue_DarkSlateGray},
    { "ColourValue_DarkTurquoise", _wrap_ColourValue_DarkTurquoise},
    { "ColourValue_DarkViolet", _wrap_ColourValue_DarkViolet},
    { "ColourValue_DeepPink", _wrap_ColourValue_DeepPink},
    { "ColourValue_DeepSkyBlue", _wrap_ColourValue_DeepSkyBlue},
    { "ColourValue_DimGray", _wrap_ColourValue_DimGray},
    { "ColourValue_DodgerBlue", _wrap_ColourValue_DodgerBlue},
    { "ColourValue_FireBrick", _wrap_ColourValue_FireBrick},
    { "ColourValue_FloralWhite", _wrap_ColourValue_FloralWhite},
    { "ColourValue_ForestGreen", _wrap_ColourValue_ForestGreen},
    { "ColourValue_Fuchsia", _wrap_ColourValue_Fuchsia},
    { "ColourValue_Gainsboro", _wrap_ColourValue_Gainsboro},
    { "ColourValue_GhostWhite", _wrap_ColourValue_GhostWhite},
    { "ColourValue_Gold", _wrap_ColourValue_Gold},
    { "ColourValue_GoldenRod", _wrap_ColourValue_GoldenRod},
    { "ColourValue_Gray", _wrap_ColourValue_Gray},
    { "ColourValue_Green", _wrap_ColourValue_Green},
    { "ColourValue_GreenYellow", _wrap_ColourValue_GreenYellow},
    { "ColourValue_HoneyDew", _wrap_ColourValue_HoneyDew},
    { "ColourValue_HotPink", _wrap_ColourValue_HotPink},
    { "ColourValue_IndianRed", _wrap_ColourValue_IndianRed},
    { "ColourValue_Indigo", _wrap_ColourValue_Indigo},
    { "ColourValue_Ivory", _wrap_ColourValue_Ivory},
    { "ColourValue_Khaki", _wrap_ColourValue_Khaki},
    { "ColourValue_Lavender", _wrap_ColourValue_Lavender},
    { "ColourValue_LavenderBlush", _wrap_ColourValue_LavenderBlush},
    { "ColourValue_LawnGreen", _wrap_ColourValue_LawnGreen},
    { "ColourValue_LemonChiffon", _wrap_ColourValue_LemonChiffon},
    { "ColourValue_LightBlue", _wrap_ColourValue_LightBlue},
    { "ColourValue_LightCoral", _wrap_ColourValue_LightCoral},
    { "ColourValue_LightCyan", _wrap_ColourValue_LightCyan},
    { "ColourValue_LightGoldenRodYellow", _wrap_ColourValue_LightGoldenRodYellow},
    { "ColourValue_LightGray", _wrap_ColourValue_LightGray},
    { "ColourValue_LightGreen", _wrap_ColourValue_LightGreen},
    { "ColourValue_LightPink", _wrap_ColourValue_LightPink},
    { "ColourValue_LightSalmon", _wrap_ColourValue_LightSalmon},
    { "ColourValue_LightSeaGreen", _wrap_ColourValue_LightSeaGreen},
    { "ColourValue_LightSkyBlue", _wrap_ColourValue_LightSkyBlue},
    { "ColourValue_LightSlateGray", _wrap_ColourValue_LightSlateGray},
    { "ColourValue_LightSteelBlue", _wrap_ColourValue_LightSteelBlue},
    { "ColourValue_LightYellow", _wrap_ColourValue_LightYellow},
    { "ColourValue_Lime", _wrap_ColourValue_Lime},
    { "ColourValue_LimeGreen", _wrap_ColourValue_LimeGreen},
    { "ColourValue_Linen", _wrap_ColourValue_Linen},
    { "ColourValue_Magenta", _wrap_ColourValue_Magenta},
    { "ColourValue_Maroon", _wrap_ColourValue_Maroon},
    { "ColourValue_MediumAquamarine", _wrap_ColourValue_MediumAquamarine},
    { "ColourValue_MediumBlue", _wrap_ColourValue_MediumBlue},
    { "ColourValue_MediumOrchid", _wrap_ColourValue_MediumOrchid},
    { "ColourValue_MediumPurple", _wrap_ColourValue_MediumPurple},
    { "ColourValue_MediumSeaGreen", _wrap_ColourValue_MediumSeaGreen},
    { "ColourValue_MediumSlateBlue", _wrap_ColourValue_MediumSlateBlue},
    { "ColourValue_MediumSpringGreen", _wrap_ColourValue_MediumSpringGreen},
    { "ColourValue_MediumTurquoise", _wrap_ColourValue_MediumTurquoise},
    { "ColourValue_MediumVioletRed", _wrap_ColourValue_MediumVioletRed},
    { "ColourValue_MidnightBlue", _wrap_ColourValue_MidnightBlue},
    { "ColourValue_MintCream", _wrap_ColourValue_MintCream},
    { "ColourValue_MistyRose", _wrap_ColourValue_MistyRose},
    { "ColourValue_Moccasin", _wrap_ColourValue_Moccasin},
    { "ColourValue_NavajoWhite", _wrap_ColourValue_NavajoWhite},
    { "ColourValue_Navy", _wrap_ColourValue_Navy},
    { "ColourValue_OldLace", _wrap_ColourValue_OldLace},
    { "ColourValue_Olive", _wrap_ColourValue_Olive},
    { "ColourValue_OliveDrab", _wrap_ColourValue_OliveDrab},
    { "ColourValue_Orange", _wrap_ColourValue_Orange},
    { "ColourValue_OrangeRed", _wrap_ColourValue_OrangeRed},
    { "ColourValue_Orchid", _wrap_ColourValue_Orchid},
    { "ColourValue_PaleGoldenRod", _wrap_ColourValue_PaleGoldenRod},
    { "ColourValue_PaleGreen", _wrap_ColourValue_PaleGreen},
    { "ColourValue_PaleTurquoise", _wrap_ColourValue_PaleTurquoise},
    { "ColourValue_PaleVioletRed", _wrap_ColourValue_PaleVioletRed},
    { "ColourValue_PapayaWhip", _wrap_ColourValue_PapayaWhip},
    { "ColourValue_PeachPuff", _wrap_ColourValue_PeachPuff},
    { "ColourValue_Peru", _wrap_ColourValue_Peru},
    { "ColourValue_Pink", _wrap_ColourValue_Pink},
    { "ColourValue_Plum", _wrap_ColourValue_Plum},
    { "ColourValue_PowderBlue", _wrap_ColourValue_PowderBlue},
    { "ColourValue_Purple", _wrap_ColourValue_Purple},
    { "ColourValue_Red", _wrap_ColourValue_Red},
    { "ColourValue_RosyBrown", _wrap_ColourValue_RosyBrown},
    { "ColourValue_RoyalBlue", _wrap_ColourValue_RoyalBlue},
    { "ColourValue_SaddleBrown", _wrap_ColourValue_SaddleBrown},
    { "ColourValue_Salmon", _wrap_ColourValue_Salmon},
    { "ColourValue_SandyBrown", _wrap_ColourValue_SandyBrown},
    { "ColourValue_SeaGreen", _wrap_ColourValue_SeaGreen},
    { "ColourValue_SeaShell", _wrap_ColourValue_SeaShell},
    { "ColourValue_Sienna", _wrap_ColourValue_Sienna},
    { "ColourValue_Silver", _wrap_ColourValue_Silver},
    { "ColourValue_SkyBlue", _wrap_ColourValue_SkyBlue},
    { "ColourValue_SlateBlue", _wrap_ColourValue_SlateBlue},
    { "ColourValue_SlateGray", _wrap_ColourValue_SlateGray},
    { "ColourValue_Snow", _wrap_ColourValue_Snow},
    { "ColourValue_SpringGreen", _wrap_ColourValue_SpringGreen},
    { "ColourValue_SteelBlue", _wrap_ColourValue_SteelBlue},
    { "ColourValue_Tan", _wrap_ColourValue_Tan},
    { "ColourValue_Teal", _wrap_ColourValue_Teal},
    { "ColourValue_Thistle", _wrap_ColourValue_Thistle},
    { "ColourValue_Tomato", _wrap_ColourValue_Tomato},
    { "ColourValue_Turquoise", _wrap_ColourValue_Turquoise},
    { "ColourValue_Violet", _wrap_ColourValue_Violet},
    { "ColourValue_Wheat", _wrap_ColourValue_Wheat},
    { "ColourValue_White", _wrap_ColourValue_White},
    { "ColourValue_WhiteSmoke", _wrap_ColourValue_WhiteSmoke},
    { "ColourValue_Yellow", _wrap_ColourValue_Yellow},
    { "ColourValue_YellowGreen", _wrap_ColourValue_YellowGreen},
    { "ColourValue_GetSerializableName", _wrap_ColourValue_GetSerializableName},
    { "AreaEffect_GetSerializableName", _wrap_AreaEffect_GetSerializableName},
    { "Plane_GetSerializableName", _wrap_Plane_GetSerializableName},
    { "AxisAlignedBox_GetSerializableName", _wrap_AxisAlignedBox_GetSerializableName},
    { "IsBase64", _wrap_IsBase64},
    { "Base64Encode", _wrap_Base64Encode},
    { "Base64Decode", _wrap_Base64Decode},
    { "PredictBinarySizeFromBase64String", _wrap_PredictBinarySizeFromBase64String},
    { "PredictBase64StringSizeFromBinarySize", _wrap_PredictBase64StringSizeFromBinarySize},
    { "Ray_GetSerializableName", _wrap_Ray_GetSerializableName},
    { "EntityComponentID_GetSerializableName", _wrap_EntityComponentID_GetSerializableName},
    { "EntityComponent_GetSerializableName", _wrap_EntityComponent_GetSerializableName},
    { "EntityProxy_GetSerializableName", _wrap_EntityProxy_GetSerializableName},
    { "ManagerBase_GetTypeAsString", _wrap_ManagerBase_GetTypeAsString},
    { "ManagerBase_GetTypeFromString", _wrap_ManagerBase_GetTypeFromString},
    { "RayQueryHit_GetSerializableName", _wrap_RayQueryHit_GetSerializableName},
    { "RayQuery_GetSerializableName", _wrap_RayQuery_GetSerializableName},
    { "RenderableRayQuery_GetSerializableName", _wrap_RenderableRayQuery_GetSerializableName},
    { "Vector2_Unit_X", _wrap_Vector2_Unit_X},
    { "Vector2_Unit_Y", _wrap_Vector2_Unit_Y},
    { "Vector2_Neg_Unit_X", _wrap_Vector2_Neg_Unit_X},
    { "Vector2_Neg_Unit_Y", _wrap_Vector2_Neg_Unit_Y},
    { "Vector2_GetSerializableName", _wrap_Vector2_GetSerializableName},
    { "GetPlatform", _wrap_GetPlatform},
    { "GetTimeStamp", _wrap_GetTimeStamp},
    { "Debris_GetSerializableName", _wrap_Debris_GetSerializableName},
    { "SetMemoryManagementFunctions", _wrap_SetMemoryManagementFunctions},
    { "GetMemoryAllocationFunction", _wrap_GetMemoryAllocationFunction},
    { "GetMemoryDeallocationFunction", _wrap_GetMemoryDeallocationFunction},
    { "AsUtf8", _wrap_AsUtf8},
    { "AsWide", _wrap_AsWide},
    { "GetOneTag", _wrap_GetOneTag},
    { "PreParseClassFromSingleTag", _wrap_PreParseClassFromSingleTag},
    { "EscapeXML", _wrap_EscapeXML},
    { "EntityManager_AddEntityFactory", _wrap_EntityManager_AddEntityFactory},
    { "EntityManager_RemoveEntityFactory", _wrap_EntityManager_RemoveEntityFactory},
    { "EntityManager_DestroyEntityFactory", _wrap_EntityManager_DestroyEntityFactory},
    { "EntityManager_DestroyAllEntityFactories", _wrap_EntityManager_DestroyAllEntityFactories},
    { "EntityManager_AddAllDefaultEntityFactories", _wrap_EntityManager_AddAllDefaultEntityFactories},
    { "Sphere_GetSerializableName", _wrap_Sphere_GetSerializableName},
    { "IsDigit", _wrap_IsDigit},
    { "IsLowerAlphaLetter", _wrap_IsLowerAlphaLetter},
    { "IsUpperAlphaLetter", _wrap_IsUpperAlphaLetter},
    { "IsAlphaLetter", _wrap_IsAlphaLetter},
    { "IsLowerHexLetter", _wrap_IsLowerHexLetter},
    { "IsUpperHexLetter", _wrap_IsUpperHexLetter},
    { "IsHexLetter", _wrap_IsHexLetter},
    { "IsHexDigit", _wrap_IsHexDigit},
    { "IsAlphanumeric", _wrap_IsAlphanumeric},
    { "Trim", _wrap_Trim},
    { "Split", _wrap_Split},
    { "ToUpperCase", _wrap_ToUpperCase},
    { "UpperCaseCopy", _wrap_UpperCaseCopy},
    { "ToLowerCase", _wrap_ToLowerCase},
    { "LowerCaseCopy", _wrap_LowerCaseCopy},
    { "ToCamelCase", _wrap_ToCamelCase},
    { "CamelCaseCopy", _wrap_CamelCaseCopy},
    { "StartsWith", _wrap_StartsWith},
    { "EndsWith", _wrap_EndsWith},
    { "RemoveDuplicateWhitespaces", _wrap_RemoveDuplicateWhitespaces},
    { "ConvertToVector2", _wrap_ConvertToVector2},
    { "ConvertToVector3", _wrap_ConvertToVector3},
    { "ConvertToQuaternion", _wrap_ConvertToQuaternion},
    { "ConvertToColourValue", _wrap_ConvertToColourValue},
    { "ConvertToString", _wrap_ConvertToString},
    { "ConvertHexToColourValue", _wrap_ConvertHexToColourValue},
    { "ConvertToHexString", _wrap_ConvertToHexString},
    { "ConvertToBool", _wrap_ConvertToBool},
    { "ConvertToReal", _wrap_ConvertToReal},
    { "ConvertToInteger", _wrap_ConvertToInteger},
    { "ConvertToWhole", _wrap_ConvertToWhole},
    { "ConvertToInt8", _wrap_ConvertToInt8},
    { "ConvertToUInt8", _wrap_ConvertToUInt8},
    { "ConvertToInt16", _wrap_ConvertToInt16},
    { "ConvertToUInt16", _wrap_ConvertToUInt16},
    { "ConvertToInt32", _wrap_ConvertToInt32},
    { "ConvertToUInt32", _wrap_ConvertToUInt32},
    { "World_AddManagerFactory", _wrap_World_AddManagerFactory},
    { "World_RemoveManagerFactory", _wrap_World_RemoveManagerFactory},
    { "World_DestroyManagerFactory", _wrap_World_DestroyManagerFactory},
    { "World_DestroyAllManagerFactories", _wrap_World_DestroyAllManagerFactories},
    { "World_AddAllEngineDefaultManagerFactories", _wrap_World_AddAllEngineDefaultManagerFactories},
    { "World_GetSerializableName", _wrap_World_GetSerializableName},
    {0,0}
};
static swig_lua_class* swig_SwigModule_classes[]= {
&_wrap_class_string,
&_wrap_class_ExceptionBase,
&_wrap_class_IOException,
&_wrap_class_FileException,
&_wrap_class_FileReadException,
&_wrap_class_FileWriteException,
&_wrap_class_FileNotFoundException,
&_wrap_class_FilePermissionException,
&_wrap_class_DirectoryException,
&_wrap_class_DirectoryReadException,
&_wrap_class_DirectoryWriteException,
&_wrap_class_DirectoryNotFoundException,
&_wrap_class_DirectoryPermissionException,
&_wrap_class_NetworkException,
&_wrap_class_NetworkReadException,
&_wrap_class_NetworkWriteException,
&_wrap_class_NetworkNotFoundException,
&_wrap_class_NetworkURLException,
&_wrap_class_NetworkPermissionException,
&_wrap_class_IOWriteException,
&_wrap_class_IOReadException,
&_wrap_class_InstanceIdentityException,
&_wrap_class_InstanceIdentityInvalidException,
&_wrap_class_InstanceIdentityNotFoundException,
&_wrap_class_InstanceIdentityDuplicateException,
&_wrap_class_MemoryManagementException,
&_wrap_class_OutOfMemoryException,
&_wrap_class_MemoryOutOfBoundsException,
&_wrap_class_SyntaxErrorException,
&_wrap_class_SyntaxErrorXMLException,
&_wrap_class_SyntaxErrorXPathException,
&_wrap_class_SyntaxErrorLuaException,
&_wrap_class_ScriptException,
&_wrap_class_ScriptLuaException,
&_wrap_class_ScriptLuaYieldException,
&_wrap_class_ScriptLuaRuntimeException,
&_wrap_class_ScriptLuaErrErrException,
&_wrap_class_ParametersException,
&_wrap_class_ParametersCastException,
&_wrap_class_ParametersRangeException,
&_wrap_class_ArithmeticException,
&_wrap_class_InvalidVersionException,
&_wrap_class_InvalidStateException,
&_wrap_class_RenderingAPIException,
&_wrap_class_RuntimeAssertionException,
&_wrap_class_InternalException,
&_wrap_class_NotImplementedException,
&_wrap_class_InvalidAssignment,
&_wrap_class_Vector3,
&_wrap_class_Vector3LengthCompare,
&_wrap_class_Quaternion,
&_wrap_class_Transform,
&_wrap_class_TransformableObject,
&_wrap_class_TransformableChildObject,
&_wrap_class_EntityFactory,
&_wrap_class_EntityID,
&_wrap_class_Entity,
&_wrap_class_GenericEntityFactory,
&_wrap_class_Actor,
&_wrap_class_ActorFactory,
&_wrap_class_ColourValue,
&_wrap_class_AreaEffect,
&_wrap_class_AreaEffectFactory,
&_wrap_class_Plane,
&_wrap_class_AxisAlignedBox,
&_wrap_class_BinaryBuffer,
&_wrap_class_Ray,
&_wrap_class_EntityComponentID,
&_wrap_class_EntityComponent,
&_wrap_class_EntityProxy,
&_wrap_class_ManagerBase,
&_wrap_class_WorldManager,
&_wrap_class_EntityComponentManager,
&_wrap_class_RayQueryHit,
&_wrap_class_RayQuery,
&_wrap_class_RenderableRayQuery,
&_wrap_class_AngleData,
&_wrap_class_CameraController,
&_wrap_class_Vector2,
&_wrap_class_Vector2LengthCompare,
&_wrap_class_Circle,
&_wrap_class_Debris,
&_wrap_class_DebrisFactory,
&_wrap_class_ManagerFactory,
&_wrap_class_WorldManagerFactory,
&_wrap_class_Attribute,
&_wrap_class_Node,
&_wrap_class_AttributeIterator,
&_wrap_class_ParseResult,
&_wrap_class_Writer,
&_wrap_class_WriterFile,
&_wrap_class_WriterStream,
&_wrap_class_XMLStreamWrapper,
&_wrap_class_Document,
&_wrap_class_NodeIterator,
&_wrap_class_NamedNodeIterator,
&_wrap_class_NodeText,
&_wrap_class_TreeWalker,
&_wrap_class_XPathNode,
&_wrap_class_XPathNodeSet,
&_wrap_class_XPathParseResult,
&_wrap_class_XPathVariable,
&_wrap_class_XPathVariableSet,
&_wrap_class_XPathQuery,
&_wrap_class_ActorUpdateWorkUnit,
&_wrap_class_AreaEffectUpdateWorkUnit,
&_wrap_class_DebrisUpdateWorkUnit,
&_wrap_class_TerrainUpdateWorkUnit,
&_wrap_class_VehicleUpdateWorkUnit,
&_wrap_class_EntityManagementEvent,
&_wrap_class_EntityManager,
&_wrap_class_DefaultEntityManagerFactory,
&_wrap_class_Sphere,
&_wrap_class_Timer,
&_wrap_class_Vehicle,
&_wrap_class_VehicleFactory,
&_wrap_class_World,
    0
};
static swig_lua_namespace* swig_SwigModule_namespaces[] = {
    0
};

static swig_lua_namespace swig_SwigModule = {
    "Mezzanine",
    swig_SwigModule_methods,
    swig_SwigModule_attributes,
    swig_SwigModule_constants,
    swig_SwigModule_classes,
    swig_SwigModule_namespaces
};
#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_Mezzanine__Graphics__RenderableRayQueryTo_p_Mezzanine__RayQuery(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::RayQuery *)  ((Mezzanine::Graphics::RenderableRayQuery *) x));
}
static void *_p_Mezzanine__EntityTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *)  ((Mezzanine::Entity *) x));
}
static void *_p_Mezzanine__AreaEffectTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::Entity *) ((Mezzanine::AreaEffect *) x));
}
static void *_p_Mezzanine__VehicleTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::Entity *) ((Mezzanine::Vehicle *) x));
}
static void *_p_Mezzanine__ActorTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::Entity *) ((Mezzanine::Actor *) x));
}
static void *_p_Mezzanine__EntityProxyTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *)  ((Mezzanine::EntityProxy *) x));
}
static void *_p_Mezzanine__DebrisTo_p_Mezzanine__TransformableObject(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::TransformableObject *) (Mezzanine::Entity *) ((Mezzanine::Debris *) x));
}
static void *_p_Mezzanine__WorldManagerTo_p_Mezzanine__ManagerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerBase *)  ((Mezzanine::WorldManager *) x));
}
static void *_p_Mezzanine__EntityComponentManagerTo_p_Mezzanine__ManagerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerBase *) (Mezzanine::WorldManager *) ((Mezzanine::EntityComponentManager *) x));
}
static void *_p_Mezzanine__EntityManagerTo_p_Mezzanine__ManagerBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerBase *) (Mezzanine::WorldManager *) ((Mezzanine::EntityManager *) x));
}
static void *_p_Mezzanine__InvalidAssignmentTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InvalidAssignment *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *) ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::ScriptException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::SyntaxErrorException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::MemoryManagementException *) ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::MemoryManagementException *) ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryManagementExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::MemoryManagementException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InstanceIdentityException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__IOExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::IOException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *) ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::ParametersException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ParametersException *) ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *)(Mezzanine::ParametersException *) ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__ArithmeticExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::ArithmeticException *) x));
}
static void *_p_Mezzanine__InvalidVersionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InvalidVersionException *) x));
}
static void *_p_Mezzanine__InvalidStateExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InvalidStateException *) x));
}
static void *_p_Mezzanine__RenderingAPIExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::RenderingAPIException *) x));
}
static void *_p_Mezzanine__RuntimeAssertionExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::RuntimeAssertionException *) x));
}
static void *_p_Mezzanine__InternalExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::InternalException *) x));
}
static void *_p_Mezzanine__NotImplementedExceptionTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *) (Mezzanine::ExceptionBase *) ((Mezzanine::NotImplementedException *) x));
}
static void *_p_Mezzanine__ExceptionBaseTo_p_std__exception(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((std::exception *)  ((Mezzanine::ExceptionBase *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *) (Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_Mezzanine__IOException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::IOException *)  ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__FileException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::FileException *)  ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__DirectoryException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::DirectoryException *)  ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__NetworkException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::NetworkException *)  ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__InstanceIdentityException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::InstanceIdentityException *)  ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__MemoryManagementException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::MemoryManagementException *)  ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__MemoryManagementException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::MemoryManagementException *)  ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__SyntaxErrorException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::SyntaxErrorException *)  ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *)  ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptException *) (Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptLuaException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ScriptLuaException *)  ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ParametersException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ParametersException *)  ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ParametersException(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ParametersException *)  ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__EntityProxyTo_p_Mezzanine__EntityComponent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EntityComponent *)  ((Mezzanine::EntityProxy *) x));
}
static void *_p_Mezzanine__AreaEffectTo_p_Mezzanine__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Entity *)  ((Mezzanine::AreaEffect *) x));
}
static void *_p_Mezzanine__VehicleTo_p_Mezzanine__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Entity *)  ((Mezzanine::Vehicle *) x));
}
static void *_p_Mezzanine__ActorTo_p_Mezzanine__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Entity *)  ((Mezzanine::Actor *) x));
}
static void *_p_Mezzanine__DebrisTo_p_Mezzanine__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::Entity *)  ((Mezzanine::Debris *) x));
}
static void *_p_Mezzanine__InvalidAssignmentTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InvalidAssignment *) x));
}
static void *_p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaRuntimeException *) x));
}
static void *_p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaYieldException *) x));
}
static void *_p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *) ((Mezzanine::ScriptLuaException *) x));
}
static void *_p_Mezzanine__ScriptExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::ScriptException *) x));
}
static void *_p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorLuaException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXPathException *) x));
}
static void *_p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::SyntaxErrorException *) ((Mezzanine::SyntaxErrorXMLException *) x));
}
static void *_p_Mezzanine__SyntaxErrorExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::SyntaxErrorException *) x));
}
static void *_p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::MemoryManagementException *) ((Mezzanine::MemoryOutOfBoundsException *) x));
}
static void *_p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::MemoryManagementException *) ((Mezzanine::OutOfMemoryException *) x));
}
static void *_p_Mezzanine__MemoryManagementExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::MemoryManagementException *) x));
}
static void *_p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityDuplicateException *) x));
}
static void *_p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityNotFoundException *) x));
}
static void *_p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::InstanceIdentityException *) ((Mezzanine::InstanceIdentityInvalidException *) x));
}
static void *_p_Mezzanine__InstanceIdentityExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InstanceIdentityException *) x));
}
static void *_p_Mezzanine__IOReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::IOReadException *) x));
}
static void *_p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::IOWriteException *) x));
}
static void *_p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkPermissionException *) x));
}
static void *_p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkURLException *) x));
}
static void *_p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkNotFoundException *) x));
}
static void *_p_Mezzanine__IOExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::IOException *) x));
}
static void *_p_Mezzanine__FileExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::FileException *) x));
}
static void *_p_Mezzanine__FileReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileReadException *) x));
}
static void *_p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileWriteException *) x));
}
static void *_p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FileNotFoundException *) x));
}
static void *_p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::FileException *) ((Mezzanine::FilePermissionException *) x));
}
static void *_p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::DirectoryException *) x));
}
static void *_p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryReadException *) x));
}
static void *_p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryWriteException *) x));
}
static void *_p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryNotFoundException *) x));
}
static void *_p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::DirectoryException *) ((Mezzanine::DirectoryPermissionException *) x));
}
static void *_p_Mezzanine__NetworkExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *) ((Mezzanine::NetworkException *) x));
}
static void *_p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkReadException *) x));
}
static void *_p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::IOException *)(Mezzanine::NetworkException *) ((Mezzanine::NetworkWriteException *) x));
}
static void *_p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ScriptException *)(Mezzanine::ScriptLuaException *) ((Mezzanine::ScriptLuaErrErrException *) x));
}
static void *_p_Mezzanine__ParametersExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::ParametersException *) x));
}
static void *_p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ParametersException *) ((Mezzanine::ParametersCastException *) x));
}
static void *_p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *) (Mezzanine::ParametersException *) ((Mezzanine::ParametersRangeException *) x));
}
static void *_p_Mezzanine__ArithmeticExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::ArithmeticException *) x));
}
static void *_p_Mezzanine__InvalidVersionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InvalidVersionException *) x));
}
static void *_p_Mezzanine__InvalidStateExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InvalidStateException *) x));
}
static void *_p_Mezzanine__RenderingAPIExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::RenderingAPIException *) x));
}
static void *_p_Mezzanine__RuntimeAssertionExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::RuntimeAssertionException *) x));
}
static void *_p_Mezzanine__InternalExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::InternalException *) x));
}
static void *_p_Mezzanine__NotImplementedExceptionTo_p_Mezzanine__ExceptionBase(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ExceptionBase *)  ((Mezzanine::NotImplementedException *) x));
}
static void *_p_Mezzanine__XML__DocumentTo_p_Mezzanine__XML__Node(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::XML::Node *)  ((Mezzanine::XML::Document *) x));
}
static void *_p_Mezzanine__DefaultEntityManagerFactoryTo_p_Mezzanine__WorldManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldManagerFactory *)  ((Mezzanine::DefaultEntityManagerFactory *) x));
}
static void *_p_Mezzanine__WorldManagerFactoryTo_p_Mezzanine__ManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerFactory *)  ((Mezzanine::WorldManagerFactory *) x));
}
static void *_p_Mezzanine__DefaultEntityManagerFactoryTo_p_Mezzanine__ManagerFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::ManagerFactory *) (Mezzanine::WorldManagerFactory *) ((Mezzanine::DefaultEntityManagerFactory *) x));
}
static void *_p_Mezzanine__GenericEntityFactoryTo_p_Mezzanine__EntityFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EntityFactory *)  ((Mezzanine::GenericEntityFactory *) x));
}
static void *_p_Mezzanine__ActorFactoryTo_p_Mezzanine__EntityFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EntityFactory *)  ((Mezzanine::ActorFactory *) x));
}
static void *_p_Mezzanine__AreaEffectFactoryTo_p_Mezzanine__EntityFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EntityFactory *)  ((Mezzanine::AreaEffectFactory *) x));
}
static void *_p_Mezzanine__DebrisFactoryTo_p_Mezzanine__EntityFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EntityFactory *)  ((Mezzanine::DebrisFactory *) x));
}
static void *_p_Mezzanine__VehicleFactoryTo_p_Mezzanine__EntityFactory(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::EntityFactory *)  ((Mezzanine::VehicleFactory *) x));
}
static void *_p_Mezzanine__XML__XMLStreamWrapperTo_p_Mezzanine__XML__Writer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::XML::Writer *)  ((Mezzanine::XML::XMLStreamWrapper *) x));
}
static void *_p_Mezzanine__XML__WriterFileTo_p_Mezzanine__XML__Writer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::XML::Writer *)  ((Mezzanine::XML::WriterFile *) x));
}
static void *_p_Mezzanine__XML__WriterStreamTo_p_Mezzanine__XML__Writer(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::XML::Writer *)  ((Mezzanine::XML::WriterStream *) x));
}
static void *_p_Mezzanine__EntityComponentManagerTo_p_Mezzanine__WorldManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldManager *)  ((Mezzanine::EntityComponentManager *) x));
}
static void *_p_Mezzanine__EntityManagerTo_p_Mezzanine__WorldManager(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((Mezzanine::WorldManager *)  ((Mezzanine::EntityManager *) x));
}
static swig_type_info _swigt__p_Byte = {"_p_Byte", "Byte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ChannelType = {"_p_ChannelType", "ChannelType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComponentContainer = {"_p_ComponentContainer", "ComponentContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComponentIterator = {"_p_ComponentIterator", "ComponentIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComponentRange = {"_p_ComponentRange", "ComponentRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ComponentVec = {"_p_ComponentVec", "ComponentVec *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstComponentIterator = {"_p_ConstComponentIterator", "ConstComponentIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstComponentRange = {"_p_ConstComponentRange", "ConstComponentRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstEntityIterator = {"_p_ConstEntityIterator", "ConstEntityIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstEntityRange = {"_p_ConstEntityRange", "ConstEntityRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstFactoryIterator = {"_p_ConstFactoryIterator", "ConstFactoryIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstManagerFactoryIterator = {"_p_ConstManagerFactoryIterator", "ConstManagerFactoryIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstObjectIterator = {"_p_ConstObjectIterator", "ConstObjectIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstResultIterator = {"_p_ConstResultIterator", "ConstResultIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ConstWorldManagerIterator = {"_p_ConstWorldManagerIterator", "ConstWorldManagerIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_DefaultEventPublisher = {"_p_DefaultEventPublisher", "DefaultEventPublisher *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EntityContainer = {"_p_EntityContainer", "EntityContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EntityIterator = {"_p_EntityIterator", "EntityIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EntityRange = {"_p_EntityRange", "EntityRange *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_EventNameType = {"_p_EventNameType", "EventNameType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FactoryContainer = {"_p_FactoryContainer", "FactoryContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FactoryIterator = {"_p_FactoryIterator", "FactoryIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_FilterFunction = {"_p_FilterFunction", "FilterFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_GeometryRayTestResult = {"_p_GeometryRayTestResult", "GeometryRayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_IDType = {"_p_IDType", "IDType *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ManagerFactoryIterator = {"_p_ManagerFactoryIterator", "ManagerFactoryIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ManagerFactoryMap = {"_p_ManagerFactoryMap", "ManagerFactoryMap *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MathTools__GeometryRayTestResult = {"_p_MathTools__GeometryRayTestResult", "MathTools::GeometryRayTestResult *|Mezzanine::AxisAlignedBox::RayTestResult *|Mezzanine::Ray::GeometryRayTestResult *|Mezzanine::Sphere::RayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MathTools__PlaneSide = {"_p_MathTools__PlaneSide", "MathTools::PlaneSide *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MathTools__PlaneTestResult = {"_p_MathTools__PlaneTestResult", "MathTools::PlaneTestResult *|Mezzanine::Plane::RayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_MathTools__Point3DTestResult = {"_p_MathTools__Point3DTestResult", "MathTools::Point3DTestResult *|Mezzanine::Ray::PlaneRayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Actor = {"_p_Mezzanine__Actor", "Mezzanine::Actor *", 0, 0, (void*)&_wrap_class_Actor, 0};
static swig_type_info _swigt__p_Mezzanine__ActorFactory = {"_p_Mezzanine__ActorFactory", "Mezzanine::ActorFactory *", 0, 0, (void*)&_wrap_class_ActorFactory, 0};
static swig_type_info _swigt__p_Mezzanine__ActorUpdateWorkUnit = {"_p_Mezzanine__ActorUpdateWorkUnit", "Mezzanine::ActorUpdateWorkUnit *", 0, 0, (void*)&_wrap_class_ActorUpdateWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__AngleData = {"_p_Mezzanine__AngleData", "Mezzanine::AngleData *", 0, 0, (void*)&_wrap_class_AngleData, 0};
static swig_type_info _swigt__p_Mezzanine__AreaEffect = {"_p_Mezzanine__AreaEffect", "Mezzanine::AreaEffect *", 0, 0, (void*)&_wrap_class_AreaEffect, 0};
static swig_type_info _swigt__p_Mezzanine__AreaEffectFactory = {"_p_Mezzanine__AreaEffectFactory", "Mezzanine::AreaEffectFactory *", 0, 0, (void*)&_wrap_class_AreaEffectFactory, 0};
static swig_type_info _swigt__p_Mezzanine__AreaEffectUpdateWorkUnit = {"_p_Mezzanine__AreaEffectUpdateWorkUnit", "Mezzanine::AreaEffectUpdateWorkUnit *", 0, 0, (void*)&_wrap_class_AreaEffectUpdateWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__ArithmeticException = {"_p_Mezzanine__ArithmeticException", "Mezzanine::ArithmeticException *", 0, 0, (void*)&_wrap_class_ArithmeticException, 0};
static swig_type_info _swigt__p_Mezzanine__AxisAlignedBox = {"_p_Mezzanine__AxisAlignedBox", "Mezzanine::AxisAlignedBox *", 0, 0, (void*)&_wrap_class_AxisAlignedBox, 0};
static swig_type_info _swigt__p_Mezzanine__BinaryTools__BinaryBuffer = {"_p_Mezzanine__BinaryTools__BinaryBuffer", "Mezzanine::BinaryTools::BinaryBuffer *", 0, 0, (void*)&_wrap_class_BinaryBuffer, 0};
static swig_type_info _swigt__p_Mezzanine__CameraController = {"_p_Mezzanine__CameraController", "Mezzanine::CameraController *", 0, 0, (void*)&_wrap_class_CameraController, 0};
static swig_type_info _swigt__p_Mezzanine__Circle = {"_p_Mezzanine__Circle", "Mezzanine::Circle *", 0, 0, (void*)&_wrap_class_Circle, 0};
static swig_type_info _swigt__p_Mezzanine__ColourValue = {"_p_Mezzanine__ColourValue", "Mezzanine::ColourValue *", 0, 0, (void*)&_wrap_class_ColourValue, 0};
static swig_type_info _swigt__p_Mezzanine__Debris = {"_p_Mezzanine__Debris", "Mezzanine::Debris *", 0, 0, (void*)&_wrap_class_Debris, 0};
static swig_type_info _swigt__p_Mezzanine__DebrisFactory = {"_p_Mezzanine__DebrisFactory", "Mezzanine::DebrisFactory *", 0, 0, (void*)&_wrap_class_DebrisFactory, 0};
static swig_type_info _swigt__p_Mezzanine__DebrisUpdateWorkUnit = {"_p_Mezzanine__DebrisUpdateWorkUnit", "Mezzanine::DebrisUpdateWorkUnit *", 0, 0, (void*)&_wrap_class_DebrisUpdateWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__DefaultEntityManagerFactory = {"_p_Mezzanine__DefaultEntityManagerFactory", "Mezzanine::DefaultEntityManagerFactory *", 0, 0, (void*)&_wrap_class_DefaultEntityManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryException = {"_p_Mezzanine__DirectoryException", "Mezzanine::DirectoryException *", 0, 0, (void*)&_wrap_class_DirectoryException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryNotFoundException = {"_p_Mezzanine__DirectoryNotFoundException", "Mezzanine::DirectoryNotFoundException *", 0, 0, (void*)&_wrap_class_DirectoryNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryPermissionException = {"_p_Mezzanine__DirectoryPermissionException", "Mezzanine::DirectoryPermissionException *", 0, 0, (void*)&_wrap_class_DirectoryPermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryReadException = {"_p_Mezzanine__DirectoryReadException", "Mezzanine::DirectoryReadException *", 0, 0, (void*)&_wrap_class_DirectoryReadException, 0};
static swig_type_info _swigt__p_Mezzanine__DirectoryWriteException = {"_p_Mezzanine__DirectoryWriteException", "Mezzanine::DirectoryWriteException *", 0, 0, (void*)&_wrap_class_DirectoryWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__Entity = {"_p_Mezzanine__Entity", "Mezzanine::Entity *", 0, 0, (void*)&_wrap_class_Entity, 0};
static swig_type_info _swigt__p_Mezzanine__EntityComponent = {"_p_Mezzanine__EntityComponent", "Mezzanine::EntityComponent *", 0, 0, (void*)&_wrap_class_EntityComponent, 0};
static swig_type_info _swigt__p_Mezzanine__EntityComponentID = {"_p_Mezzanine__EntityComponentID", "Mezzanine::EntityComponentID *", 0, 0, (void*)&_wrap_class_EntityComponentID, 0};
static swig_type_info _swigt__p_Mezzanine__EntityComponentManager = {"_p_Mezzanine__EntityComponentManager", "Mezzanine::EntityComponentManager *", 0, 0, (void*)&_wrap_class_EntityComponentManager, 0};
static swig_type_info _swigt__p_Mezzanine__EntityFactory = {"_p_Mezzanine__EntityFactory", "Mezzanine::EntityFactory *", 0, 0, (void*)&_wrap_class_EntityFactory, 0};
static swig_type_info _swigt__p_Mezzanine__EntityID = {"_p_Mezzanine__EntityID", "Mezzanine::EntityID *", 0, 0, (void*)&_wrap_class_EntityID, 0};
static swig_type_info _swigt__p_Mezzanine__EntityManagementEvent = {"_p_Mezzanine__EntityManagementEvent", "Mezzanine::EntityManagementEvent *", 0, 0, (void*)&_wrap_class_EntityManagementEvent, 0};
static swig_type_info _swigt__p_Mezzanine__EntityManager = {"_p_Mezzanine__EntityManager", "Mezzanine::EntityManager *", 0, 0, (void*)&_wrap_class_EntityManager, 0};
static swig_type_info _swigt__p_Mezzanine__EntityProxy = {"_p_Mezzanine__EntityProxy", "Mezzanine::EntityProxy *", 0, 0, (void*)&_wrap_class_EntityProxy, 0};
static swig_type_info _swigt__p_Mezzanine__ExceptionBase = {"_p_Mezzanine__ExceptionBase", "Mezzanine::ExceptionBase *", 0, 0, (void*)&_wrap_class_ExceptionBase, 0};
static swig_type_info _swigt__p_Mezzanine__FieldOfForce = {"_p_Mezzanine__FieldOfForce", "Mezzanine::FieldOfForce *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__FileException = {"_p_Mezzanine__FileException", "Mezzanine::FileException *", 0, 0, (void*)&_wrap_class_FileException, 0};
static swig_type_info _swigt__p_Mezzanine__FileNotFoundException = {"_p_Mezzanine__FileNotFoundException", "Mezzanine::FileNotFoundException *", 0, 0, (void*)&_wrap_class_FileNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__FilePermissionException = {"_p_Mezzanine__FilePermissionException", "Mezzanine::FilePermissionException *", 0, 0, (void*)&_wrap_class_FilePermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__FileReadException = {"_p_Mezzanine__FileReadException", "Mezzanine::FileReadException *", 0, 0, (void*)&_wrap_class_FileReadException, 0};
static swig_type_info _swigt__p_Mezzanine__FileWriteException = {"_p_Mezzanine__FileWriteException", "Mezzanine::FileWriteException *", 0, 0, (void*)&_wrap_class_FileWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__GenericEntityFactory = {"_p_Mezzanine__GenericEntityFactory", "Mezzanine::GenericEntityFactory *", 0, 0, (void*)&_wrap_class_GenericEntityFactory, 0};
static swig_type_info _swigt__p_Mezzanine__Graphics__CameraProxy = {"_p_Mezzanine__Graphics__CameraProxy", "Mezzanine::Graphics::CameraProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Graphics__Mesh = {"_p_Mezzanine__Graphics__Mesh", "Mezzanine::Graphics::Mesh *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Graphics__RenderableRayQuery = {"_p_Mezzanine__Graphics__RenderableRayQuery", "Mezzanine::Graphics::RenderableRayQuery *", 0, 0, (void*)&_wrap_class_RenderableRayQuery, 0};
static swig_type_info _swigt__p_Mezzanine__Graphics__SceneManager = {"_p_Mezzanine__Graphics__SceneManager", "Mezzanine::Graphics::SceneManager *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__GravityField = {"_p_Mezzanine__GravityField", "Mezzanine::GravityField *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__GravityWell = {"_p_Mezzanine__GravityWell", "Mezzanine::GravityWell *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__IOException = {"_p_Mezzanine__IOException", "Mezzanine::IOException *", 0, 0, (void*)&_wrap_class_IOException, 0};
static swig_type_info _swigt__p_Mezzanine__IOReadException = {"_p_Mezzanine__IOReadException", "Mezzanine::IOReadException *", 0, 0, (void*)&_wrap_class_IOReadException, 0};
static swig_type_info _swigt__p_Mezzanine__IOWriteException = {"_p_Mezzanine__IOWriteException", "Mezzanine::IOWriteException *", 0, 0, (void*)&_wrap_class_IOWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityDuplicateException = {"_p_Mezzanine__InstanceIdentityDuplicateException", "Mezzanine::InstanceIdentityDuplicateException *", 0, 0, (void*)&_wrap_class_InstanceIdentityDuplicateException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityException = {"_p_Mezzanine__InstanceIdentityException", "Mezzanine::InstanceIdentityException *", 0, 0, (void*)&_wrap_class_InstanceIdentityException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityInvalidException = {"_p_Mezzanine__InstanceIdentityInvalidException", "Mezzanine::InstanceIdentityInvalidException *", 0, 0, (void*)&_wrap_class_InstanceIdentityInvalidException, 0};
static swig_type_info _swigt__p_Mezzanine__InstanceIdentityNotFoundException = {"_p_Mezzanine__InstanceIdentityNotFoundException", "Mezzanine::InstanceIdentityNotFoundException *", 0, 0, (void*)&_wrap_class_InstanceIdentityNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__InternalException = {"_p_Mezzanine__InternalException", "Mezzanine::InternalException *", 0, 0, (void*)&_wrap_class_InternalException, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidAssignment = {"_p_Mezzanine__InvalidAssignment", "Mezzanine::InvalidAssignment *", 0, 0, (void*)&_wrap_class_InvalidAssignment, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidStateException = {"_p_Mezzanine__InvalidStateException", "Mezzanine::InvalidStateException *", 0, 0, (void*)&_wrap_class_InvalidStateException, 0};
static swig_type_info _swigt__p_Mezzanine__InvalidVersionException = {"_p_Mezzanine__InvalidVersionException", "Mezzanine::InvalidVersionException *", 0, 0, (void*)&_wrap_class_InvalidVersionException, 0};
static swig_type_info _swigt__p_Mezzanine__ManagerBase = {"_p_Mezzanine__ManagerBase", "Mezzanine::ManagerBase *", 0, 0, (void*)&_wrap_class_ManagerBase, 0};
static swig_type_info _swigt__p_Mezzanine__ManagerFactory = {"_p_Mezzanine__ManagerFactory", "Mezzanine::ManagerFactory *", 0, 0, (void*)&_wrap_class_ManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__Matrix3x3 = {"_p_Mezzanine__Matrix3x3", "Mezzanine::Matrix3x3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__MemoryManagementException = {"_p_Mezzanine__MemoryManagementException", "Mezzanine::MemoryManagementException *", 0, 0, (void*)&_wrap_class_MemoryManagementException, 0};
static swig_type_info _swigt__p_Mezzanine__MemoryOutOfBoundsException = {"_p_Mezzanine__MemoryOutOfBoundsException", "Mezzanine::MemoryOutOfBoundsException *", 0, 0, (void*)&_wrap_class_MemoryOutOfBoundsException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkException = {"_p_Mezzanine__NetworkException", "Mezzanine::NetworkException *", 0, 0, (void*)&_wrap_class_NetworkException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkNotFoundException = {"_p_Mezzanine__NetworkNotFoundException", "Mezzanine::NetworkNotFoundException *", 0, 0, (void*)&_wrap_class_NetworkNotFoundException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkPermissionException = {"_p_Mezzanine__NetworkPermissionException", "Mezzanine::NetworkPermissionException *", 0, 0, (void*)&_wrap_class_NetworkPermissionException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkReadException = {"_p_Mezzanine__NetworkReadException", "Mezzanine::NetworkReadException *", 0, 0, (void*)&_wrap_class_NetworkReadException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkURLException = {"_p_Mezzanine__NetworkURLException", "Mezzanine::NetworkURLException *", 0, 0, (void*)&_wrap_class_NetworkURLException, 0};
static swig_type_info _swigt__p_Mezzanine__NetworkWriteException = {"_p_Mezzanine__NetworkWriteException", "Mezzanine::NetworkWriteException *", 0, 0, (void*)&_wrap_class_NetworkWriteException, 0};
static swig_type_info _swigt__p_Mezzanine__NotImplementedException = {"_p_Mezzanine__NotImplementedException", "Mezzanine::NotImplementedException *", 0, 0, (void*)&_wrap_class_NotImplementedException, 0};
static swig_type_info _swigt__p_Mezzanine__OutOfMemoryException = {"_p_Mezzanine__OutOfMemoryException", "Mezzanine::OutOfMemoryException *", 0, 0, (void*)&_wrap_class_OutOfMemoryException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersCastException = {"_p_Mezzanine__ParametersCastException", "Mezzanine::ParametersCastException *", 0, 0, (void*)&_wrap_class_ParametersCastException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersException = {"_p_Mezzanine__ParametersException", "Mezzanine::ParametersException *", 0, 0, (void*)&_wrap_class_ParametersException, 0};
static swig_type_info _swigt__p_Mezzanine__ParametersRangeException = {"_p_Mezzanine__ParametersRangeException", "Mezzanine::ParametersRangeException *", 0, 0, (void*)&_wrap_class_ParametersRangeException, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__CollisionShape = {"_p_Mezzanine__Physics__CollisionShape", "Mezzanine::Physics::CollisionShape *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__GhostProxy = {"_p_Mezzanine__Physics__GhostProxy", "Mezzanine::Physics::GhostProxy *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Physics__ManagerConstructionInfo = {"_p_Mezzanine__Physics__ManagerConstructionInfo", "Mezzanine::Physics::ManagerConstructionInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Plane = {"_p_Mezzanine__Plane", "Mezzanine::Plane *", 0, 0, (void*)&_wrap_class_Plane, 0};
static swig_type_info _swigt__p_Mezzanine__Quaternion = {"_p_Mezzanine__Quaternion", "Mezzanine::Quaternion *", 0, 0, (void*)&_wrap_class_Quaternion, 0};
static swig_type_info _swigt__p_Mezzanine__Ray = {"_p_Mezzanine__Ray", "Mezzanine::Ray *", 0, 0, (void*)&_wrap_class_Ray, 0};
static swig_type_info _swigt__p_Mezzanine__RayQuery = {"_p_Mezzanine__RayQuery", "Mezzanine::RayQuery *", 0, 0, (void*)&_wrap_class_RayQuery, 0};
static swig_type_info _swigt__p_Mezzanine__RayQueryHit = {"_p_Mezzanine__RayQueryHit", "Mezzanine::RayQueryHit *", 0, 0, (void*)&_wrap_class_RayQueryHit, 0};
static swig_type_info _swigt__p_Mezzanine__RectBaseT_float_t = {"_p_Mezzanine__RectBaseT_float_t", "Mezzanine::RectBase< float > *|Mezzanine::RealRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__RectBaseT_int_t = {"_p_Mezzanine__RectBaseT_int_t", "Mezzanine::IntegerRect *|Mezzanine::RectBase< int > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__RectBaseT_unsigned_long_t = {"_p_Mezzanine__RectBaseT_unsigned_long_t", "Mezzanine::RectBase< unsigned long > *|Mezzanine::WholeRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__RenderingAPIException = {"_p_Mezzanine__RenderingAPIException", "Mezzanine::RenderingAPIException *", 0, 0, (void*)&_wrap_class_RenderingAPIException, 0};
static swig_type_info _swigt__p_Mezzanine__RigidDebris = {"_p_Mezzanine__RigidDebris", "Mezzanine::RigidDebris *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__RuntimeAssertionException = {"_p_Mezzanine__RuntimeAssertionException", "Mezzanine::RuntimeAssertionException *", 0, 0, (void*)&_wrap_class_RuntimeAssertionException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptException = {"_p_Mezzanine__ScriptException", "Mezzanine::ScriptException *", 0, 0, (void*)&_wrap_class_ScriptException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaErrErrException = {"_p_Mezzanine__ScriptLuaErrErrException", "Mezzanine::ScriptLuaErrErrException *", 0, 0, (void*)&_wrap_class_ScriptLuaErrErrException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaException = {"_p_Mezzanine__ScriptLuaException", "Mezzanine::ScriptLuaException *", 0, 0, (void*)&_wrap_class_ScriptLuaException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaRuntimeException = {"_p_Mezzanine__ScriptLuaRuntimeException", "Mezzanine::ScriptLuaRuntimeException *", 0, 0, (void*)&_wrap_class_ScriptLuaRuntimeException, 0};
static swig_type_info _swigt__p_Mezzanine__ScriptLuaYieldException = {"_p_Mezzanine__ScriptLuaYieldException", "Mezzanine::ScriptLuaYieldException *", 0, 0, (void*)&_wrap_class_ScriptLuaYieldException, 0};
static swig_type_info _swigt__p_Mezzanine__SoftDebris = {"_p_Mezzanine__SoftDebris", "Mezzanine::SoftDebris *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Sphere = {"_p_Mezzanine__Sphere", "Mezzanine::Sphere *", 0, 0, (void*)&_wrap_class_Sphere, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorException = {"_p_Mezzanine__SyntaxErrorException", "Mezzanine::SyntaxErrorException *", 0, 0, (void*)&_wrap_class_SyntaxErrorException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorLuaException = {"_p_Mezzanine__SyntaxErrorLuaException", "Mezzanine::SyntaxErrorLuaException *", 0, 0, (void*)&_wrap_class_SyntaxErrorLuaException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorXMLException = {"_p_Mezzanine__SyntaxErrorXMLException", "Mezzanine::SyntaxErrorXMLException *", 0, 0, (void*)&_wrap_class_SyntaxErrorXMLException, 0};
static swig_type_info _swigt__p_Mezzanine__SyntaxErrorXPathException = {"_p_Mezzanine__SyntaxErrorXPathException", "Mezzanine::SyntaxErrorXPathException *", 0, 0, (void*)&_wrap_class_SyntaxErrorXPathException, 0};
static swig_type_info _swigt__p_Mezzanine__TerrainUpdateWorkUnit = {"_p_Mezzanine__TerrainUpdateWorkUnit", "Mezzanine::TerrainUpdateWorkUnit *", 0, 0, (void*)&_wrap_class_TerrainUpdateWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type = {"_p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type", "Mezzanine::Threading::DefaultThreadSpecificStorage::Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Threading__RawFile = {"_p_Mezzanine__Threading__RawFile", "Mezzanine::Threading::RawFile *|Mezzanine::RawFile *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__Timer = {"_p_Mezzanine__Timer", "Mezzanine::Timer *", 0, 0, (void*)&_wrap_class_Timer, 0};
static swig_type_info _swigt__p_Mezzanine__Transform = {"_p_Mezzanine__Transform", "Mezzanine::Transform *", 0, 0, (void*)&_wrap_class_Transform, 0};
static swig_type_info _swigt__p_Mezzanine__TransformableChildObject = {"_p_Mezzanine__TransformableChildObject", "Mezzanine::TransformableChildObject *", 0, 0, (void*)&_wrap_class_TransformableChildObject, 0};
static swig_type_info _swigt__p_Mezzanine__TransformableObject = {"_p_Mezzanine__TransformableObject", "Mezzanine::TransformableObject *", 0, 0, (void*)&_wrap_class_TransformableObject, 0};
static swig_type_info _swigt__p_Mezzanine__Vector2 = {"_p_Mezzanine__Vector2", "Mezzanine::Vector2 *", 0, 0, (void*)&_wrap_class_Vector2, 0};
static swig_type_info _swigt__p_Mezzanine__Vector2LengthCompare = {"_p_Mezzanine__Vector2LengthCompare", "Mezzanine::Vector2LengthCompare *", 0, 0, (void*)&_wrap_class_Vector2LengthCompare, 0};
static swig_type_info _swigt__p_Mezzanine__Vector3 = {"_p_Mezzanine__Vector3", "Mezzanine::Vector3 *|Mezzanine::Physics::Vector3 *", 0, 0, (void*)&_wrap_class_Vector3, 0};
static swig_type_info _swigt__p_Mezzanine__Vector3LengthCompare = {"_p_Mezzanine__Vector3LengthCompare", "Mezzanine::Vector3LengthCompare *", 0, 0, (void*)&_wrap_class_Vector3LengthCompare, 0};
static swig_type_info _swigt__p_Mezzanine__Vehicle = {"_p_Mezzanine__Vehicle", "Mezzanine::Vehicle *", 0, 0, (void*)&_wrap_class_Vehicle, 0};
static swig_type_info _swigt__p_Mezzanine__VehicleFactory = {"_p_Mezzanine__VehicleFactory", "Mezzanine::VehicleFactory *", 0, 0, (void*)&_wrap_class_VehicleFactory, 0};
static swig_type_info _swigt__p_Mezzanine__VehicleUpdateWorkUnit = {"_p_Mezzanine__VehicleUpdateWorkUnit", "Mezzanine::VehicleUpdateWorkUnit *", 0, 0, (void*)&_wrap_class_VehicleUpdateWorkUnit, 0};
static swig_type_info _swigt__p_Mezzanine__World = {"_p_Mezzanine__World", "Mezzanine::World *", 0, 0, (void*)&_wrap_class_World, 0};
static swig_type_info _swigt__p_Mezzanine__WorldManager = {"_p_Mezzanine__WorldManager", "Mezzanine::WorldManager *", 0, 0, (void*)&_wrap_class_WorldManager, 0};
static swig_type_info _swigt__p_Mezzanine__WorldManagerFactory = {"_p_Mezzanine__WorldManagerFactory", "Mezzanine::WorldManagerFactory *", 0, 0, (void*)&_wrap_class_WorldManagerFactory, 0};
static swig_type_info _swigt__p_Mezzanine__XML__Attribute = {"_p_Mezzanine__XML__Attribute", "Mezzanine::XML::Attribute *", 0, 0, (void*)&_wrap_class_Attribute, 0};
static swig_type_info _swigt__p_Mezzanine__XML__AttributeIterator = {"_p_Mezzanine__XML__AttributeIterator", "Mezzanine::XML::AttributeIterator *|Mezzanine::XML::Node::attribute_iterator *", 0, 0, (void*)&_wrap_class_AttributeIterator, 0};
static swig_type_info _swigt__p_Mezzanine__XML__AttributeStruct = {"_p_Mezzanine__XML__AttributeStruct", "Mezzanine::XML::AttributeStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__Document = {"_p_Mezzanine__XML__Document", "Mezzanine::XML::Document *", 0, 0, (void*)&_wrap_class_Document, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NamedNodeIterator = {"_p_Mezzanine__XML__NamedNodeIterator", "Mezzanine::XML::NamedNodeIterator *", 0, 0, (void*)&_wrap_class_NamedNodeIterator, 0};
static swig_type_info _swigt__p_Mezzanine__XML__Node = {"_p_Mezzanine__XML__Node", "Mezzanine::XML::Node *", 0, 0, (void*)&_wrap_class_Node, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NodeIterator = {"_p_Mezzanine__XML__NodeIterator", "Mezzanine::XML::NodeIterator *|Mezzanine::XML::Node::iterator *", 0, 0, (void*)&_wrap_class_NodeIterator, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NodeStruct = {"_p_Mezzanine__XML__NodeStruct", "Mezzanine::XML::NodeStruct *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__NodeText = {"_p_Mezzanine__XML__NodeText", "Mezzanine::XML::NodeText *", 0, 0, (void*)&_wrap_class_NodeText, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t = {"_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t", "Mezzanine::XML::ObjectRange< Mezzanine::XML::AttributeIterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t = {"_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t", "Mezzanine::XML::ObjectRange< Mezzanine::XML::NamedNodeIterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t = {"_p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t", "Mezzanine::XML::ObjectRange< Mezzanine::XML::NodeIterator > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Mezzanine__XML__ParseResult = {"_p_Mezzanine__XML__ParseResult", "Mezzanine::XML::ParseResult *", 0, 0, (void*)&_wrap_class_ParseResult, 0};
static swig_type_info _swigt__p_Mezzanine__XML__TreeWalker = {"_p_Mezzanine__XML__TreeWalker", "Mezzanine::XML::TreeWalker *", 0, 0, (void*)&_wrap_class_TreeWalker, 0};
static swig_type_info _swigt__p_Mezzanine__XML__Writer = {"_p_Mezzanine__XML__Writer", "Mezzanine::XML::Writer *", 0, 0, (void*)&_wrap_class_Writer, 0};
static swig_type_info _swigt__p_Mezzanine__XML__WriterFile = {"_p_Mezzanine__XML__WriterFile", "Mezzanine::XML::WriterFile *", 0, 0, (void*)&_wrap_class_WriterFile, 0};
static swig_type_info _swigt__p_Mezzanine__XML__WriterStream = {"_p_Mezzanine__XML__WriterStream", "Mezzanine::XML::WriterStream *", 0, 0, (void*)&_wrap_class_WriterStream, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XMLStreamWrapper = {"_p_Mezzanine__XML__XMLStreamWrapper", "Mezzanine::XML::XMLStreamWrapper *", 0, 0, (void*)&_wrap_class_XMLStreamWrapper, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathNode = {"_p_Mezzanine__XML__XPathNode", "Mezzanine::XML::XPathNodeSet::const_iterator|Mezzanine::XML::XPathNode *", 0, 0, (void*)&_wrap_class_XPathNode, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathNodeSet = {"_p_Mezzanine__XML__XPathNodeSet", "Mezzanine::XML::XPathNodeSet *", 0, 0, (void*)&_wrap_class_XPathNodeSet, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathParseResult = {"_p_Mezzanine__XML__XPathParseResult", "Mezzanine::XML::XPathParseResult *", 0, 0, (void*)&_wrap_class_XPathParseResult, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathQuery = {"_p_Mezzanine__XML__XPathQuery", "Mezzanine::XML::XPathQuery *", 0, 0, (void*)&_wrap_class_XPathQuery, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathVariable = {"_p_Mezzanine__XML__XPathVariable", "Mezzanine::XML::XPathVariable *", 0, 0, (void*)&_wrap_class_XPathVariable, 0};
static swig_type_info _swigt__p_Mezzanine__XML__XPathVariableSet = {"_p_Mezzanine__XML__XPathVariableSet", "Mezzanine::XML::XPathVariableSet *", 0, 0, (void*)&_wrap_class_XPathVariableSet, 0};
static swig_type_info _swigt__p_ObjectContainer = {"_p_ObjectContainer", "ObjectContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ObjectIterator = {"_p_ObjectIterator", "ObjectIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__AxisAlignedBox = {"_p_Ogre__AxisAlignedBox", "Ogre::AxisAlignedBox *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__ColourValue = {"_p_Ogre__ColourValue", "Ogre::ColourValue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Plane = {"_p_Ogre__Plane", "Ogre::Plane *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Quaternion = {"_p_Ogre__Quaternion", "Ogre::Quaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Ray = {"_p_Ogre__Ray", "Ogre::Ray *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Sphere = {"_p_Ogre__Sphere", "Ogre::Sphere *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector2 = {"_p_Ogre__Vector2", "Ogre::Vector2 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Ogre__Vector3 = {"_p_Ogre__Vector3", "Ogre::Vector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_PlaneRayTestResult = {"_p_PlaneRayTestResult", "PlaneRayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_RayTestResult = {"_p_RayTestResult", "RayTestResult *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ResultContainer = {"_p_ResultContainer", "ResultContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ResultIterator = {"_p_ResultIterator", "ResultIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SDL_Event = {"_p_SDL_Event", "SDL_Event *|Mezzanine::RawEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_StreamSize = {"_p_StreamSize", "StreamSize *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WorldManagerContainer = {"_p_WorldManagerContainer", "WorldManagerContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WorldManagerIterator = {"_p_WorldManagerIterator", "WorldManagerIterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_XML__Node = {"_p_XML__Node", "XML::Node *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_attribute_iterator = {"_p_attribute_iterator", "attribute_iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_bool = {"_p_bool", "bool *|Mezzanine::Boole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btQuaternion = {"_p_btQuaternion", "btQuaternion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btTransform = {"_p_btTransform", "btTransform *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_btVector3 = {"_p_btVector3", "btVector3 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|Mezzanine::Char8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_difference_type = {"_p_difference_type", "difference_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_double = {"_p_double", "Mezzanine::PreciseReal *|double *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_p_void__void = {"_p_f_p_void__void", "Mezzanine::XML::DeAllocationFunction|void (*)(void *)", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_f_size_t__p_void = {"_p_f_size_t__p_void", "void *(*)(size_t)|Mezzanine::XML::AllocationFunction", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *|Mezzanine::Real *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "intptr_t *|int *|int_least32_t *|int_fast32_t *|Mezzanine::Int32 *|int32_t *|Mezzanine::ConvertiblePointer *|Mezzanine::Integer *|int_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator = {"_p_iterator", "iterator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_iterator_category = {"_p_iterator_category", "iterator_category *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long_long = {"_p_long_long", "int_least64_t *|int_fast64_t *|Mezzanine::Int64 *|int64_t *|long long *|Mezzanine::MaxInt *|intmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_ptrdiff_t = {"_p_ptrdiff_t", "ptrdiff_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "Mezzanine::Int16 *|short *|int_least16_t *|int16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|Mezzanine::Int8 *|Mezzanine::BinaryTools::BinaryBuffer::Byte *|int_least8_t *|int_fast8_t *|int8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_istreamT_char_std__char_traitsT_char_t_t", "std::basic_istream< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t = {"_p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t", "std::basic_istream< wchar_t,std::char_traits< wchar_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t = {"_p_std__basic_ostreamT_char_std__char_traitsT_char_t_t", "std::basic_ostream< char,std::char_traits< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t = {"_p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t", "std::basic_ostream< wchar_t,std::char_traits< wchar_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t = {"_p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t", "std::basic_string< char,std::char_traits< char >,std::allocator< char > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t = {"_p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t", "std::basic_string< wchar_t,std::char_traits< wchar_t >,std::allocator< wchar_t > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__exception = {"_p_std__exception", "std::exception *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__functionT_bool_fMezzanine__EntityProxy_pF_t = {"_p_std__functionT_bool_fMezzanine__EntityProxy_pF_t", "std::function< bool (Mezzanine::EntityProxy *) > *|Mezzanine::RayQuery::FilterFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__istream = {"_p_std__istream", "std::istream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__listT_std__pairT_std__string_std__string_t_t = {"_p_std__listT_std__pairT_std__string_std__string_t_t", "Mezzanine::NameValuePairList *|std::list< std::pair< std::string,std::string > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_std__string_std__string_t = {"_p_std__mapT_std__string_std__string_t", "Mezzanine::NameValuePairMap *|std::map< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_std__string_std__string_t = {"_p_std__pairT_std__string_std__string_t", "Mezzanine::NameValuePair *|std::pair< std::string,std::string > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__setT_std__string_t = {"_p_std__setT_std__string_t", "std::set< std::string > *|Mezzanine::StringSet *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_Mezzanine__EntityManagementEvent_t = {"_p_std__shared_ptrT_Mezzanine__EntityManagementEvent_t", "Mezzanine::EntityManagementEventPtr *|std::shared_ptr< Mezzanine::EntityManagementEvent > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "std::string *|Mezzanine::String *|Mezzanine::ConstString *", 0, 0, (void*)&_wrap_class_string, 0};
static swig_type_info _swigt__p_std__stringstream = {"_p_std__stringstream", "Mezzanine::Logger *|std::stringstream *|Mezzanine::StringStream *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__EntityComponent_p_t = {"_p_std__vectorT_Mezzanine__EntityComponent_p_t", "Mezzanine::EntityComponentManager::ComponentVec *|std::vector< Mezzanine::EntityComponent * > *|Mezzanine::Entity::ComponentContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__Entity_p_t = {"_p_std__vectorT_Mezzanine__Entity_p_t", "std::vector< Mezzanine::Entity * > *|Mezzanine::AreaEffect::ObjectContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__RayQueryHit_t = {"_p_std__vectorT_Mezzanine__RayQueryHit_t", "std::vector< Mezzanine::RayQueryHit > *|Mezzanine::RayQuery::ResultContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_Mezzanine__WorldManager_p_t = {"_p_std__vectorT_Mezzanine__WorldManager_p_t", "std::vector< Mezzanine::WorldManager * > *|Mezzanine::World::WorldManagerContainer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__string_t = {"_p_std__vectorT_std__string_t", "std::vector< std::string > *|Mezzanine::StringVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__wstring = {"_p_std__wstring", "std::wstring *|Mezzanine::WideString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|Mezzanine::UInt8 *|uint_least8_t *|uint_fast8_t *|uint8_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_int = {"_p_unsigned_int", "uintptr_t *|uint_least32_t *|uint_fast32_t *|uint32_t *|Mezzanine::UInt32 *|unsigned int *|Mezzanine::TimeMarker *|uint_fast16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "Mezzanine::Whole *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long_long = {"_p_unsigned_long_long", "uint_least64_t *|uint_fast64_t *|uint64_t *|Mezzanine::UInt64 *|unsigned long long *|uintmax_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "Mezzanine::UInt16 *|unsigned short *|uint_least16_t *|uint16_t *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_value_type = {"_p_value_type", "value_type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wchar_t = {"_p_wchar_t", "wchar_t *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Byte,
  &_swigt__p_ChannelType,
  &_swigt__p_ComponentContainer,
  &_swigt__p_ComponentIterator,
  &_swigt__p_ComponentRange,
  &_swigt__p_ComponentVec,
  &_swigt__p_ConstComponentIterator,
  &_swigt__p_ConstComponentRange,
  &_swigt__p_ConstEntityIterator,
  &_swigt__p_ConstEntityRange,
  &_swigt__p_ConstFactoryIterator,
  &_swigt__p_ConstManagerFactoryIterator,
  &_swigt__p_ConstObjectIterator,
  &_swigt__p_ConstResultIterator,
  &_swigt__p_ConstWorldManagerIterator,
  &_swigt__p_DefaultEventPublisher,
  &_swigt__p_EntityContainer,
  &_swigt__p_EntityIterator,
  &_swigt__p_EntityRange,
  &_swigt__p_EventNameType,
  &_swigt__p_FactoryContainer,
  &_swigt__p_FactoryIterator,
  &_swigt__p_FilterFunction,
  &_swigt__p_GeometryRayTestResult,
  &_swigt__p_IDType,
  &_swigt__p_ManagerFactoryIterator,
  &_swigt__p_ManagerFactoryMap,
  &_swigt__p_MathTools__GeometryRayTestResult,
  &_swigt__p_MathTools__PlaneSide,
  &_swigt__p_MathTools__PlaneTestResult,
  &_swigt__p_MathTools__Point3DTestResult,
  &_swigt__p_Mezzanine__Actor,
  &_swigt__p_Mezzanine__ActorFactory,
  &_swigt__p_Mezzanine__ActorUpdateWorkUnit,
  &_swigt__p_Mezzanine__AngleData,
  &_swigt__p_Mezzanine__AreaEffect,
  &_swigt__p_Mezzanine__AreaEffectFactory,
  &_swigt__p_Mezzanine__AreaEffectUpdateWorkUnit,
  &_swigt__p_Mezzanine__ArithmeticException,
  &_swigt__p_Mezzanine__AxisAlignedBox,
  &_swigt__p_Mezzanine__BinaryTools__BinaryBuffer,
  &_swigt__p_Mezzanine__CameraController,
  &_swigt__p_Mezzanine__Circle,
  &_swigt__p_Mezzanine__ColourValue,
  &_swigt__p_Mezzanine__Debris,
  &_swigt__p_Mezzanine__DebrisFactory,
  &_swigt__p_Mezzanine__DebrisUpdateWorkUnit,
  &_swigt__p_Mezzanine__DefaultEntityManagerFactory,
  &_swigt__p_Mezzanine__DirectoryException,
  &_swigt__p_Mezzanine__DirectoryNotFoundException,
  &_swigt__p_Mezzanine__DirectoryPermissionException,
  &_swigt__p_Mezzanine__DirectoryReadException,
  &_swigt__p_Mezzanine__DirectoryWriteException,
  &_swigt__p_Mezzanine__Entity,
  &_swigt__p_Mezzanine__EntityComponent,
  &_swigt__p_Mezzanine__EntityComponentID,
  &_swigt__p_Mezzanine__EntityComponentManager,
  &_swigt__p_Mezzanine__EntityFactory,
  &_swigt__p_Mezzanine__EntityID,
  &_swigt__p_Mezzanine__EntityManagementEvent,
  &_swigt__p_Mezzanine__EntityManager,
  &_swigt__p_Mezzanine__EntityProxy,
  &_swigt__p_Mezzanine__ExceptionBase,
  &_swigt__p_Mezzanine__FieldOfForce,
  &_swigt__p_Mezzanine__FileException,
  &_swigt__p_Mezzanine__FileNotFoundException,
  &_swigt__p_Mezzanine__FilePermissionException,
  &_swigt__p_Mezzanine__FileReadException,
  &_swigt__p_Mezzanine__FileWriteException,
  &_swigt__p_Mezzanine__GenericEntityFactory,
  &_swigt__p_Mezzanine__Graphics__CameraProxy,
  &_swigt__p_Mezzanine__Graphics__Mesh,
  &_swigt__p_Mezzanine__Graphics__RenderableRayQuery,
  &_swigt__p_Mezzanine__Graphics__SceneManager,
  &_swigt__p_Mezzanine__GravityField,
  &_swigt__p_Mezzanine__GravityWell,
  &_swigt__p_Mezzanine__IOException,
  &_swigt__p_Mezzanine__IOReadException,
  &_swigt__p_Mezzanine__IOWriteException,
  &_swigt__p_Mezzanine__InstanceIdentityDuplicateException,
  &_swigt__p_Mezzanine__InstanceIdentityException,
  &_swigt__p_Mezzanine__InstanceIdentityInvalidException,
  &_swigt__p_Mezzanine__InstanceIdentityNotFoundException,
  &_swigt__p_Mezzanine__InternalException,
  &_swigt__p_Mezzanine__InvalidAssignment,
  &_swigt__p_Mezzanine__InvalidStateException,
  &_swigt__p_Mezzanine__InvalidVersionException,
  &_swigt__p_Mezzanine__ManagerBase,
  &_swigt__p_Mezzanine__ManagerFactory,
  &_swigt__p_Mezzanine__Matrix3x3,
  &_swigt__p_Mezzanine__MemoryManagementException,
  &_swigt__p_Mezzanine__MemoryOutOfBoundsException,
  &_swigt__p_Mezzanine__NetworkException,
  &_swigt__p_Mezzanine__NetworkNotFoundException,
  &_swigt__p_Mezzanine__NetworkPermissionException,
  &_swigt__p_Mezzanine__NetworkReadException,
  &_swigt__p_Mezzanine__NetworkURLException,
  &_swigt__p_Mezzanine__NetworkWriteException,
  &_swigt__p_Mezzanine__NotImplementedException,
  &_swigt__p_Mezzanine__OutOfMemoryException,
  &_swigt__p_Mezzanine__ParametersCastException,
  &_swigt__p_Mezzanine__ParametersException,
  &_swigt__p_Mezzanine__ParametersRangeException,
  &_swigt__p_Mezzanine__Physics__CollisionShape,
  &_swigt__p_Mezzanine__Physics__GhostProxy,
  &_swigt__p_Mezzanine__Physics__ManagerConstructionInfo,
  &_swigt__p_Mezzanine__Plane,
  &_swigt__p_Mezzanine__Quaternion,
  &_swigt__p_Mezzanine__Ray,
  &_swigt__p_Mezzanine__RayQuery,
  &_swigt__p_Mezzanine__RayQueryHit,
  &_swigt__p_Mezzanine__RectBaseT_float_t,
  &_swigt__p_Mezzanine__RectBaseT_int_t,
  &_swigt__p_Mezzanine__RectBaseT_unsigned_long_t,
  &_swigt__p_Mezzanine__RenderingAPIException,
  &_swigt__p_Mezzanine__RigidDebris,
  &_swigt__p_Mezzanine__RuntimeAssertionException,
  &_swigt__p_Mezzanine__ScriptException,
  &_swigt__p_Mezzanine__ScriptLuaErrErrException,
  &_swigt__p_Mezzanine__ScriptLuaException,
  &_swigt__p_Mezzanine__ScriptLuaRuntimeException,
  &_swigt__p_Mezzanine__ScriptLuaYieldException,
  &_swigt__p_Mezzanine__SoftDebris,
  &_swigt__p_Mezzanine__Sphere,
  &_swigt__p_Mezzanine__SyntaxErrorException,
  &_swigt__p_Mezzanine__SyntaxErrorLuaException,
  &_swigt__p_Mezzanine__SyntaxErrorXMLException,
  &_swigt__p_Mezzanine__SyntaxErrorXPathException,
  &_swigt__p_Mezzanine__TerrainUpdateWorkUnit,
  &_swigt__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,
  &_swigt__p_Mezzanine__Threading__RawFile,
  &_swigt__p_Mezzanine__Timer,
  &_swigt__p_Mezzanine__Transform,
  &_swigt__p_Mezzanine__TransformableChildObject,
  &_swigt__p_Mezzanine__TransformableObject,
  &_swigt__p_Mezzanine__Vector2,
  &_swigt__p_Mezzanine__Vector2LengthCompare,
  &_swigt__p_Mezzanine__Vector3,
  &_swigt__p_Mezzanine__Vector3LengthCompare,
  &_swigt__p_Mezzanine__Vehicle,
  &_swigt__p_Mezzanine__VehicleFactory,
  &_swigt__p_Mezzanine__VehicleUpdateWorkUnit,
  &_swigt__p_Mezzanine__World,
  &_swigt__p_Mezzanine__WorldManager,
  &_swigt__p_Mezzanine__WorldManagerFactory,
  &_swigt__p_Mezzanine__XML__Attribute,
  &_swigt__p_Mezzanine__XML__AttributeIterator,
  &_swigt__p_Mezzanine__XML__AttributeStruct,
  &_swigt__p_Mezzanine__XML__Document,
  &_swigt__p_Mezzanine__XML__NamedNodeIterator,
  &_swigt__p_Mezzanine__XML__Node,
  &_swigt__p_Mezzanine__XML__NodeIterator,
  &_swigt__p_Mezzanine__XML__NodeStruct,
  &_swigt__p_Mezzanine__XML__NodeText,
  &_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,
  &_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,
  &_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,
  &_swigt__p_Mezzanine__XML__ParseResult,
  &_swigt__p_Mezzanine__XML__TreeWalker,
  &_swigt__p_Mezzanine__XML__Writer,
  &_swigt__p_Mezzanine__XML__WriterFile,
  &_swigt__p_Mezzanine__XML__WriterStream,
  &_swigt__p_Mezzanine__XML__XMLStreamWrapper,
  &_swigt__p_Mezzanine__XML__XPathNode,
  &_swigt__p_Mezzanine__XML__XPathNodeSet,
  &_swigt__p_Mezzanine__XML__XPathParseResult,
  &_swigt__p_Mezzanine__XML__XPathQuery,
  &_swigt__p_Mezzanine__XML__XPathVariable,
  &_swigt__p_Mezzanine__XML__XPathVariableSet,
  &_swigt__p_ObjectContainer,
  &_swigt__p_ObjectIterator,
  &_swigt__p_Ogre__AxisAlignedBox,
  &_swigt__p_Ogre__ColourValue,
  &_swigt__p_Ogre__Plane,
  &_swigt__p_Ogre__Quaternion,
  &_swigt__p_Ogre__Ray,
  &_swigt__p_Ogre__Sphere,
  &_swigt__p_Ogre__Vector2,
  &_swigt__p_Ogre__Vector3,
  &_swigt__p_PlaneRayTestResult,
  &_swigt__p_RayTestResult,
  &_swigt__p_ResultContainer,
  &_swigt__p_ResultIterator,
  &_swigt__p_SDL_Event,
  &_swigt__p_StreamSize,
  &_swigt__p_WorldManagerContainer,
  &_swigt__p_WorldManagerIterator,
  &_swigt__p_XML__Node,
  &_swigt__p_attribute_iterator,
  &_swigt__p_bool,
  &_swigt__p_btQuaternion,
  &_swigt__p_btTransform,
  &_swigt__p_btVector3,
  &_swigt__p_char,
  &_swigt__p_difference_type,
  &_swigt__p_double,
  &_swigt__p_f_p_void__void,
  &_swigt__p_f_size_t__p_void,
  &_swigt__p_float,
  &_swigt__p_int,
  &_swigt__p_iterator,
  &_swigt__p_iterator_category,
  &_swigt__p_long_long,
  &_swigt__p_ptrdiff_t,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t,
  &_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  &_swigt__p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,
  &_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  &_swigt__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,
  &_swigt__p_std__exception,
  &_swigt__p_std__functionT_bool_fMezzanine__EntityProxy_pF_t,
  &_swigt__p_std__istream,
  &_swigt__p_std__listT_std__pairT_std__string_std__string_t_t,
  &_swigt__p_std__mapT_std__string_std__string_t,
  &_swigt__p_std__pairT_std__string_std__string_t,
  &_swigt__p_std__setT_std__string_t,
  &_swigt__p_std__shared_ptrT_Mezzanine__EntityManagementEvent_t,
  &_swigt__p_std__string,
  &_swigt__p_std__stringstream,
  &_swigt__p_std__vectorT_Mezzanine__EntityComponent_p_t,
  &_swigt__p_std__vectorT_Mezzanine__Entity_p_t,
  &_swigt__p_std__vectorT_Mezzanine__RayQueryHit_t,
  &_swigt__p_std__vectorT_Mezzanine__WorldManager_p_t,
  &_swigt__p_std__vectorT_std__string_t,
  &_swigt__p_std__wstring,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_int,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_long_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_value_type,
  &_swigt__p_wchar_t,
};

static swig_cast_info _swigc__p_Byte[] = {  {&_swigt__p_Byte, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ChannelType[] = {  {&_swigt__p_ChannelType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComponentContainer[] = {  {&_swigt__p_ComponentContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComponentIterator[] = {  {&_swigt__p_ComponentIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComponentRange[] = {  {&_swigt__p_ComponentRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ComponentVec[] = {  {&_swigt__p_ComponentVec, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstComponentIterator[] = {  {&_swigt__p_ConstComponentIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstComponentRange[] = {  {&_swigt__p_ConstComponentRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstEntityIterator[] = {  {&_swigt__p_ConstEntityIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstEntityRange[] = {  {&_swigt__p_ConstEntityRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstFactoryIterator[] = {  {&_swigt__p_ConstFactoryIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstManagerFactoryIterator[] = {  {&_swigt__p_ConstManagerFactoryIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstObjectIterator[] = {  {&_swigt__p_ConstObjectIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstResultIterator[] = {  {&_swigt__p_ConstResultIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ConstWorldManagerIterator[] = {  {&_swigt__p_ConstWorldManagerIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_DefaultEventPublisher[] = {  {&_swigt__p_DefaultEventPublisher, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntityContainer[] = {  {&_swigt__p_EntityContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntityIterator[] = {  {&_swigt__p_EntityIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EntityRange[] = {  {&_swigt__p_EntityRange, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_EventNameType[] = {  {&_swigt__p_EventNameType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FactoryContainer[] = {  {&_swigt__p_FactoryContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FactoryIterator[] = {  {&_swigt__p_FactoryIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_FilterFunction[] = {  {&_swigt__p_FilterFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GeometryRayTestResult[] = {  {&_swigt__p_GeometryRayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_IDType[] = {  {&_swigt__p_IDType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ManagerFactoryIterator[] = {  {&_swigt__p_ManagerFactoryIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ManagerFactoryMap[] = {  {&_swigt__p_ManagerFactoryMap, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MathTools__GeometryRayTestResult[] = {  {&_swigt__p_MathTools__GeometryRayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MathTools__PlaneSide[] = {  {&_swigt__p_MathTools__PlaneSide, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MathTools__PlaneTestResult[] = {  {&_swigt__p_MathTools__PlaneTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_MathTools__Point3DTestResult[] = {  {&_swigt__p_MathTools__Point3DTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Actor[] = {  {&_swigt__p_Mezzanine__Actor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ActorFactory[] = {  {&_swigt__p_Mezzanine__ActorFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ActorUpdateWorkUnit[] = {  {&_swigt__p_Mezzanine__ActorUpdateWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AngleData[] = {  {&_swigt__p_Mezzanine__AngleData, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AreaEffect[] = {  {&_swigt__p_Mezzanine__AreaEffect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AreaEffectFactory[] = {  {&_swigt__p_Mezzanine__AreaEffectFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AreaEffectUpdateWorkUnit[] = {  {&_swigt__p_Mezzanine__AreaEffectUpdateWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ArithmeticException[] = {  {&_swigt__p_Mezzanine__ArithmeticException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__AxisAlignedBox[] = {  {&_swigt__p_Mezzanine__AxisAlignedBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__BinaryTools__BinaryBuffer[] = {  {&_swigt__p_Mezzanine__BinaryTools__BinaryBuffer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__CameraController[] = {  {&_swigt__p_Mezzanine__CameraController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Circle[] = {  {&_swigt__p_Mezzanine__Circle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ColourValue[] = {  {&_swigt__p_Mezzanine__ColourValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Debris[] = {  {&_swigt__p_Mezzanine__Debris, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DebrisFactory[] = {  {&_swigt__p_Mezzanine__DebrisFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DebrisUpdateWorkUnit[] = {  {&_swigt__p_Mezzanine__DebrisUpdateWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DefaultEntityManagerFactory[] = {  {&_swigt__p_Mezzanine__DefaultEntityManagerFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryException[] = {  {&_swigt__p_Mezzanine__DirectoryException, 0, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__DirectoryException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__DirectoryException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryNotFoundException[] = {  {&_swigt__p_Mezzanine__DirectoryNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryPermissionException[] = {  {&_swigt__p_Mezzanine__DirectoryPermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryReadException[] = {  {&_swigt__p_Mezzanine__DirectoryReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__DirectoryWriteException[] = {  {&_swigt__p_Mezzanine__DirectoryWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Entity[] = {  {&_swigt__p_Mezzanine__Debris, _p_Mezzanine__DebrisTo_p_Mezzanine__Entity, 0, 0},  {&_swigt__p_Mezzanine__AreaEffect, _p_Mezzanine__AreaEffectTo_p_Mezzanine__Entity, 0, 0},  {&_swigt__p_Mezzanine__Vehicle, _p_Mezzanine__VehicleTo_p_Mezzanine__Entity, 0, 0},  {&_swigt__p_Mezzanine__Entity, 0, 0, 0},  {&_swigt__p_Mezzanine__Actor, _p_Mezzanine__ActorTo_p_Mezzanine__Entity, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EntityComponent[] = {  {&_swigt__p_Mezzanine__EntityComponent, 0, 0, 0},  {&_swigt__p_Mezzanine__EntityProxy, _p_Mezzanine__EntityProxyTo_p_Mezzanine__EntityComponent, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EntityComponentID[] = {  {&_swigt__p_Mezzanine__EntityComponentID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EntityComponentManager[] = {  {&_swigt__p_Mezzanine__EntityComponentManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EntityFactory[] = {  {&_swigt__p_Mezzanine__EntityFactory, 0, 0, 0},  {&_swigt__p_Mezzanine__GenericEntityFactory, _p_Mezzanine__GenericEntityFactoryTo_p_Mezzanine__EntityFactory, 0, 0},  {&_swigt__p_Mezzanine__ActorFactory, _p_Mezzanine__ActorFactoryTo_p_Mezzanine__EntityFactory, 0, 0},  {&_swigt__p_Mezzanine__AreaEffectFactory, _p_Mezzanine__AreaEffectFactoryTo_p_Mezzanine__EntityFactory, 0, 0},  {&_swigt__p_Mezzanine__DebrisFactory, _p_Mezzanine__DebrisFactoryTo_p_Mezzanine__EntityFactory, 0, 0},  {&_swigt__p_Mezzanine__VehicleFactory, _p_Mezzanine__VehicleFactoryTo_p_Mezzanine__EntityFactory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EntityID[] = {  {&_swigt__p_Mezzanine__EntityID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EntityManagementEvent[] = {  {&_swigt__p_Mezzanine__EntityManagementEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EntityManager[] = {  {&_swigt__p_Mezzanine__EntityManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__EntityProxy[] = {  {&_swigt__p_Mezzanine__EntityProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ExceptionBase[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, _p_Mezzanine__InvalidAssignmentTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorException, _p_Mezzanine__SyntaxErrorExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptException, _p_Mezzanine__ScriptExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityException, _p_Mezzanine__InstanceIdentityExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__IOException, _p_Mezzanine__IOExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__MemoryManagementException, _p_Mezzanine__MemoryManagementExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ParametersException, _p_Mezzanine__ParametersExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ArithmeticException, _p_Mezzanine__ArithmeticExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InvalidVersionException, _p_Mezzanine__InvalidVersionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InvalidStateException, _p_Mezzanine__InvalidStateExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__RenderingAPIException, _p_Mezzanine__RenderingAPIExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__RuntimeAssertionException, _p_Mezzanine__RuntimeAssertionExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__InternalException, _p_Mezzanine__InternalExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__NotImplementedException, _p_Mezzanine__NotImplementedExceptionTo_p_Mezzanine__ExceptionBase, 0, 0},  {&_swigt__p_Mezzanine__ExceptionBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FieldOfForce[] = {  {&_swigt__p_Mezzanine__FieldOfForce, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileException[] = {  {&_swigt__p_Mezzanine__FileException, 0, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__FileException, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__FileException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileNotFoundException[] = {  {&_swigt__p_Mezzanine__FileNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FilePermissionException[] = {  {&_swigt__p_Mezzanine__FilePermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileReadException[] = {  {&_swigt__p_Mezzanine__FileReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__FileWriteException[] = {  {&_swigt__p_Mezzanine__FileWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__GenericEntityFactory[] = {  {&_swigt__p_Mezzanine__GenericEntityFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Graphics__CameraProxy[] = {  {&_swigt__p_Mezzanine__Graphics__CameraProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Graphics__Mesh[] = {  {&_swigt__p_Mezzanine__Graphics__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Graphics__RenderableRayQuery[] = {  {&_swigt__p_Mezzanine__Graphics__RenderableRayQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Graphics__SceneManager[] = {  {&_swigt__p_Mezzanine__Graphics__SceneManager, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__GravityField[] = {  {&_swigt__p_Mezzanine__GravityField, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__GravityWell[] = {  {&_swigt__p_Mezzanine__GravityWell, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOException[] = {  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOException, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_Mezzanine__IOException, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_Mezzanine__IOException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOReadException[] = {  {&_swigt__p_Mezzanine__IOReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__IOWriteException[] = {  {&_swigt__p_Mezzanine__IOWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityDuplicateException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityException, 0, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_Mezzanine__InstanceIdentityException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityInvalidException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InstanceIdentityNotFoundException[] = {  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InternalException[] = {  {&_swigt__p_Mezzanine__InternalException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidAssignment[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidStateException[] = {  {&_swigt__p_Mezzanine__InvalidStateException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__InvalidVersionException[] = {  {&_swigt__p_Mezzanine__InvalidVersionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ManagerBase[] = {  {&_swigt__p_Mezzanine__WorldManager, _p_Mezzanine__WorldManagerTo_p_Mezzanine__ManagerBase, 0, 0},  {&_swigt__p_Mezzanine__EntityComponentManager, _p_Mezzanine__EntityComponentManagerTo_p_Mezzanine__ManagerBase, 0, 0},  {&_swigt__p_Mezzanine__EntityManager, _p_Mezzanine__EntityManagerTo_p_Mezzanine__ManagerBase, 0, 0},  {&_swigt__p_Mezzanine__ManagerBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ManagerFactory[] = {  {&_swigt__p_Mezzanine__ManagerFactory, 0, 0, 0},  {&_swigt__p_Mezzanine__WorldManagerFactory, _p_Mezzanine__WorldManagerFactoryTo_p_Mezzanine__ManagerFactory, 0, 0},  {&_swigt__p_Mezzanine__DefaultEntityManagerFactory, _p_Mezzanine__DefaultEntityManagerFactoryTo_p_Mezzanine__ManagerFactory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Matrix3x3[] = {  {&_swigt__p_Mezzanine__Matrix3x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__MemoryManagementException[] = {  {&_swigt__p_Mezzanine__MemoryManagementException, 0, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_Mezzanine__MemoryManagementException, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_Mezzanine__MemoryManagementException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__MemoryOutOfBoundsException[] = {  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkException[] = {  {&_swigt__p_Mezzanine__NetworkException, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_Mezzanine__NetworkException, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_Mezzanine__NetworkException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkNotFoundException[] = {  {&_swigt__p_Mezzanine__NetworkNotFoundException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkPermissionException[] = {  {&_swigt__p_Mezzanine__NetworkPermissionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkReadException[] = {  {&_swigt__p_Mezzanine__NetworkReadException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkURLException[] = {  {&_swigt__p_Mezzanine__NetworkURLException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NetworkWriteException[] = {  {&_swigt__p_Mezzanine__NetworkWriteException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__NotImplementedException[] = {  {&_swigt__p_Mezzanine__NotImplementedException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__OutOfMemoryException[] = {  {&_swigt__p_Mezzanine__OutOfMemoryException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersCastException[] = {  {&_swigt__p_Mezzanine__ParametersCastException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersException[] = {  {&_swigt__p_Mezzanine__ParametersException, 0, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_Mezzanine__ParametersException, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_Mezzanine__ParametersException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ParametersRangeException[] = {  {&_swigt__p_Mezzanine__ParametersRangeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__CollisionShape[] = {  {&_swigt__p_Mezzanine__Physics__CollisionShape, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__GhostProxy[] = {  {&_swigt__p_Mezzanine__Physics__GhostProxy, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Physics__ManagerConstructionInfo[] = {  {&_swigt__p_Mezzanine__Physics__ManagerConstructionInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Plane[] = {  {&_swigt__p_Mezzanine__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Quaternion[] = {  {&_swigt__p_Mezzanine__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Ray[] = {  {&_swigt__p_Mezzanine__Ray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RayQuery[] = {  {&_swigt__p_Mezzanine__RayQuery, 0, 0, 0},  {&_swigt__p_Mezzanine__Graphics__RenderableRayQuery, _p_Mezzanine__Graphics__RenderableRayQueryTo_p_Mezzanine__RayQuery, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RayQueryHit[] = {  {&_swigt__p_Mezzanine__RayQueryHit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RectBaseT_float_t[] = {  {&_swigt__p_Mezzanine__RectBaseT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RectBaseT_int_t[] = {  {&_swigt__p_Mezzanine__RectBaseT_int_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RectBaseT_unsigned_long_t[] = {  {&_swigt__p_Mezzanine__RectBaseT_unsigned_long_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RenderingAPIException[] = {  {&_swigt__p_Mezzanine__RenderingAPIException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RigidDebris[] = {  {&_swigt__p_Mezzanine__RigidDebris, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__RuntimeAssertionException[] = {  {&_swigt__p_Mezzanine__RuntimeAssertionException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptException[] = {  {&_swigt__p_Mezzanine__ScriptException, 0, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaErrErrException[] = {  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaException[] = {  {&_swigt__p_Mezzanine__ScriptLuaException, 0, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_Mezzanine__ScriptLuaException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaRuntimeException[] = {  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__ScriptLuaYieldException[] = {  {&_swigt__p_Mezzanine__ScriptLuaYieldException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SoftDebris[] = {  {&_swigt__p_Mezzanine__SoftDebris, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Sphere[] = {  {&_swigt__p_Mezzanine__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorException, 0, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_Mezzanine__SyntaxErrorException, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorLuaException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorXMLException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__SyntaxErrorXPathException[] = {  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__TerrainUpdateWorkUnit[] = {  {&_swigt__p_Mezzanine__TerrainUpdateWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type[] = {  {&_swigt__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Threading__RawFile[] = {  {&_swigt__p_Mezzanine__Threading__RawFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Timer[] = {  {&_swigt__p_Mezzanine__Timer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Transform[] = {  {&_swigt__p_Mezzanine__Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__TransformableChildObject[] = {  {&_swigt__p_Mezzanine__TransformableChildObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__TransformableObject[] = {  {&_swigt__p_Mezzanine__Debris, _p_Mezzanine__DebrisTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__AreaEffect, _p_Mezzanine__AreaEffectTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__Vehicle, _p_Mezzanine__VehicleTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__TransformableObject, 0, 0, 0},  {&_swigt__p_Mezzanine__Entity, _p_Mezzanine__EntityTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__Actor, _p_Mezzanine__ActorTo_p_Mezzanine__TransformableObject, 0, 0},  {&_swigt__p_Mezzanine__EntityProxy, _p_Mezzanine__EntityProxyTo_p_Mezzanine__TransformableObject, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector2[] = {  {&_swigt__p_Mezzanine__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector2LengthCompare[] = {  {&_swigt__p_Mezzanine__Vector2LengthCompare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector3[] = {  {&_swigt__p_Mezzanine__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vector3LengthCompare[] = {  {&_swigt__p_Mezzanine__Vector3LengthCompare, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__Vehicle[] = {  {&_swigt__p_Mezzanine__Vehicle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__VehicleFactory[] = {  {&_swigt__p_Mezzanine__VehicleFactory, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__VehicleUpdateWorkUnit[] = {  {&_swigt__p_Mezzanine__VehicleUpdateWorkUnit, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__World[] = {  {&_swigt__p_Mezzanine__World, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldManager[] = {  {&_swigt__p_Mezzanine__WorldManager, 0, 0, 0},  {&_swigt__p_Mezzanine__EntityComponentManager, _p_Mezzanine__EntityComponentManagerTo_p_Mezzanine__WorldManager, 0, 0},  {&_swigt__p_Mezzanine__EntityManager, _p_Mezzanine__EntityManagerTo_p_Mezzanine__WorldManager, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__WorldManagerFactory[] = {  {&_swigt__p_Mezzanine__WorldManagerFactory, 0, 0, 0},  {&_swigt__p_Mezzanine__DefaultEntityManagerFactory, _p_Mezzanine__DefaultEntityManagerFactoryTo_p_Mezzanine__WorldManagerFactory, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__Attribute[] = {  {&_swigt__p_Mezzanine__XML__Attribute, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__AttributeIterator[] = {  {&_swigt__p_Mezzanine__XML__AttributeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__AttributeStruct[] = {  {&_swigt__p_Mezzanine__XML__AttributeStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__Document[] = {  {&_swigt__p_Mezzanine__XML__Document, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NamedNodeIterator[] = {  {&_swigt__p_Mezzanine__XML__NamedNodeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__Node[] = {  {&_swigt__p_Mezzanine__XML__Node, 0, 0, 0},  {&_swigt__p_Mezzanine__XML__Document, _p_Mezzanine__XML__DocumentTo_p_Mezzanine__XML__Node, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NodeIterator[] = {  {&_swigt__p_Mezzanine__XML__NodeIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NodeStruct[] = {  {&_swigt__p_Mezzanine__XML__NodeStruct, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__NodeText[] = {  {&_swigt__p_Mezzanine__XML__NodeText, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t[] = {  {&_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t[] = {  {&_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t[] = {  {&_swigt__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__ParseResult[] = {  {&_swigt__p_Mezzanine__XML__ParseResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__TreeWalker[] = {  {&_swigt__p_Mezzanine__XML__TreeWalker, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__Writer[] = {  {&_swigt__p_Mezzanine__XML__Writer, 0, 0, 0},  {&_swigt__p_Mezzanine__XML__XMLStreamWrapper, _p_Mezzanine__XML__XMLStreamWrapperTo_p_Mezzanine__XML__Writer, 0, 0},  {&_swigt__p_Mezzanine__XML__WriterFile, _p_Mezzanine__XML__WriterFileTo_p_Mezzanine__XML__Writer, 0, 0},  {&_swigt__p_Mezzanine__XML__WriterStream, _p_Mezzanine__XML__WriterStreamTo_p_Mezzanine__XML__Writer, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__WriterFile[] = {  {&_swigt__p_Mezzanine__XML__WriterFile, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__WriterStream[] = {  {&_swigt__p_Mezzanine__XML__WriterStream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XMLStreamWrapper[] = {  {&_swigt__p_Mezzanine__XML__XMLStreamWrapper, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathNode[] = {  {&_swigt__p_Mezzanine__XML__XPathNode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathNodeSet[] = {  {&_swigt__p_Mezzanine__XML__XPathNodeSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathParseResult[] = {  {&_swigt__p_Mezzanine__XML__XPathParseResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathQuery[] = {  {&_swigt__p_Mezzanine__XML__XPathQuery, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathVariable[] = {  {&_swigt__p_Mezzanine__XML__XPathVariable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Mezzanine__XML__XPathVariableSet[] = {  {&_swigt__p_Mezzanine__XML__XPathVariableSet, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectContainer[] = {  {&_swigt__p_ObjectContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ObjectIterator[] = {  {&_swigt__p_ObjectIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__AxisAlignedBox[] = {  {&_swigt__p_Ogre__AxisAlignedBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__ColourValue[] = {  {&_swigt__p_Ogre__ColourValue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Plane[] = {  {&_swigt__p_Ogre__Plane, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Quaternion[] = {  {&_swigt__p_Ogre__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Ray[] = {  {&_swigt__p_Ogre__Ray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Sphere[] = {  {&_swigt__p_Ogre__Sphere, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector2[] = {  {&_swigt__p_Ogre__Vector2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Ogre__Vector3[] = {  {&_swigt__p_Ogre__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_PlaneRayTestResult[] = {  {&_swigt__p_PlaneRayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_RayTestResult[] = {  {&_swigt__p_RayTestResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ResultContainer[] = {  {&_swigt__p_ResultContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ResultIterator[] = {  {&_swigt__p_ResultIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SDL_Event[] = {  {&_swigt__p_SDL_Event, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_StreamSize[] = {  {&_swigt__p_StreamSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WorldManagerContainer[] = {  {&_swigt__p_WorldManagerContainer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WorldManagerIterator[] = {  {&_swigt__p_WorldManagerIterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_XML__Node[] = {  {&_swigt__p_XML__Node, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_attribute_iterator[] = {  {&_swigt__p_attribute_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_bool[] = {  {&_swigt__p_bool, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btQuaternion[] = {  {&_swigt__p_btQuaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btTransform[] = {  {&_swigt__p_btTransform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_btVector3[] = {  {&_swigt__p_btVector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_difference_type[] = {  {&_swigt__p_difference_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_double[] = {  {&_swigt__p_double, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_p_void__void[] = {  {&_swigt__p_f_p_void__void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_size_t__p_void[] = {  {&_swigt__p_f_size_t__p_void, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator[] = {  {&_swigt__p_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_iterator_category[] = {  {&_swigt__p_iterator_category, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long_long[] = {  {&_swigt__p_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_ptrdiff_t[] = {  {&_swigt__p_ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_istreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t[] = {  {&_swigt__p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t[] = {  {&_swigt__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t[] = {  {&_swigt__p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t[] = {  {&_swigt__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t[] = {  {&_swigt__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__exception[] = {  {&_swigt__p_Mezzanine__InvalidAssignment, _p_Mezzanine__InvalidAssignmentTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorException, _p_Mezzanine__SyntaxErrorExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXMLException, _p_Mezzanine__SyntaxErrorXMLExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorXPathException, _p_Mezzanine__SyntaxErrorXPathExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__SyntaxErrorLuaException, _p_Mezzanine__SyntaxErrorLuaExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptException, _p_Mezzanine__ScriptExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaErrErrException, _p_Mezzanine__ScriptLuaErrErrExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaRuntimeException, _p_Mezzanine__ScriptLuaRuntimeExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaException, _p_Mezzanine__ScriptLuaExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ScriptLuaYieldException, _p_Mezzanine__ScriptLuaYieldExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityDuplicateException, _p_Mezzanine__InstanceIdentityDuplicateExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityNotFoundException, _p_Mezzanine__InstanceIdentityNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityInvalidException, _p_Mezzanine__InstanceIdentityInvalidExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InstanceIdentityException, _p_Mezzanine__InstanceIdentityExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOReadException, _p_Mezzanine__IOReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOWriteException, _p_Mezzanine__IOWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__IOException, _p_Mezzanine__IOExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileException, _p_Mezzanine__FileExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileReadException, _p_Mezzanine__FileReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileWriteException, _p_Mezzanine__FileWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FileNotFoundException, _p_Mezzanine__FileNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_std__exception, 0, 0, 0},  {&_swigt__p_Mezzanine__NetworkException, _p_Mezzanine__NetworkExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkReadException, _p_Mezzanine__NetworkReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkWriteException, _p_Mezzanine__NetworkWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkNotFoundException, _p_Mezzanine__NetworkNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkURLException, _p_Mezzanine__NetworkURLExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NetworkPermissionException, _p_Mezzanine__NetworkPermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryPermissionException, _p_Mezzanine__DirectoryPermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryNotFoundException, _p_Mezzanine__DirectoryNotFoundExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryWriteException, _p_Mezzanine__DirectoryWriteExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryReadException, _p_Mezzanine__DirectoryReadExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__DirectoryException, _p_Mezzanine__DirectoryExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__FilePermissionException, _p_Mezzanine__FilePermissionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__MemoryOutOfBoundsException, _p_Mezzanine__MemoryOutOfBoundsExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__OutOfMemoryException, _p_Mezzanine__OutOfMemoryExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__MemoryManagementException, _p_Mezzanine__MemoryManagementExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersException, _p_Mezzanine__ParametersExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersCastException, _p_Mezzanine__ParametersCastExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ParametersRangeException, _p_Mezzanine__ParametersRangeExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ArithmeticException, _p_Mezzanine__ArithmeticExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InvalidVersionException, _p_Mezzanine__InvalidVersionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InvalidStateException, _p_Mezzanine__InvalidStateExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__RenderingAPIException, _p_Mezzanine__RenderingAPIExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__RuntimeAssertionException, _p_Mezzanine__RuntimeAssertionExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__InternalException, _p_Mezzanine__InternalExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__NotImplementedException, _p_Mezzanine__NotImplementedExceptionTo_p_std__exception, 0, 0},  {&_swigt__p_Mezzanine__ExceptionBase, _p_Mezzanine__ExceptionBaseTo_p_std__exception, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__functionT_bool_fMezzanine__EntityProxy_pF_t[] = {  {&_swigt__p_std__functionT_bool_fMezzanine__EntityProxy_pF_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__istream[] = {  {&_swigt__p_std__istream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listT_std__pairT_std__string_std__string_t_t[] = {  {&_swigt__p_std__listT_std__pairT_std__string_std__string_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_std__string_std__string_t[] = {  {&_swigt__p_std__mapT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_std__string_std__string_t[] = {  {&_swigt__p_std__pairT_std__string_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__setT_std__string_t[] = {  {&_swigt__p_std__setT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_Mezzanine__EntityManagementEvent_t[] = {  {&_swigt__p_std__shared_ptrT_Mezzanine__EntityManagementEvent_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__stringstream[] = {  {&_swigt__p_std__stringstream, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__EntityComponent_p_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__EntityComponent_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__Entity_p_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__Entity_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__RayQueryHit_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__RayQueryHit_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_Mezzanine__WorldManager_p_t[] = {  {&_swigt__p_std__vectorT_Mezzanine__WorldManager_p_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__string_t[] = {  {&_swigt__p_std__vectorT_std__string_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__wstring[] = {  {&_swigt__p_std__wstring, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_int[] = {  {&_swigt__p_unsigned_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long_long[] = {  {&_swigt__p_unsigned_long_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_value_type[] = {  {&_swigt__p_value_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wchar_t[] = {  {&_swigt__p_wchar_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Byte,
  _swigc__p_ChannelType,
  _swigc__p_ComponentContainer,
  _swigc__p_ComponentIterator,
  _swigc__p_ComponentRange,
  _swigc__p_ComponentVec,
  _swigc__p_ConstComponentIterator,
  _swigc__p_ConstComponentRange,
  _swigc__p_ConstEntityIterator,
  _swigc__p_ConstEntityRange,
  _swigc__p_ConstFactoryIterator,
  _swigc__p_ConstManagerFactoryIterator,
  _swigc__p_ConstObjectIterator,
  _swigc__p_ConstResultIterator,
  _swigc__p_ConstWorldManagerIterator,
  _swigc__p_DefaultEventPublisher,
  _swigc__p_EntityContainer,
  _swigc__p_EntityIterator,
  _swigc__p_EntityRange,
  _swigc__p_EventNameType,
  _swigc__p_FactoryContainer,
  _swigc__p_FactoryIterator,
  _swigc__p_FilterFunction,
  _swigc__p_GeometryRayTestResult,
  _swigc__p_IDType,
  _swigc__p_ManagerFactoryIterator,
  _swigc__p_ManagerFactoryMap,
  _swigc__p_MathTools__GeometryRayTestResult,
  _swigc__p_MathTools__PlaneSide,
  _swigc__p_MathTools__PlaneTestResult,
  _swigc__p_MathTools__Point3DTestResult,
  _swigc__p_Mezzanine__Actor,
  _swigc__p_Mezzanine__ActorFactory,
  _swigc__p_Mezzanine__ActorUpdateWorkUnit,
  _swigc__p_Mezzanine__AngleData,
  _swigc__p_Mezzanine__AreaEffect,
  _swigc__p_Mezzanine__AreaEffectFactory,
  _swigc__p_Mezzanine__AreaEffectUpdateWorkUnit,
  _swigc__p_Mezzanine__ArithmeticException,
  _swigc__p_Mezzanine__AxisAlignedBox,
  _swigc__p_Mezzanine__BinaryTools__BinaryBuffer,
  _swigc__p_Mezzanine__CameraController,
  _swigc__p_Mezzanine__Circle,
  _swigc__p_Mezzanine__ColourValue,
  _swigc__p_Mezzanine__Debris,
  _swigc__p_Mezzanine__DebrisFactory,
  _swigc__p_Mezzanine__DebrisUpdateWorkUnit,
  _swigc__p_Mezzanine__DefaultEntityManagerFactory,
  _swigc__p_Mezzanine__DirectoryException,
  _swigc__p_Mezzanine__DirectoryNotFoundException,
  _swigc__p_Mezzanine__DirectoryPermissionException,
  _swigc__p_Mezzanine__DirectoryReadException,
  _swigc__p_Mezzanine__DirectoryWriteException,
  _swigc__p_Mezzanine__Entity,
  _swigc__p_Mezzanine__EntityComponent,
  _swigc__p_Mezzanine__EntityComponentID,
  _swigc__p_Mezzanine__EntityComponentManager,
  _swigc__p_Mezzanine__EntityFactory,
  _swigc__p_Mezzanine__EntityID,
  _swigc__p_Mezzanine__EntityManagementEvent,
  _swigc__p_Mezzanine__EntityManager,
  _swigc__p_Mezzanine__EntityProxy,
  _swigc__p_Mezzanine__ExceptionBase,
  _swigc__p_Mezzanine__FieldOfForce,
  _swigc__p_Mezzanine__FileException,
  _swigc__p_Mezzanine__FileNotFoundException,
  _swigc__p_Mezzanine__FilePermissionException,
  _swigc__p_Mezzanine__FileReadException,
  _swigc__p_Mezzanine__FileWriteException,
  _swigc__p_Mezzanine__GenericEntityFactory,
  _swigc__p_Mezzanine__Graphics__CameraProxy,
  _swigc__p_Mezzanine__Graphics__Mesh,
  _swigc__p_Mezzanine__Graphics__RenderableRayQuery,
  _swigc__p_Mezzanine__Graphics__SceneManager,
  _swigc__p_Mezzanine__GravityField,
  _swigc__p_Mezzanine__GravityWell,
  _swigc__p_Mezzanine__IOException,
  _swigc__p_Mezzanine__IOReadException,
  _swigc__p_Mezzanine__IOWriteException,
  _swigc__p_Mezzanine__InstanceIdentityDuplicateException,
  _swigc__p_Mezzanine__InstanceIdentityException,
  _swigc__p_Mezzanine__InstanceIdentityInvalidException,
  _swigc__p_Mezzanine__InstanceIdentityNotFoundException,
  _swigc__p_Mezzanine__InternalException,
  _swigc__p_Mezzanine__InvalidAssignment,
  _swigc__p_Mezzanine__InvalidStateException,
  _swigc__p_Mezzanine__InvalidVersionException,
  _swigc__p_Mezzanine__ManagerBase,
  _swigc__p_Mezzanine__ManagerFactory,
  _swigc__p_Mezzanine__Matrix3x3,
  _swigc__p_Mezzanine__MemoryManagementException,
  _swigc__p_Mezzanine__MemoryOutOfBoundsException,
  _swigc__p_Mezzanine__NetworkException,
  _swigc__p_Mezzanine__NetworkNotFoundException,
  _swigc__p_Mezzanine__NetworkPermissionException,
  _swigc__p_Mezzanine__NetworkReadException,
  _swigc__p_Mezzanine__NetworkURLException,
  _swigc__p_Mezzanine__NetworkWriteException,
  _swigc__p_Mezzanine__NotImplementedException,
  _swigc__p_Mezzanine__OutOfMemoryException,
  _swigc__p_Mezzanine__ParametersCastException,
  _swigc__p_Mezzanine__ParametersException,
  _swigc__p_Mezzanine__ParametersRangeException,
  _swigc__p_Mezzanine__Physics__CollisionShape,
  _swigc__p_Mezzanine__Physics__GhostProxy,
  _swigc__p_Mezzanine__Physics__ManagerConstructionInfo,
  _swigc__p_Mezzanine__Plane,
  _swigc__p_Mezzanine__Quaternion,
  _swigc__p_Mezzanine__Ray,
  _swigc__p_Mezzanine__RayQuery,
  _swigc__p_Mezzanine__RayQueryHit,
  _swigc__p_Mezzanine__RectBaseT_float_t,
  _swigc__p_Mezzanine__RectBaseT_int_t,
  _swigc__p_Mezzanine__RectBaseT_unsigned_long_t,
  _swigc__p_Mezzanine__RenderingAPIException,
  _swigc__p_Mezzanine__RigidDebris,
  _swigc__p_Mezzanine__RuntimeAssertionException,
  _swigc__p_Mezzanine__ScriptException,
  _swigc__p_Mezzanine__ScriptLuaErrErrException,
  _swigc__p_Mezzanine__ScriptLuaException,
  _swigc__p_Mezzanine__ScriptLuaRuntimeException,
  _swigc__p_Mezzanine__ScriptLuaYieldException,
  _swigc__p_Mezzanine__SoftDebris,
  _swigc__p_Mezzanine__Sphere,
  _swigc__p_Mezzanine__SyntaxErrorException,
  _swigc__p_Mezzanine__SyntaxErrorLuaException,
  _swigc__p_Mezzanine__SyntaxErrorXMLException,
  _swigc__p_Mezzanine__SyntaxErrorXPathException,
  _swigc__p_Mezzanine__TerrainUpdateWorkUnit,
  _swigc__p_Mezzanine__Threading__DefaultThreadSpecificStorage__Type,
  _swigc__p_Mezzanine__Threading__RawFile,
  _swigc__p_Mezzanine__Timer,
  _swigc__p_Mezzanine__Transform,
  _swigc__p_Mezzanine__TransformableChildObject,
  _swigc__p_Mezzanine__TransformableObject,
  _swigc__p_Mezzanine__Vector2,
  _swigc__p_Mezzanine__Vector2LengthCompare,
  _swigc__p_Mezzanine__Vector3,
  _swigc__p_Mezzanine__Vector3LengthCompare,
  _swigc__p_Mezzanine__Vehicle,
  _swigc__p_Mezzanine__VehicleFactory,
  _swigc__p_Mezzanine__VehicleUpdateWorkUnit,
  _swigc__p_Mezzanine__World,
  _swigc__p_Mezzanine__WorldManager,
  _swigc__p_Mezzanine__WorldManagerFactory,
  _swigc__p_Mezzanine__XML__Attribute,
  _swigc__p_Mezzanine__XML__AttributeIterator,
  _swigc__p_Mezzanine__XML__AttributeStruct,
  _swigc__p_Mezzanine__XML__Document,
  _swigc__p_Mezzanine__XML__NamedNodeIterator,
  _swigc__p_Mezzanine__XML__Node,
  _swigc__p_Mezzanine__XML__NodeIterator,
  _swigc__p_Mezzanine__XML__NodeStruct,
  _swigc__p_Mezzanine__XML__NodeText,
  _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__AttributeIterator_t,
  _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NamedNodeIterator_t,
  _swigc__p_Mezzanine__XML__ObjectRangeT_Mezzanine__XML__NodeIterator_t,
  _swigc__p_Mezzanine__XML__ParseResult,
  _swigc__p_Mezzanine__XML__TreeWalker,
  _swigc__p_Mezzanine__XML__Writer,
  _swigc__p_Mezzanine__XML__WriterFile,
  _swigc__p_Mezzanine__XML__WriterStream,
  _swigc__p_Mezzanine__XML__XMLStreamWrapper,
  _swigc__p_Mezzanine__XML__XPathNode,
  _swigc__p_Mezzanine__XML__XPathNodeSet,
  _swigc__p_Mezzanine__XML__XPathParseResult,
  _swigc__p_Mezzanine__XML__XPathQuery,
  _swigc__p_Mezzanine__XML__XPathVariable,
  _swigc__p_Mezzanine__XML__XPathVariableSet,
  _swigc__p_ObjectContainer,
  _swigc__p_ObjectIterator,
  _swigc__p_Ogre__AxisAlignedBox,
  _swigc__p_Ogre__ColourValue,
  _swigc__p_Ogre__Plane,
  _swigc__p_Ogre__Quaternion,
  _swigc__p_Ogre__Ray,
  _swigc__p_Ogre__Sphere,
  _swigc__p_Ogre__Vector2,
  _swigc__p_Ogre__Vector3,
  _swigc__p_PlaneRayTestResult,
  _swigc__p_RayTestResult,
  _swigc__p_ResultContainer,
  _swigc__p_ResultIterator,
  _swigc__p_SDL_Event,
  _swigc__p_StreamSize,
  _swigc__p_WorldManagerContainer,
  _swigc__p_WorldManagerIterator,
  _swigc__p_XML__Node,
  _swigc__p_attribute_iterator,
  _swigc__p_bool,
  _swigc__p_btQuaternion,
  _swigc__p_btTransform,
  _swigc__p_btVector3,
  _swigc__p_char,
  _swigc__p_difference_type,
  _swigc__p_double,
  _swigc__p_f_p_void__void,
  _swigc__p_f_size_t__p_void,
  _swigc__p_float,
  _swigc__p_int,
  _swigc__p_iterator,
  _swigc__p_iterator_category,
  _swigc__p_long_long,
  _swigc__p_ptrdiff_t,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__basic_istreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_istreamT_wchar_t_std__char_traitsT_wchar_t_t_t,
  _swigc__p_std__basic_ostreamT_char_std__char_traitsT_char_t_t,
  _swigc__p_std__basic_ostreamT_wchar_t_std__char_traitsT_wchar_t_t_t,
  _swigc__p_std__basic_stringT_char_std__char_traitsT_char_t_std__allocatorT_char_t_t,
  _swigc__p_std__basic_stringT_wchar_t_std__char_traitsT_wchar_t_t_std__allocatorT_wchar_t_t_t,
  _swigc__p_std__exception,
  _swigc__p_std__functionT_bool_fMezzanine__EntityProxy_pF_t,
  _swigc__p_std__istream,
  _swigc__p_std__listT_std__pairT_std__string_std__string_t_t,
  _swigc__p_std__mapT_std__string_std__string_t,
  _swigc__p_std__pairT_std__string_std__string_t,
  _swigc__p_std__setT_std__string_t,
  _swigc__p_std__shared_ptrT_Mezzanine__EntityManagementEvent_t,
  _swigc__p_std__string,
  _swigc__p_std__stringstream,
  _swigc__p_std__vectorT_Mezzanine__EntityComponent_p_t,
  _swigc__p_std__vectorT_Mezzanine__Entity_p_t,
  _swigc__p_std__vectorT_Mezzanine__RayQueryHit_t,
  _swigc__p_std__vectorT_Mezzanine__WorldManager_p_t,
  _swigc__p_std__vectorT_std__string_t,
  _swigc__p_std__wstring,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_int,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_long_long,
  _swigc__p_unsigned_short,
  _swigc__p_value_type,
  _swigc__p_wchar_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic
 * memory is used. Also, since swig_type_info structures store pointers to
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization.
 * The idea is that swig generates all the structures that are needed.
 * The runtime then collects these partially filled structures.
 * The SWIG_InitializeModule function takes these initial arrays out of
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned statically to an initial
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded.
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    iter=module_head;
    do {
      if (iter==&swig_module) {
        /* Our module is already in the list, so there's nothing more to do. */
        return;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* otherwise we must add our module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;

#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {

      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an earlier #define will rename it
*/
#if ((SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC))
LUALIB_API int SWIG_init(lua_State* L)
#else
SWIGEXPORT int SWIG_init(lua_State* L) /* default Lua action */
#endif
{
#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC) /* valid for both Lua and eLua */
  int i;
  int globalRegister = 0;
  /* start with global table */
  lua_pushglobaltable (L);
  /* SWIG's internal initialisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
#endif

#if ((SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUA) && (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)) || defined(SWIG_LUA_ELUA_EMULATE)
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_class_equal);
#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* set up base class pointers (the hierarchy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#ifdef SWIG_LUA_MODULE_GLOBAL
  globalRegister = 1;
#endif


#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_LUA)
  SWIG_Lua_namespace_register(L,&swig_SwigModule, globalRegister);
#endif

#if (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUA) || (SWIG_LUA_TARGET == SWIG_LUA_FLAVOR_ELUAC)
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_elua_class_register_instance(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
#endif

#if defined(SWIG_LUA_ELUA_EMULATE)
  lua_newtable(L);
  SWIG_Lua_elua_emulate_register(L,swig_SwigModule.ns_methods);
  SWIG_Lua_elua_emulate_register_clear(L);
  if(globalRegister) {
    lua_pushstring(L,swig_SwigModule.name);
    lua_pushvalue(L,-2);
    lua_rawset(L,-4);
  }
#endif

#endif

#if (SWIG_LUA_TARGET != SWIG_LUA_FLAVOR_ELUAC)
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  /* Note: We do not clean up the stack here (Lua will do this for us). At this
     point, we have the globals table and out module table on the stack. Returning
     one value makes the module table the result of the require command. */
  return 1;
#else
  return 0;
#endif
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

