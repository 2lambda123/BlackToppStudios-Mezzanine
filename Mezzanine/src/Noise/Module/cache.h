// © Copyright 2010 - 2014 BlackTopp Studios Inc.
/* This file is part of The Mezzanine Engine.

    The Mezzanine Engine is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The Mezzanine Engine is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with The Mezzanine Engine.  If not, see <http://www.gnu.org/licenses/>.
*/
/* The original authors have included a copy of the license specified above in the
   'Docs' folder. See 'gpl.txt'
*/
/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to
   Build professional software and charge for their product.

   However there are some practical restrictions, so if your project involves
   any of the following you should contact us and we will try to work something
   out:
    - DRM or Copy Protection of any kind(except Copyrights)
    - Software Patents You Do Not Wish to Freely License
    - Any Kind of Linking to Non-GPL licensed Works
    - Are Currently In Violation of Another Copyright Holder's GPL License
    - If You want to change our code and not add a few hundred MB of stuff to
        your distribution

   These and other limitations could cause serious legal problems if you ignore
   them, so it is best to simply contact us or the Free Software Foundation, if
   you have any questions.

   Joseph Toppi - toppij@gmail.com
   John Blackwood - makoenergy02@gmail.com
*/
// Copyright (C) 2003, 2004 Jason Bevins
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
// License (COPYING.txt) for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The developer's email is jlbezigvins@gmzigail.com (for great email, take
// off every 'zig'.)
//

#ifndef noisemodulecache_h
#define noisemodulecache_h

#include "Noise/Module/modulebase.h"

namespace Mezzanine
{
    namespace Noise
    {
        namespace Module
        {
            /// @addtogroup libnoise
            /// @{

            /// @addtogroup modules
            /// @{

            /// @defgroup miscmodules Miscellaneous Modules
            /// @addtogroup miscmodules
            /// @{

            /// Noise module that caches the last output value generated by a source
            /// module.
            ///
            /// If an application passes an input value to the GetValue() method that
            /// differs from the previously passed-in input value, this noise module
            /// instructs the source module to calculate the output value.  This
            /// value, as well as the ( @a X, @a Y, @a Z ) coordinates of the input
            /// value, are stored (cached) in this noise module.
            ///
            /// If the application passes an input value to the GetValue() method
            /// that is equal to the previously passed-in input value, this noise
            /// module returns the cached output value without having the source
            /// module recalculate the output value.
            ///
            /// If an application passes a new source module to the SetSourceModule()
            /// method, the cache is invalidated.
            ///
            /// Caching a noise module is useful if it is used as a source module for
            /// multiple noise modules.  If a source module is not cached, the source
            /// module will redundantly calculate the same output value once for each
            /// noise module in which it is included.
            ///
            /// This noise module requires one source module.
            class Cache : public ModuleBase
            {
            public:
                /// @brief Constructor.
                Cache();

                /// @copydoc ModuleBase::SetSourceModule(const Integer,const ModuleBase&)
                virtual void SetSourceModule(const Integer Index, const ModuleBase& SourceModule)
                {
                    this->ModuleBase::SetSourceModule(Index,SourceModule);
                    this->m_isCached = false;
                }

                /// @copydoc ModuleBase::GetSourceModuleCount() const
                virtual Integer GetSourceModuleCount() const
                {
                    return 1;
                }

                /// @copydoc ModuleBase::GetValue(const PreciseReal, const PreciseReal, const PreciseReal) const
                virtual PreciseReal GetValue(const PreciseReal X, const PreciseReal Y, const PreciseReal Z) const;
            protected:
                /// @internal
                /// @brief The cached output value at the cached input value.
                mutable PreciseReal m_cachedValue;
                /// @internal
                /// @brief Determines if a cached output value is stored in this noise module.
                mutable PreciseReal m_isCached;
                /// @internal
                /// @brief @a X coordinate of the cached input value.
                mutable PreciseReal m_xCache;
                /// @internal
                /// @brief @a Y coordinate of the cached input value.
                mutable PreciseReal m_yCache;
                /// @internal
                /// @brief @a Z coordinate of the cached input value.
                mutable PreciseReal m_zCache;
            };//Cache
            /// @}

            /// @}

            /// @}
        }//Module
    }//Noise
}//Mezzanine

#endif
