#!/bin/bash
# Takes in PugiXML and emits XML files appropriate for direct inclusion in the Physgame library
# This expects the PugiXML source files to be in the subdirectory call PugiSrc

# This script isn't magic, it was designed with version 1.0 of PugiXML in mind. If new features have been added, then new commands
# will need to be add to rename those as well. That being said, I did try to code it in such a way 

#disable Bash filename expansion
set -f

#error codes - These match the Header prepending tool
E_BADARGS=1
E_MISSINGPUGIXML=3

#Input Files
PugiCppFile="PugiSrc/pugixml.cpp"
#PugiTempCppFile="PugiSrc/temp.cpp"
PugiHFile="PugiSrc/pugixml.hpp"
PugiConfigFile="PugiSrc/pugiconfig.hpp"
PugiTempHFile="PugiSrc/temp.hpp"


#Output Files
OutDir="../../physgameengine/src"
NewHFileOnly="xml.h"
NewCppFileOnly="xml.cpp"
NewHFile="$OutDir/$NewHFileOnly"
NewCppFile="$OutDir/$NewCppFileOnly"

#Some other variables we will be using
#Copyright Variables
Hardstring="This should not be found on any lineasdfasdfasdfasdf"	# this Should not appear in any of the Files, if it does, change it.
OurLicenseFile="fileheader.txt"
OurCopyright="\n * Software, Files, Libraries and all other items referenced in this clause refers only\n * to the contents of this file and associated documentation.\n *\n"
IncompleteCopyright1=" * Copyright (c) 2006-2010 Arseny Kapoulkine"
CompleteCopyright1="$OurCopyright * Copyright © 2006-2010 Arseny Kapoulkine"
IncompleteCopyright2=" * pugixml parser - version 1.0"
CompleteCopyright2="$OurCopyright * Pugixml parser - version 1.0"
CopyrightAccidentalDoxyTags='\/\*\*'
CopyrightCleantags='\/\*'

#Namespace Variables
PugiUsingNamespace="using namespace pugi"
PugiNamespace="namespace pugi"
OurUsingNamespace="using namespace phys::xml"
#OurUsingNamespace="using namespace phys"
#OurUsingNamespace="using namespace xml"
OurNamespace="namespace xml"
OurExtraNamespace="
namespace phys
{"
OurExtraNamespaceClosing="} // \phys"


#Make the Files to begin appending Source code to.
cat  $OurLicenseFile > $NewCppFile
cat  $OurLicenseFile > $PugiTempHFile

# This lops of the end copyright because we can use the ending from the other file we are merging with
PugiConfigGrabUntil="#endif"						# The Copyright notices, and other string to search for in the PugiConfig File
				#This next line uses grep to get the line number of the token we are searching for and then sends the results to
				#sed to strip of the : and the token appended to the value we want.
PugiConfigGrabLineCount=`grep "$PugiConfigGrabUntil" $PugiConfigFile -n | head -n1 | sed s/:.*//g`
head -n$PugiConfigGrabLineCount $PugiConfigFile  >> $PugiTempHFile

# This Lops of the first copyright notice by ommision (since this is the last part of the file we will keep the tail copyright) and appends the results to the results of the Config Transformation
PugiHeaderGrabUntil="*/"						# This ends the copyright header in the pugiheader file
PugiHeaderGrabLineCount=`grep "$PugiHeaderGrabUntil" $PugiHFile -n | head -n1 | sed s/:.*//g`
PugiHeaderTotalLineCount=`grep "$Hardstring" $PugiHFile -vc`
PugiHeaderTailLineCount=$[PugiHeaderTotalLineCount-PugiHeaderGrabLineCount]
tail -n$PugiHeaderTailLineCount $PugiHFile | sed -e s/'#include "pugiconfig.hpp"'/'#include "crossplatform.h"'/g  >> $PugiTempHFile

#This Does a number of transformations on the PugiHeader file before placing the complete converted parts onto the new headerfile
#	- Replaces series of 4 spaces with tabs (seems to be an issue with the original source Files)
#	- Remove reference to old filenames
#	- Appends a notice to Arseny's Copyright that it only covers items arseny wrote.
#	- clean up Copyright Symbols as (c) is meaningless in some jurisdications (as per RMS)
#	- Replace multiple inclusion with names matching our own
#		HEADER_PUGIXML_HPP -> _xml_h
#		HEADER_PUGICONFIG_HPP	-> _xmlconfig_h
#	- Put the results in the final place they belong
cat $PugiTempHFile | sed  	-e s/'    '/'	'/g 	-e s/"$IncompleteCopyright1"/"$CompleteCopyright1"/g 	-e s/$CopyrightAccidentalDoxyTags/$CopyrightCleantags/g	-e s/"$IncompleteCopyright2"/"$CompleteCopyright2"/g 	-e s/\([cC]\)/©/g 	-e s/HEADER_PUGIXML_HPP/_xml_h/g 	-e s/HEADER_PUGICONFIG_HPP/_xmlconfig_h/g	-e s/PUGIXML_/XML_/g 	-e s/"$PugiUsingNamespace"/"$OurUsingNamespace"/g	> $NewHFile

# This does mostly the same thing that the header transfortmation does, a bunch of cleanup and putting the code where it belongs
cat $PugiCppFile | sed 	-e s/'#include "pugixml.hpp"'/"#include \"$NewHFileOnly\""/g 	-e s/'    '/'	'/g 	-e s/"$IncompleteCopyright1"/"$CompleteCopyright1"/g 	-e s/"$IncompleteCopyright2"/"$CompleteCopyright2"/g 	-e s/$CopyrightAccidentalDoxyTags/$CopyrightCleantags/g	-e s/\([C]\)/©/g 	-e s/PUGIXML_/XML_/g	-e s/"$PugiUsingNamespace"/"$OurUsingNamespace"/g	>> $NewCppFile

# This will look in file $1 for the bracket that should end the statement that starts with $2 and ends the statement with $4
# while doing this, old instances of $2 and replace them with $3
# In other words
# $1 is the filename
# $2 is Old namespace
# $3 is the new double namespace
# $4 is the item to end the namespace, use "}" if you don't wantanything fancy.
function FixNamespaces
{
	TempFileName="$1.tmp"
	echo -n "" > $TempFileName
	LB="{"						#The character that begins a codeblock
	RB="}"						#The character that ends a codeblock
	LookingForEndBracket=-1	#if this is set to -1 then we are looking for the line of code to start search for our bracket at.
								#if this is set to a positive number, then it is the amount of unclosed left brackets we have found.

	LineCount=0
	OIFS="$IFS"
	IFS=$'\n'
	FileContent=`cat $1`

	#echo -E "$FileContent" > $1.txt.cpp
	FileContent=`echo -E "$FileContent" | sed -e 's/\(.*$\)/\1 /'`
	#echo -E "$FileContent" > $1.txt2.cpp

	for fn in $FileContent; do
		#LineCount=$[LineCount+1]
		#echo $LineCount #: $fn
		if [ $LookingForEndBracket -eq -1 ]; then
			#looking for Namespace
			if [ "$fn" = "${fn/$2/asdf}" ]; then
				#Line has no match in it, so we send it to temp file
				echo -E "$fn" >> $TempFileName
			else
				#This line does match, send to replacement to tempfile and start counting
				LookingForEndBracket=0
				echo -E "$3" >> $TempFileName
			fi
		else
			echo -E "$fn" >> $TempFileName
			#We are looking for a Brackets now
			if [ "$fn" != "${fn/$LB/asdf}" ]; then
				#We found a left bracket we are going deeper
				LookingForEndBracket=$[1+LookingForEndBracket]
			fi
			if [ "$fn" != "${fn/$RB/asdf}" ]; then
				#We found a right bracket we are coming out
				LookingForEndBracket=$[LookingForEndBracket-1]
				if [ $LookingForEndBracket == 0 ]; then
					LookingForEndBracket=-1
					echo -E "$4" >> $TempFileName
				fi
			fi
		fi
	done

	mv $TempFileName $1
	IFS="$OIFS"
}

FixNamespaces $NewHFile "$PugiNamespace" "$OurExtraNamespace $OurNamespace" "$OurExtraNamespaceClosing"
FixNamespaces $NewCppFile "$PugiNamespace" "$OurExtraNamespace $OurNamespace" "$OurExtraNamespaceClosing"

#This will replace all the old PugiXML names in the file providesd in $1 with the new BTS phys::xml names
function FixNames
{
	FileContent=`cat $1`
	TempFileName="$1.tmp"
	echo -E "$FileContent" > $TempFileName

	#A clean line to copy and paste 
	#FileContent=`echo -E "$FileContent" | sed -e 's/needle/replacement/'`

	#This is the list of items to find/replace to convert the Pugi API into Physgame API
	FileContent=`echo -E "$FileContent" | sed -e 's/xml_\(.\)\([a-z]*\)_\(.\)/\U\1\L\2\U\3/g'`		#Adjust the names of two word type to use CamelCase
	FileContent=`echo -E "$FileContent" | sed -e 's/xml_\(.\)/\U\1/g'`							#Adjust the names of two word type to use CamelCase
	FileContent=`echo -E "$FileContent" | sed -e 's/XML_CLASS/PHYS_LIB/g'`					#These configure the XML API to be exported to a DLL on windows
	FileContent=`echo -E "$FileContent" | sed -e 's/XML_FUNCTION/PHYS_LIB/g'`
	FileContent=`echo -E "$FileContent" | sed -e 's/XML_API/PHYS_LIB/g'`

	echo -E "$FileContent" > $1
	#	mv $TempFileName $1
}

FixNames $NewHFile
FixNames $NewCppFile



#we unset this, so we will set it again, even though on *Most* systems this isn't required
set +f
