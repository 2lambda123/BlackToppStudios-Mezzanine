<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::UI::Screen Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.1.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="namespaceMezzanine_1_1UI.xhtml">UI</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml">Screen</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classMezzanine_1_1UI_1_1Screen-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::UI::Screen Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This class is a helper class for creating <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a>'s. It is responsible for storing and keeping track of all the elements of a single <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a> screen.  
 <a href="classMezzanine_1_1UI_1_1Screen.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="screen_8h_source.xhtml">screen.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for Mezzanine::UI::Screen:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1UI_1_1Screen__inherit__graph.svg" width="238" height="227"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for Mezzanine::UI::Screen:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1UI_1_1Screen__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ad48b3d3d6fef4e50e538c83f2dceb7ba"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad48b3d3d6fef4e50e538c83f2dceb7ba"></a>
typedef IndexMap::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ConstIndexIterator</b></td></tr>
<tr class="memitem:adea171c2340f4aa1a3ea9002725d7edb"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adea171c2340f4aa1a3ea9002725d7edb"></a>
typedef <br class="typebreak"/>
IndexMap::const_reverse_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ConstReverseIndexIterator</b></td></tr>
<tr class="memitem:a18c9716a252cc7abf82dab6aa4d090c1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a18c9716a252cc7abf82dab6aa4d090c1"></a>
typedef <br class="typebreak"/>
WidgetContainer::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ConstWidgetIterator</b></td></tr>
<tr class="memitem:a75d8eb91d7ba375ea5b83fac0b946b24"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a75d8eb91d7ba375ea5b83fac0b946b24"></a>
typedef IndexMap::iterator&#160;</td><td class="memItemRight" valign="bottom"><b>IndexIterator</b></td></tr>
<tr class="memitem:a14d6755c6a3895a03fddd73c0ae3b018"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a14d6755c6a3895a03fddd73c0ae3b018"></a>
typedef std::map&lt; <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a>, <br class="typebreak"/>
<a class="el" href="structMezzanine_1_1UI_1_1IndexData.xhtml">IndexData</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>IndexMap</b></td></tr>
<tr class="memitem:ad6cfe4f2b4025a5bd7f6a1f6fac8ef50"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad6cfe4f2b4025a5bd7f6a1f6fac8ef50"></a>
typedef IndexMap::reverse_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ReverseIndexIterator</b></td></tr>
<tr class="memitem:ae8482472f6042acdb178f1b9573687f3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae8482472f6042acdb178f1b9573687f3"></a>
typedef std::map&lt; <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>, <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>WidgetContainer</b></td></tr>
<tr class="memitem:a8be3b072c89635b689056e0cbd27614c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8be3b072c89635b689056e0cbd27614c"></a>
typedef WidgetContainer::iterator&#160;</td><td class="memItemRight" valign="bottom"><b>WidgetIterator</b></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a61381baff28adf9171ea9789c41eee47"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a61381baff28adf9171ea9789c41eee47">_RedrawAllIndexes</a> (bool Force=false)</td></tr>
<tr class="memdesc:a61381baff28adf9171ea9789c41eee47"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears all verticies for every widget and regenerates them for rendering.  <a href="#a61381baff28adf9171ea9789c41eee47"></a><br/></td></tr>
<tr class="memitem:acc910805945991e4868c9dd4592186ea"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#acc910805945991e4868c9dd4592186ea">_RedrawIndex</a> (const <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> &amp;Index)</td></tr>
<tr class="memdesc:acc910805945991e4868c9dd4592186ea"><td class="mdescLeft">&#160;</td><td class="mdescRight">Clears the existing verticies and regenerates them for a specific index(widget).  <a href="#acc910805945991e4868c9dd4592186ea"></a><br/></td></tr>
<tr class="memitem:aa2a65cbb535614266ee1165eb02f400c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#aa2a65cbb535614266ee1165eb02f400c">_RenderScreen</a> ()</td></tr>
<tr class="memdesc:aa2a65cbb535614266ee1165eb02f400c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Manually calls the <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a> system to render this screen.  <a href="#aa2a65cbb535614266ee1165eb02f400c"></a><br/></td></tr>
<tr class="memitem:a4dbc9d5d7820bb206e245e1fb4ce9998"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a4dbc9d5d7820bb206e245e1fb4ce9998">_RenderVertices</a> (bool Force=false)</td></tr>
<tr class="memdesc:a4dbc9d5d7820bb206e245e1fb4ce9998"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prepares all vertices for rendering to the screen.  <a href="#a4dbc9d5d7820bb206e245e1fb4ce9998"></a><br/></td></tr>
<tr class="memitem:a66b5db43cb0c625a4ad93c1ece2fb5bb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a66b5db43cb0c625a4ad93c1ece2fb5bb">_RequestIndexRedraw</a> (const <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a> &amp;Index)</td></tr>
<tr class="memdesc:a66b5db43cb0c625a4ad93c1ece2fb5bb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Flags a widget for redraw before the next render.  <a href="#a66b5db43cb0c625a4ad93c1ece2fb5bb"></a><br/></td></tr>
<tr class="memitem:ad722753489263a5f61645c56eedef26f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#ad722753489263a5f61645c56eedef26f">_SetOrientation</a> (const <a class="el" href="namespaceMezzanine.xhtml#a8892173bd6aaf7d0e34a07b2b30aad33">Mezzanine::OrientationMode</a> &amp;Mode)</td></tr>
<tr class="memdesc:ad722753489263a5f61645c56eedef26f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Forces an orientation mode change for this screen.  <a href="#ad722753489263a5f61645c56eedef26f"></a><br/></td></tr>
<tr class="memitem:a8225e4d270375f6bc7f0d487d1acd14d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a8225e4d270375f6bc7f0d487d1acd14d">_Transform</a> (<a class="el" href="classMezzanine_1_1UI_1_1ScreenVertexData.xhtml">ScreenVertexData</a> &amp;Vertices, const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Begin, const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;End)</td></tr>
<tr class="memdesc:a8225e4d270375f6bc7f0d487d1acd14d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates the vertex positions so they are in front of the camera in world space.  <a href="#a8225e4d270375f6bc7f0d487d1acd14d"></a><br/></td></tr>
<tr class="memitem:a536e7e81b78fe351a385187570e81834"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a536e7e81b78fe351a385187570e81834">AddRootWidget</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;ZOrder, <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a> *ToAdd)</td></tr>
<tr class="memdesc:a536e7e81b78fe351a385187570e81834"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a widget to the root of this screen for rendering.  <a href="#a536e7e81b78fe351a385187570e81834"></a><br/></td></tr>
<tr class="memitem:afc29a8899648d07daa46833c87092043"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afc29a8899648d07daa46833c87092043"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#afc29a8899648d07daa46833c87092043">CheckViewportSize</a> ()</td></tr>
<tr class="memdesc:afc29a8899648d07daa46833c87092043"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if the viewport has changed in size. If so it updates all the <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a> elements on the screen. <br/></td></tr>
<tr class="memitem:a8fa9f72be21e61408e8b45597520133b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a8fa9f72be21e61408e8b45597520133b">CheckWidgetMouseIsOver</a> ()</td></tr>
<tr class="memdesc:a8fa9f72be21e61408e8b45597520133b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the widget the mouse is over if any.  <a href="#a8fa9f72be21e61408e8b45597520133b"></a><br/></td></tr>
<tr class="memitem:a54eebd16d9c2342e58f4f6c268fe3d5c"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Button.xhtml">Button</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a54eebd16d9c2342e58f4f6c268fe3d5c">CreateButton</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect)</td></tr>
<tr class="memdesc:a54eebd16d9c2342e58f4f6c268fe3d5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a button.   <a href="#a54eebd16d9c2342e58f4f6c268fe3d5c"></a><br/></td></tr>
<tr class="memitem:a29600b50f3537584d1a2b49e3064be9a"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Button.xhtml">Button</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a29600b50f3537584d1a2b49e3064be9a">CreateButton</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;<a class="el" href="classMezzanine_1_1UI_1_1Glyph.xhtml">Glyph</a>, <a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Text)</td></tr>
<tr class="memdesc:a29600b50f3537584d1a2b49e3064be9a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a text button.   <a href="#a29600b50f3537584d1a2b49e3064be9a"></a><br/></td></tr>
<tr class="memitem:acdb2a17b232c27b82f4924f70bc0391f"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Button.xhtml">Button</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#acdb2a17b232c27b82f4924f70bc0391f">CreateButton</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;LineHeight, <a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Text)</td></tr>
<tr class="memdesc:acdb2a17b232c27b82f4924f70bc0391f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a text button.   <a href="#acdb2a17b232c27b82f4924f70bc0391f"></a><br/></td></tr>
<tr class="memitem:aa8497b098697f141153b4d85570cb805"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1CheckBox.xhtml">CheckBox</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#aa8497b098697f141153b4d85570cb805">CreateCheckBox</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;LineHeight, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;LabelText)</td></tr>
<tr class="memdesc:aa8497b098697f141153b4d85570cb805"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a <a class="el" href="classMezzanine_1_1UI_1_1CheckBox.xhtml" title="This is a simple widget for storing a bool value.">CheckBox</a>.   <a href="#aa8497b098697f141153b4d85570cb805"></a><br/></td></tr>
<tr class="memitem:a2ab8130b0cc81c99673e02a45a1c7a51"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1DropDownList.xhtml">DropDownList</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a2ab8130b0cc81c99673e02a45a1c7a51">CreateDropDownList</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;LineHeight, const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763">UI::ScrollbarStyle</a> &amp;ScrollStyle)</td></tr>
<tr class="memdesc:a2ab8130b0cc81c99673e02a45a1c7a51"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a drop down list.   <a href="#a2ab8130b0cc81c99673e02a45a1c7a51"></a><br/></td></tr>
<tr class="memitem:a5db293a2cb71789db43efdf87dc4f605"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1UI_1_1EnclosedRenderableContainerWidget.xhtml">EnclosedRenderableContainerWidget</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a5db293a2cb71789db43efdf87dc4f605">CreateEnclosedRenderableContainerWidget</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect)</td></tr>
<tr class="memdesc:a5db293a2cb71789db43efdf87dc4f605"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an <a class="el" href="classMezzanine_1_1UI_1_1EnclosedRenderableContainerWidget.xhtml" title="This is an abstract class for the creation and storage of widgets to be used by other classes...">EnclosedRenderableContainerWidget</a>.   <a href="#a5db293a2cb71789db43efdf87dc4f605"></a><br/></td></tr>
<tr class="memitem:a903d1113948dbe007d6638b2e9bbba44"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1ListBox.xhtml">ListBox</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a903d1113948dbe007d6638b2e9bbba44">CreateListBox</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763">UI::ScrollbarStyle</a> &amp;ScrollStyle)</td></tr>
<tr class="memdesc:a903d1113948dbe007d6638b2e9bbba44"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a List Box.   <a href="#a903d1113948dbe007d6638b2e9bbba44"></a><br/></td></tr>
<tr class="memitem:ae5efa3caed7ab84b5e64a2f18a2bed0c"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Menu.xhtml">Menu</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#ae5efa3caed7ab84b5e64a2f18a2bed0c">CreateMenu</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect)</td></tr>
<tr class="memdesc:ae5efa3caed7ab84b5e64a2f18a2bed0c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a <a class="el" href="classMezzanine_1_1UI_1_1Menu.xhtml" title="This class is a control mechanism for multiple windows in a heirarchy.">Menu</a>.   <a href="#ae5efa3caed7ab84b5e64a2f18a2bed0c"></a><br/></td></tr>
<tr class="memitem:a8af42d039863e4ed2c2da06401175fa5"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1UI_1_1OpenRenderableContainerWidget.xhtml">OpenRenderableContainerWidget</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a8af42d039863e4ed2c2da06401175fa5">CreateOpenRenderableContainerWidget</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name)</td></tr>
<tr class="memdesc:a8af42d039863e4ed2c2da06401175fa5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an <a class="el" href="classMezzanine_1_1UI_1_1OpenRenderableContainerWidget.xhtml">OpenRenderableContainerWidget</a>.   <a href="#a8af42d039863e4ed2c2da06401175fa5"></a><br/></td></tr>
<tr class="memitem:ab679318cfc571d1f6abf2bb2fcb27406"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1PagedCellGrid.xhtml">PagedCellGrid</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#ab679318cfc571d1f6abf2bb2fcb27406">CreatePagedCellGrid</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;SpnRect, const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a62462d4df783dcdda77e1590a96bc6d6">UI::SpinnerStyle</a> &amp;SStyle, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;GlyphHeight)</td></tr>
<tr class="memdesc:ab679318cfc571d1f6abf2bb2fcb27406"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a paged cell grid.   <a href="#ab679318cfc571d1f6abf2bb2fcb27406"></a><br/></td></tr>
<tr class="memitem:adb3911b17e53d63d30893ca0026a29ae"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml">Scrollbar</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#adb3911b17e53d63d30893ca0026a29ae">CreateScrollbar</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763">UI::ScrollbarStyle</a> &amp;Style)</td></tr>
<tr class="memdesc:adb3911b17e53d63d30893ca0026a29ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a <a class="el" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml" title="This class is a widget class, to be used alongside any scrollable widget.">Scrollbar</a>.   <a href="#adb3911b17e53d63d30893ca0026a29ae"></a><br/></td></tr>
<tr class="memitem:ad2099b5c008632bed46102275f502990"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1ScrolledCellGrid.xhtml">ScrolledCellGrid</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#ad2099b5c008632bed46102275f502990">CreateScrolledCellGrid</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;Thickness, const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763">UI::ScrollbarStyle</a> &amp;Style)</td></tr>
<tr class="memdesc:ad2099b5c008632bed46102275f502990"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a scrolled cell grid.   <a href="#ad2099b5c008632bed46102275f502990"></a><br/></td></tr>
<tr class="memitem:a97a7809b1013f012ff750ac84d9199a9"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Spinner.xhtml">Spinner</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a97a7809b1013f012ff750ac84d9199a9">CreateSpinner</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a62462d4df783dcdda77e1590a96bc6d6">UI::SpinnerStyle</a> &amp;SStyle, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;GlyphHeight)</td></tr>
<tr class="memdesc:a97a7809b1013f012ff750ac84d9199a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a <a class="el" href="classMezzanine_1_1UI_1_1Spinner.xhtml" title="This is a simple widget for a numeric variable in a box.">Spinner</a>.   <a href="#a97a7809b1013f012ff750ac84d9199a9"></a><br/></td></tr>
<tr class="memitem:acdcba01de596f713bfc26eebef4311ed"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1TabSet.xhtml">TabSet</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#acdcba01de596f713bfc26eebef4311ed">CreateTabSet</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;SetRect)</td></tr>
<tr class="memdesc:acdcba01de596f713bfc26eebef4311ed"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a tabset.   <a href="#acdcba01de596f713bfc26eebef4311ed"></a><br/></td></tr>
<tr class="memitem:a0c710bc89768fc8c30462e419edb5319"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Window.xhtml">Window</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a0c710bc89768fc8c30462e419edb5319">CreateWidgetWindow</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect)</td></tr>
<tr class="memdesc:a0c710bc89768fc8c30462e419edb5319"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a <a class="el" href="classMezzanine_1_1UI_1_1Window.xhtml" title="This is a container widget capable of holding any other widget.">Window</a>.   <a href="#a0c710bc89768fc8c30462e419edb5319"></a><br/></td></tr>
<tr class="memitem:a907b64b323d10bb4a0b6b2b7a0a2a449"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1UI_1_1TextureAtlas.xhtml">TextureAtlas</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a907b64b323d10bb4a0b6b2b7a0a2a449">GetAtlas</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Atlas) const </td></tr>
<tr class="memdesc:a907b64b323d10bb4a0b6b2b7a0a2a449"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an atlas that has been loaded.  <a href="#a907b64b323d10bb4a0b6b2b7a0a2a449"></a><br/></td></tr>
<tr class="memitem:a0534a7cc86abe2c2c318f274d4ad2415"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1UI_1_1GlyphData.xhtml">GlyphData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a0534a7cc86abe2c2c318f274d4ad2415">GetGlyphData</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;ID, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Atlas) const </td></tr>
<tr class="memdesc:a0534a7cc86abe2c2c318f274d4ad2415"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the specified <a class="el" href="classMezzanine_1_1UI_1_1GlyphData.xhtml" title="Class used to describe a single glyph or character available for text operations.">GlyphData</a> from an Atlas.  <a href="#a0534a7cc86abe2c2c318f274d4ad2415"></a><br/></td></tr>
<tr class="memitem:a2629610299606e478e880cbcf5afe0f2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a2629610299606e478e880cbcf5afe0f2">GetMarkupColour</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Index, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Atlas) const </td></tr>
<tr class="memdesc:a2629610299606e478e880cbcf5afe0f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the <a class="el" href="classMezzanine_1_1ColourValue.xhtml" title="This is a simple class for holding 4 reals representing the colour any give object or lightsource can...">ColourValue</a> set at the specified index.  <a href="#a2629610299606e478e880cbcf5afe0f2"></a><br/></td></tr>
<tr class="memitem:ab2a3a69e5063e9cfd8d002f102812efe"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#ab2a3a69e5063e9cfd8d002f102812efe">GetName</a> ()</td></tr>
<tr class="memdesc:ab2a3a69e5063e9cfd8d002f102812efe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the name of this screen.  <a href="#ab2a3a69e5063e9cfd8d002f102812efe"></a><br/></td></tr>
<tr class="memitem:a97ff8fc968553d0c79b33c0d002576be"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a97ff8fc968553d0c79b33c0d002576be">GetNumWidgets</a> ()</td></tr>
<tr class="memdesc:a97ff8fc968553d0c79b33c0d002576be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of widgets being used in this screen.  <a href="#a97ff8fc968553d0c79b33c0d002576be"></a><br/></td></tr>
<tr class="memitem:a357993a11de29a24ebdb7a2f7432ce55"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a357993a11de29a24ebdb7a2f7432ce55">GetPrimaryAtlas</a> ()</td></tr>
<tr class="memdesc:a357993a11de29a24ebdb7a2f7432ce55"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the currently set primary atlas.  <a href="#a357993a11de29a24ebdb7a2f7432ce55"></a><br/></td></tr>
<tr class="memitem:ae72af325153c01f54abae60d5b0bec63"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Vector2.xhtml">Vector2</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#ae72af325153c01f54abae60d5b0bec63">GetSolidUV</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Atlas) const </td></tr>
<tr class="memdesc:ae72af325153c01f54abae60d5b0bec63"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the solid UV position from an Atlas.  <a href="#ae72af325153c01f54abae60d5b0bec63"></a><br/></td></tr>
<tr class="memitem:abc03e04ec13f7c1c082fa72509b7593a"><td class="memItemLeft" align="right" valign="top"><a class="el" href="structMezzanine_1_1UI_1_1Sprite.xhtml">Sprite</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#abc03e04ec13f7c1c082fa72509b7593a">GetSprite</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;SpriteName, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Atlas) const </td></tr>
<tr class="memdesc:abc03e04ec13f7c1c082fa72509b7593a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a sprite from an Atlas.  <a href="#abc03e04ec13f7c1c082fa72509b7593a"></a><br/></td></tr>
<tr class="memitem:a8cdb34df5daa728a7b9350a0f5b1e56c"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a8cdb34df5daa728a7b9350a0f5b1e56c">GetTexelOffsetX</a> () const </td></tr>
<tr class="memdesc:a8cdb34df5daa728a7b9350a0f5b1e56c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the X axis Texel Offset for the current rendersystem.  <a href="#a8cdb34df5daa728a7b9350a0f5b1e56c"></a><br/></td></tr>
<tr class="memitem:a490a5da1de7334f12d0c6a3fbc20d455"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a490a5da1de7334f12d0c6a3fbc20d455">GetTexelOffsetY</a> () const </td></tr>
<tr class="memdesc:a490a5da1de7334f12d0c6a3fbc20d455"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the Y axis Texel Offset for the current rendersystem.  <a href="#a490a5da1de7334f12d0c6a3fbc20d455"></a><br/></td></tr>
<tr class="memitem:a7c3961e8ca8920786936d2325c32ad96"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Vector2.xhtml">Vector2</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a7c3961e8ca8920786936d2325c32ad96">GetTextureSize</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Atlas) const </td></tr>
<tr class="memdesc:a7c3961e8ca8920786936d2325c32ad96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the texture size of the specified Atlas.  <a href="#a7c3961e8ca8920786936d2325c32ad96"></a><br/></td></tr>
<tr class="memitem:adfa88987470c1666f305be026753021a"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Graphics_1_1Viewport.xhtml">Graphics::Viewport</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#adfa88987470c1666f305be026753021a">GetViewport</a> ()</td></tr>
<tr class="memdesc:adfa88987470c1666f305be026753021a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the Viewport this screen is currently rendering to.  <a href="#adfa88987470c1666f305be026753021a"></a><br/></td></tr>
<tr class="memitem:af27526084b76bea3a94572454ab12c50"><td class="memItemLeft" align="right" valign="top">virtual const <a class="el" href="classMezzanine_1_1Vector2.xhtml">Vector2</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#af27526084b76bea3a94572454ab12c50">GetViewportDimensions</a> ()</td></tr>
<tr class="memdesc:af27526084b76bea3a94572454ab12c50"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current viewport dimensions.  <a href="#af27526084b76bea3a94572454ab12c50"></a><br/></td></tr>
<tr class="memitem:a08493a36f8a23c751173e209ce3423e1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a08493a36f8a23c751173e209ce3423e1">GetWidget</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name)</td></tr>
<tr class="memdesc:a08493a36f8a23c751173e209ce3423e1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a widget in this screen by name.  <a href="#a08493a36f8a23c751173e209ce3423e1"></a><br/></td></tr>
<tr class="memitem:a17336700e6272d1ae97ce0e3014ce09a"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a17336700e6272d1ae97ce0e3014ce09a">GetWidget</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;ZOrder)</td></tr>
<tr class="memdesc:a17336700e6272d1ae97ce0e3014ce09a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a widget by it's ZOrder among the root widgets on this screen.  <a href="#a17336700e6272d1ae97ce0e3014ce09a"></a><br/></td></tr>
<tr class="memitem:aaa0224363ffa7d8a9c8ac65b420480cc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aaa0224363ffa7d8a9c8ac65b420480cc"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#aaa0224363ffa7d8a9c8ac65b420480cc">Hide</a> ()</td></tr>
<tr class="memdesc:aaa0224363ffa7d8a9c8ac65b420480cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Forces the screen to hide. <br/></td></tr>
<tr class="memitem:a5a15f07769da90282d9bb13042621ec2"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a5a15f07769da90282d9bb13042621ec2">IsVisible</a> ()</td></tr>
<tr class="memdesc:a5a15f07769da90282d9bb13042621ec2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the screens visability.  <a href="#a5a15f07769da90282d9bb13042621ec2"></a><br/></td></tr>
<tr class="memitem:a0efb62590342d1aeaf0de6117f477b8c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a0efb62590342d1aeaf0de6117f477b8c">SetPrimaryAtlas</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Atlas)</td></tr>
<tr class="memdesc:a0efb62590342d1aeaf0de6117f477b8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the Atlas to be assumed when one isn't provided for atlas related tasks.  <a href="#a0efb62590342d1aeaf0de6117f477b8c"></a><br/></td></tr>
<tr class="memitem:aea5039b63d97cea91cbb281727f9f186"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#aea5039b63d97cea91cbb281727f9f186">SetVisible</a> (bool visible)</td></tr>
<tr class="memdesc:aea5039b63d97cea91cbb281727f9f186"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the screens visability.  <a href="#aea5039b63d97cea91cbb281727f9f186"></a><br/></td></tr>
<tr class="memitem:a9662f06e9dfff561c44bfc19fa186cc4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9662f06e9dfff561c44bfc19fa186cc4"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a9662f06e9dfff561c44bfc19fa186cc4">Show</a> ()</td></tr>
<tr class="memdesc:a9662f06e9dfff561c44bfc19fa186cc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Forces the screen to be shown. <br/></td></tr>
<tr class="inherit_header pub_methods_classMezzanine_1_1UI_1_1ExtendedRenderableFactory"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classMezzanine_1_1UI_1_1ExtendedRenderableFactory')"><img src="closed.png" alt="-"/>&nbsp;Public Member Functions inherited from <a class="el" href="classMezzanine_1_1UI_1_1ExtendedRenderableFactory.xhtml">Mezzanine::UI::ExtendedRenderableFactory</a></td></tr>
<tr class="memitem:a8b2f409e581e17f09d90237712fb4f57 inherit pub_methods_classMezzanine_1_1UI_1_1ExtendedRenderableFactory"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8b2f409e581e17f09d90237712fb4f57"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1ExtendedRenderableFactory.xhtml#a8b2f409e581e17f09d90237712fb4f57">ExtendedRenderableFactory</a> ()</td></tr>
<tr class="memdesc:a8b2f409e581e17f09d90237712fb4f57 inherit pub_methods_classMezzanine_1_1UI_1_1ExtendedRenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class constructor. <br/></td></tr>
<tr class="memitem:a1e5bcd2e89f524e11cf5bc411763c7f6 inherit pub_methods_classMezzanine_1_1UI_1_1ExtendedRenderableFactory"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1e5bcd2e89f524e11cf5bc411763c7f6"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1ExtendedRenderableFactory.xhtml#a1e5bcd2e89f524e11cf5bc411763c7f6">~ExtendedRenderableFactory</a> ()</td></tr>
<tr class="memdesc:a1e5bcd2e89f524e11cf5bc411763c7f6 inherit pub_methods_classMezzanine_1_1UI_1_1ExtendedRenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class destructor. <br/></td></tr>
<tr class="memitem:a19bb6978753f540c5e36a889ecc35b45 inherit pub_methods_classMezzanine_1_1UI_1_1ExtendedRenderableFactory"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1LineList.xhtml">LineList</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1ExtendedRenderableFactory.xhtml#a19bb6978753f540c5e36a889ecc35b45">CreateLineList</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name)</td></tr>
<tr class="memdesc:a19bb6978753f540c5e36a889ecc35b45 inherit pub_methods_classMezzanine_1_1UI_1_1ExtendedRenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a linelist.  <a href="#a19bb6978753f540c5e36a889ecc35b45"></a><br/></td></tr>
<tr class="inherit_header pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classMezzanine_1_1UI_1_1RenderableFactory')"><img src="closed.png" alt="-"/>&nbsp;Public Member Functions inherited from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml">Mezzanine::UI::RenderableFactory</a></td></tr>
<tr class="memitem:af668f25aa9f646fb713adbc6d48d3e30 inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af668f25aa9f646fb713adbc6d48d3e30"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#af668f25aa9f646fb713adbc6d48d3e30">RenderableFactory</a> ()</td></tr>
<tr class="memdesc:af668f25aa9f646fb713adbc6d48d3e30 inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class constructor. <br/></td></tr>
<tr class="memitem:a6c46686b645e344407b5e48368b88edb inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6c46686b645e344407b5e48368b88edb"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a6c46686b645e344407b5e48368b88edb">~RenderableFactory</a> ()</td></tr>
<tr class="memdesc:a6c46686b645e344407b5e48368b88edb inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class destructor. <br/></td></tr>
<tr class="memitem:a8e0250ef31854264e2fd820a1243d1eb inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Caption.xhtml">Caption</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a8e0250ef31854264e2fd820a1243d1eb">CreateCaption</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;<a class="el" href="classMezzanine_1_1UI_1_1Glyph.xhtml">Glyph</a>, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Text)</td></tr>
<tr class="memdesc:a8e0250ef31854264e2fd820a1243d1eb inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a caption.  <a href="#a8e0250ef31854264e2fd820a1243d1eb"></a><br/></td></tr>
<tr class="memitem:a8a6cf76385baaa31e44023ccd455bc7d inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Caption.xhtml">Caption</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a8a6cf76385baaa31e44023ccd455bc7d">CreateCaption</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;LineHeight, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Text)</td></tr>
<tr class="memdesc:a8a6cf76385baaa31e44023ccd455bc7d inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a caption.  <a href="#a8a6cf76385baaa31e44023ccd455bc7d"></a><br/></td></tr>
<tr class="memitem:a9fddb54a8d665b01ba797832befdddaa inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1MarkupText.xhtml">MarkupText</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a9fddb54a8d665b01ba797832befdddaa">CreateMarkupText</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;<a class="el" href="classMezzanine_1_1UI_1_1Glyph.xhtml">Glyph</a>, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Text)</td></tr>
<tr class="memdesc:a9fddb54a8d665b01ba797832befdddaa inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a markup text.  <a href="#a9fddb54a8d665b01ba797832befdddaa"></a><br/></td></tr>
<tr class="memitem:af9f04821076200174299c26da2c16335 inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1MarkupText.xhtml">MarkupText</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#af9f04821076200174299c26da2c16335">CreateMarkupText</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Name, const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;LineHeight, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Text)</td></tr>
<tr class="memdesc:af9f04821076200174299c26da2c16335 inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a markup text.  <a href="#af9f04821076200174299c26da2c16335"></a><br/></td></tr>
<tr class="memitem:adb4f9084210d4a4995149adbe3f14c20 inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Rectangle.xhtml">Rectangle</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#adb4f9084210d4a4995149adbe3f14c20">CreateRectangle</a> (const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;Rect)</td></tr>
<tr class="memdesc:adb4f9084210d4a4995149adbe3f14c20 inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a rectangle.  <a href="#adb4f9084210d4a4995149adbe3f14c20"></a><br/></td></tr>
<tr class="memitem:a7fcc6b009dc776168d6da3bb94dd1596 inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a7fcc6b009dc776168d6da3bb94dd1596">DestroyBasicRenderable</a> (<a class="el" href="classMezzanine_1_1UI_1_1BasicRenderable.xhtml">BasicRenderable</a> *ToBeDestroyed)</td></tr>
<tr class="memdesc:a7fcc6b009dc776168d6da3bb94dd1596 inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys a <a class="el" href="classMezzanine_1_1UI_1_1BasicRenderable.xhtml" title="Base class for renderables that generate verticies.">BasicRenderable</a>.  <a href="#a7fcc6b009dc776168d6da3bb94dd1596"></a><br/></td></tr>
<tr class="memitem:a5bab44fbe96f2a22c1fc487c4409268c inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a5bab44fbe96f2a22c1fc487c4409268c">DestroyWidget</a> (<a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a> *ToBeDestroyed)</td></tr>
<tr class="memdesc:a5bab44fbe96f2a22c1fc487c4409268c inherit pub_methods_classMezzanine_1_1UI_1_1RenderableFactory"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys a widget.  <a href="#a5bab44fbe96f2a22c1fc487c4409268c"></a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a11ef854bd364f5b2bcc2c0096d4364bd"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a11ef854bd364f5b2bcc2c0096d4364bd">Screen</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;name, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Atlas, <a class="el" href="classMezzanine_1_1Graphics_1_1Viewport.xhtml">Graphics::Viewport</a> *WindowViewport)</td></tr>
<tr class="memdesc:a11ef854bd364f5b2bcc2c0096d4364bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Internal constructor.  <a href="#a11ef854bd364f5b2bcc2c0096d4364bd"></a><br/></td></tr>
<tr class="memitem:a5b747df4b1428b653c84e7edec33a938"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5b747df4b1428b653c84e7edec33a938"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a5b747df4b1428b653c84e7edec33a938">~Screen</a> ()</td></tr>
<tr class="memdesc:a5b747df4b1428b653c84e7edec33a938"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class destructor. <br/></td></tr>
<tr class="memitem:aed1c01e164f2fad02bb04a1d1f623462"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aed1c01e164f2fad02bb04a1d1f623462"></a>
virtual <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>CheckAndInsert</b> (<a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a> *ToInsert)</td></tr>
<tr class="memitem:a4d46de8e6571c51a31ba86040365dec5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4d46de8e6571c51a31ba86040365dec5"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><b>CreateVertexBuffer</b> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;InitialSize=32)</td></tr>
<tr class="memitem:a946a106c4cfbc0c2036a6a6f13b982f7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a946a106c4cfbc0c2036a6a6f13b982f7"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><b>DestroyVertexBuffer</b> ()</td></tr>
<tr class="memitem:a215b062e29390c7a8f12b94eafd2b92f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a215b062e29390c7a8f12b94eafd2b92f"></a>
virtual <a class="el" href="classMezzanine_1_1SceneManager.xhtml">SceneManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GetSceneManager</b> ()</td></tr>
<tr class="memitem:a621c84d341bf18e0d26eef5259bb1fc4"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml">Screen</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml#a621c84d341bf18e0d26eef5259bb1fc4">GetScreen</a> ()</td></tr>
<tr class="memdesc:a621c84d341bf18e0d26eef5259bb1fc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the screen that will possess ownership of the created renderables.  <a href="#a621c84d341bf18e0d26eef5259bb1fc4"></a><br/></td></tr>
<tr class="memitem:a68dfab9585edd6b7f98ca61a058a772a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a68dfab9585edd6b7f98ca61a058a772a"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><b>PrepareRenderSystem</b> ()</td></tr>
<tr class="memitem:ae91d37b3fce763bfcd04dcb7524d9b1e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae91d37b3fce763bfcd04dcb7524d9b1e"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><b>ResizeVertexBuffer</b> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;RequestedSize)</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a95669b21b3305dc23671189a5df1215d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a95669b21b3305dc23671189a5df1215d"></a>
<a class="el" href="classMezzanine_1_1Graphics_1_1Viewport.xhtml">Graphics::Viewport</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>GameViewport</b></td></tr>
<tr class="memitem:a7acd5ff773e2b14fe552b483c9ed9d8b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7acd5ff773e2b14fe552b483c9ed9d8b"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IndexRedrawAll</b></td></tr>
<tr class="memitem:a605f2bfeaa58b8f5911c26a4fb010c8a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a605f2bfeaa58b8f5911c26a4fb010c8a"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>IndexRedrawNeeded</b></td></tr>
<tr class="memitem:a53e3fb9d5ec3d8e0d92df05b63c64d4d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a53e3fb9d5ec3d8e0d92df05b63c64d4d"></a>
<a class="el" href="classMezzanine_1_1Vector2.xhtml">Vector2</a>&#160;</td><td class="memItemRight" valign="bottom"><b>InverseViewportSize</b></td></tr>
<tr class="memitem:ad0c7e1535305409eebe9e8bc7f8e03f5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad0c7e1535305409eebe9e8bc7f8e03f5"></a>
<a class="el" href="classMezzanine_1_1Vector2.xhtml">Vector2</a>&#160;</td><td class="memItemRight" valign="bottom"><b>KnownViewportSize</b></td></tr>
<tr class="memitem:ab6067b22466a6acc8aa39eca9328d1a4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab6067b22466a6acc8aa39eca9328d1a4"></a>
<a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Name</b></td></tr>
<tr class="memitem:a7a77f0c30cfc0a643b56ce110b10f655"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7a77f0c30cfc0a643b56ce110b10f655"></a>
<a class="el" href="namespaceMezzanine.xhtml#a8892173bd6aaf7d0e34a07b2b30aad33">Mezzanine::OrientationMode</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Orientation</b></td></tr>
<tr class="memitem:ab6473e780df45fd5b1f75fdbd41c5a1f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab6473e780df45fd5b1f75fdbd41c5a1f"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>OrientationChanged</b></td></tr>
<tr class="memitem:a5f6e19e43ee739cb4d7476392ef23cc2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5f6e19e43ee739cb4d7476392ef23cc2"></a>
<a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><b>PrimaryAtlas</b></td></tr>
<tr class="memitem:a4834701c0d901766bea1d98059a0a40a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4834701c0d901766bea1d98059a0a40a"></a>
<a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Scale</b></td></tr>
<tr class="memitem:aff75a117955ffdad76b0ba17971d9ac1"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aff75a117955ffdad76b0ba17971d9ac1"></a>
ScreenInternalData *&#160;</td><td class="memItemRight" valign="bottom"><b>SID</b></td></tr>
<tr class="memitem:aa7706e94290bcc28054f97e0e33fbdad"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa7706e94290bcc28054f97e0e33fbdad"></a>
std::vector&lt; <a class="el" href="structMezzanine_1_1UI_1_1AtlasAndPosition.xhtml">AtlasAndPosition</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>TextureByVertex</b></td></tr>
<tr class="memitem:a3659b98054a12d545caedf52c52b1e12"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3659b98054a12d545caedf52c52b1e12"></a>
<a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><b>VertexBufferSize</b></td></tr>
<tr class="memitem:a68e6e88fb6d759b0c74d2c3ce27a4b29"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a68e6e88fb6d759b0c74d2c3ce27a4b29"></a>
<a class="el" href="classMezzanine_1_1Matrix4x4.xhtml">Matrix4x4</a>&#160;</td><td class="memItemRight" valign="bottom"><b>VertexTransform</b></td></tr>
<tr class="memitem:a02412ab0548da0b6a7c46acd0624a253"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a02412ab0548da0b6a7c46acd0624a253"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>ViewportSizeChanged</b></td></tr>
<tr class="memitem:afaad9357e5fa77fa43db4acaad23d29e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afaad9357e5fa77fa43db4acaad23d29e"></a>
bool&#160;</td><td class="memItemRight" valign="bottom"><b>Visible</b></td></tr>
<tr class="memitem:a00901c240c9e42803b847859a7a5e52b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a00901c240c9e42803b847859a7a5e52b"></a>
WidgetContainer&#160;</td><td class="memItemRight" valign="bottom"><b>Widgets</b></td></tr>
<tr class="memitem:a1f2d37314d2b31e7de8c0aeaf07420b8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1f2d37314d2b31e7de8c0aeaf07420b8"></a>
IndexMap&#160;</td><td class="memItemRight" valign="bottom"><b>WidgetsRoot</b></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:ae6711b8bde3fabca2b5e61f955d3d13f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae6711b8bde3fabca2b5e61f955d3d13f"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::UIManager</b></td></tr>
</table>
<a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>This class is a helper class for creating <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a>'s. It is responsible for storing and keeping track of all the elements of a single <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a> screen. </p>
<p><a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a>'s can optionally be divided up into Screens, or "pages". Each screen is batched together for rendering, so keeping the amount of screens to a minimum will improve performance. </p>

<p>Definition at line <a class="el" href="screen_8h_source.xhtml#l00116">116</a> of file <a class="el" href="screen_8h_source.xhtml">screen.h</a>.</p>
</div><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a11ef854bd364f5b2bcc2c0096d4364bd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::UI::Screen::Screen </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Atlas</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Graphics_1_1Viewport.xhtml">Graphics::Viewport</a> *&#160;</td>
          <td class="paramname"><em>WindowViewport</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Internal constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">name</td><td>The name of this screen. </td></tr>
    <tr><td class="paramname">Atlas</td><td>The name of the primary atlas to be assigned to this screen. This can be overridden later, even by individual <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a> elements. </td></tr>
    <tr><td class="paramname">WindowViewport</td><td>The Viewport to which this screen belongs. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2>Member Function Documentation</h2>
<a class="anchor" id="a61381baff28adf9171ea9789c41eee47"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::UI::Screen::_RedrawAllIndexes </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Force</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clears all verticies for every widget and regenerates them for rendering. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Force</td><td>Whether or not to force a redraw on all layers regardless of if they need it. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acc910805945991e4868c9dd4592186ea"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::UI::Screen::_RedrawIndex </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#abea3b8e8e9b03d2547b2800284ba682d">UInt32</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Clears the existing verticies and regenerates them for a specific index(widget). </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Index</td><td>The Index corresponding to the widget you want regenerated. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa2a65cbb535614266ee1165eb02f400c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::UI::Screen::_RenderScreen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Manually calls the <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a> system to render this screen. </p>

</div>
</div>
<a class="anchor" id="a4dbc9d5d7820bb206e245e1fb4ce9998"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::UI::Screen::_RenderVertices </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Force</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Prepares all vertices for rendering to the screen. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Force</td><td>Whether or not to force preparation regardless of if they need it. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a66b5db43cb0c625a4ad93c1ece2fb5bb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::UI::Screen::_RequestIndexRedraw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Flags a widget for redraw before the next render. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Index</td><td>The ID or Index of the widget to be flagged for redraw. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad722753489263a5f61645c56eedef26f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::UI::Screen::_SetOrientation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a8892173bd6aaf7d0e34a07b2b30aad33">Mezzanine::OrientationMode</a> &amp;&#160;</td>
          <td class="paramname"><em>Mode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Forces an orientation mode change for this screen. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Mode</td><td>The orientation mode to be applied to the <a class="el" href="namespaceMezzanine_1_1UI.xhtml" title="This namespace is for all the classes belonging to the Graphical User Interface Subsystem.">UI</a> on this screen. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8225e4d270375f6bc7f0d487d1acd14d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::UI::Screen::_Transform </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1UI_1_1ScreenVertexData.xhtml">ScreenVertexData</a> &amp;&#160;</td>
          <td class="paramname"><em>Vertices</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Begin</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>End</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Updates the vertex positions so they are in front of the camera in world space. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Vertices</td><td>Vector of the vertices to be transformed. </td></tr>
    <tr><td class="paramname">Begin</td><td>The first <a class="el" href="structMezzanine_1_1UI_1_1Vertex.xhtml" title="Basic class describing a vertex in the UI to be rendered.">Vertex</a> to transform in the range. </td></tr>
    <tr><td class="paramname">End</td><td>The last <a class="el" href="structMezzanine_1_1UI_1_1Vertex.xhtml" title="Basic class describing a vertex in the UI to be rendered.">Vertex</a> to transform in the range. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a536e7e81b78fe351a385187570e81834"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::UI::Screen::AddRootWidget </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>ZOrder</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a> *&#160;</td>
          <td class="paramname"><em>ToAdd</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a widget to the root of this screen for rendering. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ZOrder</td><td>The ZOrder the widget will be rendered at on this screen relative to other root widgets. </td></tr>
    <tr><td class="paramname">ToAdd</td><td>The widget to be added. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8fa9f72be21e61408e8b45597520133b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a>* Mezzanine::UI::Screen::CheckWidgetMouseIsOver </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the widget the mouse is over if any. </p>
<p>This function searches only the visable layers contained in this screen. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the widget the mouse is over, or NULL if there are none. </dd></dl>

</div>
</div>
<a class="anchor" id="a54eebd16d9c2342e58f4f6c268fe3d5c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Button.xhtml">Button</a>* Mezzanine::UI::Screen::CreateButton </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a button.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created button. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the button. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the button. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#ae1918548a5f92384bba03a34b6ced488">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="a29600b50f3537584d1a2b49e3064be9a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Button.xhtml">Button</a>* Mezzanine::UI::Screen::CreateButton </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Glyph</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Text</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a text button.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created button. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the button. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the button. </td></tr>
    <tr><td class="paramname"><a class="el" href="classMezzanine_1_1UI_1_1Glyph.xhtml" title="Class used to describe a single glyph or character available for text operations.">Glyph</a></td><td>One of the glyphs specified in your mta file. Must be valid. </td></tr>
    <tr><td class="paramname">Text</td><td><a class="el" href="classMezzanine_1_1Any.xhtml" title="This is a simple class used for type-safe casting of any type of data.">Any</a> text you want printed on the button. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a28edf9d28e8fcb25f5908584bfe84a53">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="acdb2a17b232c27b82f4924f70bc0391f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Button.xhtml">Button</a>* Mezzanine::UI::Screen::CreateButton </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>LineHeight</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Text</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a text button.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created button. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the button. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the button. </td></tr>
    <tr><td class="paramname">LineHeight</td><td>The lineheight you want the text to have in relative units. This will automatically select the glyph and scale it for you. </td></tr>
    <tr><td class="paramname">Text</td><td><a class="el" href="classMezzanine_1_1Any.xhtml" title="This is a simple class used for type-safe casting of any type of data.">Any</a> text you want printed on the button. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a415572200debcfdb57b74367dd63d4c3">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="aa8497b098697f141153b4d85570cb805"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1CheckBox.xhtml">CheckBox</a>* Mezzanine::UI::Screen::CreateCheckBox </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>LineHeight</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>LabelText</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a <a class="el" href="classMezzanine_1_1UI_1_1CheckBox.xhtml" title="This is a simple widget for storing a bool value.">CheckBox</a>.  </p>
<p>The label uses the Markup Text class, and thus it's light markup text language. You can also pass in a blank string if you don't wish to have a label, you can create a label after construction. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created <a class="el" href="classMezzanine_1_1UI_1_1CheckBox.xhtml" title="This is a simple widget for storing a bool value.">CheckBox</a>. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the <a class="el" href="classMezzanine_1_1UI_1_1CheckBox.xhtml" title="This is a simple widget for storing a bool value.">CheckBox</a>. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the <a class="el" href="classMezzanine_1_1UI_1_1CheckBox.xhtml" title="This is a simple widget for storing a bool value.">CheckBox</a>. </td></tr>
    <tr><td class="paramname">LineHeight</td><td>The lineheight you want the text to have. If the Rect passed in is relative, this will expect LineHeight to be relative as well. </td></tr>
    <tr><td class="paramname">LabelText</td><td>The text to display with the label. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a7a38a9db81994d4285fb763123f8dcf0">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="a2ab8130b0cc81c99673e02a45a1c7a51"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1DropDownList.xhtml">DropDownList</a>* Mezzanine::UI::Screen::CreateDropDownList </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>LineHeight</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763">UI::ScrollbarStyle</a> &amp;&#160;</td>
          <td class="paramname"><em>ScrollStyle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a drop down list.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created <a class="el" href="classMezzanine_1_1UI_1_1DropDownList.xhtml" title="A widget that displays one selection from a list that can have it&#39;s visibility toggled.">DropDownList</a>. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The Name for the <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml" title="This class is the base class for all widgets.">Widget</a>. </td></tr>
    <tr><td class="paramname">Rect</td><td>The renderable rect representing the position and size of this widget. </td></tr>
    <tr><td class="paramname">LineHeight</td><td>The lineheight you want the text to have. If the Rect passed in is relative, this will expect LineHeight to be relative as well. </td></tr>
    <tr><td class="paramname">ScrollStyle</td><td>The style of the scrollbar you want for this List Box. See <a class="el" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml" title="This class is a widget class, to be used alongside any scrollable widget.">Scrollbar</a> class for more information. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a2e30bb7df9249da3c64790a41c141487">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="a5db293a2cb71789db43efdf87dc4f605"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1EnclosedRenderableContainerWidget.xhtml">EnclosedRenderableContainerWidget</a>* Mezzanine::UI::Screen::CreateEnclosedRenderableContainerWidget </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates an <a class="el" href="classMezzanine_1_1UI_1_1EnclosedRenderableContainerWidget.xhtml" title="This is an abstract class for the creation and storage of widgets to be used by other classes...">EnclosedRenderableContainerWidget</a>.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created <a class="el" href="classMezzanine_1_1UI_1_1EnclosedRenderableContainerWidget.xhtml" title="This is an abstract class for the creation and storage of widgets to be used by other classes...">EnclosedRenderableContainerWidget</a>. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the window. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the window. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a4ba748509a9e493cbf32744877444788">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="a903d1113948dbe007d6638b2e9bbba44"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1ListBox.xhtml">ListBox</a>* Mezzanine::UI::Screen::CreateListBox </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763">UI::ScrollbarStyle</a> &amp;&#160;</td>
          <td class="paramname"><em>ScrollStyle</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a List Box.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created List Box. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the List Box. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the List Box. </td></tr>
    <tr><td class="paramname">ScrollStyle</td><td>The style of scrollbar you want to create, see <a class="el" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml" title="This class is a widget class, to be used alongside any scrollable widget.">Scrollbar</a> documentation for more details. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a1ff1cfd08c3fc7031158c7123be2d477">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="ae5efa3caed7ab84b5e64a2f18a2bed0c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Menu.xhtml">Menu</a>* Mezzanine::UI::Screen::CreateMenu </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a <a class="el" href="classMezzanine_1_1UI_1_1Menu.xhtml" title="This class is a control mechanism for multiple windows in a heirarchy.">Menu</a>.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created <a class="el" href="classMezzanine_1_1UI_1_1Menu.xhtml" title="This class is a control mechanism for multiple windows in a heirarchy.">Menu</a>. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the <a class="el" href="classMezzanine_1_1UI_1_1Menu.xhtml" title="This class is a control mechanism for multiple windows in a heirarchy.">Menu</a>. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the <a class="el" href="classMezzanine_1_1UI_1_1Menu.xhtml" title="This class is a control mechanism for multiple windows in a heirarchy.">Menu</a>. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1ExtendedRenderableFactory.xhtml#a14a091decebd1120a8b66fd029e76153">Mezzanine::UI::ExtendedRenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="a8af42d039863e4ed2c2da06401175fa5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1OpenRenderableContainerWidget.xhtml">OpenRenderableContainerWidget</a>* Mezzanine::UI::Screen::CreateOpenRenderableContainerWidget </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates an <a class="el" href="classMezzanine_1_1UI_1_1OpenRenderableContainerWidget.xhtml">OpenRenderableContainerWidget</a>.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the creates <a class="el" href="classMezzanine_1_1UI_1_1OpenRenderableContainerWidget.xhtml">OpenRenderableContainerWidget</a>. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the <a class="el" href="classMezzanine_1_1UI_1_1OpenRenderableContainerWidget.xhtml">OpenRenderableContainerWidget</a>. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1ExtendedRenderableFactory.xhtml#a7383a9dce0cabdcf8ae1e117b6270417">Mezzanine::UI::ExtendedRenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="ab679318cfc571d1f6abf2bb2fcb27406"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1PagedCellGrid.xhtml">PagedCellGrid</a>* Mezzanine::UI::Screen::CreatePagedCellGrid </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>SpnRect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a62462d4df783dcdda77e1590a96bc6d6">UI::SpinnerStyle</a> &amp;&#160;</td>
          <td class="paramname"><em>SStyle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>GlyphHeight</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a paged cell grid.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created <a class="el" href="classMezzanine_1_1UI_1_1PagedCellGrid.xhtml" title="This is a specialization of the cell grid that allows you to use a spinner to navigate through pages ...">PagedCellGrid</a>. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the widget. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the <a class="el" href="classMezzanine_1_1UI_1_1PagedCellGrid.xhtml" title="This is a specialization of the cell grid that allows you to use a spinner to navigate through pages ...">PagedCellGrid</a>. </td></tr>
    <tr><td class="paramname">SpnRect</td><td>The Rect representing the position and size of the <a class="el" href="classMezzanine_1_1UI_1_1Spinner.xhtml" title="This is a simple widget for a numeric variable in a box.">Spinner</a>. </td></tr>
    <tr><td class="paramname">SStyle</td><td>The style of spinner to create. </td></tr>
    <tr><td class="paramname">GlyphHeight</td><td>The desired lineheight of the glyphs to be used with the spinner. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a3ec2ce3d43fb53bbf4ff2611e241956b">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="adb3911b17e53d63d30893ca0026a29ae"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml">Scrollbar</a>* Mezzanine::UI::Screen::CreateScrollbar </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763">UI::ScrollbarStyle</a> &amp;&#160;</td>
          <td class="paramname"><em>Style</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a <a class="el" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml" title="This class is a widget class, to be used alongside any scrollable widget.">Scrollbar</a>.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created <a class="el" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml" title="This class is a widget class, to be used alongside any scrollable widget.">Scrollbar</a>. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the <a class="el" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml" title="This class is a widget class, to be used alongside any scrollable widget.">Scrollbar</a>. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the <a class="el" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml" title="This class is a widget class, to be used alongside any scrollable widget.">Scrollbar</a>. </td></tr>
    <tr><td class="paramname">Style</td><td>The style of scrollbar you want to create, see <a class="el" href="classMezzanine_1_1UI_1_1Scrollbar.xhtml" title="This class is a widget class, to be used alongside any scrollable widget.">Scrollbar</a> documentation for more details. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a34b102d5e9725317f615ec5098538611">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="ad2099b5c008632bed46102275f502990"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1ScrolledCellGrid.xhtml">ScrolledCellGrid</a>* Mezzanine::UI::Screen::CreateScrolledCellGrid </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>Thickness</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a5998a9bf372a7e92605c0c461736e763">UI::ScrollbarStyle</a> &amp;&#160;</td>
          <td class="paramname"><em>Style</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a scrolled cell grid.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created <a class="el" href="classMezzanine_1_1UI_1_1ScrolledCellGrid.xhtml" title="This is a specialization of the cell grid that allows you to use scrollbars to navigate the cells on ...">ScrolledCellGrid</a>. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the widget. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the <a class="el" href="classMezzanine_1_1UI_1_1ScrolledCellGrid.xhtml" title="This is a specialization of the cell grid that allows you to use scrollbars to navigate the cells on ...">ScrolledCellGrid</a>. </td></tr>
    <tr><td class="paramname">Thickness</td><td>The width of the vertical scrollbar in relative units. The same amount of actual pixels is used to determine the height of the horizontal scrollbar. </td></tr>
    <tr><td class="paramname">Style</td><td>An enum value representing how you want your scrollbar constructed. See class details for more info. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#af31b233ed2beef419238121cba1744d9">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="a97a7809b1013f012ff750ac84d9199a9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Spinner.xhtml">Spinner</a>* Mezzanine::UI::Screen::CreateSpinner </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1UI.xhtml#a62462d4df783dcdda77e1590a96bc6d6">UI::SpinnerStyle</a> &amp;&#160;</td>
          <td class="paramname"><em>SStyle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>GlyphHeight</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a <a class="el" href="classMezzanine_1_1UI_1_1Spinner.xhtml" title="This is a simple widget for a numeric variable in a box.">Spinner</a>.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created <a class="el" href="classMezzanine_1_1UI_1_1Spinner.xhtml" title="This is a simple widget for a numeric variable in a box.">Spinner</a>. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The Name for the <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml" title="This class is the base class for all widgets.">Widget</a>. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the <a class="el" href="classMezzanine_1_1UI_1_1Spinner.xhtml" title="This is a simple widget for a numeric variable in a box.">Spinner</a>. </td></tr>
    <tr><td class="paramname">SStyle</td><td>The layout of buttons this widget will have. See SpinnerStyle enum or class description for more details. </td></tr>
    <tr><td class="paramname">GlyphHeight</td><td>The desired relative height of the text you want. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#aa616d4c5b02840e05e8b5c7472972c2e">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="acdcba01de596f713bfc26eebef4311ed"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1TabSet.xhtml">TabSet</a>* Mezzanine::UI::Screen::CreateTabSet </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>SetRect</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a tabset.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created tabset. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The Name for the <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml" title="This class is the base class for all widgets.">Widget</a>. </td></tr>
    <tr><td class="paramname">SetRect</td><td>The Rect representing the position and size of all the <a class="el" href="classMezzanine_1_1UI_1_1Renderable.xhtml" title="Basic class for all structures that get inserted into the rendering hierarchy.">Renderable</a> Sets generated by the tabset. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#a8c9eab318899af36f876a966ddc0a03a">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="a0c710bc89768fc8c30462e419edb5319"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Window.xhtml">Window</a>* Mezzanine::UI::Screen::CreateWidgetWindow </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1UI_1_1RenderableRect.xhtml">RenderableRect</a> &amp;&#160;</td>
          <td class="paramname"><em>Rect</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Creates a <a class="el" href="classMezzanine_1_1UI_1_1Window.xhtml" title="This is a container widget capable of holding any other widget.">Window</a>.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created <a class="el" href="classMezzanine_1_1UI_1_1Window.xhtml" title="This is a container widget capable of holding any other widget.">Window</a>. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the <a class="el" href="classMezzanine_1_1UI_1_1Window.xhtml" title="This is a container widget capable of holding any other widget.">Window</a>. </td></tr>
    <tr><td class="paramname">Rect</td><td>The Rect representing the position and size of the <a class="el" href="classMezzanine_1_1UI_1_1Window.xhtml" title="This is a container widget capable of holding any other widget.">Window</a>. </td></tr>
  </table>
  </dd>
</dl>
 </p>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1UI_1_1ExtendedRenderableFactory.xhtml#a079b737e5d69edd9d01ce8a48fb6247e">Mezzanine::UI::ExtendedRenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="a907b64b323d10bb4a0b6b2b7a0a2a449"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1UI_1_1TextureAtlas.xhtml">TextureAtlas</a>* Mezzanine::UI::Screen::GetAtlas </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Atlas</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets an atlas that has been loaded. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Atlas</td><td>The name of the Atlas to retrieve, usually stored as a filename. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the requested Texture Atlas. </dd></dl>

</div>
</div>
<a class="anchor" id="a0534a7cc86abe2c2c318f274d4ad2415"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1UI_1_1GlyphData.xhtml">GlyphData</a>* Mezzanine::UI::Screen::GetGlyphData </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>ID</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Atlas</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the specified <a class="el" href="classMezzanine_1_1UI_1_1GlyphData.xhtml" title="Class used to describe a single glyph or character available for text operations.">GlyphData</a> from an Atlas. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ID</td><td>The identification number associated with the loaded <a class="el" href="classMezzanine_1_1UI_1_1GlyphData.xhtml" title="Class used to describe a single glyph or character available for text operations.">GlyphData</a>. </td></tr>
    <tr><td class="paramname">Atlas</td><td>The name of the atlas to check the specified <a class="el" href="classMezzanine_1_1UI_1_1GlyphData.xhtml" title="Class used to describe a single glyph or character available for text operations.">GlyphData</a> ID for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the requested <a class="el" href="classMezzanine_1_1UI_1_1GlyphData.xhtml" title="Class used to describe a single glyph or character available for text operations.">GlyphData</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="a2629610299606e478e880cbcf5afe0f2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a> Mezzanine::UI::Screen::GetMarkupColour </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Atlas</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the <a class="el" href="classMezzanine_1_1ColourValue.xhtml" title="This is a simple class for holding 4 reals representing the colour any give object or lightsource can...">ColourValue</a> set at the specified index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Index</td><td>The index of the Markup colour to get. </td></tr>
    <tr><td class="paramname">Atlas</td><td>The Atlas to check the markup colours of. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1ColourValue.xhtml" title="This is a simple class for holding 4 reals representing the colour any give object or lightsource can...">ColourValue</a> with the colour at the provided index, or White if the Index is invalid(or if that is the colour set, which would be silly). </dd></dl>

</div>
</div>
<a class="anchor" id="ab2a3a69e5063e9cfd8d002f102812efe"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&amp; Mezzanine::UI::Screen::GetName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the name of this screen. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a string containing the name of this screen. </dd></dl>

</div>
</div>
<a class="anchor" id="a97ff8fc968553d0c79b33c0d002576be"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::UI::Screen::GetNumWidgets </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the number of widgets being used in this screen. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the number of widgets this screen is storing. </dd></dl>

</div>
</div>
<a class="anchor" id="a357993a11de29a24ebdb7a2f7432ce55"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Mezzanine::UI::Screen::GetPrimaryAtlas </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the currently set primary atlas. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a string containing the name of the primary atlas that is set. </dd></dl>

</div>
</div>
<a class="anchor" id="a621c84d341bf18e0d26eef5259bb1fc4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Screen.xhtml">Screen</a>* Mezzanine::UI::Screen::GetScreen </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the screen that will possess ownership of the created renderables. </p>

<p>Implements <a class="el" href="classMezzanine_1_1UI_1_1RenderableFactory.xhtml#ab5cbb2df0500d05f90c005865f93dc27">Mezzanine::UI::RenderableFactory</a>.</p>

</div>
</div>
<a class="anchor" id="ae72af325153c01f54abae60d5b0bec63"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Vector2.xhtml">Vector2</a> Mezzanine::UI::Screen::GetSolidUV </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Atlas</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the solid UV position from an Atlas. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Atlas</td><td>The name of the Atlas to get the Solid UV from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1Vector2.xhtml" title="This is used to represent a point on a 2 dimentional area, such as a screen.">Vector2</a> with the location of Solid UV on the Atlas. </dd></dl>

</div>
</div>
<a class="anchor" id="abc03e04ec13f7c1c082fa72509b7593a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="structMezzanine_1_1UI_1_1Sprite.xhtml">Sprite</a>* Mezzanine::UI::Screen::GetSprite </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>SpriteName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Atlas</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets a sprite from an Atlas. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">SpriteName</td><td>The name of the sprite to retrieve. </td></tr>
    <tr><td class="paramname">Atlas</td><td>The name of the Atlas to get the sprite from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the requested <a class="el" href="structMezzanine_1_1UI_1_1Sprite.xhtml" title="Basic class used to describe a portion of a texture to be applied to a Quad.">Sprite</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="a8cdb34df5daa728a7b9350a0f5b1e56c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::UI::Screen::GetTexelOffsetX </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the X axis Texel Offset for the current rendersystem. </p>
<dl class="section return"><dt>Returns</dt><dd>Retruns a real containing the texel offset to be applied to renderables on this screen. </dd></dl>

</div>
</div>
<a class="anchor" id="a490a5da1de7334f12d0c6a3fbc20d455"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::UI::Screen::GetTexelOffsetY </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the Y axis Texel Offset for the current rendersystem. </p>
<dl class="section return"><dt>Returns</dt><dd>Retruns a real containing the texel offset to be applied to renderables on this screen. </dd></dl>

</div>
</div>
<a class="anchor" id="a7c3961e8ca8920786936d2325c32ad96"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Vector2.xhtml">Vector2</a> Mezzanine::UI::Screen::GetTextureSize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Atlas</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the texture size of the specified Atlas. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Atlas</td><td>The name of the atlas to get the texture size of. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1Vector2.xhtml" title="This is used to represent a point on a 2 dimentional area, such as a screen.">Vector2</a> containing the size of the requested Atlas. </dd></dl>

</div>
</div>
<a class="anchor" id="adfa88987470c1666f305be026753021a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Graphics_1_1Viewport.xhtml">Graphics::Viewport</a>* Mezzanine::UI::Screen::GetViewport </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the Viewport this screen is currently rendering to. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the Viewport this screen is applied to. </dd></dl>

</div>
</div>
<a class="anchor" id="af27526084b76bea3a94572454ab12c50"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual const <a class="el" href="classMezzanine_1_1Vector2.xhtml">Vector2</a>&amp; Mezzanine::UI::Screen::GetViewportDimensions </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current viewport dimensions. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1Vector2.xhtml" title="This is used to represent a point on a 2 dimentional area, such as a screen.">Vector2</a> representing the current viewport dimensions. </dd></dl>

</div>
</div>
<a class="anchor" id="a08493a36f8a23c751173e209ce3423e1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a>* Mezzanine::UI::Screen::GetWidget </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets a widget in this screen by name. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the widget to get. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the widget of the specified name. </dd></dl>

</div>
</div>
<a class="anchor" id="a17336700e6272d1ae97ce0e3014ce09a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1UI_1_1Widget.xhtml">Widget</a>* Mezzanine::UI::Screen::GetWidget </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>ZOrder</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets a widget by it's ZOrder among the root widgets on this screen. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ZOrder</td><td>The ZOrder of the widget to get. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the widget with the specified ZOrder. </dd></dl>

</div>
</div>
<a class="anchor" id="a5a15f07769da90282d9bb13042621ec2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::UI::Screen::IsVisible </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the screens visability. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a bool representing the visability of the screen. </dd></dl>

</div>
</div>
<a class="anchor" id="a0efb62590342d1aeaf0de6117f477b8c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::UI::Screen::SetPrimaryAtlas </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Atlas</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the Atlas to be assumed when one isn't provided for atlas related tasks. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Atlas</td><td>The name of the atlas to be used. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aea5039b63d97cea91cbb281727f9f186"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::UI::Screen::SetVisible </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>visible</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the screens visability. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">visable</td><td>A bool representing the visability of the screen. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/sqeaky/Code/Mezzanine/Mezzanine/src/UI/<a class="el" href="screen_8h_source.xhtml">screen.h</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Mar 30 2013 00:13:21 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1.2</small></address>
</body>
</html>
