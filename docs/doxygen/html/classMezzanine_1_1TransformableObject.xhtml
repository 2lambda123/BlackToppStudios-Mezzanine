<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::TransformableObject Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml">TransformableObject</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classMezzanine_1_1TransformableObject-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::TransformableObject Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>This is an interface for all 3D objects that can have their full transforms manipulated.  
 <a href="classMezzanine_1_1TransformableObject.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="transformableobject_8h_source.xhtml">transformableobject.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for Mezzanine::TransformableObject:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1TransformableObject__inherit__graph.svg" width="182" height="150"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a19db95dd2c1d51cae4eff5bc455654f3"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a19db95dd2c1d51cae4eff5bc455654f3">GetLocation</a> () const =0</td></tr>
<tr class="memdesc:a19db95dd2c1d51cae4eff5bc455654f3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets this objects current location.  <a href="#a19db95dd2c1d51cae4eff5bc455654f3">More...</a><br/></td></tr>
<tr class="separator:a19db95dd2c1d51cae4eff5bc455654f3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd0ba2a6c736ee8d0671dc3a5d51f8f1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#afd0ba2a6c736ee8d0671dc3a5d51f8f1">GetOrientation</a> () const =0</td></tr>
<tr class="memdesc:afd0ba2a6c736ee8d0671dc3a5d51f8f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets this objects current orientation.  <a href="#afd0ba2a6c736ee8d0671dc3a5d51f8f1">More...</a><br/></td></tr>
<tr class="separator:afd0ba2a6c736ee8d0671dc3a5d51f8f1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71a88f0e6234ddbeceefec8bbedf8d80"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a71a88f0e6234ddbeceefec8bbedf8d80">GetScale</a> () const =0</td></tr>
<tr class="memdesc:a71a88f0e6234ddbeceefec8bbedf8d80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the scaling currently being applied to this object.  <a href="#a71a88f0e6234ddbeceefec8bbedf8d80">More...</a><br/></td></tr>
<tr class="separator:a71a88f0e6234ddbeceefec8bbedf8d80"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0e92b68453f24a01dd8c12cd14eaf94d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a0e92b68453f24a01dd8c12cd14eaf94d">Pitch</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Angle, const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a> Space=<a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a>)=0</td></tr>
<tr class="memdesc:a0e92b68453f24a01dd8c12cd14eaf94d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate the object around the X axis.  <a href="#a0e92b68453f24a01dd8c12cd14eaf94d">More...</a><br/></td></tr>
<tr class="separator:a0e92b68453f24a01dd8c12cd14eaf94d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9d1dfdf4e17758e4598b430a481c93fb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a9d1dfdf4e17758e4598b430a481c93fb">Roll</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Angle, const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a> Space=<a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a>)=0</td></tr>
<tr class="memdesc:a9d1dfdf4e17758e4598b430a481c93fb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate the object around the Z axis.  <a href="#a9d1dfdf4e17758e4598b430a481c93fb">More...</a><br/></td></tr>
<tr class="separator:a9d1dfdf4e17758e4598b430a481c93fb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d434a41d736dadd676f13399f36f98c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a1d434a41d736dadd676f13399f36f98c">Rotate</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Axis, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Angle, const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a> Space=<a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a>)=0</td></tr>
<tr class="memdesc:a1d434a41d736dadd676f13399f36f98c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotates the object from it's existing rotation.  <a href="#a1d434a41d736dadd676f13399f36f98c">More...</a><br/></td></tr>
<tr class="separator:a1d434a41d736dadd676f13399f36f98c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a954a8230f51d1fc1f0f1f601abe0505e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a954a8230f51d1fc1f0f1f601abe0505e">Rotate</a> (const <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> &amp;Rotation, const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a> Space=<a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a>)=0</td></tr>
<tr class="memdesc:a954a8230f51d1fc1f0f1f601abe0505e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotates the object from it's existing rotation.  <a href="#a954a8230f51d1fc1f0f1f601abe0505e">More...</a><br/></td></tr>
<tr class="separator:a954a8230f51d1fc1f0f1f601abe0505e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa7d9ba9f40dcd62742bc735fe3b85b1a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#aa7d9ba9f40dcd62742bc735fe3b85b1a">Scale</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Scale)=0</td></tr>
<tr class="memdesc:aa7d9ba9f40dcd62742bc735fe3b85b1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scales the object from it's current size.  <a href="#aa7d9ba9f40dcd62742bc735fe3b85b1a">More...</a><br/></td></tr>
<tr class="separator:aa7d9ba9f40dcd62742bc735fe3b85b1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a066ec50fd49e34794ac15babcba4c1dd"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a066ec50fd49e34794ac15babcba4c1dd">Scale</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> X, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Y, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Z)=0</td></tr>
<tr class="memdesc:a066ec50fd49e34794ac15babcba4c1dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Scales the object from it's current size.  <a href="#a066ec50fd49e34794ac15babcba4c1dd">More...</a><br/></td></tr>
<tr class="separator:a066ec50fd49e34794ac15babcba4c1dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaf33623f5065dd81807b428aa901e280"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#aaf33623f5065dd81807b428aa901e280">SetLocation</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Location)=0</td></tr>
<tr class="memdesc:aaf33623f5065dd81807b428aa901e280"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the location of this object in parent space.  <a href="#aaf33623f5065dd81807b428aa901e280">More...</a><br/></td></tr>
<tr class="separator:aaf33623f5065dd81807b428aa901e280"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a020a1ff559a7bba073c3fce8ffbe4c77"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a020a1ff559a7bba073c3fce8ffbe4c77">SetLocation</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> X, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Y, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Z)=0</td></tr>
<tr class="memdesc:a020a1ff559a7bba073c3fce8ffbe4c77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the location of this object in parent space via Reals.  <a href="#a020a1ff559a7bba073c3fce8ffbe4c77">More...</a><br/></td></tr>
<tr class="separator:a020a1ff559a7bba073c3fce8ffbe4c77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa72c34ddbfceed51d2671f7e811e3309"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#aa72c34ddbfceed51d2671f7e811e3309">SetOrientation</a> (const <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> &amp;Orientation)=0</td></tr>
<tr class="memdesc:aa72c34ddbfceed51d2671f7e811e3309"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the orientation of this object in parent space.  <a href="#aa72c34ddbfceed51d2671f7e811e3309">More...</a><br/></td></tr>
<tr class="separator:aa72c34ddbfceed51d2671f7e811e3309"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a82f208f29ffbb576671b884bd6ae7970"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a82f208f29ffbb576671b884bd6ae7970">SetOrientation</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> X, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Y, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Z, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> W)=0</td></tr>
<tr class="memdesc:a82f208f29ffbb576671b884bd6ae7970"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the orientation of this object in parent space via Reals.  <a href="#a82f208f29ffbb576671b884bd6ae7970">More...</a><br/></td></tr>
<tr class="separator:a82f208f29ffbb576671b884bd6ae7970"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5956398c55a47e06b9a87758c5400c45"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a5956398c55a47e06b9a87758c5400c45">SetScale</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;<a class="el" href="classMezzanine_1_1TransformableObject.xhtml#aa7d9ba9f40dcd62742bc735fe3b85b1a">Scale</a>)=0</td></tr>
<tr class="memdesc:a5956398c55a47e06b9a87758c5400c45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the scaling to be applied to this object.  <a href="#a5956398c55a47e06b9a87758c5400c45">More...</a><br/></td></tr>
<tr class="separator:a5956398c55a47e06b9a87758c5400c45"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba33e9a778e3d69cb929b8bfec23b13a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#aba33e9a778e3d69cb929b8bfec23b13a">SetScale</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> X, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Y, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Z)=0</td></tr>
<tr class="memdesc:aba33e9a778e3d69cb929b8bfec23b13a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the scaling to be applied to this object via Reals.  <a href="#aba33e9a778e3d69cb929b8bfec23b13a">More...</a><br/></td></tr>
<tr class="separator:aba33e9a778e3d69cb929b8bfec23b13a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4c98e5d29edbd3255126e4b2fc872b77"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a4c98e5d29edbd3255126e4b2fc872b77">Translate</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Trans, const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a> Space=<a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a>)=0</td></tr>
<tr class="memdesc:a4c98e5d29edbd3255126e4b2fc872b77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves this object from it's current location.  <a href="#a4c98e5d29edbd3255126e4b2fc872b77">More...</a><br/></td></tr>
<tr class="separator:a4c98e5d29edbd3255126e4b2fc872b77"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21c492aca96d122a01d2d2c9eda4eceb"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#a21c492aca96d122a01d2d2c9eda4eceb">Translate</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> X, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Y, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Z, const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a> Space=<a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a>)=0</td></tr>
<tr class="memdesc:a21c492aca96d122a01d2d2c9eda4eceb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves this object from it's current location.  <a href="#a21c492aca96d122a01d2d2c9eda4eceb">More...</a><br/></td></tr>
<tr class="separator:a21c492aca96d122a01d2d2c9eda4eceb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abe0eb33d6b988a294c8f116e6a1adb3b"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1TransformableObject.xhtml#abe0eb33d6b988a294c8f116e6a1adb3b">Yaw</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Angle, const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a> Space=<a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a>)=0</td></tr>
<tr class="memdesc:abe0eb33d6b988a294c8f116e6a1adb3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Rotate the object around the Y axis.  <a href="#abe0eb33d6b988a294c8f116e6a1adb3b">More...</a><br/></td></tr>
<tr class="separator:abe0eb33d6b988a294c8f116e6a1adb3b"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This is an interface for all 3D objects that can have their full transforms manipulated. </p>

<p>Definition at line <a class="el" href="transformableobject_8h_source.xhtml#l00053">53</a> of file <a class="el" href="transformableobject_8h_source.xhtml">transformableobject.h</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a19db95dd2c1d51cae4eff5bc455654f3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::TransformableObject::GetLocation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets this objects current location. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the current rotation of this object in parent space. </dd></dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a5370f68c99176d25797137ac5644b264">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="afd0ba2a6c736ee8d0671dc3a5d51f8f1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> Mezzanine::TransformableObject::GetOrientation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets this objects current orientation. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> representing the current orientation of this object in parent space. </dd></dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a20166aed2e7ed1c3b6f6f01fc57fdd98">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a71a88f0e6234ddbeceefec8bbedf8d80"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::TransformableObject::GetScale </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the scaling currently being applied to this object. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the amount this object is being scaled. </dd></dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a2c54067ef675e5defabb6f01329f39b4">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a0e92b68453f24a01dd8c12cd14eaf94d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::Pitch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a>&#160;</td>
          <td class="paramname"><em>Space</em> = <code><a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rotate the object around the X axis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Angle</td><td>The angle to rotate this object in radians. </td></tr>
    <tr><td class="paramname">Space</td><td>The transform space in which to apply this rotation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a24c721bf87d3f5cfaaf636bebac895b2">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a9d1dfdf4e17758e4598b430a481c93fb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::Roll </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a>&#160;</td>
          <td class="paramname"><em>Space</em> = <code><a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rotate the object around the Z axis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Angle</td><td>The angle to rotate this object in radians. </td></tr>
    <tr><td class="paramname">Space</td><td>The transform space in which to apply this rotation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a5d54114b761cd0120c0fd05c14df751b">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a1d434a41d736dadd676f13399f36f98c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::Rotate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Axis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a>&#160;</td>
          <td class="paramname"><em>Space</em> = <code><a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rotates the object from it's existing rotation. </p>
<dl class="section note"><dt>Note</dt><dd>This method has an additive effect with the objects current rotation. Unlike "SetOrientation" this method does not replace the existing orientation with what you provide. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Axis</td><td>The axis on which this object will be rotated. </td></tr>
    <tr><td class="paramname">Angle</td><td>The angle to rotate this object in radians. </td></tr>
    <tr><td class="paramname">Space</td><td>The transform space in which to apply this rotation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a0e0791ac0e9b4ff32879af132b68ea8e">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a954a8230f51d1fc1f0f1f601abe0505e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::Rotate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> &amp;&#160;</td>
          <td class="paramname"><em>Rotation</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a>&#160;</td>
          <td class="paramname"><em>Space</em> = <code><a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rotates the object from it's existing rotation. </p>
<dl class="section note"><dt>Note</dt><dd>This method has an additive effect with the objects current rotation. Unlike "SetOrientation" this method does not replace the existing orientation with what you provide. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Rotation</td><td>The rotation to apply to this object. </td></tr>
    <tr><td class="paramname">Space</td><td>The transform space in which to apply this rotation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#ab8ec938c7133c44e9680498d623192ee">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="aa7d9ba9f40dcd62742bc735fe3b85b1a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::Scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Scale</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scales the object from it's current size. </p>
<dl class="section note"><dt>Note</dt><dd>This method has an additive effect with the objects' current scaling. Unlike "SetScale" this method does not replace the existing scale with what you provide. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Scale</td><td>A <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the scaling to apply to this object. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#ad8e7503cde257e0d4a911a266b6f8e82">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a066ec50fd49e34794ac15babcba4c1dd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::Scale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Scales the object from it's current size. </p>
<dl class="section note"><dt>Note</dt><dd>This method has an additive effect with the objects' current scaling. Unlike "SetScale" this method does not replace the existing scale with what you provide. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>The scaling factor to apply on the X axis. </td></tr>
    <tr><td class="paramname">Y</td><td>The scaling factor to apply on the Y axis. </td></tr>
    <tr><td class="paramname">Z</td><td>The scaling factor to apply on the Z axis. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a2ba41d2b819a7cb187c8264d50cf8c24">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="aaf33623f5065dd81807b428aa901e280"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::SetLocation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Location</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the location of this object in parent space. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Location</td><td>A <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the location this object is to be set to. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#af2cbad38e8eef99f4999559964d28211">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a020a1ff559a7bba073c3fce8ffbe4c77"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::SetLocation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the location of this object in parent space via Reals. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>The position on the X axis where this object is to be set. </td></tr>
    <tr><td class="paramname">Y</td><td>The position on the Y axis where this object is to be set. </td></tr>
    <tr><td class="paramname">Z</td><td>The position on the Z axis where this object is to be set. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#add8711cc7622816216ee2d9473dbd320">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="aa72c34ddbfceed51d2671f7e811e3309"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::SetOrientation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> &amp;&#160;</td>
          <td class="paramname"><em>Orientation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the orientation of this object in parent space. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Orientation</td><td>A <a class="el" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> representing the rotation this object is to be set to. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#aaee6f45ee8bae0a1174e79521136a10a">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a82f208f29ffbb576671b884bd6ae7970"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::SetOrientation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>W</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the orientation of this object in parent space via Reals. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>The X component of the Axis. </td></tr>
    <tr><td class="paramname">Y</td><td>The Y component of the Axis. </td></tr>
    <tr><td class="paramname">Z</td><td>The Z component of the Axis. </td></tr>
    <tr><td class="paramname">W</td><td>Rotation on the Axis X, Y and Z defined. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#abca96196ef0f736fe8baeb02018c6813">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a5956398c55a47e06b9a87758c5400c45"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::SetScale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Scale</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the scaling to be applied to this object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Scale</td><td>A <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the amount of scaling to apply to this object. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a143008d3a8fd710754f65d0647f7daf3">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="aba33e9a778e3d69cb929b8bfec23b13a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::SetScale </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the scaling to be applied to this object via Reals. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>The scaling factor to apply on the X axis. </td></tr>
    <tr><td class="paramname">Y</td><td>The scaling factor to apply on the Y axis. </td></tr>
    <tr><td class="paramname">Z</td><td>The scaling factor to apply on the Z axis. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a336e34b909c26c80316532ecb2edf331">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a4c98e5d29edbd3255126e4b2fc872b77"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::Translate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Trans</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a>&#160;</td>
          <td class="paramname"><em>Space</em> = <code><a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves this object from it's current location. </p>
<dl class="section note"><dt>Note</dt><dd>This method has an additive effect with the objects current location. Unlike "SetLocation" this method does not replace the existing location with what you provide. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Trans</td><td>A <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the amount of movement to apply to this object. </td></tr>
    <tr><td class="paramname">Space</td><td>The transform space in which to apply this translation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a395cdf29ffeb18f6c83656de276857f6">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="a21c492aca96d122a01d2d2c9eda4eceb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::Translate </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>X</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a>&#160;</td>
          <td class="paramname"><em>Space</em> = <code><a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves this object from it's current location. </p>
<dl class="section note"><dt>Note</dt><dd>This method has an additive effect with the objects current location. Unlike "SetLocation" this method does not replace the existing location with what you provide. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">X</td><td>The amount of movement to apply on the X axis. </td></tr>
    <tr><td class="paramname">Y</td><td>The amount of movement to apply on the Y axis. </td></tr>
    <tr><td class="paramname">Z</td><td>The amount of movement to apply on the Z axis. </td></tr>
    <tr><td class="paramname">Space</td><td>The transform space in which to apply this translation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#a3b37f4ac51b95e34430eab4f58fa2d25">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<a class="anchor" id="abe0eb33d6b988a294c8f116e6a1adb3b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::TransformableObject::Yaw </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Angle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3">Mezzanine::TransformSpace</a>&#160;</td>
          <td class="paramname"><em>Space</em> = <code><a class="el" href="namespaceMezzanine.xhtml#ad81c74de3529f1e643bd145173924ed3a352c41c07844c77508ce36b43a30b553">Mezzanine::TS_Parent</a></code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Rotate the object around the Y axis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Angle</td><td>The angle to rotate this object in radians. </td></tr>
    <tr><td class="paramname">Space</td><td>The transform space in which to apply this rotation. </td></tr>
  </table>
  </dd>
</dl>

<p>Implemented in <a class="el" href="classMezzanine_1_1Graphics_1_1Bone.xhtml#accb5df0c2c9092ee7a7baf518bbf29ed">Mezzanine::Graphics::Bone</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/sqeaky/Code/Mezzanine/Mezzanine/src/<a class="el" href="transformableobject_8h_source.xhtml">transformableobject.h</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat May 18 2013 17:17:08 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
