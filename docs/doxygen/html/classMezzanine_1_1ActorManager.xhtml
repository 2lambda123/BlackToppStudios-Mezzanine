<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::ActorManager Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.1.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1ActorManager.xhtml">ActorManager</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classMezzanine_1_1ActorManager-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::ActorManager Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>A manager responsible for the storage and management of all actors in use.  
 <a href="classMezzanine_1_1ActorManager.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="actormanager_8h_source.xhtml">actormanager.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for Mezzanine::ActorManager:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1ActorManager__inherit__graph.svg" width="344" height="134"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for Mezzanine::ActorManager:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1ActorManager__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a436b56aadfc9f939454be461c904b8e5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a436b56aadfc9f939454be461c904b8e5"></a>
typedef std::vector<br class="typebreak"/>
&lt; ActorCharacter * &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ActorCharacterIterator</b></td></tr>
<tr class="memitem:a7adacffc50a291974d306a3008c18b87"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7adacffc50a291974d306a3008c18b87"></a>
typedef std::vector&lt; <a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> * &gt;<br class="typebreak"/>
::iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ActorIterator</b></td></tr>
<tr class="memitem:ac4f47c8bddcfec7a4ae2904db967e020"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac4f47c8bddcfec7a4ae2904db967e020"></a>
typedef std::vector<br class="typebreak"/>
&lt; <a class="el" href="classMezzanine_1_1ActorRigid.xhtml">ActorRigid</a> * &gt;::iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ActorRigidIterator</b></td></tr>
<tr class="memitem:af182ad519a3381e8893a29db11b037db"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af182ad519a3381e8893a29db11b037db"></a>
typedef std::vector&lt; <a class="el" href="classMezzanine_1_1ActorSoft.xhtml">ActorSoft</a> * &gt;<br class="typebreak"/>
::iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ActorSoftIterator</b></td></tr>
<tr class="memitem:a985136f1466c825eb2f4437243e0d892"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a985136f1466c825eb2f4437243e0d892"></a>
typedef std::vector<br class="typebreak"/>
&lt; ActorCharacter * &gt;<br class="typebreak"/>
::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ConstActorCharacterIterator</b></td></tr>
<tr class="memitem:ac623530bb722052c2f90e2e737d01f27"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac623530bb722052c2f90e2e737d01f27"></a>
typedef std::vector&lt; <a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> * &gt;<br class="typebreak"/>
::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ConstActorIterator</b></td></tr>
<tr class="memitem:a08bfd16e9ea28fc9941aeb19a10145e2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a08bfd16e9ea28fc9941aeb19a10145e2"></a>
typedef std::vector<br class="typebreak"/>
&lt; <a class="el" href="classMezzanine_1_1ActorRigid.xhtml">ActorRigid</a> * &gt;<br class="typebreak"/>
::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ConstActorRigidIterator</b></td></tr>
<tr class="memitem:abe3c0c6a2cf63cd6795d7bd61b68acc0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abe3c0c6a2cf63cd6795d7bd61b68acc0"></a>
typedef std::vector&lt; <a class="el" href="classMezzanine_1_1ActorSoft.xhtml">ActorSoft</a> * &gt;<br class="typebreak"/>
::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><b>ConstActorSoftIterator</b></td></tr>
<tr class="inherit_header pub_types_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&nbsp;Public Types inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:ab23a9aa27c4e3cb58d902a149d3c6de2 inherit pub_types_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab23a9aa27c4e3cb58d902a149d3c6de2"></a>
typedef bool(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a> )()</td></tr>
<tr class="memdesc:ab23a9aa27c4e3cb58d902a149d3c6de2 inherit pub_types_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This makes working with Callback function pointer a bit easier. <br/></td></tr>
<tr class="memitem:a9a6f3e238f66cbc68dfec11e4160aa6c inherit pub_types_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><b>ManagerType</b> { <br/>
&#160;&#160;<b>ActorManager</b> =  1, 
<b>AudioManager</b>, 
<b>CameraManager</b>, 
<b>CollisionShapeManager</b>, 
<br/>
&#160;&#160;<b>EventManager</b>, 
<b>GraphicsManager</b>, 
<b>InputManager</b>, 
<b>LogManager</b>, 
<br/>
&#160;&#160;<b>MeshManager</b>, 
<b>NetworkManager</b>, 
<b>PagingManager</b>, 
<b>PhysicsManager</b>, 
<br/>
&#160;&#160;<b>ResourceManager</b>, 
<b>SceneManager</b>, 
<b>ScriptingManager</b>, 
<b>TerrainManager</b>, 
<br/>
&#160;&#160;<b>TimerManager</b>, 
<b>UIManager</b>, 
<b>UserCreated</b> =  512
<br/>
 }</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:aa9074e3c8dd87865e957c4d76fbc5e25"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa9074e3c8dd87865e957c4d76fbc5e25"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#aa9074e3c8dd87865e957c4d76fbc5e25">ActorManager</a> ()</td></tr>
<tr class="memdesc:aa9074e3c8dd87865e957c4d76fbc5e25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class constructor. <br/></td></tr>
<tr class="memitem:af01011777296ba4f2768b6d41500923d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#af01011777296ba4f2768b6d41500923d">ActorManager</a> (<a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;XMLNode)</td></tr>
<tr class="memdesc:af01011777296ba4f2768b6d41500923d"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> constructor.  <a href="#af01011777296ba4f2768b6d41500923d"></a><br/></td></tr>
<tr class="memitem:a46e885c204602ef9e3d01f2c47257524"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a46e885c204602ef9e3d01f2c47257524"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a46e885c204602ef9e3d01f2c47257524">~ActorManager</a> ()</td></tr>
<tr class="memdesc:a46e885c204602ef9e3d01f2c47257524"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class destructor. <br/></td></tr>
<tr class="memitem:a0080e098737a20b1b52052444289f0f0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a0080e098737a20b1b52052444289f0f0">AddActor</a> (<a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> *Actor)</td></tr>
<tr class="memdesc:a0080e098737a20b1b52052444289f0f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Adds a pre-created actor to the manager.  <a href="#a0080e098737a20b1b52052444289f0f0"></a><br/></td></tr>
<tr class="memitem:a8a591f98e09174f548cce709379c2a64"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a8a591f98e09174f548cce709379c2a64">DestroyActor</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Index)</td></tr>
<tr class="memdesc:a8a591f98e09174f548cce709379c2a64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys an actor at the specified index.  <a href="#a8a591f98e09174f548cce709379c2a64"></a><br/></td></tr>
<tr class="memitem:af48596c32ef52b3a5042621c82177339"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#af48596c32ef52b3a5042621c82177339">DestroyActor</a> (<a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> *ToBeDestroyed)</td></tr>
<tr class="memdesc:af48596c32ef52b3a5042621c82177339"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys an actor.  <a href="#af48596c32ef52b3a5042621c82177339"></a><br/></td></tr>
<tr class="memitem:afdaabe9a32dcfa6d962da3b0d82d0d85"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afdaabe9a32dcfa6d962da3b0d82d0d85"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#afdaabe9a32dcfa6d962da3b0d82d0d85">DestroyAllActors</a> ()</td></tr>
<tr class="memdesc:afdaabe9a32dcfa6d962da3b0d82d0d85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys all actors currently within this manager. <br/></td></tr>
<tr class="memitem:ab704f81589ad986b0f3c5b9aa0af262c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#ab704f81589ad986b0f3c5b9aa0af262c">DoMainLoopItems</a> ()</td></tr>
<tr class="memdesc:ab704f81589ad986b0f3c5b9aa0af262c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The main loop calls this once per frame.   <a href="#ab704f81589ad986b0f3c5b9aa0af262c"></a><br/></td></tr>
<tr class="memitem:ac78c1506d027b65e4a3c7543a83ac134"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#ac78c1506d027b65e4a3c7543a83ac134">GetActor</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Index)</td></tr>
<tr class="memdesc:ac78c1506d027b65e4a3c7543a83ac134"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an Actor by Index.  <a href="#ac78c1506d027b65e4a3c7543a83ac134"></a><br/></td></tr>
<tr class="memitem:ac2ad44450362cb5273e23825b6d274ab"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#ac2ad44450362cb5273e23825b6d274ab">GetActor</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name)</td></tr>
<tr class="memdesc:ac2ad44450362cb5273e23825b6d274ab"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an Actor by Name.  <a href="#ac2ad44450362cb5273e23825b6d274ab"></a><br/></td></tr>
<tr class="memitem:ae867ab94d85f09b026050310e6031553"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#ae867ab94d85f09b026050310e6031553">GetImplementationTypeName</a> () const </td></tr>
<tr class="memdesc:ae867ab94d85f09b026050310e6031553"><td class="mdescLeft">&#160;</td><td class="mdescRight">This Allows any manager name to be sent to a stream. Primarily used for logging.   <a href="#ae867ab94d85f09b026050310e6031553"></a><br/></td></tr>
<tr class="memitem:abbd078bd938fff75f35a278a21df7ce7"><td class="memItemLeft" align="right" valign="top">virtual ManagerType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#abbd078bd938fff75f35a278a21df7ce7">GetInterfaceType</a> () const </td></tr>
<tr class="memdesc:abbd078bd938fff75f35a278a21df7ce7"><td class="mdescLeft">&#160;</td><td class="mdescRight">This returns the type of this manager.   <a href="#abbd078bd938fff75f35a278a21df7ce7"></a><br/></td></tr>
<tr class="memitem:a95af47db6f8e8e0255e48d6529daf0ee"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a95af47db6f8e8e0255e48d6529daf0ee">GetNumActors</a> () const </td></tr>
<tr class="memdesc:a95af47db6f8e8e0255e48d6529daf0ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of actors stored in this manager.  <a href="#a95af47db6f8e8e0255e48d6529daf0ee"></a><br/></td></tr>
<tr class="memitem:ace5758b5837032ee599b4f67a619397e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#ace5758b5837032ee599b4f67a619397e">Initialize</a> ()</td></tr>
<tr class="memdesc:ace5758b5837032ee599b4f67a619397e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure Items requiring other Managers.   <a href="#ace5758b5837032ee599b4f67a619397e"></a><br/></td></tr>
<tr class="memitem:a0e945e8205d7bf08b3f43b6e4b6ed1d0"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a0e945e8205d7bf08b3f43b6e4b6ed1d0">RemoveActor</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Index)</td></tr>
<tr class="memdesc:a0e945e8205d7bf08b3f43b6e4b6ed1d0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes an actor from this manager without destroying it.  <a href="#a0e945e8205d7bf08b3f43b6e4b6ed1d0"></a><br/></td></tr>
<tr class="memitem:a6ea73c98c63a16aa8bd7fccdd335e4ca"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a6ea73c98c63a16aa8bd7fccdd335e4ca">RemoveActor</a> (<a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> *ToBeRemoved)</td></tr>
<tr class="memdesc:a6ea73c98c63a16aa8bd7fccdd335e4ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes an actor from this manager without destroying it.  <a href="#a6ea73c98c63a16aa8bd7fccdd335e4ca"></a><br/></td></tr>
<tr class="memitem:a011c7c031ecfab88f0cf5c9517f54398"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a011c7c031ecfab88f0cf5c9517f54398"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a011c7c031ecfab88f0cf5c9517f54398">RemoveAllActors</a> ()</td></tr>
<tr class="memdesc:a011c7c031ecfab88f0cf5c9517f54398"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all actors from this manager without destroying them. <br/></td></tr>
<tr class="memitem:a2f7192f42d35d13139bfbfc5b987aaf4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a2f7192f42d35d13139bfbfc5b987aaf4"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a2f7192f42d35d13139bfbfc5b987aaf4">UpdateAllActors</a> ()</td></tr>
<tr class="memdesc:a2f7192f42d35d13139bfbfc5b987aaf4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calls to update every actor currently stored in the manager. <br/></td></tr>
<tr class="inherit_header pub_methods_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&nbsp;Public Member Functions inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:a6ee3249f71f330394e81e349370d57a8 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6ee3249f71f330394e81e349370d57a8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a6ee3249f71f330394e81e349370d57a8">ManagerBase</a> ()</td></tr>
<tr class="memdesc:a6ee3249f71f330394e81e349370d57a8 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor. <br/></td></tr>
<tr class="memitem:ad98752e65db50b66fbb000dedbc07786 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ad98752e65db50b66fbb000dedbc07786">~ManagerBase</a> ()</td></tr>
<tr class="memdesc:ad98752e65db50b66fbb000dedbc07786 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deconstructor.  <a href="#ad98752e65db50b66fbb000dedbc07786"></a><br/></td></tr>
<tr class="memitem:aec6f56b909c0453370771f921d29e7d7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aec6f56b909c0453370771f921d29e7d7"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#aec6f56b909c0453370771f921d29e7d7">ErasePostMainLoopItems</a> ()</td></tr>
<tr class="memdesc:aec6f56b909c0453370771f921d29e7d7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This simply calls <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#af33945c6196024c530990780b2a44cfc" title="This assigns a function to be the callback function to run prior to the main loop.">SetPostMainLoopItems()</a> passing it 0. <br/></td></tr>
<tr class="memitem:a173afcb032bfe374c220d17e24a2ef2c inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a173afcb032bfe374c220d17e24a2ef2c"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a173afcb032bfe374c220d17e24a2ef2c">ErasePreMainLoopItems</a> ()</td></tr>
<tr class="memdesc:a173afcb032bfe374c220d17e24a2ef2c inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This simply calls <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a2837c3c4ec588e4a3cbed39fa8287ef0" title="This assigns a function to be the callback function to run prior to the main loop.">SetPreMainLoopItems()</a> passing it 0. <br/></td></tr>
<tr class="memitem:a70b61244d5182ad40dd056b2664a6aa7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a70b61244d5182ad40dd056b2664a6aa7">GetInterfaceTypeAsString</a> () const </td></tr>
<tr class="memdesc:a70b61244d5182ad40dd056b2664a6aa7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a string of the interface type of this manager.  <a href="#a70b61244d5182ad40dd056b2664a6aa7"></a><br/></td></tr>
<tr class="memitem:a661b5cafe1a0f77c9fbd17c7444d1fea inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a661b5cafe1a0f77c9fbd17c7444d1fea">GetPostMainLoopItems</a> () const </td></tr>
<tr class="memdesc:a661b5cafe1a0f77c9fbd17c7444d1fea inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This returns the Callback that would be called before the main loop items.  <a href="#a661b5cafe1a0f77c9fbd17c7444d1fea"></a><br/></td></tr>
<tr class="memitem:a45c0e893c832e257475321fb1e826f20 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a45c0e893c832e257475321fb1e826f20">GetPreMainLoopItems</a> () const </td></tr>
<tr class="memdesc:a45c0e893c832e257475321fb1e826f20 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This returns the Callback that would be called before the main loop items.  <a href="#a45c0e893c832e257475321fb1e826f20"></a><br/></td></tr>
<tr class="memitem:a2d0d7e80c5a151c9f0d91a0366605cca inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a2d0d7e80c5a151c9f0d91a0366605cca">GetPriority</a> ()</td></tr>
<tr class="memdesc:a2d0d7e80c5a151c9f0d91a0366605cca inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This gets the Priority of this manager.  <a href="#a2d0d7e80c5a151c9f0d91a0366605cca"></a><br/></td></tr>
<tr class="memitem:ade516a30e6d24b4ffd1accf1b1efd948 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ade516a30e6d24b4ffd1accf1b1efd948">IsInitialized</a> ()</td></tr>
<tr class="memdesc:ade516a30e6d24b4ffd1accf1b1efd948 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets whether or not this manager has been initialized.  <a href="#ade516a30e6d24b4ffd1accf1b1efd948"></a><br/></td></tr>
<tr class="memitem:aec26bca08780fd29f49370973f39cbf7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#aec26bca08780fd29f49370973f39cbf7">PostMainLoopItems</a> ()</td></tr>
<tr class="memdesc:aec26bca08780fd29f49370973f39cbf7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This runs any callback that is required after the mainloop items are run.  <a href="#aec26bca08780fd29f49370973f39cbf7"></a><br/></td></tr>
<tr class="memitem:a786e385f50879d6643962ea17b9e13e7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a786e385f50879d6643962ea17b9e13e7">PreMainLoopItems</a> ()</td></tr>
<tr class="memdesc:a786e385f50879d6643962ea17b9e13e7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This runs any callback that is required before the mainloop items are run.  <a href="#a786e385f50879d6643962ea17b9e13e7"></a><br/></td></tr>
<tr class="memitem:af33945c6196024c530990780b2a44cfc inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#af33945c6196024c530990780b2a44cfc">SetPostMainLoopItems</a> (<a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a> PostMainCallback)</td></tr>
<tr class="memdesc:af33945c6196024c530990780b2a44cfc inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This assigns a function to be the callback function to run prior to the main loop.  <a href="#af33945c6196024c530990780b2a44cfc"></a><br/></td></tr>
<tr class="memitem:a2837c3c4ec588e4a3cbed39fa8287ef0 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a2837c3c4ec588e4a3cbed39fa8287ef0">SetPreMainLoopItems</a> (<a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a> PreMainCallback)</td></tr>
<tr class="memdesc:a2837c3c4ec588e4a3cbed39fa8287ef0 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This assigns a function to be the callback function to run prior to the main loop.  <a href="#a2837c3c4ec588e4a3cbed39fa8287ef0"></a><br/></td></tr>
<tr class="memitem:a226c8f18a44d8ef6e261a9ae202ff044 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a226c8f18a44d8ef6e261a9ae202ff044">SetPriority</a> (short int Priority_)</td></tr>
<tr class="memdesc:a226c8f18a44d8ef6e261a9ae202ff044 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This gets the Priority of this manager.  <a href="#a226c8f18a44d8ef6e261a9ae202ff044"></a><br/></td></tr>
<tr class="inherit_header pub_methods_classMezzanine_1_1Singleton"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classMezzanine_1_1Singleton')"><img src="closed.png" alt="-"/>&nbsp;Public Member Functions inherited from <a class="el" href="classMezzanine_1_1Singleton.xhtml">Mezzanine::Singleton< ActorManager ></a></td></tr>
<tr class="memitem:a7174af94e201bdaeab717cdbcbb2e565 inherit pub_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7174af94e201bdaeab717cdbcbb2e565"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a7174af94e201bdaeab717cdbcbb2e565">Singleton</a> ()</td></tr>
<tr class="memdesc:a7174af94e201bdaeab717cdbcbb2e565 inherit pub_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class constructor. <br/></td></tr>
<tr class="memitem:a5e45fc3969b0fae3d095676cc515da1d inherit pub_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5e45fc3969b0fae3d095676cc515da1d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a5e45fc3969b0fae3d095676cc515da1d">~Singleton</a> ()</td></tr>
<tr class="memdesc:a5e45fc3969b0fae3d095676cc515da1d inherit pub_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class destructor. <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a12a65a58aab87b083e6718cb8fa3aa2c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a12a65a58aab87b083e6718cb8fa3aa2c"></a>
std::vector&lt; <a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a12a65a58aab87b083e6718cb8fa3aa2c">Actors</a></td></tr>
<tr class="memdesc:a12a65a58aab87b083e6718cb8fa3aa2c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The actual actor container. <br/></td></tr>
<tr class="memitem:a07fba4f64f1a9162d3a12916d6ef29bd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a07fba4f64f1a9162d3a12916d6ef29bd"></a>
std::vector&lt; ActorCharacter * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a07fba4f64f1a9162d3a12916d6ef29bd">CharacterActors</a></td></tr>
<tr class="memdesc:a07fba4f64f1a9162d3a12916d6ef29bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">A Second listing of All the Character actors. <br/></td></tr>
<tr class="memitem:a1283d3955dc83831c7687573b6cff206"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1283d3955dc83831c7687573b6cff206"></a>
std::vector&lt; <a class="el" href="classMezzanine_1_1ActorRigid.xhtml">ActorRigid</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#a1283d3955dc83831c7687573b6cff206">RigidActors</a></td></tr>
<tr class="memdesc:a1283d3955dc83831c7687573b6cff206"><td class="mdescLeft">&#160;</td><td class="mdescRight">A Second listing of All the Rigid actors. <br/></td></tr>
<tr class="memitem:ad3a985b2087fc1353f7d33485589207b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad3a985b2087fc1353f7d33485589207b"></a>
std::vector&lt; <a class="el" href="classMezzanine_1_1ActorSoft.xhtml">ActorSoft</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ActorManager.xhtml#ad3a985b2087fc1353f7d33485589207b">SoftActors</a></td></tr>
<tr class="memdesc:ad3a985b2087fc1353f7d33485589207b"><td class="mdescLeft">&#160;</td><td class="mdescRight">A Second listing of All the Soft actors. <br/></td></tr>
<tr class="inherit_header pro_attribs_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&nbsp;Protected Attributes inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:ada3bad0fe77ff2fa7404eea7a5c16264 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ada3bad0fe77ff2fa7404eea7a5c16264">Initialized</a></td></tr>
<tr class="memdesc:ada3bad0fe77ff2fa7404eea7a5c16264 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple bool indicating whether or not this manager has been initialized.  <a href="#ada3bad0fe77ff2fa7404eea7a5c16264"></a><br/></td></tr>
<tr class="memitem:ab27f3f7458b9a6f2a08974d096125ed5 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab27f3f7458b9a6f2a08974d096125ed5">PostMainLoop</a></td></tr>
<tr class="memdesc:ab27f3f7458b9a6f2a08974d096125ed5 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a function pointer to the function that should be called after running Main Loop Items.  <a href="#ab27f3f7458b9a6f2a08974d096125ed5"></a><br/></td></tr>
<tr class="memitem:a1652110258237bc313a02757229d0f47 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a1652110258237bc313a02757229d0f47">PreMainLoop</a></td></tr>
<tr class="memdesc:a1652110258237bc313a02757229d0f47 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a function pointer to the function that should be called before running Main Loop Items.  <a href="#a1652110258237bc313a02757229d0f47"></a><br/></td></tr>
<tr class="memitem:a96fb02bf2f4e8b4afe70dedd0d8c6ac9 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a96fb02bf2f4e8b4afe70dedd0d8c6ac9">Priority</a></td></tr>
<tr class="memdesc:a96fb02bf2f4e8b4afe70dedd0d8c6ac9 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a weighting used by the main loop to decide what order the managers should be called in.  <a href="#a96fb02bf2f4e8b4afe70dedd0d8c6ac9"></a><br/></td></tr>
<tr class="memitem:ae619b4bd732d7345e0ef59ecde6d03cc inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Entresol.xhtml">Entresol</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc">TheEntresol</a></td></tr>
<tr class="memdesc:ae619b4bd732d7345e0ef59ecde6d03cc inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">The actual pointer to the world.  <a href="#ae619b4bd732d7345e0ef59ecde6d03cc"></a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&nbsp;Static Public Member Functions inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:a446009f2bdf870d4a135d65e941bc066 inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a446009f2bdf870d4a135d65e941bc066">GetTypeNameAsString</a> (const ManagerType &amp;ManagerType)</td></tr>
<tr class="memdesc:a446009f2bdf870d4a135d65e941bc066 inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the string form of the type of manager.  <a href="#a446009f2bdf870d4a135d65e941bc066"></a><br/></td></tr>
<tr class="memitem:ae76f56a9d8585b96c3cda9f51368b60a inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">static ManagerType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ae76f56a9d8585b96c3cda9f51368b60a">GetTypeNameFromString</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;ManagerName)</td></tr>
<tr class="memdesc:ae76f56a9d8585b96c3cda9f51368b60a inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the type of manager requested from a string.  <a href="#ae76f56a9d8585b96c3cda9f51368b60a"></a><br/></td></tr>
<tr class="inherit_header pub_static_methods_classMezzanine_1_1Singleton"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classMezzanine_1_1Singleton')"><img src="closed.png" alt="-"/>&nbsp;Static Public Member Functions inherited from <a class="el" href="classMezzanine_1_1Singleton.xhtml">Mezzanine::Singleton< ActorManager ></a></td></tr>
<tr class="memitem:a78fc425584913f0b2c615ec440871a67 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classMezzanine_1_1ActorManager.xhtml">ActorManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67">GetSingletonPtr</a> ()</td></tr>
<tr class="memdesc:a78fc425584913f0b2c615ec440871a67 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fetches a pointer to the singleton.  <a href="#a78fc425584913f0b2c615ec440871a67"></a><br/></td></tr>
<tr class="memitem:a554165fe3e4b594b678d64215fd7a6f9 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a554165fe3e4b594b678d64215fd7a6f9">SingletonValid</a> ()</td></tr>
<tr class="memdesc:a554165fe3e4b594b678d64215fd7a6f9 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if the singleton pointer is valid.  <a href="#a554165fe3e4b594b678d64215fd7a6f9"></a><br/></td></tr>
<tr class="inherit_header pro_static_attribs_classMezzanine_1_1Singleton"><td colspan="2" onclick="javascript:toggleInherit('pro_static_attribs_classMezzanine_1_1Singleton')"><img src="closed.png" alt="-"/>&nbsp;Static Protected Attributes inherited from <a class="el" href="classMezzanine_1_1Singleton.xhtml">Mezzanine::Singleton< ActorManager ></a></td></tr>
<tr class="memitem:a0db9959ccd7daa1345f4567aa0b0655d inherit pro_static_attribs_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0db9959ccd7daa1345f4567aa0b0655d"></a>
static <a class="el" href="classMezzanine_1_1ActorManager.xhtml">ActorManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>SingletonPtr</b></td></tr>
</table>
<a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>A manager responsible for the storage and management of all actors in use. </p>
<p>More or less Management point for a container of actors to help keep them sorted. </p>

<p>Definition at line <a class="el" href="actormanager_8h_source.xhtml#l00066">66</a> of file <a class="el" href="actormanager_8h_source.xhtml">actormanager.h</a>.</p>
</div><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="af01011777296ba4f2768b6d41500923d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::ActorManager::ActorManager </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;&#160;</td>
          <td class="paramname"><em>XMLNode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">XMLNode</td><td>The node of the xml document to construct from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2>Member Function Documentation</h2>
<a class="anchor" id="a0080e098737a20b1b52052444289f0f0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::ActorManager::AddActor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> *&#160;</td>
          <td class="paramname"><em>Actor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Adds a pre-created actor to the manager. </p>
<p>In some cases you may want to add and remove an actor from the world without destroying it and do some special manipulations to it to achieve some special/unique affects. This function along with the "RemoveActor()" function facilitates this. <br/>
 This function is also necessary for anyone inheriting from our actors to add their actors to the world. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Actor</td><td>The actor to be added to the manager. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8a591f98e09174f548cce709379c2a64"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::ActorManager::DestroyActor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destroys an actor at the specified index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Index</td><td>The index at which to destroy the actor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af48596c32ef52b3a5042621c82177339"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::ActorManager::DestroyActor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> *&#160;</td>
          <td class="paramname"><em>ToBeDestroyed</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Destroys an actor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToBeDestroyed</td><td>The actor to be destroyed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab704f81589ad986b0f3c5b9aa0af262c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::ActorManager::DoMainLoopItems </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The main loop calls this once per frame.  </p>
<p>This is where each manager is expected to put anything that needs to be run each iteration of the main loop  </p>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a4ee29e4baf6c4b9a3bfec1b2258d5cd2">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="ac78c1506d027b65e4a3c7543a83ac134"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a>* Mezzanine::ActorManager::GetActor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an Actor by Index. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Index</td><td>The index of the actor you wish to retrieve. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the actor at the specified index. </dd></dl>

</div>
</div>
<a class="anchor" id="ac2ad44450362cb5273e23825b6d274ab"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a>* Mezzanine::ActorManager::GetActor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets an Actor by Name. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the actor you wish to retrieve. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the actor of the specified name. </dd></dl>

</div>
</div>
<a class="anchor" id="ae867ab94d85f09b026050310e6031553"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Mezzanine::ActorManager::GetImplementationTypeName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This Allows any manager name to be sent to a stream. Primarily used for logging.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>This returns a String that contains the name. </dd></dl>
 </p>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ac41d60f674e75d3d16b5544f4feb199c">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="abbd078bd938fff75f35a278a21df7ce7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ManagerType Mezzanine::ActorManager::GetInterfaceType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This returns the type of this manager.  </p>
<p>This is intended to make using and casting from Manager base easier. With this is is possible to cast from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml" title="This is the base class from which all the World Managers inherit.">ManagerBase</a> to the correct Manager Type. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a ManagerTypeName to identify what this can be safely cast to. </dd></dl>
 </p>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a388aa37ed71b8667785b789c137aa8c6">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="a95af47db6f8e8e0255e48d6529daf0ee"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::ActorManager::GetNumActors </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the number of actors stored in this manager. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a whole representing the current actor count. </dd></dl>

</div>
</div>
<a class="anchor" id="ace5758b5837032ee599b4f67a619397e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::ActorManager::Initialize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Configure Items requiring other Managers.  </p>
<p>If you are using the <a class="el" href="classMezzanine_1_1World.xhtml">Mezzanine::World</a> this is called when Mezzanine::World::GameInit() is called. It is expected that by the time this is called either ManagerBase::ManagerBase(World*) or ManagerBase::SetGameWorld(World*) will have been called. This is where all configuration that requires atleast one other manager on the <a class="el" href="classMezzanine_1_1World.xhtml">Mezzanine::World</a> to exist.<br/>
<br/>
 Yes we know it is spelled wrong, but are Zs cooler anyway.  </p>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a864e3cac11928a602c1db28fa2d52ee2">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="a0e945e8205d7bf08b3f43b6e4b6ed1d0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::ActorManager::RemoveActor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes an actor from this manager without destroying it. </p>
<p>In some cases you may want to add and remove an actor from the world without destroying it and do some special manipulations to it to achieve some special/unique affects. This function along with the "RemoveActor()" function facilitates this. <br/>
 This function is also necessary for anyone inheriting from our actors to remove their actors from the world. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Index</td><td>The index at which to remove the actor. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6ea73c98c63a16aa8bd7fccdd335e4ca"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::ActorManager::RemoveActor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1ActorBase.xhtml">ActorBase</a> *&#160;</td>
          <td class="paramname"><em>ToBeRemoved</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes an actor from this manager without destroying it. </p>
<p>In some cases you may want to add and remove an actor from the world without destroying it and do some special manipulations to it to achieve some special/unique affects. This function along with the "RemoveActor()" function facilitates this. <br/>
 This function is also necessary for anyone inheriting from our actors to remove their actors from the world. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToBeRemoved</td><td>The actor to be removed from the manager. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/sqeaky/Code/Mezzanine/Mezzanine/src/<a class="el" href="actormanager_8h_source.xhtml">actormanager.h</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Mar 30 2013 10:40:51 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1.2</small></address>
</body>
</html>
