<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::MetaCode Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.1.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1MetaCode.xhtml">MetaCode</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="classMezzanine_1_1MetaCode-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::MetaCode Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This Determines the kind of user input.  
 <a href="classMezzanine_1_1MetaCode.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="metacode_8h_source.xhtml">metacode.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a94dca88ec5dd3fc0c9c860bfa875a983"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a94dca88ec5dd3fc0c9c860bfa875a983">MetaCode</a> ()</td></tr>
<tr class="memdesc:a94dca88ec5dd3fc0c9c860bfa875a983"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a94dca88ec5dd3fc0c9c860bfa875a983"></a><br/></td></tr>
<tr class="memitem:a942bb15723e1e045dde8f4962b7a76c9"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a942bb15723e1e045dde8f4962b7a76c9">MetaCode</a> (const int &amp;MetaValue_, const <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a> &amp;Code_)</td></tr>
<tr class="memdesc:a942bb15723e1e045dde8f4962b7a76c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptive Constructor.  <a href="#a942bb15723e1e045dde8f4962b7a76c9"></a><br/></td></tr>
<tr class="memitem:a076c6cc9f7f66500505adf21eadd3839"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a076c6cc9f7f66500505adf21eadd3839">MetaCode</a> (const int &amp;MetaValue_, const <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a> &amp;Code_, const <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a> &amp;DeviceIndex_)</td></tr>
<tr class="memdesc:a076c6cc9f7f66500505adf21eadd3839"><td class="mdescLeft">&#160;</td><td class="mdescRight">Descriptive Constructor.  <a href="#a076c6cc9f7f66500505adf21eadd3839"></a><br/></td></tr>
<tr class="memitem:abe2e7fa16bab17df5b1794c26bf191be"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#abe2e7fa16bab17df5b1794c26bf191be">MetaCode</a> (const <a class="el" href="namespaceMezzanine.xhtml#ae8d4c0ab783af89a250b0225b75753e5">RawEvent</a> &amp;RawEvent_)</td></tr>
<tr class="memdesc:abe2e7fa16bab17df5b1794c26bf191be"><td class="mdescLeft">&#160;</td><td class="mdescRight">The Heavy Lifting Constructor.  <a href="#abe2e7fa16bab17df5b1794c26bf191be"></a><br/></td></tr>
<tr class="memitem:a66a498d1b720a4a94a60f9e6813fd066"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a66a498d1b720a4a94a60f9e6813fd066">GetCode</a> () const </td></tr>
<tr class="memdesc:a66a498d1b720a4a94a60f9e6813fd066"><td class="mdescLeft">&#160;</td><td class="mdescRight">This Returns the Inputcode.  <a href="#a66a498d1b720a4a94a60f9e6813fd066"></a><br/></td></tr>
<tr class="memitem:a047c111d6f4e515d0f10074d4bc91342"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a047c111d6f4e515d0f10074d4bc91342">GetDeviceIndex</a> () const </td></tr>
<tr class="memdesc:a047c111d6f4e515d0f10074d4bc91342"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the currently set device index.  <a href="#a047c111d6f4e515d0f10074d4bc91342"></a><br/></td></tr>
<tr class="memitem:a650c4ae1fb698233516d978dd83dfca7"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a650c4ae1fb698233516d978dd83dfca7">GetMetaValue</a> () const </td></tr>
<tr class="memdesc:a650c4ae1fb698233516d978dd83dfca7"><td class="mdescLeft">&#160;</td><td class="mdescRight">This Returns the MetaValue.  <a href="#a650c4ae1fb698233516d978dd83dfca7"></a><br/></td></tr>
<tr class="memitem:af540e52bb4ce47a0b8962ebdab807872"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine_1_1Input.xhtml#a6dace303a881a50244c5130492f85b61">Input::ButtonState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#af540e52bb4ce47a0b8962ebdab807872">GetMetaValueAsButtonState</a> () const </td></tr>
<tr class="memdesc:af540e52bb4ce47a0b8962ebdab807872"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the MetaValue as a <a class="el" href="namespaceMezzanine_1_1Input.xhtml#a6dace303a881a50244c5130492f85b61" title="An Optional listing of value that can be used in a metacode to represent the information of a button ...">Input::ButtonState</a>.  <a href="#af540e52bb4ce47a0b8962ebdab807872"></a><br/></td></tr>
<tr class="memitem:a368a50521c180b97a74b032c3d0d7557"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine_1_1Input.xhtml#a85056e46299252c81ef5278cbb7d5c8f">Input::DirectionalMotionState</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a368a50521c180b97a74b032c3d0d7557">GetMetaValueAsDirectionalMotionState</a> () const </td></tr>
<tr class="memdesc:a368a50521c180b97a74b032c3d0d7557"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the MetaValue as a <a class="el" href="namespaceMezzanine_1_1Input.xhtml#a85056e46299252c81ef5278cbb7d5c8f" title="An Optional listing of values that can be used in a metacode Indicate spin, digital or binary travel ...">Input::DirectionalMotionState</a>.  <a href="#a368a50521c180b97a74b032c3d0d7557"></a><br/></td></tr>
<tr class="memitem:a330ca2c2cb69c7d0134a842753f6a397"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a330ca2c2cb69c7d0134a842753f6a397">IsAltKey</a> () const </td></tr>
<tr class="memdesc:a330ca2c2cb69c7d0134a842753f6a397"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this a left or right Alt key.  <a href="#a330ca2c2cb69c7d0134a842753f6a397"></a><br/></td></tr>
<tr class="memitem:af0328602a2dbcc082498f9049b8fd9c5"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#af0328602a2dbcc082498f9049b8fd9c5">IsCtrlKey</a> () const </td></tr>
<tr class="memdesc:af0328602a2dbcc082498f9049b8fd9c5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this a left or right Ctrl key.  <a href="#af0328602a2dbcc082498f9049b8fd9c5"></a><br/></td></tr>
<tr class="memitem:ab8d13132e795f34367ba3896bf05b5c2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#ab8d13132e795f34367ba3896bf05b5c2">IsJoyStickEvent</a> () const </td></tr>
<tr class="memdesc:ab8d13132e795f34367ba3896bf05b5c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Does this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> Represent a state of a Joystick Event.  <a href="#ab8d13132e795f34367ba3896bf05b5c2"></a><br/></td></tr>
<tr class="memitem:aedca54cabda99b18c4186ceb3bfa0944"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#aedca54cabda99b18c4186ceb3bfa0944">IsKeyboardButton</a> () const </td></tr>
<tr class="memdesc:aedca54cabda99b18c4186ceb3bfa0944"><td class="mdescLeft">&#160;</td><td class="mdescRight">Does this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> Represent a state of a keyboard key.  <a href="#aedca54cabda99b18c4186ceb3bfa0944"></a><br/></td></tr>
<tr class="memitem:a4277faacd0e1633df7f30cbf7b8f5dd1"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a4277faacd0e1633df7f30cbf7b8f5dd1">IsMouseButton</a> () const </td></tr>
<tr class="memdesc:a4277faacd0e1633df7f30cbf7b8f5dd1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Does this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> Represent a state of a Mouse button.  <a href="#a4277faacd0e1633df7f30cbf7b8f5dd1"></a><br/></td></tr>
<tr class="memitem:a88c99813475a4968c498da57ee1304b2"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a88c99813475a4968c498da57ee1304b2">IsOtherInputEvent</a> () const </td></tr>
<tr class="memdesc:a88c99813475a4968c498da57ee1304b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Does this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> Represent some other (non-keyboard and non-mouse button)  <a href="#a88c99813475a4968c498da57ee1304b2"></a><br/></td></tr>
<tr class="memitem:a30c79f6b4fa991a6fa42226f4c255fe9"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a30c79f6b4fa991a6fa42226f4c255fe9">IsPollable</a> () const </td></tr>
<tr class="memdesc:a30c79f6b4fa991a6fa42226f4c255fe9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this metacode a pollable event.  <a href="#a30c79f6b4fa991a6fa42226f4c255fe9"></a><br/></td></tr>
<tr class="memitem:a3af3c353b814482fa2c6c68238ced612"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a3af3c353b814482fa2c6c68238ced612">IsShiftKey</a> () const </td></tr>
<tr class="memdesc:a3af3c353b814482fa2c6c68238ced612"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this a left or right Shift key.  <a href="#a3af3c353b814482fa2c6c68238ced612"></a><br/></td></tr>
<tr class="memitem:a85c370eb28387758e4498d2da656915a"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a85c370eb28387758e4498d2da656915a">IsSuperKey</a> () const </td></tr>
<tr class="memdesc:a85c370eb28387758e4498d2da656915a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is this a left or right Super key (Windows logo key, Apple logo key, etc...)  <a href="#a85c370eb28387758e4498d2da656915a"></a><br/></td></tr>
<tr class="memitem:a9766ecefce7d3e8a8e379c8e19fcf414"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a9766ecefce7d3e8a8e379c8e19fcf414">operator==</a> (const <a class="el" href="classMezzanine_1_1MetaCode.xhtml">MetaCode</a> &amp;other) const </td></tr>
<tr class="memdesc:a9766ecefce7d3e8a8e379c8e19fcf414"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares two MetaCodes for equality.  <a href="#a9766ecefce7d3e8a8e379c8e19fcf414"></a><br/></td></tr>
<tr class="memitem:a3659cd6f2896683e51d84c6e3855bc6d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a3659cd6f2896683e51d84c6e3855bc6d">ProtoDeSerialize</a> (const <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;OneNode)</td></tr>
<tr class="memdesc:a3659cd6f2896683e51d84c6e3855bc6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Take the data stored in an <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> and overwrite this instance of this object with it.  <a href="#a3659cd6f2896683e51d84c6e3855bc6d"></a><br/></td></tr>
<tr class="memitem:a6fad335198f788cec225f3873cd8af7a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a6fad335198f788cec225f3873cd8af7a">ProtoSerialize</a> (<a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;CurrentRoot) const </td></tr>
<tr class="memdesc:a6fad335198f788cec225f3873cd8af7a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert this class to an <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> ready for serialization.  <a href="#a6fad335198f788cec225f3873cd8af7a"></a><br/></td></tr>
<tr class="memitem:a50215ce2068922095f5608f17a2a3d15"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a50215ce2068922095f5608f17a2a3d15">SerializableName</a> () const </td></tr>
<tr class="memdesc:a50215ce2068922095f5608f17a2a3d15"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the name of the the <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> tag this class will leave behind as its instances are serialized.  <a href="#a50215ce2068922095f5608f17a2a3d15"></a><br/></td></tr>
<tr class="memitem:a29095a8d4c9495527799900b8e952ab8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a29095a8d4c9495527799900b8e952ab8">SetCode</a> (const <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a> &amp;Code_)</td></tr>
<tr class="memdesc:a29095a8d4c9495527799900b8e952ab8"><td class="mdescLeft">&#160;</td><td class="mdescRight">This Sets The InputCode.  <a href="#a29095a8d4c9495527799900b8e952ab8"></a><br/></td></tr>
<tr class="memitem:aeec5b1c0411d1f7851945f4da69c28e2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#aeec5b1c0411d1f7851945f4da69c28e2">SetCode</a> (int Code_)</td></tr>
<tr class="memdesc:aeec5b1c0411d1f7851945f4da69c28e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">This Sets The InputCode using an int.  <a href="#aeec5b1c0411d1f7851945f4da69c28e2"></a><br/></td></tr>
<tr class="memitem:a51743c8a20b391dc543622b3db9fdd3e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a51743c8a20b391dc543622b3db9fdd3e">SetDeviceIndex</a> (const <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a> &amp;Index)</td></tr>
<tr class="memdesc:a51743c8a20b391dc543622b3db9fdd3e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the device index if applicable.  <a href="#a51743c8a20b391dc543622b3db9fdd3e"></a><br/></td></tr>
<tr class="memitem:a6a98dad161c7e45a3f9154b2864db47b"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a6a98dad161c7e45a3f9154b2864db47b">SetMetaValue</a> (const int &amp;MetaValue_)</td></tr>
<tr class="memdesc:a6a98dad161c7e45a3f9154b2864db47b"><td class="mdescLeft">&#160;</td><td class="mdescRight">This Sets The MetaValue.  <a href="#a6a98dad161c7e45a3f9154b2864db47b"></a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a6655687a0393ef0fbfd34de6624035dc"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a6655687a0393ef0fbfd34de6624035dc">GetJoystickAxisCode</a> (short unsigned int AxisNumber)</td></tr>
<tr class="memdesc:a6655687a0393ef0fbfd34de6624035dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accepts a int and returns the InputCode for the Corresponding Joystick Axis.  <a href="#a6655687a0393ef0fbfd34de6624035dc"></a><br/></td></tr>
<tr class="memitem:aa3bcd69072cfb11a1fa1d54c81ded503"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#aa3bcd69072cfb11a1fa1d54c81ded503">GetJoystickButtonCode</a> (short unsigned int ButtonNumber)</td></tr>
<tr class="memdesc:aa3bcd69072cfb11a1fa1d54c81ded503"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accepts a int and returns the InputCode for the Corresponding Joystick button.  <a href="#aa3bcd69072cfb11a1fa1d54c81ded503"></a><br/></td></tr>
<tr class="memitem:a982c794b09985ef1bea776177a36ac91"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1MetaCode.xhtml#a982c794b09985ef1bea776177a36ac91">GetMouseButtonCode</a> (short unsigned int ButtonNumber)</td></tr>
<tr class="memdesc:a982c794b09985ef1bea776177a36ac91"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accepts a int and returns the InputCode for the Corresponding Mouse button.  <a href="#a982c794b09985ef1bea776177a36ac91"></a><br/></td></tr>
</table>
<a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>This Determines the kind of user input. </p>
<p>A Metacode contains the data that is passed around with an input event. It stores one type of button press or analog representation (Mouse move, joystick tilt, wheel spin, etc...). If it is an analog representation it will also store how far or how it is pushed, pressed, rotated, or whatever. Several of these can be used in combination to represent button combinations, or complex input combinations (like portions of fighter game moves). </p>

<p>Definition at line <a class="el" href="metacode_8h_source.xhtml#l00089">89</a> of file <a class="el" href="metacode_8h_source.xhtml">metacode.h</a>.</p>
</div><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a94dca88ec5dd3fc0c9c860bfa875a983"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::MetaCode::MetaCode </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Default constructor. </p>
<p>This sets nothing on the <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> and leaves it completely unassigned. Accessing a data member could cause problems </p>

</div>
</div>
<a class="anchor" id="a942bb15723e1e045dde8f4962b7a76c9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::MetaCode::MetaCode </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>MetaValue_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a> &amp;&#160;</td>
          <td class="paramname"><em>Code_</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Descriptive Constructor. </p>
<p>This sets all values in the <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a>, leaving it in completely ready state. This is the ideal constructor for simulating user input. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">MetaValue_</td><td>How much is something moving, tilting, rotating or whatever. For buttons a positive value is pushed, and a negative value is becoming unpressed, and 0 is unpressed. </td></tr>
    <tr><td class="paramname">Code_</td><td>Which key or which type of input was pressed. Sqeaky, thinks this has partial unicode support. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a076c6cc9f7f66500505adf21eadd3839"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::MetaCode::MetaCode </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>MetaValue_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a> &amp;&#160;</td>
          <td class="paramname"><em>Code_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a> &amp;&#160;</td>
          <td class="paramname"><em>DeviceIndex_</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Descriptive Constructor. </p>
<p>This sets all values in the <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a>, leaving it in completely ready state. This is the ideal constructor for simulating user input. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">MetaValue_</td><td>How much is something moving, tilting, rotating or whatever. For buttons a positive value is pushed, and a negative value is becoming unpressed, and 0 is unpressed. </td></tr>
    <tr><td class="paramname">Code_</td><td>Which key or which type of input was pressed. Sqeaky, thinks this has partial unicode support. </td></tr>
    <tr><td class="paramname">DeviceIndex_</td><td>The index of the device this metacode is describing. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abe2e7fa16bab17df5b1794c26bf191be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::MetaCode::MetaCode </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#ae8d4c0ab783af89a250b0225b75753e5">RawEvent</a> &amp;&#160;</td>
          <td class="paramname"><em>RawEvent_</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>The Heavy Lifting Constructor. </p>
<p>This contructor accepts a RawEvent from the input event subsystem internal to the engine. This converts all the required information from the lower level format and store what is needed in the event that is created. This is used heavily by engine internals. <br/>
 This constructor expects to receive a type of RawEvent that can be converted into exactly one kind of Metacode. Depending on the User input subsystem, this could be all RawEvents, or even just some RawEvents. </p>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">RawEvent which creates Multiple Metacodes inserted into Metacode</td><td>- Thrown when passed a certain (system dependant) incorrect type of RawEvent. </td></tr>
    <tr><td class="paramname">Unknown User Input Inserted into Metacode</td><td>- Thrown when receiving either a corrupt, improperly handle, or unsupported RawEvent. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section warning"><dt>Warning</dt><dd>We recomend against using this Constructor, because the binary format of RawEvent could change if the input event SubSystem Changes. In that event you would have to recompile your application to get it working with a new version of <a class="el" href="namespaceMezzanine.xhtml" title="The bulk of the engine components go in this namspace.">Mezzanine</a>. Using this function in Game code removes any gaurantees of Game Code Portability. </dd></dl>

</div>
</div>
<h2>Member Function Documentation</h2>
<a class="anchor" id="a66a498d1b720a4a94a60f9e6813fd066"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a> Mezzanine::MetaCode::GetCode </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This Returns the Inputcode. </p>
<p>This Value can be use to determine what keyboard button has been pressed, or what specific kind of Joystick or mouse event has occurred. This value can be set with <a class="el" href="classMezzanine_1_1MetaCode.xhtml#a29095a8d4c9495527799900b8e952ab8">SetCode</a> . </p>
<dl class="section return"><dt>Returns</dt><dd>This returns the input code for this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> </dd></dl>

</div>
</div>
<a class="anchor" id="a047c111d6f4e515d0f10074d4bc91342"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a> Mezzanine::MetaCode::GetDeviceIndex </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the currently set device index. </p>
<dl class="section remark"><dt>Remarks</dt><dd>If no device is set or applicable, this will return the max value for a UInt16 (-1). </dd></dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a UInt16 that is the for the device this metacode applies to. </dd></dl>

</div>
</div>
<a class="anchor" id="a6655687a0393ef0fbfd34de6624035dc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a> Mezzanine::MetaCode::GetJoystickAxisCode </td>
          <td>(</td>
          <td class="paramtype">short unsigned int&#160;</td>
          <td class="paramname"><em>AxisNumber</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accepts a int and returns the InputCode for the Corresponding Joystick Axis. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">AxisNumber</td><td>The number of the button you want the code for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>When passed 0 this returns Input::JOYSTICKAXIS, otherwise this returns Input::JOYSTICKAXIS_X where X is the number that was passed in </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">This</td><td>will throw a <a class="el" href="classMezzanine_1_1InvalidParametersException.xhtml">InvalidParametersException</a> if a value outside of the range betweeb <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721aa1ef942fa5e0b13e9994a17fb4103044d">Input::CONTROLLERAXIS_FIRST</a> and <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721aa7c295a1b1e4ffdc951c80c01316a7cbd">Input::CONTROLLERAXIS_LAST</a> is passed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa3bcd69072cfb11a1fa1d54c81ded503"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a> Mezzanine::MetaCode::GetJoystickButtonCode </td>
          <td>(</td>
          <td class="paramtype">short unsigned int&#160;</td>
          <td class="paramname"><em>ButtonNumber</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accepts a int and returns the InputCode for the Corresponding Joystick button. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ButtonerNumber</td><td>The number of the button you want the code for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>When passed 0 this returns Input::JOYSTICKBUTTON, otherwise this returns Input::JOYSTICKBUTTON_X where X is the number that was passed in </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">This</td><td>will throw a <a class="el" href="classMezzanine_1_1InvalidParametersException.xhtml">InvalidParametersException</a> if a value outside of the range betweeb <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721aad763344eb07323c097021c02bb505855">Input::CONTROLLERBUTTON_FIRST</a> and <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721aace1ec667fe76346d7d8251f088c08765">Input::CONTROLLERBUTTON_LAST</a> is passed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a650c4ae1fb698233516d978dd83dfca7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Mezzanine::MetaCode::GetMetaValue </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This Returns the MetaValue. </p>
<p>The MetaValue can be use to determine how far something is tilted, pushed, rotated, or other analog value. This value can be set with <a class="el" href="classMezzanine_1_1MetaCode.xhtml#a6a98dad161c7e45a3f9154b2864db47b">SetMetaValue</a> . </p>
<dl class="section return"><dt>Returns</dt><dd>This returns the input code for this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a>. This could return any number inside a range (depending on hardware and configuration) to represent how tilted a joystick or how much a mouse moved. </dd></dl>

</div>
</div>
<a class="anchor" id="af540e52bb4ce47a0b8962ebdab807872"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine_1_1Input.xhtml#a6dace303a881a50244c5130492f85b61">Input::ButtonState</a> Mezzanine::MetaCode::GetMetaValueAsButtonState </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the MetaValue as a <a class="el" href="namespaceMezzanine_1_1Input.xhtml#a6dace303a881a50244c5130492f85b61" title="An Optional listing of value that can be used in a metacode to represent the information of a button ...">Input::ButtonState</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns the appropriate button state or throws an <a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Mezzanine::Exception</a> if an invalid button state is stored in the MetaValue </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">This</td><td>throws a <a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Mezzanine::Exception</a> if the MetaValue is less than BUTTON_LIFTING or greater than BUTTON_DOWN. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a368a50521c180b97a74b032c3d0d7557"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine_1_1Input.xhtml#a85056e46299252c81ef5278cbb7d5c8f">Input::DirectionalMotionState</a> Mezzanine::MetaCode::GetMetaValueAsDirectionalMotionState </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the MetaValue as a <a class="el" href="namespaceMezzanine_1_1Input.xhtml#a85056e46299252c81ef5278cbb7d5c8f" title="An Optional listing of values that can be used in a metacode Indicate spin, digital or binary travel ...">Input::DirectionalMotionState</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns the appropriate MouseWheel state or throws an <a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Mezzanine::Exception</a> if an invalid state is stored in the MetaValue </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">This</td><td>throws a <a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Mezzanine::Exception</a> if the MetaValue is less than MOUSEWHEEL_DOWN or greater than MOUSEWHEEL_UP. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a982c794b09985ef1bea776177a36ac91"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a> Mezzanine::MetaCode::GetMouseButtonCode </td>
          <td>(</td>
          <td class="paramtype">short unsigned int&#160;</td>
          <td class="paramname"><em>ButtonNumber</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accepts a int and returns the InputCode for the Corresponding Mouse button. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ButtonerNumber</td><td>The number of the button you want the code for </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>When passed 0 this returns <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721aa51c8e36634404817d5dd7fe166ef7e49" title="This is the generic Some mouse button code. You can add the number of the mouse button to this and yo...">Input::MOUSEBUTTON</a>, otherwise this returns Input::MOUSEBUTTON_X where X is the number that was passed in </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">This</td><td>will throw a <a class="el" href="classMezzanine_1_1InvalidParametersException.xhtml">InvalidParametersException</a> if a value outside of the range betweeb <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721aa97523db31ff56775fc062a1a8eb39734">Input::MOUSEBUTTON_FIRST</a> and <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721aa547c296f31f43dad02a8c39150f4a77d">Input::MOUSEBUTTON_LAST</a> is passed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a330ca2c2cb69c7d0134a842753f6a397"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Mezzanine::MetaCode::IsAltKey </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is this a left or right Alt key. </p>
<p>Returns true if this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> pertains to a either keyboard Alt key. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a bool which will be true if this is a left or right Alt key. </dd></dl>

</div>
</div>
<a class="anchor" id="af0328602a2dbcc082498f9049b8fd9c5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Mezzanine::MetaCode::IsCtrlKey </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is this a left or right Ctrl key. </p>
<p>Returns true if this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> pertains to a either keyboard Ctrl key. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a bool which will be true if this is a left or right Ctrl key. </dd></dl>

</div>
</div>
<a class="anchor" id="ab8d13132e795f34367ba3896bf05b5c2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Mezzanine::MetaCode::IsJoyStickEvent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Does this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> Represent a state of a Joystick Event. </p>
<p>Returns true if this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> pertains to a joystick button being twisted, tilted, up, polled, down, pressed, or lifted, or whatever else you can do to a joystick. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a bool which will be true if this is between JOYSTICK_FIRST and JOYSTICK_LAST. </dd></dl>

</div>
</div>
<a class="anchor" id="aedca54cabda99b18c4186ceb3bfa0944"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Mezzanine::MetaCode::IsKeyboardButton </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Does this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> Represent a state of a keyboard key. </p>
<p>Returns true if this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> pertains to a keyboard key being up, polled, down, pressed, or lifted. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a bool which will be true if this is keyboard event. </dd></dl>

</div>
</div>
<a class="anchor" id="a4277faacd0e1633df7f30cbf7b8f5dd1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Mezzanine::MetaCode::IsMouseButton </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Does this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> Represent a state of a Mouse button. </p>
<p>Returns true if this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> pertains to a mouse button being up, polled, down, pressed, or lifted. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a bool which will be true if this is MOUSEBUTTON_X event. </dd></dl>

</div>
</div>
<a class="anchor" id="a88c99813475a4968c498da57ee1304b2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Mezzanine::MetaCode::IsOtherInputEvent </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Does this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> Represent some other (non-keyboard and non-mouse button) </p>
<p>Returns true if this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> pertains to any being up, polled, down, pressed, or lifted. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a bool which will be true if this is between INPUTEVENT_FIRST and INPUTEVENT_LAST. </dd></dl>

</div>
</div>
<a class="anchor" id="a30c79f6b4fa991a6fa42226f4c255fe9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Mezzanine::MetaCode::IsPollable </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is this metacode a pollable event. </p>
<dl class="section return"><dt>Returns</dt><dd>if this metacode stores a Keyboard button, Mouse Button or joystick button, then this is a pollable event </dd></dl>

</div>
</div>
<a class="anchor" id="a3af3c353b814482fa2c6c68238ced612"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Mezzanine::MetaCode::IsShiftKey </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is this a left or right Shift key. </p>
<p>Returns true if this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> pertains to a either keyboard Shift key. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a bool which will be true if this is a left or right Shift key. </dd></dl>

</div>
</div>
<a class="anchor" id="a85c370eb28387758e4498d2da656915a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Mezzanine::MetaCode::IsSuperKey </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Is this a left or right Super key (Windows logo key, Apple logo key, etc...) </p>
<p>Returns true if this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a> pertains to a either keyboard Super key. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a bool which will be true if this is a left or right Super key. </dd></dl>

</div>
</div>
<a class="anchor" id="a9766ecefce7d3e8a8e379c8e19fcf414"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool Mezzanine::MetaCode::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1MetaCode.xhtml">MetaCode</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compares two MetaCodes for equality. </p>
<p>This returns true if the MetaValue and Code are the Same, this ignores ID. </p>

</div>
</div>
<a class="anchor" id="a3659cd6f2896683e51d84c6e3855bc6d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::MetaCode::ProtoDeSerialize </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;&#160;</td>
          <td class="paramname"><em>OneNode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Take the data stored in an <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> and overwrite this instance of this object with it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">OneNode</td><td>and <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> containing the data. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">This</td><td>throws an <a class="el" href="classMezzanine_1_1InstanceIdentityInvalidException.xhtml">InstanceIdentityInvalidException</a> if the <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> node passed defines another class. This throws <a class="el" href="classMezzanine_1_1InvalidVersionException.xhtml">InvalidVersionException</a> if the xml is of a newer version than 1. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6fad335198f788cec225f3873cd8af7a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::MetaCode::ProtoSerialize </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;&#160;</td>
          <td class="paramname"><em>CurrentRoot</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Convert this class to an <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> ready for serialization. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">CurrentRoot</td><td>The point in the <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> hierarchy that all this vector3 should be appended to. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a50215ce2068922095f5608f17a2a3d15"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Mezzanine::MetaCode::SerializableName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the name of the the <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> tag this class will leave behind as its instances are serialized. </p>
<dl class="section return"><dt>Returns</dt><dd>A string containing "Vector3" </dd></dl>

</div>
</div>
<a class="anchor" id="a29095a8d4c9495527799900b8e952ab8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::MetaCode::SetCode </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine_1_1Input.xhtml#ab722ac9d149cd84c0db5080b46a3721a">Input::InputCode</a> &amp;&#160;</td>
          <td class="paramname"><em>Code_</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This Sets The InputCode. </p>
<p>See <a class="el" href="classMezzanine_1_1MetaCode.xhtml#a66a498d1b720a4a94a60f9e6813fd066">GetCode</a> to see exactly what the Code is. This will Set the code stored in this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a>. This value can be retrieved with <a class="el" href="classMezzanine_1_1MetaCode.xhtml#a66a498d1b720a4a94a60f9e6813fd066">GetCode</a> . </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Code_</td><td>The value you want the stored code to become. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aeec5b1c0411d1f7851945f4da69c28e2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::MetaCode::SetCode </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Code_</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This Sets The InputCode using an int. </p>
<p>This will cast an int into an InputCode. Be careful, it is possible to put impossible or ridiculous values, in with this. For example Accidentally stuffing in the result of MOUSEBUTTON + 22 looks like it would give you MOUSEBUTTON_22. But that Doesn't exist, at the time of this writing you would get MOUSEABSOLUTEVERTICAL. Be careful, or skip this alltogether and use one of the provided functions that do the math for you like </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Code_</td><td>The value you want the stored code to become. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a51743c8a20b391dc543622b3db9fdd3e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::MetaCode::SetDeviceIndex </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a1b6c09063432c7ddd87011c88306c767">UInt16</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the device index if applicable. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Index</td><td>The index of the device this metacode applies to. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6a98dad161c7e45a3f9154b2864db47b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::MetaCode::SetMetaValue </td>
          <td>(</td>
          <td class="paramtype">const int &amp;&#160;</td>
          <td class="paramname"><em>MetaValue_</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This Sets The MetaValue. </p>
<p>See <a class="el" href="classMezzanine_1_1MetaCode.xhtml#a650c4ae1fb698233516d978dd83dfca7">GetMetaValue</a> to see exactly what the MetaValue is. This will set the MetaValue stored in this <a class="el" href="classMezzanine_1_1MetaCode.xhtml" title="This Determines the kind of user input.">MetaCode</a>. This value can be retrieved with <a class="el" href="classMezzanine_1_1MetaCode.xhtml#a650c4ae1fb698233516d978dd83dfca7">GetMetaValue</a> . </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">MetaValue_</td><td>The value you want the stored MetaValue to become. No bounds checking will be done. You can supply a completely invalid value if you choose to. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/sqeaky/Code/Mezzanine/Mezzanine/src/Input/<a class="el" href="metacode_8h_source.xhtml">metacode.h</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Mar 30 2013 00:13:20 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1.2</small></address>
</body>
</html>
