<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::Physics::RigidProxy Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">May 19, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml">Physics</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml">RigidProxy</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classMezzanine_1_1Physics_1_1RigidProxy-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::Physics::RigidProxy Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is a proxy from which rigid body objects are handled.  
 <a href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="rigidproxy_8h_source.xhtml">rigidproxy.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for Mezzanine::Physics::RigidProxy:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1Physics_1_1RigidProxy__inherit__graph.svg" width="144" height="150"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for Mezzanine::Physics::RigidProxy:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1Physics_1_1RigidProxy__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a34a2fd1ecd4078677ccaa2de27758352"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a34a2fd1ecd4078677ccaa2de27758352">RigidProxy</a> (<a class="el" href="classMezzanine_1_1WorldObject.xhtml">WorldObject</a> *WO, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;mass)</td></tr>
<tr class="memdesc:a34a2fd1ecd4078677ccaa2de27758352"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard Constructor.  <a href="#a34a2fd1ecd4078677ccaa2de27758352">More...</a><br/></td></tr>
<tr class="separator:a34a2fd1ecd4078677ccaa2de27758352"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaef334a4c2513b331a5340c23271e53f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aaef334a4c2513b331a5340c23271e53f"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#aaef334a4c2513b331a5340c23271e53f">~RigidProxy</a> ()</td></tr>
<tr class="memdesc:aaef334a4c2513b331a5340c23271e53f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class Destructor. <br/></td></tr>
<tr class="separator:aaef334a4c2513b331a5340c23271e53f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1afb9c4df7adecc331d29bf2a83d6c1b"><td class="memItemLeft" align="right" valign="top">virtual btCollisionObject *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a1afb9c4df7adecc331d29bf2a83d6c1b">_GetBasePhysicsObject</a> () const </td></tr>
<tr class="memdesc:a1afb9c4df7adecc331d29bf2a83d6c1b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the internal physics object.  <a href="#a1afb9c4df7adecc331d29bf2a83d6c1b">More...</a><br/></td></tr>
<tr class="separator:a1afb9c4df7adecc331d29bf2a83d6c1b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a93b38df30b6bf6137a5c21d6572c2164"><td class="memItemLeft" align="right" valign="top">virtual btRigidBody *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a93b38df30b6bf6137a5c21d6572c2164">_GetBaseRigidBody</a> () const </td></tr>
<tr class="memdesc:a93b38df30b6bf6137a5c21d6572c2164"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the internal rigid body physics object.  <a href="#a93b38df30b6bf6137a5c21d6572c2164">More...</a><br/></td></tr>
<tr class="separator:a93b38df30b6bf6137a5c21d6572c2164"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b658e54e4d1dc6465addd6891b2ce4e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a2b658e54e4d1dc6465addd6891b2ce4e">ApplyForce</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Force)</td></tr>
<tr class="memdesc:a2b658e54e4d1dc6465addd6891b2ce4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Push/Apply force to an object.  <a href="#a2b658e54e4d1dc6465addd6891b2ce4e">More...</a><br/></td></tr>
<tr class="separator:a2b658e54e4d1dc6465addd6891b2ce4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9415c06ba80691b6e2a6036b33a679bd"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a9415c06ba80691b6e2a6036b33a679bd">ApplyTorque</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Torque)</td></tr>
<tr class="memdesc:a9415c06ba80691b6e2a6036b33a679bd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Spin/Apply Torque to an object.  <a href="#a9415c06ba80691b6e2a6036b33a679bd">More...</a><br/></td></tr>
<tr class="separator:a9415c06ba80691b6e2a6036b33a679bd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a23b590bd33e534eb1c832bad679a7d6e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a23b590bd33e534eb1c832bad679a7d6e"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a23b590bd33e534eb1c832bad679a7d6e">ClearStickyContacts</a> ()</td></tr>
<tr class="memdesc:a23b590bd33e534eb1c832bad679a7d6e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all the constraints currently active on this object. <br/></td></tr>
<tr class="separator:a23b590bd33e534eb1c832bad679a7d6e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac018b1380514fe79aaf30661074aef85"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#ac018b1380514fe79aaf30661074aef85">GetAngularDamping</a> () const </td></tr>
<tr class="memdesc:ac018b1380514fe79aaf30661074aef85"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the Angular damping.  <a href="#ac018b1380514fe79aaf30661074aef85">More...</a><br/></td></tr>
<tr class="separator:ac018b1380514fe79aaf30661074aef85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a83fe7230c7abe61bbe7761988cb27ba0"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a83fe7230c7abe61bbe7761988cb27ba0">GetAngularMovementFactor</a> () const </td></tr>
<tr class="memdesc:a83fe7230c7abe61bbe7761988cb27ba0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current angular factors being applied to this actor.  <a href="#a83fe7230c7abe61bbe7761988cb27ba0">More...</a><br/></td></tr>
<tr class="separator:a83fe7230c7abe61bbe7761988cb27ba0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad4a16cba5ad095f64b193c0a155f5248"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#ad4a16cba5ad095f64b193c0a155f5248">GetAngularVelocity</a> () const </td></tr>
<tr class="memdesc:ad4a16cba5ad095f64b193c0a155f5248"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the Angular Velocity of this object.  <a href="#ad4a16cba5ad095f64b193c0a155f5248">More...</a><br/></td></tr>
<tr class="separator:ad4a16cba5ad095f64b193c0a155f5248"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aaed3dbe0c32babd4eeba5dfd63117344"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#aaed3dbe0c32babd4eeba5dfd63117344">GetForce</a> () const </td></tr>
<tr class="memdesc:aaed3dbe0c32babd4eeba5dfd63117344"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the total Force/Movement on the object.  <a href="#aaed3dbe0c32babd4eeba5dfd63117344">More...</a><br/></td></tr>
<tr class="separator:aaed3dbe0c32babd4eeba5dfd63117344"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a0be76b7cc2eac6809b872829106103"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a5a0be76b7cc2eac6809b872829106103">GetIndividualGravity</a> () const </td></tr>
<tr class="memdesc:a5a0be76b7cc2eac6809b872829106103"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the gravity being applied to this object.  <a href="#a5a0be76b7cc2eac6809b872829106103">More...</a><br/></td></tr>
<tr class="separator:a5a0be76b7cc2eac6809b872829106103"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adccb1a2ccec022c2336f0c502499ddce"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#adccb1a2ccec022c2336f0c502499ddce">GetLinearDamping</a> () const </td></tr>
<tr class="memdesc:adccb1a2ccec022c2336f0c502499ddce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the linear damping.  <a href="#adccb1a2ccec022c2336f0c502499ddce">More...</a><br/></td></tr>
<tr class="separator:adccb1a2ccec022c2336f0c502499ddce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a26501bf2fb6d280cc55a486c8dbeeaa1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a26501bf2fb6d280cc55a486c8dbeeaa1">GetLinearMovementFactor</a> () const </td></tr>
<tr class="memdesc:a26501bf2fb6d280cc55a486c8dbeeaa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current linear factors being applied to this actor.  <a href="#a26501bf2fb6d280cc55a486c8dbeeaa1">More...</a><br/></td></tr>
<tr class="separator:a26501bf2fb6d280cc55a486c8dbeeaa1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2662cc073cc66ce832c84a1710180179"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a2662cc073cc66ce832c84a1710180179">GetLinearVelocity</a> () const </td></tr>
<tr class="memdesc:a2662cc073cc66ce832c84a1710180179"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the Linear Velocity of this object.  <a href="#a2662cc073cc66ce832c84a1710180179">More...</a><br/></td></tr>
<tr class="separator:a2662cc073cc66ce832c84a1710180179"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefd99c3fde60cb4494801b2e323e0f5a"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#aefd99c3fde60cb4494801b2e323e0f5a">GetLocalInertia</a> () const </td></tr>
<tr class="memdesc:aefd99c3fde60cb4494801b2e323e0f5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current intertia of the object.  <a href="#aefd99c3fde60cb4494801b2e323e0f5a">More...</a><br/></td></tr>
<tr class="separator:aefd99c3fde60cb4494801b2e323e0f5a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1d070b21d0b815acd0db1fa42a8d3635"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a1d070b21d0b815acd0db1fa42a8d3635">GetMass</a> () const </td></tr>
<tr class="memdesc:a1d070b21d0b815acd0db1fa42a8d3635"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the total Mass of the object.  <a href="#a1d070b21d0b815acd0db1fa42a8d3635">More...</a><br/></td></tr>
<tr class="separator:a1d070b21d0b815acd0db1fa42a8d3635"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a656e80dcb065590f1f4d6351146ce8bf"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="structMezzanine_1_1Physics_1_1StickyData.xhtml">StickyData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a656e80dcb065590f1f4d6351146ce8bf">GetStickyData</a> () const </td></tr>
<tr class="memdesc:a656e80dcb065590f1f4d6351146ce8bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the struct storing the data related to sticky behavior.  <a href="#a656e80dcb065590f1f4d6351146ce8bf">More...</a><br/></td></tr>
<tr class="separator:a656e80dcb065590f1f4d6351146ce8bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a8e1f72c40a06fd4f7466177945581b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a9a8e1f72c40a06fd4f7466177945581b">GetTorque</a> () const </td></tr>
<tr class="memdesc:a9a8e1f72c40a06fd4f7466177945581b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the Torque/Rotation.  <a href="#a9a8e1f72c40a06fd4f7466177945581b">More...</a><br/></td></tr>
<tr class="separator:a9a8e1f72c40a06fd4f7466177945581b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a404eb4d327440977c7e16a829e4d64fa"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a404eb4d327440977c7e16a829e4d64fa">SetAngularMovementFactor</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Factor)</td></tr>
<tr class="memdesc:a404eb4d327440977c7e16a829e4d64fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restricts movement on the axis or axies of your choice.  <a href="#a404eb4d327440977c7e16a829e4d64fa">More...</a><br/></td></tr>
<tr class="separator:a404eb4d327440977c7e16a829e4d64fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7ee78b2e935d4936c44f15f68b7ab879"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a7ee78b2e935d4936c44f15f68b7ab879">SetAngularVelocity</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;AngVel)</td></tr>
<tr class="memdesc:a7ee78b2e935d4936c44f15f68b7ab879"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the Angular Velocity of this object.  <a href="#a7ee78b2e935d4936c44f15f68b7ab879">More...</a><br/></td></tr>
<tr class="separator:a7ee78b2e935d4936c44f15f68b7ab879"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af185a92ab825e67d5b43329553033274"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#af185a92ab825e67d5b43329553033274">SetCollisionShape</a> (<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *Shape)</td></tr>
<tr class="memdesc:af185a92ab825e67d5b43329553033274"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the collision shape to be used.  <a href="#af185a92ab825e67d5b43329553033274">More...</a><br/></td></tr>
<tr class="separator:af185a92ab825e67d5b43329553033274"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a87542bcdfcbfcad96147bf837584c9e9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a87542bcdfcbfcad96147bf837584c9e9">SetDamping</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;LinDamping, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;AngDamping)</td></tr>
<tr class="memdesc:a87542bcdfcbfcad96147bf837584c9e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the Damping for this object.  <a href="#a87542bcdfcbfcad96147bf837584c9e9">More...</a><br/></td></tr>
<tr class="separator:a87542bcdfcbfcad96147bf837584c9e9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a15d251cbe754def9a64bc0af076c87cc"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a15d251cbe754def9a64bc0af076c87cc">SetIndividualGravity</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Gravity)</td></tr>
<tr class="memdesc:a15d251cbe754def9a64bc0af076c87cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the gravity for only this object.  <a href="#a15d251cbe754def9a64bc0af076c87cc">More...</a><br/></td></tr>
<tr class="separator:a15d251cbe754def9a64bc0af076c87cc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3ebe346941f8d50d580ab4f4898ad192"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a3ebe346941f8d50d580ab4f4898ad192">SetLinearMovementFactor</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Factor)</td></tr>
<tr class="memdesc:a3ebe346941f8d50d580ab4f4898ad192"><td class="mdescLeft">&#160;</td><td class="mdescRight">Restricts movement on the axis or axies of your choice.  <a href="#a3ebe346941f8d50d580ab4f4898ad192">More...</a><br/></td></tr>
<tr class="separator:a3ebe346941f8d50d580ab4f4898ad192"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45f05424a4bcc0b51d5b5f1a85ce1f76"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a45f05424a4bcc0b51d5b5f1a85ce1f76">SetLinearVelocity</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;LinVel)</td></tr>
<tr class="memdesc:a45f05424a4bcc0b51d5b5f1a85ce1f76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the Linear Velocity of this object.  <a href="#a45f05424a4bcc0b51d5b5f1a85ce1f76">More...</a><br/></td></tr>
<tr class="separator:a45f05424a4bcc0b51d5b5f1a85ce1f76"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:acbed96fcb7d17970a3eb09fc28dfcbc9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acbed96fcb7d17970a3eb09fc28dfcbc9">SetMass</a> (<a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> NewMass)</td></tr>
<tr class="memdesc:acbed96fcb7d17970a3eb09fc28dfcbc9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the mass of the object.  <a href="#acbed96fcb7d17970a3eb09fc28dfcbc9">More...</a><br/></td></tr>
<tr class="separator:acbed96fcb7d17970a3eb09fc28dfcbc9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a52f0e588347d62e389a3b9297765e241"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a52f0e588347d62e389a3b9297765e241">SetMass</a> (<a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> NewMass, const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;NewInertia)</td></tr>
<tr class="memdesc:a52f0e588347d62e389a3b9297765e241"><td class="mdescLeft">&#160;</td><td class="mdescRight">Change the mass of the object.  <a href="#a52f0e588347d62e389a3b9297765e241">More...</a><br/></td></tr>
<tr class="separator:a52f0e588347d62e389a3b9297765e241"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8eb3e4ddde9d96e1050193e5df18a180"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a8eb3e4ddde9d96e1050193e5df18a180">SetStickyData</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;MaxNumContacts)</td></tr>
<tr class="memdesc:a8eb3e4ddde9d96e1050193e5df18a180"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the basic parameters for enabling sticky behavior with this object.  <a href="#a8eb3e4ddde9d96e1050193e5df18a180">More...</a><br/></td></tr>
<tr class="separator:a8eb3e4ddde9d96e1050193e5df18a180"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml">Mezzanine::Physics::PhysicsProxy</a></td></tr>
<tr class="memitem:a1bafe743fbac675fca096d945d20830c inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a1bafe743fbac675fca096d945d20830c">PhysicsProxy</a> (<a class="el" href="classMezzanine_1_1WorldObject.xhtml">WorldObject</a> *WO)</td></tr>
<tr class="memdesc:a1bafe743fbac675fca096d945d20830c inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard Constructor.  <a href="#a1bafe743fbac675fca096d945d20830c">More...</a><br/></td></tr>
<tr class="separator:a1bafe743fbac675fca096d945d20830c inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6dd4958f907ab0796a21019450682d6c inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6dd4958f907ab0796a21019450682d6c"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a6dd4958f907ab0796a21019450682d6c">~PhysicsProxy</a> ()</td></tr>
<tr class="memdesc:a6dd4958f907ab0796a21019450682d6c inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class Destructor. <br/></td></tr>
<tr class="separator:a6dd4958f907ab0796a21019450682d6c inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba095d57292e589daaa48d4ab6b7dccc inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aba095d57292e589daaa48d4ab6b7dccc">_SetLocation</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;x, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;y, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;z)</td></tr>
<tr class="memdesc:aba095d57292e589daaa48d4ab6b7dccc inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Manually sets the location of the collision object.  <a href="#aba095d57292e589daaa48d4ab6b7dccc">More...</a><br/></td></tr>
<tr class="separator:aba095d57292e589daaa48d4ab6b7dccc inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a57d65c607a0e7c74f3c5e833084d9483 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a57d65c607a0e7c74f3c5e833084d9483">_SetLocation</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Location)</td></tr>
<tr class="memdesc:a57d65c607a0e7c74f3c5e833084d9483 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Manually sets the location of the collision object.  <a href="#a57d65c607a0e7c74f3c5e833084d9483">More...</a><br/></td></tr>
<tr class="separator:a57d65c607a0e7c74f3c5e833084d9483 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a795b625ea18b7912f7ea7cedb642427b inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a795b625ea18b7912f7ea7cedb642427b">_SetOrientation</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;x, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;y, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;z, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;w)</td></tr>
<tr class="memdesc:a795b625ea18b7912f7ea7cedb642427b inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the orientation of the collision object.  <a href="#a795b625ea18b7912f7ea7cedb642427b">More...</a><br/></td></tr>
<tr class="separator:a795b625ea18b7912f7ea7cedb642427b inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab768a1616c122134f6b30fb1033817ee inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab768a1616c122134f6b30fb1033817ee">_SetOrientation</a> (const <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> &amp;Rotation)</td></tr>
<tr class="memdesc:ab768a1616c122134f6b30fb1033817ee inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the orientation of the collision.  <a href="#ab768a1616c122134f6b30fb1033817ee">More...</a><br/></td></tr>
<tr class="separator:ab768a1616c122134f6b30fb1033817ee inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a75e44a609e0cfe9ea662f930e05bf754 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a75e44a609e0cfe9ea662f930e05bf754">_SetScaling</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Scale)</td></tr>
<tr class="memdesc:a75e44a609e0cfe9ea662f930e05bf754 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the scale of the collision object.  <a href="#a75e44a609e0cfe9ea662f930e05bf754">More...</a><br/></td></tr>
<tr class="separator:a75e44a609e0cfe9ea662f930e05bf754 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4f57dc0341aa2b9e0ea092581c305570 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4f57dc0341aa2b9e0ea092581c305570">GetCollisionGroup</a> () const </td></tr>
<tr class="memdesc:a4f57dc0341aa2b9e0ea092581c305570 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the objects collision group.  <a href="#a4f57dc0341aa2b9e0ea092581c305570">More...</a><br/></td></tr>
<tr class="separator:a4f57dc0341aa2b9e0ea092581c305570 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad0151e1b745385e0f7895e5f15d5f56b inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad0151e1b745385e0f7895e5f15d5f56b">GetCollisionMask</a> () const </td></tr>
<tr class="memdesc:ad0151e1b745385e0f7895e5f15d5f56b inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the object's collision mask.  <a href="#ad0151e1b745385e0f7895e5f15d5f56b">More...</a><br/></td></tr>
<tr class="separator:ad0151e1b745385e0f7895e5f15d5f56b inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9495dcc99c88236c06c4d3b35cc0233d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a9495dcc99c88236c06c4d3b35cc0233d">GetCollisionResponse</a> () const </td></tr>
<tr class="memdesc:a9495dcc99c88236c06c4d3b35cc0233d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will this respond to 3d collisions.  <a href="#a9495dcc99c88236c06c4d3b35cc0233d">More...</a><br/></td></tr>
<tr class="separator:a9495dcc99c88236c06c4d3b35cc0233d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80e7ca2664aedbad0ceefb2ae46af9b0 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a80e7ca2664aedbad0ceefb2ae46af9b0">GetCollisionShape</a> () const </td></tr>
<tr class="memdesc:a80e7ca2664aedbad0ceefb2ae46af9b0 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the collision shape currently in use by this object.  <a href="#a80e7ca2664aedbad0ceefb2ae46af9b0">More...</a><br/></td></tr>
<tr class="separator:a80e7ca2664aedbad0ceefb2ae46af9b0 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a101f3c4981e07f98b87ae481b8ac4245 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a101f3c4981e07f98b87ae481b8ac4245">GetFriction</a> () const </td></tr>
<tr class="memdesc:a101f3c4981e07f98b87ae481b8ac4245 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the friction coefficient.  <a href="#a101f3c4981e07f98b87ae481b8ac4245">More...</a><br/></td></tr>
<tr class="separator:a101f3c4981e07f98b87ae481b8ac4245 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbb464e164c33cc70ac12de025a0e456 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#afbb464e164c33cc70ac12de025a0e456">GetLocation</a> () const </td></tr>
<tr class="memdesc:afbb464e164c33cc70ac12de025a0e456 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the location of the collision object.  <a href="#afbb464e164c33cc70ac12de025a0e456">More...</a><br/></td></tr>
<tr class="separator:afbb464e164c33cc70ac12de025a0e456 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afc3740f2919f9ac2f6959a2dde33db23 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#afc3740f2919f9ac2f6959a2dde33db23">GetOrientation</a> () const </td></tr>
<tr class="memdesc:afc3740f2919f9ac2f6959a2dde33db23 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the orientation of the collision object.  <a href="#afc3740f2919f9ac2f6959a2dde33db23">More...</a><br/></td></tr>
<tr class="separator:afc3740f2919f9ac2f6959a2dde33db23 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7da313b86bc25b7ac87be615ade8f828 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual ProxyType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a7da313b86bc25b7ac87be615ade8f828">GetPhysicsProxyType</a> () const =0</td></tr>
<tr class="memdesc:a7da313b86bc25b7ac87be615ade8f828 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the type of physics object.  <a href="#a7da313b86bc25b7ac87be615ade8f828">More...</a><br/></td></tr>
<tr class="separator:a7da313b86bc25b7ac87be615ade8f828 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4604724710bc619dbfee5869608f573d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4604724710bc619dbfee5869608f573d">GetRestitution</a> () const </td></tr>
<tr class="memdesc:a4604724710bc619dbfee5869608f573d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object restitution coefficient.  <a href="#a4604724710bc619dbfee5869608f573d">More...</a><br/></td></tr>
<tr class="separator:a4604724710bc619dbfee5869608f573d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad5ecf2b8a618502cd165dd309b2d366d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ad5ecf2b8a618502cd165dd309b2d366d">GetScaling</a> () const </td></tr>
<tr class="memdesc:ad5ecf2b8a618502cd165dd309b2d366d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current scaling being applied to the collision object.  <a href="#ad5ecf2b8a618502cd165dd309b2d366d">More...</a><br/></td></tr>
<tr class="separator:ad5ecf2b8a618502cd165dd309b2d366d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bb319cfcf6386e2c97f70c727444967 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4bb319cfcf6386e2c97f70c727444967">IsActive</a> () const </td></tr>
<tr class="memdesc:a4bb319cfcf6386e2c97f70c727444967 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the object is active in the simulation.  <a href="#a4bb319cfcf6386e2c97f70c727444967">More...</a><br/></td></tr>
<tr class="separator:a4bb319cfcf6386e2c97f70c727444967 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4b0cd0b9e19b48ce341708a8abafbbdc inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4b0cd0b9e19b48ce341708a8abafbbdc">IsKinematic</a> () const </td></tr>
<tr class="memdesc:a4b0cd0b9e19b48ce341708a8abafbbdc inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the object kinematic.  <a href="#a4b0cd0b9e19b48ce341708a8abafbbdc">More...</a><br/></td></tr>
<tr class="separator:a4b0cd0b9e19b48ce341708a8abafbbdc inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a464b11c078a3c9027177b01cb6eae86d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a464b11c078a3c9027177b01cb6eae86d">IsStatic</a> () const </td></tr>
<tr class="memdesc:a464b11c078a3c9027177b01cb6eae86d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the object static.  <a href="#a464b11c078a3c9027177b01cb6eae86d">More...</a><br/></td></tr>
<tr class="separator:a464b11c078a3c9027177b01cb6eae86d inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af1ecc23bd90eae4b5d8997bf760d9f24 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af1ecc23bd90eae4b5d8997bf760d9f24">IsStaticOrKinematic</a> () const </td></tr>
<tr class="memdesc:af1ecc23bd90eae4b5d8997bf760d9f24 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the object is either static or kinematic.  <a href="#af1ecc23bd90eae4b5d8997bf760d9f24">More...</a><br/></td></tr>
<tr class="separator:af1ecc23bd90eae4b5d8997bf760d9f24 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aadc9b6edd0cc9a8aca1dacdac0c61eb1 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aadc9b6edd0cc9a8aca1dacdac0c61eb1">SetActivationState</a> (const WorldObjectActivationSate &amp;State, bool Force=false)</td></tr>
<tr class="memdesc:aadc9b6edd0cc9a8aca1dacdac0c61eb1 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the activation state of the world object.  <a href="#aadc9b6edd0cc9a8aca1dacdac0c61eb1">More...</a><br/></td></tr>
<tr class="separator:aadc9b6edd0cc9a8aca1dacdac0c61eb1 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a06c304df544d87e788c98e8a67d6d90c inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a06c304df544d87e788c98e8a67d6d90c">SetCollisionGroupAndMask</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Group, const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Mask)</td></tr>
<tr class="memdesc:a06c304df544d87e788c98e8a67d6d90c inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the collision group and mask for the world object to determine what it should collide with.  <a href="#a06c304df544d87e788c98e8a67d6d90c">More...</a><br/></td></tr>
<tr class="separator:a06c304df544d87e788c98e8a67d6d90c inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af3ffd001430adae862dd23e5d38bcbc9 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#af3ffd001430adae862dd23e5d38bcbc9">SetCollisionResponse</a> (bool Enable)</td></tr>
<tr class="memdesc:af3ffd001430adae862dd23e5d38bcbc9 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object to be able to collide with other objects in the world.  <a href="#af3ffd001430adae862dd23e5d38bcbc9">More...</a><br/></td></tr>
<tr class="separator:af3ffd001430adae862dd23e5d38bcbc9 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a510890fb1fe958f25ef36e367f28c247 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a510890fb1fe958f25ef36e367f28c247">SetFriction</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;Friction)</td></tr>
<tr class="memdesc:a510890fb1fe958f25ef36e367f28c247 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the friction coefficient.  <a href="#a510890fb1fe958f25ef36e367f28c247">More...</a><br/></td></tr>
<tr class="separator:a510890fb1fe958f25ef36e367f28c247 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab0ee636127380bb12fbedf31facbd862 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab0ee636127380bb12fbedf31facbd862">SetKinematic</a> ()</td></tr>
<tr class="memdesc:ab0ee636127380bb12fbedf31facbd862 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state of the object to Kinematic.  <a href="#ab0ee636127380bb12fbedf31facbd862">More...</a><br/></td></tr>
<tr class="separator:ab0ee636127380bb12fbedf31facbd862 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8b6875f0453184b919d7978bfba4e172 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a8b6875f0453184b919d7978bfba4e172">SetRestitution</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;Restitution)</td></tr>
<tr class="memdesc:a8b6875f0453184b919d7978bfba4e172 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the restitution coefficient.  <a href="#a8b6875f0453184b919d7978bfba4e172">More...</a><br/></td></tr>
<tr class="separator:a8b6875f0453184b919d7978bfba4e172 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa021fdb845d3577769cb601a5ca295c5 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa021fdb845d3577769cb601a5ca295c5">SetStatic</a> ()</td></tr>
<tr class="memdesc:aa021fdb845d3577769cb601a5ca295c5 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state of the object to Static.  <a href="#aa021fdb845d3577769cb601a5ca295c5">More...</a><br/></td></tr>
<tr class="separator:aa021fdb845d3577769cb601a5ca295c5 inherit pub_methods_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a38ff5c70f321fefa4554c03c28b9e4a3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a38ff5c70f321fefa4554c03c28b9e4a3">CreateRigidObject</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;pmass)</td></tr>
<tr class="memdesc:a38ff5c70f321fefa4554c03c28b9e4a3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to create the physics representation of the rigid body.  <a href="#a38ff5c70f321fefa4554c03c28b9e4a3">More...</a><br/></td></tr>
<tr class="separator:a38ff5c70f321fefa4554c03c28b9e4a3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:acc8259ea9b15140941173c72cc15c1a1"><td class="memItemLeft" align="right" valign="top">btRigidBody *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1">PhysicsRigidBody</a></td></tr>
<tr class="memdesc:acc8259ea9b15140941173c72cc15c1a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">RigidBody object used by the internal physics.  <a href="#acc8259ea9b15140941173c72cc15c1a1">More...</a><br/></td></tr>
<tr class="separator:acc8259ea9b15140941173c72cc15c1a1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a857e99fa5bdeb8d70472732a1e717761"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a857e99fa5bdeb8d70472732a1e717761"></a>
<a class="el" href="structMezzanine_1_1Physics_1_1StickyData.xhtml">StickyData</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a857e99fa5bdeb8d70472732a1e717761">StickyContacts</a></td></tr>
<tr class="memdesc:a857e99fa5bdeb8d70472732a1e717761"><td class="mdescLeft">&#160;</td><td class="mdescRight">Data related to sticky behavior, if any is enabled. <br/></td></tr>
<tr class="separator:a857e99fa5bdeb8d70472732a1e717761"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml">Mezzanine::Physics::PhysicsProxy</a></td></tr>
<tr class="memitem:a19e4e14646ef4ce1945cb2ac7041423c inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a19e4e14646ef4ce1945cb2ac7041423c">CollisionGroup</a></td></tr>
<tr class="memdesc:a19e4e14646ef4ce1945cb2ac7041423c inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">The classifications pertaining to this object in regards to collisions.  <a href="#a19e4e14646ef4ce1945cb2ac7041423c">More...</a><br/></td></tr>
<tr class="separator:a19e4e14646ef4ce1945cb2ac7041423c inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8999b3ac508ffa0375409c707993f09 inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae8999b3ac508ffa0375409c707993f09">CollisionMask</a></td></tr>
<tr class="memdesc:ae8999b3ac508ffa0375409c707993f09 inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the kind of <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Objects that can collide with each other.  <a href="#ae8999b3ac508ffa0375409c707993f09">More...</a><br/></td></tr>
<tr class="separator:ae8999b3ac508ffa0375409c707993f09 inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a253125a0d9f44a0c689f219acc47bc03 inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1WorldObject.xhtml">WorldObject</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a253125a0d9f44a0c689f219acc47bc03">Parent</a></td></tr>
<tr class="memdesc:a253125a0d9f44a0c689f219acc47bc03 inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">The parent this physics object belongs to.  <a href="#a253125a0d9f44a0c689f219acc47bc03">More...</a><br/></td></tr>
<tr class="separator:a253125a0d9f44a0c689f219acc47bc03 inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21a5db3ad951da34477550855492d97a inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top">ProxyType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a21a5db3ad951da34477550855492d97a">Type</a></td></tr>
<tr class="memdesc:a21a5db3ad951da34477550855492d97a inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of <a class="el" href="namespaceMezzanine_1_1Physics.xhtml" title="This namespace is for all the classes belonging to the Physics Subsystem.">Physics</a> Proxy Object.  <a href="#a21a5db3ad951da34477550855492d97a">More...</a><br/></td></tr>
<tr class="separator:a21a5db3ad951da34477550855492d97a inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b5120000ba104d6a95c0bb4c0f55104 inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3b5120000ba104d6a95c0bb4c0f55104">WorldObjectShape</a></td></tr>
<tr class="memdesc:a3b5120000ba104d6a95c0bb4c0f55104 inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="mdescLeft">&#160;</td><td class="mdescRight">The physics shape of the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object.  <a href="#a3b5120000ba104d6a95c0bb4c0f55104">More...</a><br/></td></tr>
<tr class="separator:a3b5120000ba104d6a95c0bb4c0f55104 inherit pro_attribs_classMezzanine_1_1Physics_1_1PhysicsProxy"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This is a proxy from which rigid body objects are handled. </p>
<p>This class is used to hold and configure the physics information for a rigid body. This class holds physics information from the physics sub-library and serves as a means to interact with it. Direct interaction with the internal physics object is discouraged. </p>

<p>Definition at line <a class="el" href="rigidproxy_8h_source.xhtml#l00105">105</a> of file <a class="el" href="rigidproxy_8h_source.xhtml">rigidproxy.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a34a2fd1ecd4078677ccaa2de27758352"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::Physics::RigidProxy::RigidProxy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1WorldObject.xhtml">WorldObject</a> *&#160;</td>
          <td class="paramname"><em>WO</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>mass</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Standard Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">WO</td><td>The parent <a class="el" href="classMezzanine_1_1WorldObject.xhtml" title="This is the base class from which classes that are insertable into the physical world.">WorldObject</a> containing this rigid body. </td></tr>
    <tr><td class="paramname">mass</td><td>The mass of the rigid body. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00050">50</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a1afb9c4df7adecc331d29bf2a83d6c1b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">btCollisionObject * Mezzanine::Physics::RigidProxy::_GetBasePhysicsObject </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor for the internal physics object. </p>

<p>Implements <a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d">Mezzanine::Physics::PhysicsProxy</a>.</p>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00253">253</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a93b38df30b6bf6137a5c21d6572c2164"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">btRigidBody * Mezzanine::Physics::RigidProxy::_GetBaseRigidBody </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor for the internal rigid body physics object. </p>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00230">230</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a2b658e54e4d1dc6465addd6891b2ce4e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::ApplyForce </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Force</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Push/Apply force to an object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Force</td><td>The amount and direction of the force in a <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9415c06ba80691b6e2a6036b33a679bd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::ApplyTorque </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Torque</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{</div>
<div class="line">            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;applyCentralForce(Force.GetBulletVector3())</div>
</div><!-- fragment -->
<p>Spin/Apply Torque to an object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Torque</td><td>The amount and direction of the torque in a <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00161">161</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a38ff5c70f321fefa4554c03c28b9e4a3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::CreateRigidObject </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>pmass</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Used to create the physics representation of the rigid body. </p>
<p>Note: Outdated ObjectReference/bullet user pointer.</p>
<p>Creates the rigid body used by the internal physics library. This is called automatically by the constructor and should not be called manually. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">pmass</td><td>The mass of the rigid body to be created. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00236">236</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ac018b1380514fe79aaf30661074aef85"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Physics::RigidProxy::GetAngularDamping </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the Angular damping. </p>
<dl class="section return"><dt>Returns</dt><dd>A Real that has the Angular damping. </dd></dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00112">112</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a83fe7230c7abe61bbe7761988cb27ba0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Physics::RigidProxy::GetAngularMovementFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current angular factors being applied to this actor. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the factors on the 3 angular axes. </dd></dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00085">85</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="ad4a16cba5ad095f64b193c0a155f5248"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Physics::RigidProxy::GetAngularVelocity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the Angular Velocity of this object. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the currently set Angular Velocity of this object. </dd></dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00131">131</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aaed3dbe0c32babd4eeba5dfd63117344"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Physics::RigidProxy::GetForce </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the total Force/Movement on the object. </p>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> with the force of the entire object </dd></dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00147">147</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a5a0be76b7cc2eac6809b872829106103"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Physics::RigidProxy::GetIndividualGravity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the gravity being applied to this object. </p>
<p>This is the gravity applied to this object, which may or may not be the same as the world gravity. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the gravity currently being applied to this object. </dd></dl>

</div>
</div>
<a class="anchor" id="adccb1a2ccec022c2336f0c502499ddce"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Physics::RigidProxy::GetLinearDamping </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the linear damping. </p>
<dl class="section return"><dt>Returns</dt><dd>A Real that has the Linear damping. </dd></dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00107">107</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a26501bf2fb6d280cc55a486c8dbeeaa1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Physics::RigidProxy::GetLinearMovementFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current linear factors being applied to this actor. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the factors on the 3 linear axes. </dd></dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00094">94</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a2662cc073cc66ce832c84a1710180179"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Physics::RigidProxy::GetLinearVelocity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the Linear Velocity of this object. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the currently set Linear Velocity of this object. </dd></dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00122">122</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aefd99c3fde60cb4494801b2e323e0f5a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Physics::RigidProxy::GetLocalInertia </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the current intertia of the object. </p>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> with the Inertia </dd></dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00170">170</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a1d070b21d0b815acd0db1fa42a8d3635"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Physics::RigidProxy::GetMass </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the total Mass of the object. </p>
<dl class="section return"><dt>Returns</dt><dd>A Real with the Mass of the object </dd></dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00166">166</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a656e80dcb065590f1f4d6351146ce8bf"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="structMezzanine_1_1Physics_1_1StickyData.xhtml">StickyData</a>* Mezzanine::Physics::RigidProxy::GetStickyData </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the struct storing the data related to sticky behavior. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the struct storing the sticky data for this object. </dd></dl>

</div>
</div>
<a class="anchor" id="a9a8e1f72c40a06fd4f7466177945581b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Physics::RigidProxy::GetTorque </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Get the Torque/Rotation. </p>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> with the Torque </dd></dl>

</div>
</div>
<a class="anchor" id="a404eb4d327440977c7e16a829e4d64fa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::SetAngularMovementFactor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Restricts movement on the axis or axies of your choice. </p>
<p>This function can lock or limit any and all axes you define. 0.0 means no angular movement on that axis. 1.0 means normal movement. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Factor</td><td><a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> containing the Factors for the 3 angular axes. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00081">81</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a7ee78b2e935d4936c44f15f68b7ab879"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::SetAngularVelocity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>AngVel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the Angular Velocity of this object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">AngVel</td><td><a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the Angular Velocity to be set. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00127">127</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="af185a92ab825e67d5b43329553033274"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::SetCollisionShape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *&#160;</td>
          <td class="paramname"><em>Shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the collision shape to be used. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Shape</td><td>The shape to be applied. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented from <a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a125686861d43b00ed835ef2f32362ece">Mezzanine::Physics::PhysicsProxy</a>.</p>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00060">60</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a87542bcdfcbfcad96147bf837584c9e9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::SetDamping </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>LinDamping</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>AngDamping</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the Damping for this object. </p>
<p>Both of Linear Damping and Angular Damping default to zero. This is useful if you wish to simulate something like air resistance. Values can range from 0.0 to 1.0. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">LinDamping</td><td>Real representing the amount of Linear Damping(Movement) to be applied. </td></tr>
    <tr><td class="paramname">AngDamping</td><td>Real representing the amount of Angular Damping(Rotation) to be applied. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00103">103</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a15d251cbe754def9a64bc0af076c87cc"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::SetIndividualGravity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Gravity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the gravity for only this object. </p>
<p>This value will override the world gravity. Should be called after adding to the world. When the object is added to the world the world gravity is applied to it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Gravity</td><td><a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the direction and strength of gravity to be applied. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00137">137</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a3ebe346941f8d50d580ab4f4898ad192"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::SetLinearMovementFactor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Factor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Restricts movement on the axis or axies of your choice. </p>
<p>This function can lock or limit any and all axes you define. 0.0 means no linear movement on that axis. 1.0 means normal movement. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Factor</td><td><a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> containing the Factors for the 3 linear axes. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00090">90</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a45f05424a4bcc0b51d5b5f1a85ce1f76"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::SetLinearVelocity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>LinVel</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the Linear Velocity of this object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">LinVel</td><td><a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the Linear Velocity to be set. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00118">118</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="acbed96fcb7d17970a3eb09fc28dfcbc9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::Physics::RigidProxy::SetMass </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>NewMass</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the mass of the object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">NewMass</td><td>The amount of mass this should have. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00174">174</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a52f0e588347d62e389a3b9297765e241"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::RigidProxy::SetMass </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>NewMass</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>NewInertia</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Change the mass of the object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">NewMass</td><td>The amount of mass this should have. </td></tr>
    <tr><td class="paramname">NewInertia</td><td>The new inertia the object has. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8eb3e4ddde9d96e1050193e5df18a180"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::RigidProxy::SetStickyData </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>MaxNumContacts</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the basic parameters for enabling sticky behavior with this object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">MaxNumContacts</td><td>The maximum number of object this object can stick to or have stuck to it. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="acc8259ea9b15140941173c72cc15c1a1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">btRigidBody* Mezzanine::Physics::RigidProxy::PhysicsRigidBody</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>RigidBody object used by the internal physics. </p>

<p>Definition at line <a class="el" href="rigidproxy_8h_source.xhtml#l00110">110</a> of file <a class="el" href="rigidproxy_8h_source.xhtml">rigidproxy.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/sqeaky/Code/Mezzanine/Mezzanine/src/Physics/<a class="el" href="rigidproxy_8h_source.xhtml">rigidproxy.h</a></li>
<li>/home/sqeaky/Code/Mezzanine/Mezzanine/src/Physics/<a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Jun 20 2013 21:56:59 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
