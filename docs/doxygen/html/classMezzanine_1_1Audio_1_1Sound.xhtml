<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::Audio::Sound Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.1.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="namespaceMezzanine_1_1Audio.xhtml">Audio</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml">Sound</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classMezzanine_1_1Audio_1_1Sound-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::Audio::Sound Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is an instance of a sound that can be played and manipulated.  
 <a href="classMezzanine_1_1Audio_1_1Sound.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="sound_8h_source.xhtml">sound.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for Mezzanine::Audio::Sound:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1Audio_1_1Sound__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad0739c73fe497ad407642da5597a7599"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ad0739c73fe497ad407642da5597a7599">Sound</a> (<a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;SoundName, <a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;FileName, <a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;Group, <a class="el" href="namespaceMezzanine_1_1Audio.xhtml#a316b2244b8be1a8c441a39b0a246295e">Audio::SoundType</a> SType)</td></tr>
<tr class="memdesc:ad0739c73fe497ad407642da5597a7599"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class constructor.  <a href="#ad0739c73fe497ad407642da5597a7599"></a><br/></td></tr>
<tr class="memitem:ac690991b9d1437202d079209a68179d5"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ac690991b9d1437202d079209a68179d5">~Sound</a> ()</td></tr>
<tr class="memdesc:ac690991b9d1437202d079209a68179d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class destructor.  <a href="#ac690991b9d1437202d079209a68179d5"></a><br/></td></tr>
<tr class="memitem:a24d7d6959de19eb02049912234d8fe80"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a24d7d6959de19eb02049912234d8fe80">GetBaseVolume</a> () const </td></tr>
<tr class="memdesc:a24d7d6959de19eb02049912234d8fe80"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current volume of the sound source.  <a href="#a24d7d6959de19eb02049912234d8fe80"></a><br/></td></tr>
<tr class="memitem:ae9ecfcf829a1e720704f3f0358eb7bb5"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ae9ecfcf829a1e720704f3f0358eb7bb5">GetCompressedAudioSize</a> () const </td></tr>
<tr class="memdesc:ae9ecfcf829a1e720704f3f0358eb7bb5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the original compressed size of the sound.  <a href="#ae9ecfcf829a1e720704f3f0358eb7bb5"></a><br/></td></tr>
<tr class="memitem:a2a55baf674ffd08d2978dba9a3097add"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a2a55baf674ffd08d2978dba9a3097add">GetCurrentAudioPosition</a> () const </td></tr>
<tr class="memdesc:a2a55baf674ffd08d2978dba9a3097add"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current position in the audio stream in bytes.  <a href="#a2a55baf674ffd08d2978dba9a3097add"></a><br/></td></tr>
<tr class="memitem:a1e0225137b3cd3b80dcde45fbfecbc8b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a1e0225137b3cd3b80dcde45fbfecbc8b">GetCurrentAudioTime</a> () const </td></tr>
<tr class="memdesc:a1e0225137b3cd3b80dcde45fbfecbc8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current position in the audio stream in seconds.  <a href="#a1e0225137b3cd3b80dcde45fbfecbc8b"></a><br/></td></tr>
<tr class="memitem:ab897270eb097afdc035b9bd8211433b2"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ab897270eb097afdc035b9bd8211433b2">GetCurrentCompressedAudioPosition</a> () const </td></tr>
<tr class="memdesc:ab897270eb097afdc035b9bd8211433b2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current position in the original audio stream in bytes.  <a href="#ab897270eb097afdc035b9bd8211433b2"></a><br/></td></tr>
<tr class="memitem:a699fc535a3ca663059ac41b8ebed47a6"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a699fc535a3ca663059ac41b8ebed47a6">GetDirection</a> () const </td></tr>
<tr class="memdesc:a699fc535a3ca663059ac41b8ebed47a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the objects direction.  <a href="#a699fc535a3ca663059ac41b8ebed47a6"></a><br/></td></tr>
<tr class="memitem:a973dbe4ac825922d024f30593f485d62"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a973dbe4ac825922d024f30593f485d62">GetDopplerStrength</a> () const </td></tr>
<tr class="memdesc:a973dbe4ac825922d024f30593f485d62"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the Doppler Strength of the sound.  <a href="#a973dbe4ac825922d024f30593f485d62"></a><br/></td></tr>
<tr class="memitem:aaaae91533fe995c9fd487c7a136ffbc4"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#aaaae91533fe995c9fd487c7a136ffbc4">GetDopplerVelocity</a> () const </td></tr>
<tr class="memdesc:aaaae91533fe995c9fd487c7a136ffbc4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the doppler velocity vector.  <a href="#aaaae91533fe995c9fd487c7a136ffbc4"></a><br/></td></tr>
<tr class="memitem:aee2db63e3d662742358cd6bb2399cccb"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#aee2db63e3d662742358cd6bb2399cccb">GetInnerConeAngle</a> () const </td></tr>
<tr class="memdesc:aee2db63e3d662742358cd6bb2399cccb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the inner cone angle of the sound source.  <a href="#aee2db63e3d662742358cd6bb2399cccb"></a><br/></td></tr>
<tr class="memitem:a3482d0b1aed498c030c898c86280d6ac"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a3482d0b1aed498c030c898c86280d6ac">GetMaxDistance</a> () const </td></tr>
<tr class="memdesc:a3482d0b1aed498c030c898c86280d6ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the distance at which sound attenuation will stop.  <a href="#a3482d0b1aed498c030c898c86280d6ac"></a><br/></td></tr>
<tr class="memitem:a5f7083a4a259d0225ca74d81ae7ee9d5"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a5f7083a4a259d0225ca74d81ae7ee9d5">GetMaxVolume</a> () const </td></tr>
<tr class="memdesc:a5f7083a4a259d0225ca74d81ae7ee9d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the Maximum volume of the sound source.  <a href="#a5f7083a4a259d0225ca74d81ae7ee9d5"></a><br/></td></tr>
<tr class="memitem:a544214a05ca3cd31a312a3a8da262c43"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a544214a05ca3cd31a312a3a8da262c43">GetMinDistance</a> () const </td></tr>
<tr class="memdesc:a544214a05ca3cd31a312a3a8da262c43"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the distance at which sound attenuation will start.  <a href="#a544214a05ca3cd31a312a3a8da262c43"></a><br/></td></tr>
<tr class="memitem:a6e1d819c4dd15818dd1cbbb3d328c710"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a6e1d819c4dd15818dd1cbbb3d328c710">GetMinVolume</a> () const </td></tr>
<tr class="memdesc:a6e1d819c4dd15818dd1cbbb3d328c710"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the minimum volume of the sound source.  <a href="#a6e1d819c4dd15818dd1cbbb3d328c710"></a><br/></td></tr>
<tr class="memitem:a8ddf61b7b7ce53abf08b1653619f2524"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a8ddf61b7b7ce53abf08b1653619f2524">GetName</a> () const </td></tr>
<tr class="memdesc:a8ddf61b7b7ce53abf08b1653619f2524"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the name of this sound.  <a href="#a8ddf61b7b7ce53abf08b1653619f2524"></a><br/></td></tr>
<tr class="memitem:a5c46933135768d596393cf4426604a11"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a5c46933135768d596393cf4426604a11">GetOuterConeAngle</a> () const </td></tr>
<tr class="memdesc:a5c46933135768d596393cf4426604a11"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the outer cone angle of the sound source.  <a href="#a5c46933135768d596393cf4426604a11"></a><br/></td></tr>
<tr class="memitem:a82cbab7ccbb8a4e9e5f07323982b5e45"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a82cbab7ccbb8a4e9e5f07323982b5e45">GetOuterConeVolume</a> () const </td></tr>
<tr class="memdesc:a82cbab7ccbb8a4e9e5f07323982b5e45"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the outer cone volume of the sound source.  <a href="#a82cbab7ccbb8a4e9e5f07323982b5e45"></a><br/></td></tr>
<tr class="memitem:a9c98e10fc1b10bbaaaf430156aee69d5"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a9c98e10fc1b10bbaaaf430156aee69d5">GetPitch</a> () const </td></tr>
<tr class="memdesc:a9c98e10fc1b10bbaaaf430156aee69d5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the pitch of the sound source.  <a href="#a9c98e10fc1b10bbaaaf430156aee69d5"></a><br/></td></tr>
<tr class="memitem:aab93d69ee272dad13c4d04a344996d18"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#aab93d69ee272dad13c4d04a344996d18">GetPosition</a> () const </td></tr>
<tr class="memdesc:aab93d69ee272dad13c4d04a344996d18"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the objects position.  <a href="#aab93d69ee272dad13c4d04a344996d18"></a><br/></td></tr>
<tr class="memitem:a0b1c74a4e96502aad83fe5caa795e07c"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a0b1c74a4e96502aad83fe5caa795e07c">GetRolloffFactor</a> () const </td></tr>
<tr class="memdesc:a0b1c74a4e96502aad83fe5caa795e07c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the Rolloff factor of the sound source.  <a href="#a0b1c74a4e96502aad83fe5caa795e07c"></a><br/></td></tr>
<tr class="memitem:a019f4d11fccb3df681a14bd865830069"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a019f4d11fccb3df681a14bd865830069">GetStrength</a> () const </td></tr>
<tr class="memdesc:a019f4d11fccb3df681a14bd865830069"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the Strength of the sound source.  <a href="#a019f4d11fccb3df681a14bd865830069"></a><br/></td></tr>
<tr class="memitem:aa4ccd48addd068388a7d25ba4a0cb8ba"><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#aa4ccd48addd068388a7d25ba4a0cb8ba">GetTotalAudioSize</a> () const </td></tr>
<tr class="memdesc:aa4ccd48addd068388a7d25ba4a0cb8ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the total size of the sound in memory.  <a href="#aa4ccd48addd068388a7d25ba4a0cb8ba"></a><br/></td></tr>
<tr class="memitem:ac9664f4bd62e1f2fc3e583db6019cc65"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ac9664f4bd62e1f2fc3e583db6019cc65">GetTotalAudioTime</a> () const </td></tr>
<tr class="memdesc:ac9664f4bd62e1f2fc3e583db6019cc65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the total size of the sound in seconds.  <a href="#ac9664f4bd62e1f2fc3e583db6019cc65"></a><br/></td></tr>
<tr class="memitem:afed350570fe29ef43d889cbc2acaef25"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine_1_1Audio.xhtml#a316b2244b8be1a8c441a39b0a246295e">Audio::SoundType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#afed350570fe29ef43d889cbc2acaef25">GetType</a> () const </td></tr>
<tr class="memdesc:afed350570fe29ef43d889cbc2acaef25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the sound type of this sound.  <a href="#afed350570fe29ef43d889cbc2acaef25"></a><br/></td></tr>
<tr class="memitem:a67eb1cd90ac8690d014f622e2bfa2e96"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a67eb1cd90ac8690d014f622e2bfa2e96">GetVelocity</a> () const </td></tr>
<tr class="memdesc:a67eb1cd90ac8690d014f622e2bfa2e96"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the objects velocity.  <a href="#a67eb1cd90ac8690d014f622e2bfa2e96"></a><br/></td></tr>
<tr class="memitem:a116c89a1aed0a82483ac16bef00fbf40"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a116c89a1aed0a82483ac16bef00fbf40">GetVolume</a> () const </td></tr>
<tr class="memdesc:a116c89a1aed0a82483ac16bef00fbf40"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current volume of the sound source after all volume settings are applied.  <a href="#a116c89a1aed0a82483ac16bef00fbf40"></a><br/></td></tr>
<tr class="memitem:a2e1cb8fcc7eccf558aef6557dc6cb9a9"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a2e1cb8fcc7eccf558aef6557dc6cb9a9">IsLooping</a> () const </td></tr>
<tr class="memdesc:a2e1cb8fcc7eccf558aef6557dc6cb9a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if the sound is currently set to loop.  <a href="#a2e1cb8fcc7eccf558aef6557dc6cb9a9"></a><br/></td></tr>
<tr class="memitem:a89f8c8929c0b829cdd32dd468cbe4fd3"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a89f8c8929c0b829cdd32dd468cbe4fd3">IsPaused</a> () const </td></tr>
<tr class="memdesc:a89f8c8929c0b829cdd32dd468cbe4fd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if the sound is currently paused.  <a href="#a89f8c8929c0b829cdd32dd468cbe4fd3"></a><br/></td></tr>
<tr class="memitem:aba480f665d122ae9c6080d722231d96c"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#aba480f665d122ae9c6080d722231d96c">IsPlaying</a> () const </td></tr>
<tr class="memdesc:aba480f665d122ae9c6080d722231d96c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if the sound is currently playing.  <a href="#aba480f665d122ae9c6080d722231d96c"></a><br/></td></tr>
<tr class="memitem:adad21088ca58b31851e685b38b84d733"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#adad21088ca58b31851e685b38b84d733">IsStopped</a> () const </td></tr>
<tr class="memdesc:adad21088ca58b31851e685b38b84d733"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if the sound is currently stopped.  <a href="#adad21088ca58b31851e685b38b84d733"></a><br/></td></tr>
<tr class="memitem:ac75975e10dbab765498ecd10cc6f0dda"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ac75975e10dbab765498ecd10cc6f0dda">Loop</a> (bool ToLoop)</td></tr>
<tr class="memdesc:ac75975e10dbab765498ecd10cc6f0dda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets whether this sound should loop.  <a href="#ac75975e10dbab765498ecd10cc6f0dda"></a><br/></td></tr>
<tr class="memitem:a057484f66de7707fe471399da65a38ba"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a057484f66de7707fe471399da65a38ba">Move</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Position)</td></tr>
<tr class="memdesc:a057484f66de7707fe471399da65a38ba"><td class="mdescLeft">&#160;</td><td class="mdescRight">Moves the sound source.  <a href="#a057484f66de7707fe471399da65a38ba"></a><br/></td></tr>
<tr class="memitem:a667d1c1d1c7d39c30e15bd11e8f0cc00"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a667d1c1d1c7d39c30e15bd11e8f0cc00">Pause</a> ()</td></tr>
<tr class="memitem:a78d72faa9a68163fe06cdadffcbe4153"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a78d72faa9a68163fe06cdadffcbe4153">Play</a> ()</td></tr>
<tr class="memdesc:a78d72faa9a68163fe06cdadffcbe4153"><td class="mdescLeft">&#160;</td><td class="mdescRight">Plays the sound.  <a href="#a78d72faa9a68163fe06cdadffcbe4153"></a><br/></td></tr>
<tr class="memitem:adbc5b22b7b883737beefd33ad6a6302a"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#adbc5b22b7b883737beefd33ad6a6302a">Play2d</a> (bool <a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ac75975e10dbab765498ecd10cc6f0dda">Loop</a>=false)</td></tr>
<tr class="memdesc:adbc5b22b7b883737beefd33ad6a6302a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Plays the sound in 2D mode.  <a href="#adbc5b22b7b883737beefd33ad6a6302a"></a><br/></td></tr>
<tr class="memitem:ad792743867e17ec473509e6196816b37"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ad792743867e17ec473509e6196816b37">Play3d</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Position, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> SoundStrength=1.0, bool <a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ac75975e10dbab765498ecd10cc6f0dda">Loop</a>=false)</td></tr>
<tr class="memdesc:ad792743867e17ec473509e6196816b37"><td class="mdescLeft">&#160;</td><td class="mdescRight">Plays the sound in 3D mode.  <a href="#ad792743867e17ec473509e6196816b37"></a><br/></td></tr>
<tr class="memitem:a099c2887e6602599bbe3bf3885a4301e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a099c2887e6602599bbe3bf3885a4301e">Seek</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;Seconds, bool Relative=true)</td></tr>
<tr class="memdesc:a099c2887e6602599bbe3bf3885a4301e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Allows you to go to a specific point in the sound.  <a href="#a099c2887e6602599bbe3bf3885a4301e"></a><br/></td></tr>
<tr class="memitem:ad08b601c253cc14f52e76ec3f4c556f2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ad08b601c253cc14f52e76ec3f4c556f2">SetBaseVolume</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;Base)</td></tr>
<tr class="memdesc:ad08b601c253cc14f52e76ec3f4c556f2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the current volume of the sound source before effects and other volume settings.  <a href="#ad08b601c253cc14f52e76ec3f4c556f2"></a><br/></td></tr>
<tr class="memitem:a47b7e6d49d22213e828bb643afdda9a1"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a47b7e6d49d22213e828bb643afdda9a1">SetDirection</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Direction)</td></tr>
<tr class="memdesc:a47b7e6d49d22213e828bb643afdda9a1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the direction the sound source is facing.  <a href="#a47b7e6d49d22213e828bb643afdda9a1"></a><br/></td></tr>
<tr class="memitem:a5c9bb06702a064b04a40e543047003c2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a5c9bb06702a064b04a40e543047003c2">SetDopplerStrength</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;DopStr)</td></tr>
<tr class="memdesc:a5c9bb06702a064b04a40e543047003c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the doppler strength, which impacts the doppler effect.  <a href="#a5c9bb06702a064b04a40e543047003c2"></a><br/></td></tr>
<tr class="memitem:ad8cb61e37563761429869bd589f7db92"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ad8cb61e37563761429869bd589f7db92">SetDopplerVelocity</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Velocity)</td></tr>
<tr class="memdesc:ad8cb61e37563761429869bd589f7db92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the doppler velocity vector.  <a href="#ad8cb61e37563761429869bd589f7db92"></a><br/></td></tr>
<tr class="memitem:abec06802dd3c13a6aeef07ecf919742d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#abec06802dd3c13a6aeef07ecf919742d">SetInnerConeAngle</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;InnerAngle)</td></tr>
<tr class="memdesc:abec06802dd3c13a6aeef07ecf919742d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the inner cone angle of the sound source if you want the sound to be projected as a cone.  <a href="#abec06802dd3c13a6aeef07ecf919742d"></a><br/></td></tr>
<tr class="memitem:a3d999baec9e4a5a611a6face5a6bcd26"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a3d999baec9e4a5a611a6face5a6bcd26">SetMaxDistance</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;MaxDistance)</td></tr>
<tr class="memdesc:a3d999baec9e4a5a611a6face5a6bcd26"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the distance from the sound source where attenuation will stop.  <a href="#a3d999baec9e4a5a611a6face5a6bcd26"></a><br/></td></tr>
<tr class="memitem:a609fd6dbdccd60a23d7483f667391d34"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a609fd6dbdccd60a23d7483f667391d34">SetMaxVolume</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;MaxVolume)</td></tr>
<tr class="memdesc:a609fd6dbdccd60a23d7483f667391d34"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the maximum volume the sound source can achieve.  <a href="#a609fd6dbdccd60a23d7483f667391d34"></a><br/></td></tr>
<tr class="memitem:a6f79ee9e9dc2d9c044a21e456a0fc9e4"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a6f79ee9e9dc2d9c044a21e456a0fc9e4">SetMinDistance</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;MinDistance)</td></tr>
<tr class="memdesc:a6f79ee9e9dc2d9c044a21e456a0fc9e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the distance from the sound source where attenuation will start.  <a href="#a6f79ee9e9dc2d9c044a21e456a0fc9e4"></a><br/></td></tr>
<tr class="memitem:a26a8bb4aaeaa09681e9588325c909a0d"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a26a8bb4aaeaa09681e9588325c909a0d">SetMinVolume</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;MinVolume)</td></tr>
<tr class="memdesc:a26a8bb4aaeaa09681e9588325c909a0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the minimum volume the sound source can achieve.  <a href="#a26a8bb4aaeaa09681e9588325c909a0d"></a><br/></td></tr>
<tr class="memitem:acb04a6c0cb51cc3eea3387ee9ed4ba3c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#acb04a6c0cb51cc3eea3387ee9ed4ba3c">SetOuterConeAngle</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;OuterAngle)</td></tr>
<tr class="memdesc:acb04a6c0cb51cc3eea3387ee9ed4ba3c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the outer cone angle of the sound source if you want the sound to be projected as a cone.  <a href="#acb04a6c0cb51cc3eea3387ee9ed4ba3c"></a><br/></td></tr>
<tr class="memitem:a1a94cfea48c3572478b65ad19230aa8c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a1a94cfea48c3572478b65ad19230aa8c">SetOuterConeVolume</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;OuterVolume)</td></tr>
<tr class="memdesc:a1a94cfea48c3572478b65ad19230aa8c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets how much the volume is scaled in the outer cone.  <a href="#a1a94cfea48c3572478b65ad19230aa8c"></a><br/></td></tr>
<tr class="memitem:aeb2a9693c2e59f7ba991aa20274757a9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#aeb2a9693c2e59f7ba991aa20274757a9">SetPitch</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;Pitch)</td></tr>
<tr class="memdesc:aeb2a9693c2e59f7ba991aa20274757a9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the pitch of the sound source.  <a href="#aeb2a9693c2e59f7ba991aa20274757a9"></a><br/></td></tr>
<tr class="memitem:a4e8047c4c083b181a203db73e39c2251"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a4e8047c4c083b181a203db73e39c2251">SetPosition</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Position)</td></tr>
<tr class="memdesc:a4e8047c4c083b181a203db73e39c2251"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the position of the sound source.  <a href="#a4e8047c4c083b181a203db73e39c2251"></a><br/></td></tr>
<tr class="memitem:aae75b494e5170d67db5ab92111402ffe"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#aae75b494e5170d67db5ab92111402ffe">SetRolloffFactor</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;Rolloff)</td></tr>
<tr class="memdesc:aae75b494e5170d67db5ab92111402ffe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the Rolloff factor used to attenuate the sound over a distance.  <a href="#aae75b494e5170d67db5ab92111402ffe"></a><br/></td></tr>
<tr class="memitem:ad8698335bb0212d70b18a2c686fc1a5c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ad8698335bb0212d70b18a2c686fc1a5c">SetStrength</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;SoundStrength)</td></tr>
<tr class="memdesc:ad8698335bb0212d70b18a2c686fc1a5c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the strength of the sound source.  <a href="#ad8698335bb0212d70b18a2c686fc1a5c"></a><br/></td></tr>
<tr class="memitem:af8fb36c49aa9b8b7e894591e89e1b980"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#af8fb36c49aa9b8b7e894591e89e1b980">SetVelocity</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Velocity)</td></tr>
<tr class="memdesc:af8fb36c49aa9b8b7e894591e89e1b980"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the velocity of the sound source.  <a href="#af8fb36c49aa9b8b7e894591e89e1b980"></a><br/></td></tr>
<tr class="memitem:a8a833983aaa550290e2c0927014264ff"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a8a833983aaa550290e2c0927014264ff">Stop</a> ()</td></tr>
<tr class="memitem:a8d67f7c38f60722e874f7f78c7b5d462"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8d67f7c38f60722e874f7f78c7b5d462"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a8d67f7c38f60722e874f7f78c7b5d462">UpdateVolume</a> ()</td></tr>
<tr class="memdesc:a8d67f7c38f60722e874f7f78c7b5d462"><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates all volume settings and applies them to this sound. <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a4cc742a744facfc9f408f0deb28d7a0d"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a4cc742a744facfc9f408f0deb28d7a0d">Sound</a> ()</td></tr>
<tr class="memdesc:a4cc742a744facfc9f408f0deb28d7a0d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class Constructor. Internal use only.  <a href="#a4cc742a744facfc9f408f0deb28d7a0d"></a><br/></td></tr>
<tr class="memitem:ae95d05bd88090c8286dcb557616e5dc6"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#ae95d05bd88090c8286dcb557616e5dc6">GetTypeVolume</a> () const </td></tr>
<tr class="memdesc:ae95d05bd88090c8286dcb557616e5dc6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the volume of this sound type.  <a href="#ae95d05bd88090c8286dcb557616e5dc6"></a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a3d27bbeb707f97a580a8d36cc35c5eb4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3d27bbeb707f97a580a8d36cc35c5eb4"></a>
<a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><b>BaseVolume</b></td></tr>
<tr class="memitem:aecb0453668c1d92d54ef4c47ba7c6540"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aecb0453668c1d92d54ef4c47ba7c6540"></a>
<a class="el" href="classMezzanine_1_1AudioManager.xhtml">AudioManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>Manager</b></td></tr>
<tr class="memitem:a3a0d4528da5fa1480249898a8a7da8e5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3a0d4528da5fa1480249898a8a7da8e5"></a>
<a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Name</b></td></tr>
<tr class="memitem:af6c4aab1ddcfa7bf30f39be54b88e396"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af6c4aab1ddcfa7bf30f39be54b88e396"></a>
cAudio::IAudioSource *&#160;</td><td class="memItemRight" valign="bottom"><b>SoundSource</b></td></tr>
<tr class="memitem:a27edd668c4ee13605dc927d5c9e7fd9c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a27edd668c4ee13605dc927d5c9e7fd9c"></a>
<a class="el" href="namespaceMezzanine_1_1Audio.xhtml#a316b2244b8be1a8c441a39b0a246295e">Audio::SoundType</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Type</b></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a855eb87a3040bbe6743224a587639604"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a855eb87a3040bbe6743224a587639604"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::AudioManager</b></td></tr>
</table>
<a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>This is an instance of a sound that can be played and manipulated. </p>
<p>This is a an instance of a sound that can be played, have effects applied to it, paused, stopped, triggered and other such crazyness. </p>

<p>Definition at line <a class="el" href="sound_8h_source.xhtml#l00063">63</a> of file <a class="el" href="sound_8h_source.xhtml">sound.h</a>.</p>
</div><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a4cc742a744facfc9f408f0deb28d7a0d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::Audio::Sound::Sound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Class Constructor. Internal use only. </p>

</div>
</div>
<a class="anchor" id="ad0739c73fe497ad407642da5597a7599"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::Audio::Sound::Sound </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>SoundName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>FileName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine_1_1Audio.xhtml#a316b2244b8be1a8c441a39b0a246295e">Audio::SoundType</a>&#160;</td>
          <td class="paramname"><em>SType</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">SoundName</td><td>The name of the <a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml" title="This is an instance of a sound that can be played and manipulated.">Sound</a> instance. </td></tr>
    <tr><td class="paramname">FileName</td><td>The name of the file. </td></tr>
    <tr><td class="paramname">Group</td><td>The resource group in which the file resides. </td></tr>
    <tr><td class="paramname">SType</td><td>The type of sound that this instance is. See enum <a class="el" href="namespaceMezzanine_1_1Audio.xhtml#a316b2244b8be1a8c441a39b0a246295e" title="Used by the sound class to determine what type of sound it is.">Audio::SoundType</a> for more info. </td></tr>
  </table>
  </dd>
</dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">If</td><td>this fails to create the exception but succeeds in loading from the disk, this will throw <a class="el" href="classMezzanine_1_1InternalException.xhtml">InternalException</a> </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac690991b9d1437202d079209a68179d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Mezzanine::Audio::Sound::~Sound </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Class destructor. </p>
<p>The class destructor. </p>

</div>
</div>
<h2>Member Function Documentation</h2>
<a class="anchor" id="a24d7d6959de19eb02049912234d8fe80"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetBaseVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current volume of the sound source. </p>
<p>This function will get the current volume of the sound source before effects and other volume settings are applied. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the source volume before attenuation and other effects. </dd></dl>

</div>
</div>
<a class="anchor" id="ae9ecfcf829a1e720704f3f0358eb7bb5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int Mezzanine::Audio::Sound::GetCompressedAudioSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the original compressed size of the sound. </p>
<p>This function will return the compressed size of the sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a Real that is the original compressed size. </dd></dl>

</div>
</div>
<a class="anchor" id="a2a55baf674ffd08d2978dba9a3097add"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int Mezzanine::Audio::Sound::GetCurrentAudioPosition </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current position in the audio stream in bytes. </p>
<p>This function will get the current position of the sound in the audio stream. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the current position in the audio stream in bytes. </dd></dl>

</div>
</div>
<a class="anchor" id="a1e0225137b3cd3b80dcde45fbfecbc8b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetCurrentAudioTime </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current position in the audio stream in seconds. </p>
<p>This function will get the current position of the sound in the audio stream. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the current position in the audio stream in seconds. </dd></dl>

</div>
</div>
<a class="anchor" id="ab897270eb097afdc035b9bd8211433b2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int Mezzanine::Audio::Sound::GetCurrentCompressedAudioPosition </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current position in the original audio stream in bytes. </p>
<p>This function will get the current position of the sound in the original audio stream. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the current position in the original audio stream in bytes. </dd></dl>

</div>
</div>
<a class="anchor" id="a699fc535a3ca663059ac41b8ebed47a6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Audio::Sound::GetDirection </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the objects direction. </p>
<p>Gets the objects current direction. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the objects current direction. </dd></dl>

</div>
</div>
<a class="anchor" id="a973dbe4ac825922d024f30593f485d62"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetDopplerStrength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the Doppler Strength of the sound. </p>
<p>This function will get the doppler strength, which enhances or diminishes the doppler effect. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the doppler strength. </dd></dl>

</div>
</div>
<a class="anchor" id="aaaae91533fe995c9fd487c7a136ffbc4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Audio::Sound::GetDopplerVelocity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the doppler velocity vector. </p>
<p>This function will get the override for the doppler velocity vector. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the override for the doppler velocity vector. </dd></dl>

</div>
</div>
<a class="anchor" id="aee2db63e3d662742358cd6bb2399cccb"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetInnerConeAngle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the inner cone angle of the sound source. </p>
<p>This function will get the inner cone angle of the sound source. See <a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#abec06802dd3c13a6aeef07ecf919742d" title="Sets the inner cone angle of the sound source if you want the sound to be projected as a cone...">SetInnerConeAngle()</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the angle of the inner sound cone of the source. </dd></dl>

</div>
</div>
<a class="anchor" id="a3482d0b1aed498c030c898c86280d6ac"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetMaxDistance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the distance at which sound attenuation will stop. </p>
<p>This function will get the distance at which sound attenuation will stop. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the distance from the source where attenuation will stop. </dd></dl>

</div>
</div>
<a class="anchor" id="a5f7083a4a259d0225ca74d81ae7ee9d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetMaxVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the Maximum volume of the sound source. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the maximum volume that the source can achieve. </dd></dl>

</div>
</div>
<a class="anchor" id="a544214a05ca3cd31a312a3a8da262c43"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetMinDistance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the distance at which sound attenuation will start. </p>
<p>This function will get the distance at which sound attenuation will start. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the distance from the source where attenuation will start. </dd></dl>

</div>
</div>
<a class="anchor" id="a6e1d819c4dd15818dd1cbbb3d328c710"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetMinVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the minimum volume of the sound source. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the minimum volume that the source can be attenuated to. </dd></dl>

</div>
</div>
<a class="anchor" id="a8ddf61b7b7ce53abf08b1653619f2524"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Mezzanine::Audio::Sound::GetName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the name of this sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a string containing the name of this sound. </dd></dl>

</div>
</div>
<a class="anchor" id="a5c46933135768d596393cf4426604a11"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetOuterConeAngle </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the outer cone angle of the sound source. </p>
<p>This function will get the outer cone angle of the sound source. See <a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#acb04a6c0cb51cc3eea3387ee9ed4ba3c" title="Sets the outer cone angle of the sound source if you want the sound to be projected as a cone...">SetOuterConeAngle()</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the angle of the outer sound cone of the source. </dd></dl>

</div>
</div>
<a class="anchor" id="a82cbab7ccbb8a4e9e5f07323982b5e45"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetOuterConeVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the outer cone volume of the sound source. </p>
<p>This function will get the outer cone volume of the sound source. See <a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a1a94cfea48c3572478b65ad19230aa8c" title="Sets how much the volume is scaled in the outer cone.">SetOuterConeVolume()</a>. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns how much the volume of the source is scaled in the outer cone. </dd></dl>

</div>
</div>
<a class="anchor" id="a9c98e10fc1b10bbaaaf430156aee69d5"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetPitch </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the pitch of the sound source. </p>
<p>This function will get the pitch of the sound source. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the pitch of the source. </dd></dl>

</div>
</div>
<a class="anchor" id="aab93d69ee272dad13c4d04a344996d18"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Audio::Sound::GetPosition </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the objects position. </p>
<p>Gets the objects current position. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the objects current position. </dd></dl>

</div>
</div>
<a class="anchor" id="a0b1c74a4e96502aad83fe5caa795e07c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetRolloffFactor </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the Rolloff factor of the sound source. </p>
<p>This function will get the factor used in attenuating the source over distance. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the factor used in attenuating the source over distance. </dd></dl>

</div>
</div>
<a class="anchor" id="a019f4d11fccb3df681a14bd865830069"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetStrength </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the Strength of the sound source. </p>
<p>This function will get the strength of the source, which determines how well the sound carries over a distance. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the strength of the source. </dd></dl>

</div>
</div>
<a class="anchor" id="aa4ccd48addd068388a7d25ba4a0cb8ba"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual int Mezzanine::Audio::Sound::GetTotalAudioSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the total size of the sound in memory. </p>
<p>This function will return the total size of the sound in memory. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a Real that is the size in memory. </dd></dl>

</div>
</div>
<a class="anchor" id="ac9664f4bd62e1f2fc3e583db6019cc65"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetTotalAudioTime </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the total size of the sound in seconds. </p>
<p>This function will return the amount of seconds of the sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a Real that is the size in seconds. </dd></dl>

</div>
</div>
<a class="anchor" id="afed350570fe29ef43d889cbc2acaef25"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine_1_1Audio.xhtml#a316b2244b8be1a8c441a39b0a246295e">Audio::SoundType</a> Mezzanine::Audio::Sound::GetType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the sound type of this sound. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a SoundType enum value that is the type of this sound. </dd></dl>

</div>
</div>
<a class="anchor" id="ae95d05bd88090c8286dcb557616e5dc6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetTypeVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the volume of this sound type. </p>

</div>
</div>
<a class="anchor" id="a67eb1cd90ac8690d014f622e2bfa2e96"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Audio::Sound::GetVelocity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the objects velocity. </p>
<p>Gets the objects current velocity. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the objects current velocity. </dd></dl>

</div>
</div>
<a class="anchor" id="a116c89a1aed0a82483ac16bef00fbf40"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Audio::Sound::GetVolume </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current volume of the sound source after all volume settings are applied. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a Real representing the volume of this sound after all volume settings are applied. </dd></dl>

</div>
</div>
<a class="anchor" id="a2e1cb8fcc7eccf558aef6557dc6cb9a9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::Sound::IsLooping </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks to see if the sound is currently set to loop. </p>
<p>Checks to see if the sound is currently set to loop. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns whether or not the sound is currently set to loop. </dd></dl>

</div>
</div>
<a class="anchor" id="a89f8c8929c0b829cdd32dd468cbe4fd3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::Sound::IsPaused </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks to see if the sound is currently paused. </p>
<p>Checks to see if the sound is currently paused. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns whether or not the sound is currently paused. </dd></dl>

</div>
</div>
<a class="anchor" id="aba480f665d122ae9c6080d722231d96c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::Sound::IsPlaying </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks to see if the sound is currently playing. </p>
<p>Checks to see if the sound is currently playing. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns whether or not the sound is currently playing. </dd></dl>

</div>
</div>
<a class="anchor" id="adad21088ca58b31851e685b38b84d733"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Audio::Sound::IsStopped </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks to see if the sound is currently stopped. </p>
<p>Checks to see if the sound is currently stopped. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns whether or not the sound is currently stopped. </dd></dl>

</div>
</div>
<a class="anchor" id="ac75975e10dbab765498ecd10cc6f0dda"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::Loop </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>ToLoop</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets whether this sound should loop. </p>
<p>Sets whether this sound should restart once it's done playing. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToLoop</td><td>Whether or not this sound should restart </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a057484f66de7707fe471399da65a38ba"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::Move </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Moves the sound source. </p>
<p>This function will set both the position and velocity of the sound source. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Position</td><td>The new position of the sound source. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a667d1c1d1c7d39c30e15bd11e8f0cc00"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::Pause </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Pauses the sound. </p>

</div>
</div>
<a class="anchor" id="a78d72faa9a68163fe06cdadffcbe4153"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::Play </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Plays the sound. </p>
<p>Plays the sound with the same settings as the last time it was played. </p>

</div>
</div>
<a class="anchor" id="adbc5b22b7b883737beefd33ad6a6302a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::Play2d </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Loop</em> = <code>false</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Plays the sound in 2D mode. </p>
<p>This will play the sound without altering it by it's position in 3D space. Ideal for music and ambient sounds. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Loop</td><td>Whether or not the sound should restart once it's done playing. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad792743867e17ec473509e6196816b37"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::Play3d </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Position</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>SoundStrength</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Loop</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Plays the sound in 3D mode. </p>
<p>This will play the sound and alter it's properties based on it's location in 3D space. Sounds can sound like they are coming more from one direction then another, etc.. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Position</td><td>The location in 3D space where the sound originates. </td></tr>
    <tr><td class="paramname">SoundStrength</td><td>The higher the sound strength, the further away you can hear the sound, not the same as volume. </td></tr>
    <tr><td class="paramname">Loop</td><td>Whether or not the sound should restart once it's done playing. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a099c2887e6602599bbe3bf3885a4301e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::Seek </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>Seconds</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Relative</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Allows you to go to a specific point in the sound. </p>
<p>This function will allow you to jump ahead or rewind to any specific point in the sound. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Seconds</td><td>How many seconds into the sound you want to jump to. </td></tr>
    <tr><td class="paramname">Relative</td><td>Whether or not you want the jump to be relative to where the sound is at the time of calling this function. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad08b601c253cc14f52e76ec3f4c556f2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetBaseVolume </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>Base</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the current volume of the sound source before effects and other volume settings. </p>
<p>This function will set the current volume of the sound source before effects (like attenuation) are applied. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Base</td><td>The volume of the sound source to be applied. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a47b7e6d49d22213e828bb643afdda9a1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetDirection </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Direction</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the direction the sound source is facing. </p>
<p>This function will set the direction the sound source is facing to be used with the sound in 3D mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Direction</td><td>The new direction of the sound source. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5c9bb06702a064b04a40e543047003c2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetDopplerStrength </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>DopStr</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the doppler strength, which impacts the doppler effect. </p>
<p>This function will set the doppler strength of the sound source, which can enhance or diminish the doppler effect given off by this sound source. Default: 1.0 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">DopStr</td><td>The doppler strength to be applied to this sound source. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad8cb61e37563761429869bd589f7db92"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetDopplerVelocity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Velocity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the doppler velocity vector. </p>
<p>In most cases you shouldn't need to call this as this is handled by the engine. Is called every time position, velocity, or direction is altered. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Velocity</td><td>A vector3 representing the doppler velocity to be applied. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abec06802dd3c13a6aeef07ecf919742d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetInnerConeAngle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>InnerAngle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the inner cone angle of the sound source if you want the sound to be projected as a cone. </p>
<p>This function will set the angle for the inner cone which the sound will be projected. The cone will open up in the direction set by <a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a47b7e6d49d22213e828bb643afdda9a1" title="Sets the direction the sound source is facing.">SetDirection()</a>. Sounds are at their loudest only if the listener is within the inner cone. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">InnerAngle</td><td>The angle of the inner cone. Range is: 0.0 to 360.0. Default: 360.0 (broadcast) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3d999baec9e4a5a611a6face5a6bcd26"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetMaxDistance </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>MaxDistance</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the distance from the sound source where attenuation will stop. </p>
<p>This function will set the distance from the sound source where attenuation effects will stop being applied. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">MaxDistance</td><td>The distance at which attenuation effects stop being applied. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a609fd6dbdccd60a23d7483f667391d34"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetMaxVolume </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>MaxVolume</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the maximum volume the sound source can achieve. </p>
<p>This function will set the maximum volume the sound source can achieve after effects(like attenuation) have been applied. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">MaxVolume</td><td>The maximum volume allowed for the sound source. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6f79ee9e9dc2d9c044a21e456a0fc9e4"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetMinDistance </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>MinDistance</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the distance from the sound source where attenuation will start. </p>
<p>This function will set the distance from the sound source where attenuation effects will start being applied. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">MinDistance</td><td>The distance at which attenuation effects start being applied. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a26a8bb4aaeaa09681e9588325c909a0d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetMinVolume </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>MinVolume</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the minimum volume the sound source can achieve. </p>
<p>This function will set the minimum volume the sound source can achieve after effects(like attenuation) have been applied. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">MinVolume</td><td>The minimum volume allowed for the sound source. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="acb04a6c0cb51cc3eea3387ee9ed4ba3c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetOuterConeAngle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>OuterAngle</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the outer cone angle of the sound source if you want the sound to be projected as a cone. </p>
<p>This function will set the angle for the outer cone which the sound will be projected. The cone will open up in the direction set by <a class="el" href="classMezzanine_1_1Audio_1_1Sound.xhtml#a47b7e6d49d22213e828bb643afdda9a1" title="Sets the direction the sound source is facing.">SetDirection()</a>. Sounds connot be heard if the listener is outside the outer cone. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">OuterAngle</td><td>The angle of the outer cone. Range is: 0.0 to 360.0. Default: 360.0 (broadcast) </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1a94cfea48c3572478b65ad19230aa8c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetOuterConeVolume </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>OuterVolume</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets how much the volume is scaled in the outer cone. </p>
<p>This function will set how much the volume is scaled by for sounds in the outer cone of the sound source. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">OuterVolume</td><td>The scale for volume for sounds in the outer cone. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aeb2a9693c2e59f7ba991aa20274757a9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetPitch </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>Pitch</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the pitch of the sound source. </p>
<p>This function will set the pitch of the sound source. Note: higher values will speed up the playback of the sound. Default: 1.0 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Pitch</td><td>The new pitch of the sound. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4e8047c4c083b181a203db73e39c2251"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetPosition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Position</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the position of the sound source. </p>
<p>This function will set the position of the source to be used with the sound in 3D mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Position</td><td>The new position of the sound source. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aae75b494e5170d67db5ab92111402ffe"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetRolloffFactor </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>Rolloff</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the Rolloff factor used to attenuate the sound over a distance. </p>
<p>This function will set how much the sound source will attenuate over a distance. Larger values will make the sound attenuate faster/shorter distnaces, smaller values will make the sound carry better. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Rolloff</td><td>The factor at which the sound will attenuate. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad8698335bb0212d70b18a2c686fc1a5c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetStrength </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>SoundStrength</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the strength of the sound source. </p>
<p>This function will set the strength of the sound, which will determine how well the sound from this sound source will carry over a distance. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">SoundStrength</td><td>The strength of the sound. Default: 1.0 </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af8fb36c49aa9b8b7e894591e89e1b980"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::SetVelocity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Velocity</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the velocity of the sound source. </p>
<p>This function will set the velocity of the source to be used with the sound in 3D mode. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Velocity</td><td>The new velocity of the sound source. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8a833983aaa550290e2c0927014264ff"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Audio::Sound::Stop </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">
<p>Stops the sound. </p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/sqeaky/Code/Mezzanine/Mezzanine/src/Audio/<a class="el" href="sound_8h_source.xhtml">sound.h</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Mar 30 2013 10:40:52 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1.2</small></address>
</body>
</html>
