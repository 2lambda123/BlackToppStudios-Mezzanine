<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::Physics::PhysicsProxy Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml">Physics</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml">PhysicsProxy</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classMezzanine_1_1Physics_1_1PhysicsProxy-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::Physics::PhysicsProxy Class Reference<span class="mlabels"><span class="mlabel">abstract</span></span></div>  </div>
</div><!--header-->
<div class="contents">

<p>This is a proxy from which physics objects are handled.  
 <a href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="physicsproxy_8h_source.xhtml">physicsproxy.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for Mezzanine::Physics::PhysicsProxy:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1Physics_1_1PhysicsProxy__inherit__graph.svg" width="144" height="150"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for Mezzanine::Physics::PhysicsProxy:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1Physics_1_1PhysicsProxy__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a1bafe743fbac675fca096d945d20830c"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a1bafe743fbac675fca096d945d20830c">PhysicsProxy</a> (<a class="el" href="classMezzanine_1_1WorldObject.xhtml">WorldObject</a> *WO)</td></tr>
<tr class="memdesc:a1bafe743fbac675fca096d945d20830c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Standard Constructor.  <a href="#a1bafe743fbac675fca096d945d20830c">More...</a><br/></td></tr>
<tr class="separator:a1bafe743fbac675fca096d945d20830c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a384037d8d2a06a4e1fe9ef6d1f0b07bc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a384037d8d2a06a4e1fe9ef6d1f0b07bc"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a384037d8d2a06a4e1fe9ef6d1f0b07bc">~PhysicsProxy</a> ()</td></tr>
<tr class="memdesc:a384037d8d2a06a4e1fe9ef6d1f0b07bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class Destructor. <br/></td></tr>
<tr class="separator:a384037d8d2a06a4e1fe9ef6d1f0b07bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac409b95e62f39f23deebd9b6ba9f6c2d"><td class="memItemLeft" align="right" valign="top">virtual btCollisionObject *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac409b95e62f39f23deebd9b6ba9f6c2d">_GetBasePhysicsObject</a> () const =0</td></tr>
<tr class="memdesc:ac409b95e62f39f23deebd9b6ba9f6c2d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the internal physics object.  <a href="#ac409b95e62f39f23deebd9b6ba9f6c2d">More...</a><br/></td></tr>
<tr class="separator:ac409b95e62f39f23deebd9b6ba9f6c2d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a806154b3d6d81142ffb7d034e56e3940"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a806154b3d6d81142ffb7d034e56e3940">_SetLocation</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;x, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;y, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;z)</td></tr>
<tr class="memdesc:a806154b3d6d81142ffb7d034e56e3940"><td class="mdescLeft">&#160;</td><td class="mdescRight">Manually sets the location of the collision object.  <a href="#a806154b3d6d81142ffb7d034e56e3940">More...</a><br/></td></tr>
<tr class="separator:a806154b3d6d81142ffb7d034e56e3940"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97d3c39ea27ef8b62189523234f9e60e"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a97d3c39ea27ef8b62189523234f9e60e">_SetLocation</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Location)</td></tr>
<tr class="memdesc:a97d3c39ea27ef8b62189523234f9e60e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Manually sets the location of the collision object.  <a href="#a97d3c39ea27ef8b62189523234f9e60e">More...</a><br/></td></tr>
<tr class="separator:a97d3c39ea27ef8b62189523234f9e60e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa83092bf334fe59febb17babfda76363"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa83092bf334fe59febb17babfda76363">_SetOrientation</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;x, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;y, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;z, const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;w)</td></tr>
<tr class="memdesc:aa83092bf334fe59febb17babfda76363"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the orientation of the collision object.  <a href="#aa83092bf334fe59febb17babfda76363">More...</a><br/></td></tr>
<tr class="separator:aa83092bf334fe59febb17babfda76363"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aca75fdfabcaa35838731ef53fa5575a2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aca75fdfabcaa35838731ef53fa5575a2">_SetOrientation</a> (const <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> &amp;Rotation)</td></tr>
<tr class="memdesc:aca75fdfabcaa35838731ef53fa5575a2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the orientation of the collision.  <a href="#aca75fdfabcaa35838731ef53fa5575a2">More...</a><br/></td></tr>
<tr class="separator:aca75fdfabcaa35838731ef53fa5575a2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1e6b4fdd64edaaa10bc667521b37149c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a1e6b4fdd64edaaa10bc667521b37149c">_SetScaling</a> (const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;Scale)</td></tr>
<tr class="memdesc:a1e6b4fdd64edaaa10bc667521b37149c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the scale of the collision object.  <a href="#a1e6b4fdd64edaaa10bc667521b37149c">More...</a><br/></td></tr>
<tr class="separator:a1e6b4fdd64edaaa10bc667521b37149c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4a9138377ff8f2697515a1003f6486ae"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4a9138377ff8f2697515a1003f6486ae">GetCollisionGroup</a> () const </td></tr>
<tr class="memdesc:a4a9138377ff8f2697515a1003f6486ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the objects collision group.  <a href="#a4a9138377ff8f2697515a1003f6486ae">More...</a><br/></td></tr>
<tr class="separator:a4a9138377ff8f2697515a1003f6486ae"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2e2df59b8847f6b0a3097b8d3c3e66a6"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2e2df59b8847f6b0a3097b8d3c3e66a6">GetCollisionMask</a> () const </td></tr>
<tr class="memdesc:a2e2df59b8847f6b0a3097b8d3c3e66a6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the object's collision mask.  <a href="#a2e2df59b8847f6b0a3097b8d3c3e66a6">More...</a><br/></td></tr>
<tr class="separator:a2e2df59b8847f6b0a3097b8d3c3e66a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab426fa96dd097d10561854579f03fd73"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ab426fa96dd097d10561854579f03fd73">GetCollisionResponse</a> () const </td></tr>
<tr class="memdesc:ab426fa96dd097d10561854579f03fd73"><td class="mdescLeft">&#160;</td><td class="mdescRight">Will this respond to 3d collisions.  <a href="#ab426fa96dd097d10561854579f03fd73">More...</a><br/></td></tr>
<tr class="separator:ab426fa96dd097d10561854579f03fd73"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9e44802fd739ae43e1b2ffe81d913dd"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa9e44802fd739ae43e1b2ffe81d913dd">GetCollisionShape</a> () const </td></tr>
<tr class="memdesc:aa9e44802fd739ae43e1b2ffe81d913dd"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the collision shape currently in use by this object.  <a href="#aa9e44802fd739ae43e1b2ffe81d913dd">More...</a><br/></td></tr>
<tr class="separator:aa9e44802fd739ae43e1b2ffe81d913dd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa39cdb190269dc05f66fe719ad1ba1f6"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aa39cdb190269dc05f66fe719ad1ba1f6">GetFriction</a> () const </td></tr>
<tr class="memdesc:aa39cdb190269dc05f66fe719ad1ba1f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the friction coefficient.  <a href="#aa39cdb190269dc05f66fe719ad1ba1f6">More...</a><br/></td></tr>
<tr class="separator:aa39cdb190269dc05f66fe719ad1ba1f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebc9e4505577da5e9118a46eb9a0136b"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aebc9e4505577da5e9118a46eb9a0136b">GetLocation</a> () const </td></tr>
<tr class="memdesc:aebc9e4505577da5e9118a46eb9a0136b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieves the location of the collision object.  <a href="#aebc9e4505577da5e9118a46eb9a0136b">More...</a><br/></td></tr>
<tr class="separator:aebc9e4505577da5e9118a46eb9a0136b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aefe96ba93012eae4a4020bae4637d28e"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aefe96ba93012eae4a4020bae4637d28e">GetOrientation</a> () const </td></tr>
<tr class="memdesc:aefe96ba93012eae4a4020bae4637d28e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the orientation of the collision object.  <a href="#aefe96ba93012eae4a4020bae4637d28e">More...</a><br/></td></tr>
<tr class="separator:aefe96ba93012eae4a4020bae4637d28e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7da313b86bc25b7ac87be615ade8f828"><td class="memItemLeft" align="right" valign="top">virtual ProxyType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a7da313b86bc25b7ac87be615ade8f828">GetPhysicsProxyType</a> () const =0</td></tr>
<tr class="memdesc:a7da313b86bc25b7ac87be615ade8f828"><td class="mdescLeft">&#160;</td><td class="mdescRight">Accessor for the type of physics object.  <a href="#a7da313b86bc25b7ac87be615ade8f828">More...</a><br/></td></tr>
<tr class="separator:a7da313b86bc25b7ac87be615ade8f828"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a38f31ceb08abc51aeb833d59b98d79c6"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a38f31ceb08abc51aeb833d59b98d79c6">GetRestitution</a> () const </td></tr>
<tr class="memdesc:a38f31ceb08abc51aeb833d59b98d79c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object restitution coefficient.  <a href="#a38f31ceb08abc51aeb833d59b98d79c6">More...</a><br/></td></tr>
<tr class="separator:a38f31ceb08abc51aeb833d59b98d79c6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2db951121374fd81305bd7bbdfafce1f"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2db951121374fd81305bd7bbdfafce1f">GetScaling</a> () const </td></tr>
<tr class="memdesc:a2db951121374fd81305bd7bbdfafce1f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the current scaling being applied to the collision object.  <a href="#a2db951121374fd81305bd7bbdfafce1f">More...</a><br/></td></tr>
<tr class="separator:a2db951121374fd81305bd7bbdfafce1f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4bb319cfcf6386e2c97f70c727444967"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a4bb319cfcf6386e2c97f70c727444967">IsActive</a> () const </td></tr>
<tr class="memdesc:a4bb319cfcf6386e2c97f70c727444967"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the object is active in the simulation.  <a href="#a4bb319cfcf6386e2c97f70c727444967">More...</a><br/></td></tr>
<tr class="separator:a4bb319cfcf6386e2c97f70c727444967"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d7162eee8db4e6f21246e36004c15ce"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2d7162eee8db4e6f21246e36004c15ce">IsKinematic</a> () const </td></tr>
<tr class="memdesc:a2d7162eee8db4e6f21246e36004c15ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the object kinematic.  <a href="#a2d7162eee8db4e6f21246e36004c15ce">More...</a><br/></td></tr>
<tr class="separator:a2d7162eee8db4e6f21246e36004c15ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a05174ac559b9dfd7f8440f37a1eb72f9"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a05174ac559b9dfd7f8440f37a1eb72f9">IsStatic</a> () const </td></tr>
<tr class="memdesc:a05174ac559b9dfd7f8440f37a1eb72f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Is the object static.  <a href="#a05174ac559b9dfd7f8440f37a1eb72f9">More...</a><br/></td></tr>
<tr class="separator:a05174ac559b9dfd7f8440f37a1eb72f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b32a34519c693f9edb0bfc06be37ae6"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a2b32a34519c693f9edb0bfc06be37ae6">IsStaticOrKinematic</a> () const </td></tr>
<tr class="memdesc:a2b32a34519c693f9edb0bfc06be37ae6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks if the object is either static or kinematic.  <a href="#a2b32a34519c693f9edb0bfc06be37ae6">More...</a><br/></td></tr>
<tr class="separator:a2b32a34519c693f9edb0bfc06be37ae6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae2e6a508f9e05bcd04ea8d04cef1c9a7"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae2e6a508f9e05bcd04ea8d04cef1c9a7">SetActivationState</a> (const WorldObjectActivationSate &amp;State, bool Force=false)</td></tr>
<tr class="memdesc:ae2e6a508f9e05bcd04ea8d04cef1c9a7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the activation state of the world object.  <a href="#ae2e6a508f9e05bcd04ea8d04cef1c9a7">More...</a><br/></td></tr>
<tr class="separator:ae2e6a508f9e05bcd04ea8d04cef1c9a7"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac0261388424d3ab4b51008097988b6ce"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ac0261388424d3ab4b51008097988b6ce">SetCollisionGroupAndMask</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Group, const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Mask)</td></tr>
<tr class="memdesc:ac0261388424d3ab4b51008097988b6ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the collision group and mask for the world object to determine what it should collide with.  <a href="#ac0261388424d3ab4b51008097988b6ce">More...</a><br/></td></tr>
<tr class="separator:ac0261388424d3ab4b51008097988b6ce"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6a5ad9ed51b081c2f875325852826ae9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a6a5ad9ed51b081c2f875325852826ae9">SetCollisionResponse</a> (bool Enable)</td></tr>
<tr class="memdesc:a6a5ad9ed51b081c2f875325852826ae9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object to be able to collide with other objects in the world.  <a href="#a6a5ad9ed51b081c2f875325852826ae9">More...</a><br/></td></tr>
<tr class="separator:a6a5ad9ed51b081c2f875325852826ae9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abc158f43883500d4e731dfb24d5a15fa"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#abc158f43883500d4e731dfb24d5a15fa">SetCollisionShape</a> (<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *Shape)</td></tr>
<tr class="memdesc:abc158f43883500d4e731dfb24d5a15fa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the collision shape to be used.  <a href="#abc158f43883500d4e731dfb24d5a15fa">More...</a><br/></td></tr>
<tr class="separator:abc158f43883500d4e731dfb24d5a15fa"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aba81300cd2587544f0272a04aaf3d7f6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#aba81300cd2587544f0272a04aaf3d7f6">SetFriction</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;Friction)</td></tr>
<tr class="memdesc:aba81300cd2587544f0272a04aaf3d7f6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the friction coefficient.  <a href="#aba81300cd2587544f0272a04aaf3d7f6">More...</a><br/></td></tr>
<tr class="separator:aba81300cd2587544f0272a04aaf3d7f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae4599e840c683d75394e78233f7c8777"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae4599e840c683d75394e78233f7c8777">SetKinematic</a> ()</td></tr>
<tr class="memdesc:ae4599e840c683d75394e78233f7c8777"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state of the object to Kinematic.  <a href="#ae4599e840c683d75394e78233f7c8777">More...</a><br/></td></tr>
<tr class="separator:ae4599e840c683d75394e78233f7c8777"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a32ad937316fd2ae274e7c39a508834c3"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a32ad937316fd2ae274e7c39a508834c3">SetRestitution</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;Restitution)</td></tr>
<tr class="memdesc:a32ad937316fd2ae274e7c39a508834c3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the restitution coefficient.  <a href="#a32ad937316fd2ae274e7c39a508834c3">More...</a><br/></td></tr>
<tr class="separator:a32ad937316fd2ae274e7c39a508834c3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afd83940755c3f23d2c8d1684d5cb68c2"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#afd83940755c3f23d2c8d1684d5cb68c2">SetStatic</a> ()</td></tr>
<tr class="memdesc:afd83940755c3f23d2c8d1684d5cb68c2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the state of the object to Static.  <a href="#afd83940755c3f23d2c8d1684d5cb68c2">More...</a><br/></td></tr>
<tr class="separator:afd83940755c3f23d2c8d1684d5cb68c2"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a19e4e14646ef4ce1945cb2ac7041423c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a19e4e14646ef4ce1945cb2ac7041423c">CollisionGroup</a></td></tr>
<tr class="memdesc:a19e4e14646ef4ce1945cb2ac7041423c"><td class="mdescLeft">&#160;</td><td class="mdescRight">The classifications pertaining to this object in regards to collisions.  <a href="#a19e4e14646ef4ce1945cb2ac7041423c">More...</a><br/></td></tr>
<tr class="separator:a19e4e14646ef4ce1945cb2ac7041423c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae8999b3ac508ffa0375409c707993f09"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#ae8999b3ac508ffa0375409c707993f09">CollisionMask</a></td></tr>
<tr class="memdesc:ae8999b3ac508ffa0375409c707993f09"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores the kind of <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Objects that can collide with each other.  <a href="#ae8999b3ac508ffa0375409c707993f09">More...</a><br/></td></tr>
<tr class="separator:ae8999b3ac508ffa0375409c707993f09"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a253125a0d9f44a0c689f219acc47bc03"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1WorldObject.xhtml">WorldObject</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a253125a0d9f44a0c689f219acc47bc03">Parent</a></td></tr>
<tr class="memdesc:a253125a0d9f44a0c689f219acc47bc03"><td class="mdescLeft">&#160;</td><td class="mdescRight">The parent this physics object belongs to.  <a href="#a253125a0d9f44a0c689f219acc47bc03">More...</a><br/></td></tr>
<tr class="separator:a253125a0d9f44a0c689f219acc47bc03"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a21a5db3ad951da34477550855492d97a"><td class="memItemLeft" align="right" valign="top">ProxyType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a21a5db3ad951da34477550855492d97a">Type</a></td></tr>
<tr class="memdesc:a21a5db3ad951da34477550855492d97a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The type of <a class="el" href="namespaceMezzanine_1_1Physics.xhtml" title="This namespace is for all the classes belonging to the Physics Subsystem.">Physics</a> Proxy Object.  <a href="#a21a5db3ad951da34477550855492d97a">More...</a><br/></td></tr>
<tr class="separator:a21a5db3ad951da34477550855492d97a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3b5120000ba104d6a95c0bb4c0f55104"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a3b5120000ba104d6a95c0bb4c0f55104">WorldObjectShape</a></td></tr>
<tr class="memdesc:a3b5120000ba104d6a95c0bb4c0f55104"><td class="mdescLeft">&#160;</td><td class="mdescRight">The physics shape of the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object.  <a href="#a3b5120000ba104d6a95c0bb4c0f55104">More...</a><br/></td></tr>
<tr class="separator:a3b5120000ba104d6a95c0bb4c0f55104"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This is a proxy from which physics objects are handled. </p>
<p>This class is used to hold and configure the physics information for a world object. This class holds physics information from the physics sub-library and serves as a means to interact with it. Direct interaction with the internal physics object is discouraged. </p>

<p>Definition at line <a class="el" href="physicsproxy_8h_source.xhtml#l00074">74</a> of file <a class="el" href="physicsproxy_8h_source.xhtml">physicsproxy.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a1bafe743fbac675fca096d945d20830c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::Physics::PhysicsProxy::PhysicsProxy </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1WorldObject.xhtml">WorldObject</a> *&#160;</td>
          <td class="paramname"><em>WO</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Standard Constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">WO</td><td>The parent <a class="el" href="classMezzanine_1_1WorldObject.xhtml" title="This is the base class from which classes that are insertable into the physical world.">WorldObject</a> containing this object. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="ac409b95e62f39f23deebd9b6ba9f6c2d"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual btCollisionObject* Mezzanine::Physics::PhysicsProxy::_GetBasePhysicsObject </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor for the internal physics object. </p>

<p>Implemented in <a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a7682279d518681916aa93eea61a0662a">Mezzanine::Physics::RigidProxy</a>.</p>

</div>
</div>
<a class="anchor" id="a806154b3d6d81142ffb7d034e56e3940"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::_SetLocation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>z</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Manually sets the location of the collision object. </p>
<dl class="section warning"><dt>Warning</dt><dd>Use may desync the <a class="el" href="classMezzanine_1_1WorldObject.xhtml" title="This is the base class from which classes that are insertable into the physical world.">WorldObject</a>.</dd></dl>
<p>Used as a proxy for directly manipulating the internal physics object <br/>
 In most situations you won't want to use this function, and instead produce movement through physics functions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Location on the X vector. </td></tr>
    <tr><td class="paramname">y</td><td>Location on the Y vector. </td></tr>
    <tr><td class="paramname">z</td><td>Location on the Z vector. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a97d3c39ea27ef8b62189523234f9e60e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::_SetLocation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Location</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Manually sets the location of the collision object. </p>
<dl class="section warning"><dt>Warning</dt><dd>Use may desync the <a class="el" href="classMezzanine_1_1WorldObject.xhtml" title="This is the base class from which classes that are insertable into the physical world.">WorldObject</a>.</dd></dl>
<p>Used as a proxy for directly manipulating the internal physics object <br/>
 In most situations you won't want to use this function, and instead produce movement through physics functions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Location</td><td>The <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> representing the location. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aa83092bf334fe59febb17babfda76363"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::_SetOrientation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>y</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>z</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>w</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the orientation of the collision object. </p>
<dl class="section warning"><dt>Warning</dt><dd>Use may desync the <a class="el" href="classMezzanine_1_1WorldObject.xhtml" title="This is the base class from which classes that are insertable into the physical world.">WorldObject</a>.</dd></dl>
<p>Sets the orientation of the collision via <a class="el" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> parameters. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>Where the X vector is rotated about. </td></tr>
    <tr><td class="paramname">y</td><td>Where the Y vector is rotated about. </td></tr>
    <tr><td class="paramname">z</td><td>Where the Z vector is rotated about. </td></tr>
    <tr><td class="paramname">w</td><td>How much to about the x, y, z. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aca75fdfabcaa35838731ef53fa5575a2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::_SetOrientation </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> &amp;&#160;</td>
          <td class="paramname"><em>Rotation</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the orientation of the collision. </p>
<dl class="section warning"><dt>Warning</dt><dd>Use may desync the <a class="el" href="classMezzanine_1_1WorldObject.xhtml" title="This is the base class from which classes that are insertable into the physical world.">WorldObject</a>.</dd></dl>
<p>Sets the orientation of the collision object via a <a class="el" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Rotation</td><td>The <a class="el" href="classMezzanine_1_1Quaternion.xhtml" title="This is used to store information about rotation in 3d space.">Quaternion</a> representing the Rotation. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a1e6b4fdd64edaaa10bc667521b37149c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::_SetScaling </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> &amp;&#160;</td>
          <td class="paramname"><em>Scale</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the scale of the collision object. </p>
<dl class="section warning"><dt>Warning</dt><dd>Use may desync the <a class="el" href="classMezzanine_1_1WorldObject.xhtml" title="This is the base class from which classes that are insertable into the physical world.">WorldObject</a>.</dd></dl>
<p>This function will alter the scaling/size of the collision object with the given vector3. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Scale</td><td>The vector3 by which to apply the scale. Will scale each axis' accordingly. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4a9138377ff8f2697515a1003f6486ae"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::Physics::PhysicsProxy::GetCollisionGroup </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the objects collision group. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a Whole representing the collision group this object is set to. </dd></dl>

</div>
</div>
<a class="anchor" id="a2e2df59b8847f6b0a3097b8d3c3e66a6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::Physics::PhysicsProxy::GetCollisionMask </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the object's collision mask. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a Whole representing what collision groups this object should collide with. </dd></dl>

</div>
</div>
<a class="anchor" id="ab426fa96dd097d10561854579f03fd73"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Physics::PhysicsProxy::GetCollisionResponse </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Will this respond to 3d collisions. </p>
<dl class="section return"><dt>Returns</dt><dd>False is it does not respond to collisions, True if it will </dd></dl>

</div>
</div>
<a class="anchor" id="aa9e44802fd739ae43e1b2ffe81d913dd"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a>* Mezzanine::Physics::PhysicsProxy::GetCollisionShape </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the collision shape currently in use by this object. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the collision shape being used. </dd></dl>

</div>
</div>
<a class="anchor" id="aa39cdb190269dc05f66fe719ad1ba1f6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Physics::PhysicsProxy::GetFriction </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the friction coefficient. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a Real representing the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object friction coefficient. </dd></dl>

</div>
</div>
<a class="anchor" id="aebc9e4505577da5e9118a46eb9a0136b"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Physics::PhysicsProxy::GetLocation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Retrieves the location of the collision object. </p>
<p>This function will retrieve the location of the collision object. </p>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Mezzanine::Vector3</a> containing the location. </dd></dl>

</div>
</div>
<a class="anchor" id="aefe96ba93012eae4a4020bae4637d28e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> Mezzanine::Physics::PhysicsProxy::GetOrientation </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the orientation of the collision object. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a quaternion representing the rotation of the collision object. </dd></dl>

</div>
</div>
<a class="anchor" id="a7da313b86bc25b7ac87be615ade8f828"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ProxyType Mezzanine::Physics::PhysicsProxy::GetPhysicsProxyType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">pure virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Accessor for the type of physics object. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns enum value for the type of proxy this object is. </dd></dl>

</div>
</div>
<a class="anchor" id="a38f31ceb08abc51aeb833d59b98d79c6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::Physics::PhysicsProxy::GetRestitution </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object restitution coefficient. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a Real representing the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object restitution coefficient. </dd></dl>

</div>
</div>
<a class="anchor" id="a2db951121374fd81305bd7bbdfafce1f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Vector3.xhtml">Vector3</a> Mezzanine::Physics::PhysicsProxy::GetScaling </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the current scaling being applied to the collision object. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a vector3 representing the scaling being applied on all axes of this <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object. </dd></dl>

</div>
</div>
<a class="anchor" id="a4bb319cfcf6386e2c97f70c727444967"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Physics::PhysicsProxy::IsActive </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if the object is active in the simulation. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the object is active, false if it's deactivated(at rest). </dd></dl>

</div>
</div>
<a class="anchor" id="a2d7162eee8db4e6f21246e36004c15ce"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Physics::PhysicsProxy::IsKinematic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Is the object kinematic. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the object is kinematic false if it is not. </dd></dl>

</div>
</div>
<a class="anchor" id="a05174ac559b9dfd7f8440f37a1eb72f9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Physics::PhysicsProxy::IsStatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Is the object static. </p>
<dl class="section return"><dt>Returns</dt><dd>True if the object is Static false if it is not. </dd></dl>

</div>
</div>
<a class="anchor" id="a2b32a34519c693f9edb0bfc06be37ae6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual bool Mezzanine::Physics::PhysicsProxy::IsStaticOrKinematic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Checks if the object is either static or kinematic. </p>
<p>Checks if the object is either static or kinematic, returns true if it is either. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns true if the object is static or kinematic. </dd></dl>

</div>
</div>
<a class="anchor" id="ae2e6a508f9e05bcd04ea8d04cef1c9a7"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::SetActivationState </td>
          <td>(</td>
          <td class="paramtype">const WorldObjectActivationSate &amp;&#160;</td>
          <td class="paramname"><em>State</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Force</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the activation state of the world object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">State</td><td>The activation state to set for the world object. See the world objectActivationState enum for more info. </td></tr>
    <tr><td class="paramname">Force</td><td>Whether or not you want to force the state. Some states may not apply based on the condition of the world object if this is set to false. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ac0261388424d3ab4b51008097988b6ce"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::SetCollisionGroupAndMask </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Mask</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Set the collision group and mask for the world object to determine what it should collide with. </p>
<p>These values are automatically calculated for you with some sane default values. Only edit these if you know what you are doing. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Group</td><td>The collision group to which this world object belongs. </td></tr>
    <tr><td class="paramname">Mask</td><td>The other groups to which this world object should collide with. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6a5ad9ed51b081c2f875325852826ae9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::SetCollisionResponse </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Enable</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object to be able to collide with other objects in the world. </p>
<p>By default collision response is enabled. Only call this function if you have disabled collision response. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Enable</td><td>Whether or not to enable collision response. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abc158f43883500d4e731dfb24d5a15fa"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::SetCollisionShape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *&#160;</td>
          <td class="paramname"><em>Shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the collision shape to be used. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Shape</td><td>The shape to be applied. </td></tr>
  </table>
  </dd>
</dl>

<p>Reimplemented in <a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#af53d80601a74c7badcf9e43256ac1029">Mezzanine::Physics::RigidProxy</a>.</p>

</div>
</div>
<a class="anchor" id="aba81300cd2587544f0272a04aaf3d7f6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::SetFriction </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>Friction</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the friction coefficient. </p>
<p>Higher values will resist sliding across surfaces. This number is the coefficient of friction. Range is from 0.0 to 2.0. Behavior in this regard is determined by the friction of both colliding bodies. <br/>
 Default: 0.5 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Friction</td><td>A Real that is the friction coefficient desired. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae4599e840c683d75394e78233f7c8777"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::SetKinematic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state of the object to Kinematic. </p>
<p>This function will set the object to a Kinematic Object. <br/>
 Kinematic Objects are like Static Objects but are also able to be moved directly by character controllers. </p>

</div>
</div>
<a class="anchor" id="a32ad937316fd2ae274e7c39a508834c3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::SetRestitution </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>Restitution</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the restitution coefficient. </p>
<p>Restitution determines how much energy is left after a collision with an object. Range is from 0.0 to 1.0. Behavior in this regard is determined by the restitution of both colliding bodies. <br/>
 Default: 0.0 </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Restitution</td><td>A Real that is the restitution coefficient desired. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afd83940755c3f23d2c8d1684d5cb68c2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::Physics::PhysicsProxy::SetStatic </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Sets the state of the object to Static. </p>
<p>This function will set the object to a Static Object. <br/>
 Static Objects don't move or have any force applied to them, but are cabable of exerting force on other objects. </p>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="a19e4e14646ef4ce1945cb2ac7041423c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::Physics::PhysicsProxy::CollisionGroup</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The classifications pertaining to this object in regards to collisions. </p>

<p>Definition at line <a class="el" href="physicsproxy_8h_source.xhtml#l00085">85</a> of file <a class="el" href="physicsproxy_8h_source.xhtml">physicsproxy.h</a>.</p>

</div>
</div>
<a class="anchor" id="ae8999b3ac508ffa0375409c707993f09"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::Physics::PhysicsProxy::CollisionMask</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Stores the kind of <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Objects that can collide with each other. </p>

<p>Definition at line <a class="el" href="physicsproxy_8h_source.xhtml#l00088">88</a> of file <a class="el" href="physicsproxy_8h_source.xhtml">physicsproxy.h</a>.</p>

</div>
</div>
<a class="anchor" id="a253125a0d9f44a0c689f219acc47bc03"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1WorldObject.xhtml">WorldObject</a>* Mezzanine::Physics::PhysicsProxy::Parent</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The parent this physics object belongs to. </p>

<p>Definition at line <a class="el" href="physicsproxy_8h_source.xhtml#l00079">79</a> of file <a class="el" href="physicsproxy_8h_source.xhtml">physicsproxy.h</a>.</p>

</div>
</div>
<a class="anchor" id="a21a5db3ad951da34477550855492d97a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">ProxyType Mezzanine::Physics::PhysicsProxy::Type</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The type of <a class="el" href="namespaceMezzanine_1_1Physics.xhtml" title="This namespace is for all the classes belonging to the Physics Subsystem.">Physics</a> Proxy Object. </p>

<p>Definition at line <a class="el" href="physicsproxy_8h_source.xhtml#l00091">91</a> of file <a class="el" href="physicsproxy_8h_source.xhtml">physicsproxy.h</a>.</p>

</div>
</div>
<a class="anchor" id="a3b5120000ba104d6a95c0bb4c0f55104"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a>* Mezzanine::Physics::PhysicsProxy::WorldObjectShape</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The physics shape of the <a class="el" href="classMezzanine_1_1World.xhtml">World</a> Object. </p>

<p>Definition at line <a class="el" href="physicsproxy_8h_source.xhtml#l00082">82</a> of file <a class="el" href="physicsproxy_8h_source.xhtml">physicsproxy.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/sqeaky/Code/Mezzanine/Mezzanine/src/Physics/<a class="el" href="physicsproxy_8h_source.xhtml">physicsproxy.h</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat May 18 2013 17:17:09 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
