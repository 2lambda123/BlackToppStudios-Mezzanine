<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::SceneManager Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.1.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1SceneManager.xhtml">SceneManager</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classMezzanine_1_1SceneManager-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::SceneManager Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This class contains utilities and functions to allow the manipulation of the Graphical scene, rather then the physics inside, or the object inside.  
 <a href="classMezzanine_1_1SceneManager.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="scenemanager_8h_source.xhtml">scenemanager.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for Mezzanine::SceneManager:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1SceneManager__inherit__graph.svg" width="344" height="134"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for Mezzanine::SceneManager:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1SceneManager__coll__graph.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a6837ab4cd75f30af8159f18db973e497"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6837ab4cd75f30af8159f18db973e497"></a>
typedef <br class="typebreak"/>
EntityContainer::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a6837ab4cd75f30af8159f18db973e497">ConstEntityIterator</a></td></tr>
<tr class="memdesc:a6837ab4cd75f30af8159f18db973e497"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to make working with the Entities easier, and avoid the risk of accidentally changing them. <br/></td></tr>
<tr class="memitem:a04a257d3df126110aa545e856853a663"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a04a257d3df126110aa545e856853a663"></a>
typedef <br class="typebreak"/>
LightContainer::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a04a257d3df126110aa545e856853a663">ConstLightIterator</a></td></tr>
<tr class="memdesc:a04a257d3df126110aa545e856853a663"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to make working with the Lights easier, and avoid the risk of accidentally changing them. <br/></td></tr>
<tr class="memitem:ab1213cec08b0bc15ea58ed0d3617b887"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab1213cec08b0bc15ea58ed0d3617b887"></a>
typedef <br class="typebreak"/>
ParticleContainer::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ab1213cec08b0bc15ea58ed0d3617b887">ConstParticleEffectIterator</a></td></tr>
<tr class="memdesc:ab1213cec08b0bc15ea58ed0d3617b887"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to make working with the Particle Effects easier, and avoid the risk of accidentally changing them. <br/></td></tr>
<tr class="memitem:ad60b6e15daa2395944d395b4e307b905"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad60b6e15daa2395944d395b4e307b905"></a>
typedef <br class="typebreak"/>
WorldNodeContainer::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ad60b6e15daa2395944d395b4e307b905">ConstWorldNodeIterator</a></td></tr>
<tr class="memdesc:ad60b6e15daa2395944d395b4e307b905"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to make working with the WorldNodes easier, and avoid the risk of accidentally changing them. <br/></td></tr>
<tr class="memitem:acaefae7eaf587b826c524f9aae4b35aa"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="acaefae7eaf587b826c524f9aae4b35aa"></a>
typedef std::vector&lt; <a class="el" href="classMezzanine_1_1Entity.xhtml">Entity</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>EntityContainer</b></td></tr>
<tr class="memitem:a1e2d6cd6454bb900b31762eab8effc8b"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a1e2d6cd6454bb900b31762eab8effc8b"></a>
typedef EntityContainer::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a1e2d6cd6454bb900b31762eab8effc8b">EntityIterator</a></td></tr>
<tr class="memdesc:a1e2d6cd6454bb900b31762eab8effc8b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to make working with the Entities easier. <br/></td></tr>
<tr class="memitem:a4daf4d485947df11f8d5e949ec17fa5c"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4daf4d485947df11f8d5e949ec17fa5c"></a>
typedef std::vector&lt; <a class="el" href="classMezzanine_1_1Light.xhtml">Light</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>LightContainer</b></td></tr>
<tr class="memitem:a70382bc80d3905971a04a77d5c6bcb33"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a70382bc80d3905971a04a77d5c6bcb33"></a>
typedef LightContainer::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a70382bc80d3905971a04a77d5c6bcb33">LightIterator</a></td></tr>
<tr class="memdesc:a70382bc80d3905971a04a77d5c6bcb33"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to make working with the Lights easier. <br/></td></tr>
<tr class="memitem:ad5903b96af0232de66608c9f84f8c6d0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad5903b96af0232de66608c9f84f8c6d0"></a>
typedef std::vector<br class="typebreak"/>
&lt; <a class="el" href="classMezzanine_1_1ParticleEffect.xhtml">ParticleEffect</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>ParticleContainer</b></td></tr>
<tr class="memitem:a5f3bd65fb09c7a08202083cc48e46fe7"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5f3bd65fb09c7a08202083cc48e46fe7"></a>
typedef ParticleContainer::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a5f3bd65fb09c7a08202083cc48e46fe7">ParticleEffectIterator</a></td></tr>
<tr class="memdesc:a5f3bd65fb09c7a08202083cc48e46fe7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to make working with the Particle Effects easier. <br/></td></tr>
<tr class="memitem:a8149cd1ec188e0d57935d71c6a7134c6"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6">SceneShadowTechnique</a> { <br/>
&#160;&#160;<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6aeedc28307131c43b9ae0bff12c8b1cda">SST_None</a> =  0, 
<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6a616375ae458dbd612ff9745895d7e1f1">SST_Stencil_Modulative</a> =  1, 
<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6a216c1b4f5e8b891ae9e74abf48790ec8">SST_Stencil_Additive</a> =  2, 
<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6acfa2f5f4596184169e9a6495273fe6c7">SST_Texture_Modulative</a> =  11, 
<br/>
&#160;&#160;<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6a966cfba4dd29dd9248c6283ec37e3d8f">SST_Texture_Additive</a> =  12, 
<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6ae673066d535f340debfa4a6210d6b0ce">SST_Texture_Additive_Integrated</a> =  13, 
<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6ab4ff7a97c53ca46f7628541c9e39309c">SST_Texture_Modulative_Integrated</a> =  14
<br/>
 }</td></tr>
<tr class="memdesc:a8149cd1ec188e0d57935d71c6a7134c6"><td class="mdescLeft">&#160;</td><td class="mdescRight">needs to be documented  <a href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6">More...</a><br/></td></tr>
<tr class="memitem:a80fac0c0b67191cb5450bddde74b470e"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a80fac0c0b67191cb5450bddde74b470e">SkyMethod</a> { <a class="el" href="classMezzanine_1_1SceneManager.xhtml#a80fac0c0b67191cb5450bddde74b470ead62543178728c0bcd4e92d463860e571">SkyNone</a> =  0, 
<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a80fac0c0b67191cb5450bddde74b470ea95a4503b6f35da0286b384931cb484b8">SkyPlane</a> =  1, 
<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a80fac0c0b67191cb5450bddde74b470ea4c80b5621b7b8c3decfc687561b8adf4">SkyBox</a> =  2, 
<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a80fac0c0b67191cb5450bddde74b470eaa0c0e7a37ae3ab8ff27a9b7012eaf7fe">SkyDome</a> =  3
 }</td></tr>
<tr class="memdesc:a80fac0c0b67191cb5450bddde74b470e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to help identify which method is used to draw the sky, if any.  <a href="classMezzanine_1_1SceneManager.xhtml#a80fac0c0b67191cb5450bddde74b470e">More...</a><br/></td></tr>
<tr class="memitem:a0a84880768c2dd0ad8a73ae32bf07a97"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0a84880768c2dd0ad8a73ae32bf07a97"></a>
typedef std::vector&lt; <a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><b>WorldNodeContainer</b></td></tr>
<tr class="memitem:a498b2390acb176a185e1026d23b773f0"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a498b2390acb176a185e1026d23b773f0"></a>
typedef <br class="typebreak"/>
WorldNodeContainer::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a498b2390acb176a185e1026d23b773f0">WorldNodeIterator</a></td></tr>
<tr class="memdesc:a498b2390acb176a185e1026d23b773f0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to make working with the WorldNodes easier. <br/></td></tr>
<tr class="inherit_header pub_types_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&nbsp;Public Types inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:ab23a9aa27c4e3cb58d902a149d3c6de2 inherit pub_types_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab23a9aa27c4e3cb58d902a149d3c6de2"></a>
typedef bool(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a> )()</td></tr>
<tr class="memdesc:ab23a9aa27c4e3cb58d902a149d3c6de2 inherit pub_types_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This makes working with Callback function pointer a bit easier. <br/></td></tr>
<tr class="memitem:a9a6f3e238f66cbc68dfec11e4160aa6c inherit pub_types_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><b>ManagerType</b> { <br/>
&#160;&#160;<b>ActorManager</b> =  1, 
<b>AudioManager</b>, 
<b>CameraManager</b>, 
<b>CollisionShapeManager</b>, 
<br/>
&#160;&#160;<b>EventManager</b>, 
<b>GraphicsManager</b>, 
<b>InputManager</b>, 
<b>LogManager</b>, 
<br/>
&#160;&#160;<b>MeshManager</b>, 
<b>NetworkManager</b>, 
<b>PagingManager</b>, 
<b>PhysicsManager</b>, 
<br/>
&#160;&#160;<b>ResourceManager</b>, 
<b>SceneManager</b>, 
<b>ScriptingManager</b>, 
<b>TerrainManager</b>, 
<br/>
&#160;&#160;<b>TimerManager</b>, 
<b>UIManager</b>, 
<b>UserCreated</b> =  512
<br/>
 }</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:add7232bdd3758cbde34e9cf46d350f68"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#add7232bdd3758cbde34e9cf46d350f68">SceneManager</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;InternalManagerTypeName=&quot;DefaultSceneManager&quot;)</td></tr>
<tr class="memdesc:add7232bdd3758cbde34e9cf46d350f68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class Constructor.  <a href="#add7232bdd3758cbde34e9cf46d350f68"></a><br/></td></tr>
<tr class="memitem:ae9b92ffcd16960614a4d8e51cd3711b3"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ae9b92ffcd16960614a4d8e51cd3711b3">SceneManager</a> (<a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;XMLNode)</td></tr>
<tr class="memdesc:ae9b92ffcd16960614a4d8e51cd3711b3"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> constructor.  <a href="#ae9b92ffcd16960614a4d8e51cd3711b3"></a><br/></td></tr>
<tr class="memitem:a8becb78de62a9e5c66c213066e7a421b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8becb78de62a9e5c66c213066e7a421b">~SceneManager</a> ()</td></tr>
<tr class="memdesc:a8becb78de62a9e5c66c213066e7a421b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class Destructor.  <a href="#a8becb78de62a9e5c66c213066e7a421b"></a><br/></td></tr>
<tr class="memitem:ae5db6928dd653974b1d5b9076e9be2e2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ae5db6928dd653974b1d5b9076e9be2e2">_RegisterTrackingNode</a> (<a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> *Tracker)</td></tr>
<tr class="memdesc:ae5db6928dd653974b1d5b9076e9be2e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Informs this manager that a node needs periodic updates for tracking.  <a href="#ae5db6928dd653974b1d5b9076e9be2e2"></a><br/></td></tr>
<tr class="memitem:a850cf7390472c3a80aa9b278a8c82268"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a850cf7390472c3a80aa9b278a8c82268">_UnRegisterTrackingNode</a> (<a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> *Tracker)</td></tr>
<tr class="memdesc:a850cf7390472c3a80aa9b278a8c82268"><td class="mdescLeft">&#160;</td><td class="mdescRight">Informs this manager a node is no longer tracking another object.  <a href="#a850cf7390472c3a80aa9b278a8c82268"></a><br/></td></tr>
<tr class="memitem:a303da31480a3e9d5a854b6c9f4f6f691"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a1e2d6cd6454bb900b31762eab8effc8b">EntityIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a303da31480a3e9d5a854b6c9f4f6f691">BeginEntity</a> ()</td></tr>
<tr class="memdesc:a303da31480a3e9d5a854b6c9f4f6f691"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get an EntityIterator to the first Entity*.  <a href="#a303da31480a3e9d5a854b6c9f4f6f691"></a><br/></td></tr>
<tr class="memitem:a2310c117ea0c49a4d1d6652d16fe2ddf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a6837ab4cd75f30af8159f18db973e497">ConstEntityIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a2310c117ea0c49a4d1d6652d16fe2ddf">BeginEntity</a> () const </td></tr>
<tr class="memdesc:a2310c117ea0c49a4d1d6652d16fe2ddf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a ConstEntityIterator to the first Entity*.  <a href="#a2310c117ea0c49a4d1d6652d16fe2ddf"></a><br/></td></tr>
<tr class="memitem:a210aca02367a8783fe425e5c3b0ee1e9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a70382bc80d3905971a04a77d5c6bcb33">LightIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a210aca02367a8783fe425e5c3b0ee1e9">BeginLight</a> ()</td></tr>
<tr class="memdesc:a210aca02367a8783fe425e5c3b0ee1e9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a LightIterator to the first Light*.  <a href="#a210aca02367a8783fe425e5c3b0ee1e9"></a><br/></td></tr>
<tr class="memitem:acf4938ac04501140a6bf365eea1585e2"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a04a257d3df126110aa545e856853a663">ConstLightIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#acf4938ac04501140a6bf365eea1585e2">BeginLight</a> () const </td></tr>
<tr class="memdesc:acf4938ac04501140a6bf365eea1585e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a ConstLightIterator to the first Light*.  <a href="#acf4938ac04501140a6bf365eea1585e2"></a><br/></td></tr>
<tr class="memitem:a6512744f5637069c2f1c36517f0dd5c8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a5f3bd65fb09c7a08202083cc48e46fe7">ParticleEffectIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a6512744f5637069c2f1c36517f0dd5c8">BeginParticleEffect</a> ()</td></tr>
<tr class="memdesc:a6512744f5637069c2f1c36517f0dd5c8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a ParticleEffectIterator to the first ParticleEffect*.  <a href="#a6512744f5637069c2f1c36517f0dd5c8"></a><br/></td></tr>
<tr class="memitem:a1cc41384cda53a8b0061d99f6646dfa0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ab1213cec08b0bc15ea58ed0d3617b887">ConstParticleEffectIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a1cc41384cda53a8b0061d99f6646dfa0">BeginParticleEffect</a> () const </td></tr>
<tr class="memdesc:a1cc41384cda53a8b0061d99f6646dfa0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a ConstParticleEffectIterator to the first ParticleEffect*.  <a href="#a1cc41384cda53a8b0061d99f6646dfa0"></a><br/></td></tr>
<tr class="memitem:a3288784ada5dc7322f5ca0d6f4323f65"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a498b2390acb176a185e1026d23b773f0">WorldNodeIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a3288784ada5dc7322f5ca0d6f4323f65">BeginWorldNode</a> ()</td></tr>
<tr class="memdesc:a3288784ada5dc7322f5ca0d6f4323f65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a WorldNodeIterator to the first WorldNode*.  <a href="#a3288784ada5dc7322f5ca0d6f4323f65"></a><br/></td></tr>
<tr class="memitem:a0aa6eae7f9f66c5c31c346fd87c0c724"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ad60b6e15daa2395944d395b4e307b905">ConstWorldNodeIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a0aa6eae7f9f66c5c31c346fd87c0c724">BeginWorldNode</a> () const </td></tr>
<tr class="memdesc:a0aa6eae7f9f66c5c31c346fd87c0c724"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a ConstWorldNodeIterator to the first WorldNode*.  <a href="#a0aa6eae7f9f66c5c31c346fd87c0c724"></a><br/></td></tr>
<tr class="memitem:ad68fe54cbb3fe79921ab4ccff6dcff79"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Entity.xhtml">Entity</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ad68fe54cbb3fe79921ab4ccff6dcff79">CreateEntity</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;EntName, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;MeshName, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Group)</td></tr>
<tr class="memdesc:ad68fe54cbb3fe79921ab4ccff6dcff79"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates an entity.  <a href="#ad68fe54cbb3fe79921ab4ccff6dcff79"></a><br/></td></tr>
<tr class="memitem:aedc83e187f7b0b9307e3c0d277ce8244"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Light.xhtml">Light</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#aedc83e187f7b0b9307e3c0d277ce8244">CreateLight</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name)</td></tr>
<tr class="memdesc:aedc83e187f7b0b9307e3c0d277ce8244"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a dynamic light.  <a href="#aedc83e187f7b0b9307e3c0d277ce8244"></a><br/></td></tr>
<tr class="memitem:a9c3ebe1096b137cd737f6275f61b51c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ParticleEffect.xhtml">ParticleEffect</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a9c3ebe1096b137cd737f6275f61b51c9">CreateParticleEffect</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Template)</td></tr>
<tr class="memdesc:a9c3ebe1096b137cd737f6275f61b51c9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a particle effect.  <a href="#a9c3ebe1096b137cd737f6275f61b51c9"></a><br/></td></tr>
<tr class="memitem:aaa3c4b8d15aa74c767a21d725de25ec7"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#aaa3c4b8d15aa74c767a21d725de25ec7">CreateSkyBox</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Material, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Group, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Distance, bool DrawFirst=true, <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> Orientation=<a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a>())</td></tr>
<tr class="memdesc:aaa3c4b8d15aa74c767a21d725de25ec7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a skybox for use in making a sky.  <a href="#aaa3c4b8d15aa74c767a21d725de25ec7"></a><br/></td></tr>
<tr class="memitem:a5862eefa87c9fcda9fdba7fa69efd6cf"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a5862eefa87c9fcda9fdba7fa69efd6cf">CreateSkyDome</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Material, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Group, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Distance, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Curvature=10.0, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Tiling=8.0, bool DrawFirst=true, <a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a> Orientation=<a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a>(), int XSegments=16, int YSegments=16)</td></tr>
<tr class="memdesc:a5862eefa87c9fcda9fdba7fa69efd6cf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a skydome for use in making a sky.  <a href="#a5862eefa87c9fcda9fdba7fa69efd6cf"></a><br/></td></tr>
<tr class="memitem:a6cea438ed9b13cf613b07e2dd6467c4e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a6cea438ed9b13cf613b07e2dd6467c4e">CreateSkyPlane</a> (const <a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a> &amp;SkyPlane_, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Material, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Group, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Scale=1000.0, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Tiling=10.0, bool DrawFirst=true, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Bow=0, int XSegments=1, int YSegments=1)</td></tr>
<tr class="memdesc:a6cea438ed9b13cf613b07e2dd6467c4e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a skyplane for use in making a sky.  <a href="#a6cea438ed9b13cf613b07e2dd6467c4e"></a><br/></td></tr>
<tr class="memitem:a66c0988bf97c20d5d3ddb9e7dc924296"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a66c0988bf97c20d5d3ddb9e7dc924296">CreateWorldNode</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name)</td></tr>
<tr class="memdesc:a66c0988bf97c20d5d3ddb9e7dc924296"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a world node that can be manipulated.  <a href="#a66c0988bf97c20d5d3ddb9e7dc924296"></a><br/></td></tr>
<tr class="memitem:a7c2637be3ad7af57f2cc194f305e87ff"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7c2637be3ad7af57f2cc194f305e87ff"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a7c2637be3ad7af57f2cc194f305e87ff">DestroyAllEntities</a> ()</td></tr>
<tr class="memdesc:a7c2637be3ad7af57f2cc194f305e87ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys all entities currently in the manager. <br/></td></tr>
<tr class="memitem:a4dbe2f8c34aef587c263dd99a6d65e61"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4dbe2f8c34aef587c263dd99a6d65e61"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a4dbe2f8c34aef587c263dd99a6d65e61">DestroyAllLights</a> ()</td></tr>
<tr class="memdesc:a4dbe2f8c34aef587c263dd99a6d65e61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys all lights currently in the manager. <br/></td></tr>
<tr class="memitem:a4c54c954577f43a57c5164a0fb7e31cc"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4c54c954577f43a57c5164a0fb7e31cc"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a4c54c954577f43a57c5164a0fb7e31cc">DestroyAllParticleEffects</a> ()</td></tr>
<tr class="memdesc:a4c54c954577f43a57c5164a0fb7e31cc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys all particle effects currently in the manager. <br/></td></tr>
<tr class="memitem:af30ec6d5ad5260dd9eb986305afe9181"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af30ec6d5ad5260dd9eb986305afe9181"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#af30ec6d5ad5260dd9eb986305afe9181">DestroyAllWorldNodes</a> ()</td></tr>
<tr class="memdesc:af30ec6d5ad5260dd9eb986305afe9181"><td class="mdescLeft">&#160;</td><td class="mdescRight">Destroys all world nodes currently in the manager. <br/></td></tr>
<tr class="memitem:a87d26a862306dcf859ff0dee2e8a6834"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a87d26a862306dcf859ff0dee2e8a6834">DestroyEntity</a> (<a class="el" href="classMezzanine_1_1Entity.xhtml">Entity</a> *ToBeDestroyed)</td></tr>
<tr class="memdesc:a87d26a862306dcf859ff0dee2e8a6834"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deletes an entity and removes all trace of it from the manager.  <a href="#a87d26a862306dcf859ff0dee2e8a6834"></a><br/></td></tr>
<tr class="memitem:ad05338bb291dc8535b8f691378682851"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ad05338bb291dc8535b8f691378682851">DestroyLight</a> (<a class="el" href="classMezzanine_1_1Light.xhtml">Light</a> *ToBeDestroyed)</td></tr>
<tr class="memdesc:ad05338bb291dc8535b8f691378682851"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deletes a light and removes all trace of it from the manager.  <a href="#ad05338bb291dc8535b8f691378682851"></a><br/></td></tr>
<tr class="memitem:ab6123477f052d34a357db85a8284c8be"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ab6123477f052d34a357db85a8284c8be">DestroyNode</a> (<a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> *ToBeDestroyed)</td></tr>
<tr class="memdesc:ab6123477f052d34a357db85a8284c8be"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deletes a node and removes all trace of it from the manager.  <a href="#ab6123477f052d34a357db85a8284c8be"></a><br/></td></tr>
<tr class="memitem:ad91db10c13517ff6a31be64739ca2f27"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ad91db10c13517ff6a31be64739ca2f27">DestroyParticleEffect</a> (<a class="el" href="classMezzanine_1_1ParticleEffect.xhtml">ParticleEffect</a> *ToBeDestroyed)</td></tr>
<tr class="memdesc:ad91db10c13517ff6a31be64739ca2f27"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deletes a particle effect and removes all trace of it from the manager.  <a href="#ad91db10c13517ff6a31be64739ca2f27"></a><br/></td></tr>
<tr class="memitem:a167309912093d3a2fc438cab5686e2ce"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a167309912093d3a2fc438cab5686e2ce"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a167309912093d3a2fc438cab5686e2ce">DisableSky</a> ()</td></tr>
<tr class="memdesc:a167309912093d3a2fc438cab5686e2ce"><td class="mdescLeft">&#160;</td><td class="mdescRight">If any sky is active, disable it. <br/></td></tr>
<tr class="memitem:afda2cf0379dbfb7ca1f53950c489cdae"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#afda2cf0379dbfb7ca1f53950c489cdae">DisableSkyBox</a> ()</td></tr>
<tr class="memdesc:afda2cf0379dbfb7ca1f53950c489cdae"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the currently active skybox.  <a href="#afda2cf0379dbfb7ca1f53950c489cdae"></a><br/></td></tr>
<tr class="memitem:a505c371bfe64cd5a07cecd6ece4c8ed8"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a505c371bfe64cd5a07cecd6ece4c8ed8">DisableSkyDome</a> ()</td></tr>
<tr class="memdesc:a505c371bfe64cd5a07cecd6ece4c8ed8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the currently active skydome.  <a href="#a505c371bfe64cd5a07cecd6ece4c8ed8"></a><br/></td></tr>
<tr class="memitem:ac60ecdd9745803cf7d99af3a87fa6a36"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ac60ecdd9745803cf7d99af3a87fa6a36">DisableSkyPlane</a> ()</td></tr>
<tr class="memdesc:ac60ecdd9745803cf7d99af3a87fa6a36"><td class="mdescLeft">&#160;</td><td class="mdescRight">Disables the currently active skyplane.  <a href="#ac60ecdd9745803cf7d99af3a87fa6a36"></a><br/></td></tr>
<tr class="memitem:aa6bed5e6cbaab40a465bb20267f7ef29"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#aa6bed5e6cbaab40a465bb20267f7ef29">DoMainLoopItems</a> ()</td></tr>
<tr class="memdesc:aa6bed5e6cbaab40a465bb20267f7ef29"><td class="mdescLeft">&#160;</td><td class="mdescRight">The main loop calls this once per frame.   <a href="#aa6bed5e6cbaab40a465bb20267f7ef29"></a><br/></td></tr>
<tr class="memitem:a21045432d175ce80101f03b8bec66efc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a1e2d6cd6454bb900b31762eab8effc8b">EntityIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a21045432d175ce80101f03b8bec66efc">EndEntity</a> ()</td></tr>
<tr class="memdesc:a21045432d175ce80101f03b8bec66efc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a EntityIterator to one past the last Entity*.  <a href="#a21045432d175ce80101f03b8bec66efc"></a><br/></td></tr>
<tr class="memitem:a8f7a960df2f673f06f51c61c8f2a3db0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a6837ab4cd75f30af8159f18db973e497">ConstEntityIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8f7a960df2f673f06f51c61c8f2a3db0">EndEntity</a> () const </td></tr>
<tr class="memdesc:a8f7a960df2f673f06f51c61c8f2a3db0"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a ConstEntityIterator to one past the last Entity*.  <a href="#a8f7a960df2f673f06f51c61c8f2a3db0"></a><br/></td></tr>
<tr class="memitem:afd5cf87086d25174424066f3ca7a1606"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a70382bc80d3905971a04a77d5c6bcb33">LightIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#afd5cf87086d25174424066f3ca7a1606">EndLight</a> ()</td></tr>
<tr class="memdesc:afd5cf87086d25174424066f3ca7a1606"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a LightIterator to one past the last Light*.  <a href="#afd5cf87086d25174424066f3ca7a1606"></a><br/></td></tr>
<tr class="memitem:ae60793299a0392704b0f37617384d8a4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a04a257d3df126110aa545e856853a663">ConstLightIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ae60793299a0392704b0f37617384d8a4">EndLight</a> () const </td></tr>
<tr class="memdesc:ae60793299a0392704b0f37617384d8a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a ConstLightIterator to one past the last Light*.  <a href="#ae60793299a0392704b0f37617384d8a4"></a><br/></td></tr>
<tr class="memitem:a83f4770917bcbdcb499b6d9aba7b63cb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a5f3bd65fb09c7a08202083cc48e46fe7">ParticleEffectIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a83f4770917bcbdcb499b6d9aba7b63cb">EndParticleEffect</a> ()</td></tr>
<tr class="memdesc:a83f4770917bcbdcb499b6d9aba7b63cb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a ParticleEffectIterator to one past the last ParticleEffect*.  <a href="#a83f4770917bcbdcb499b6d9aba7b63cb"></a><br/></td></tr>
<tr class="memitem:a8ee3d04a551484d9b6fb8c2cb592a22f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ab1213cec08b0bc15ea58ed0d3617b887">ConstParticleEffectIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8ee3d04a551484d9b6fb8c2cb592a22f">EndParticleEffect</a> () const </td></tr>
<tr class="memdesc:a8ee3d04a551484d9b6fb8c2cb592a22f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a ConstParticleEffectIterator to one past the last ParticleEffect*.  <a href="#a8ee3d04a551484d9b6fb8c2cb592a22f"></a><br/></td></tr>
<tr class="memitem:ae6060ca191957909db40be3b5cbdfe64"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a498b2390acb176a185e1026d23b773f0">WorldNodeIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ae6060ca191957909db40be3b5cbdfe64">EndWorldNode</a> ()</td></tr>
<tr class="memdesc:ae6060ca191957909db40be3b5cbdfe64"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a WorldNodeIterator to one past the last WorldNode*.  <a href="#ae6060ca191957909db40be3b5cbdfe64"></a><br/></td></tr>
<tr class="memitem:a8052a320336f60583306690c54369e4f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ad60b6e15daa2395944d395b4e307b905">ConstWorldNodeIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8052a320336f60583306690c54369e4f">EndWorldNode</a> () const </td></tr>
<tr class="memdesc:a8052a320336f60583306690c54369e4f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a ConstWorldNodeIterator to one past the last WorldNode*.  <a href="#a8052a320336f60583306690c54369e4f"></a><br/></td></tr>
<tr class="memitem:ab23edaf46108b6cd00e64d4338bfc993"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ab23edaf46108b6cd00e64d4338bfc993">GetAmbientLight</a> () const </td></tr>
<tr class="memdesc:ab23edaf46108b6cd00e64d4338bfc993"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve the level of the ambient light.  <a href="#ab23edaf46108b6cd00e64d4338bfc993"></a><br/></td></tr>
<tr class="memitem:a6afd96e4004e7e7022d0b524bb81f26f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Entity.xhtml">Entity</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a6afd96e4004e7e7022d0b524bb81f26f">GetEntity</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name) const </td></tr>
<tr class="memdesc:a6afd96e4004e7e7022d0b524bb81f26f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an already created entity by name.  <a href="#a6afd96e4004e7e7022d0b524bb81f26f"></a><br/></td></tr>
<tr class="memitem:ad42e6135932770fb367e94e8fd3c4df1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Entity.xhtml">Entity</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ad42e6135932770fb367e94e8fd3c4df1">GetEntity</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Index) const </td></tr>
<tr class="memdesc:ad42e6135932770fb367e94e8fd3c4df1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an already created entity by index.  <a href="#ad42e6135932770fb367e94e8fd3c4df1"></a><br/></td></tr>
<tr class="memitem:aaea5120c22b48a261118884aefe5def9"><td class="memItemLeft" align="right" valign="top">Ogre::SceneManager *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#aaea5120c22b48a261118884aefe5def9">GetGraphicsWorldPointer</a> () const </td></tr>
<tr class="memdesc:aaea5120c22b48a261118884aefe5def9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the internal <a class="el" href="namespaceOgre.xhtml">Ogre</a> Scene Manager pointer.  <a href="#aaea5120c22b48a261118884aefe5def9"></a><br/></td></tr>
<tr class="memitem:a76fd211471e399bda338398abb007e39"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a76fd211471e399bda338398abb007e39">GetImplementationTypeName</a> () const </td></tr>
<tr class="memdesc:a76fd211471e399bda338398abb007e39"><td class="mdescLeft">&#160;</td><td class="mdescRight">This Allows any manager name to be sent to a stream. Primarily used for logging.   <a href="#a76fd211471e399bda338398abb007e39"></a><br/></td></tr>
<tr class="memitem:a8c4ec8f6e62ac5627536f40e551dcfc8"><td class="memItemLeft" align="right" valign="top">virtual ManagerType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8c4ec8f6e62ac5627536f40e551dcfc8">GetInterfaceType</a> () const </td></tr>
<tr class="memdesc:a8c4ec8f6e62ac5627536f40e551dcfc8"><td class="mdescLeft">&#160;</td><td class="mdescRight">This returns the type of this manager.   <a href="#a8c4ec8f6e62ac5627536f40e551dcfc8"></a><br/></td></tr>
<tr class="memitem:ab4398c1ad9016adb05df2f8065e8f896"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Light.xhtml">Light</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ab4398c1ad9016adb05df2f8065e8f896">GetLight</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name) const </td></tr>
<tr class="memdesc:ab4398c1ad9016adb05df2f8065e8f896"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an already created light by name.  <a href="#ab4398c1ad9016adb05df2f8065e8f896"></a><br/></td></tr>
<tr class="memitem:abe0006a4aaff289483648fd57c71e45f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Light.xhtml">Light</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#abe0006a4aaff289483648fd57c71e45f">GetLight</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Index) const </td></tr>
<tr class="memdesc:abe0006a4aaff289483648fd57c71e45f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an already created light by index.  <a href="#abe0006a4aaff289483648fd57c71e45f"></a><br/></td></tr>
<tr class="memitem:a379d628c1a33f472ad40bb42c7ccdf61"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a379d628c1a33f472ad40bb42c7ccdf61">GetName</a> () const </td></tr>
<tr class="memdesc:a379d628c1a33f472ad40bb42c7ccdf61"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the name of this manager.  <a href="#a379d628c1a33f472ad40bb42c7ccdf61"></a><br/></td></tr>
<tr class="memitem:ac8f0a055fd53494902b70b01ab5672c4"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ac8f0a055fd53494902b70b01ab5672c4">GetNode</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name) const </td></tr>
<tr class="memdesc:ac8f0a055fd53494902b70b01ab5672c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an already created node by name.  <a href="#ac8f0a055fd53494902b70b01ab5672c4"></a><br/></td></tr>
<tr class="memitem:af9b4ef3b9bd0da68703dc11a324772f1"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#af9b4ef3b9bd0da68703dc11a324772f1">GetNode</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Index) const </td></tr>
<tr class="memdesc:af9b4ef3b9bd0da68703dc11a324772f1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an already created node by index.  <a href="#af9b4ef3b9bd0da68703dc11a324772f1"></a><br/></td></tr>
<tr class="memitem:a409f664d4383b33700cba40f7ab99bbb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a409f664d4383b33700cba40f7ab99bbb">GetNumEntities</a> () const </td></tr>
<tr class="memdesc:a409f664d4383b33700cba40f7ab99bbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of entities created and stored in this manager.  <a href="#a409f664d4383b33700cba40f7ab99bbb"></a><br/></td></tr>
<tr class="memitem:aa1cafdcd750fda2452db42cb3ddf365c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#aa1cafdcd750fda2452db42cb3ddf365c">GetNumLights</a> () const </td></tr>
<tr class="memdesc:aa1cafdcd750fda2452db42cb3ddf365c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of lights created and stored in this manager.  <a href="#aa1cafdcd750fda2452db42cb3ddf365c"></a><br/></td></tr>
<tr class="memitem:ae78bda0af2b0f11f32d283d5cf83086f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ae78bda0af2b0f11f32d283d5cf83086f">GetNumNodes</a> () const </td></tr>
<tr class="memdesc:ae78bda0af2b0f11f32d283d5cf83086f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of nodes created and stored in this manager.  <a href="#ae78bda0af2b0f11f32d283d5cf83086f"></a><br/></td></tr>
<tr class="memitem:a730f48b359f0028d7db491facd95d95d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a730f48b359f0028d7db491facd95d95d">GetNumParticleEffects</a> () const </td></tr>
<tr class="memdesc:a730f48b359f0028d7db491facd95d95d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of particle effects created and stored in this manager.  <a href="#a730f48b359f0028d7db491facd95d95d"></a><br/></td></tr>
<tr class="memitem:aa4a86d44bacdf23aa5aae6eb583ea1e5"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ParticleEffect.xhtml">ParticleEffect</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#aa4a86d44bacdf23aa5aae6eb583ea1e5">GetParticleEffect</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name) const </td></tr>
<tr class="memdesc:aa4a86d44bacdf23aa5aae6eb583ea1e5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an already created particle effect by name.  <a href="#aa4a86d44bacdf23aa5aae6eb583ea1e5"></a><br/></td></tr>
<tr class="memitem:a3dffb309e13b90117575e5887d65f146"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ParticleEffect.xhtml">ParticleEffect</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a3dffb309e13b90117575e5887d65f146">GetParticleEffect</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Index) const </td></tr>
<tr class="memdesc:a3dffb309e13b90117575e5887d65f146"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets an already created particle effect by index.  <a href="#a3dffb309e13b90117575e5887d65f146"></a><br/></td></tr>
<tr class="memitem:a370de5b250ffa0eb401a743a4e296dd3"><td class="memItemLeft" align="right" valign="top">Internal::SceneManagerData *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a370de5b250ffa0eb401a743a4e296dd3">GetRawInternalDataPointer</a> () const </td></tr>
<tr class="memdesc:a370de5b250ffa0eb401a743a4e296dd3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the raw internal internal data.  <a href="#a370de5b250ffa0eb401a743a4e296dd3"></a><br/></td></tr>
<tr class="memitem:a56aecf0980d141a525dda92f4b756ae6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6">SceneShadowTechnique</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a56aecf0980d141a525dda92f4b756ae6">GetSceneShadowTechnique</a> () const </td></tr>
<tr class="memdesc:a56aecf0980d141a525dda92f4b756ae6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the currently set shadow technique.  <a href="#a56aecf0980d141a525dda92f4b756ae6"></a><br/></td></tr>
<tr class="memitem:aeaba5d32f77249821ec4ec85cecb1522"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#aeaba5d32f77249821ec4ec85cecb1522">GetShadowColour</a> () const </td></tr>
<tr class="memdesc:aeaba5d32f77249821ec4ec85cecb1522"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the colour being used when casting shadows.  <a href="#aeaba5d32f77249821ec4ec85cecb1522"></a><br/></td></tr>
<tr class="memitem:a244de596b02c103c4b2cb2417bd8fdbb"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a244de596b02c103c4b2cb2417bd8fdbb">GetShadowFarDistance</a> () const </td></tr>
<tr class="memdesc:a244de596b02c103c4b2cb2417bd8fdbb"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the maximum distance from the camera that shadows will be visible.  <a href="#a244de596b02c103c4b2cb2417bd8fdbb"></a><br/></td></tr>
<tr class="memitem:aa863b17f316b6b29592b4be50136b543"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#aa863b17f316b6b29592b4be50136b543">GetShadowTextureCount</a> () const </td></tr>
<tr class="memdesc:aa863b17f316b6b29592b4be50136b543"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the currently set number of textures being used to make texture shadows.  <a href="#aa863b17f316b6b29592b4be50136b543"></a><br/></td></tr>
<tr class="memitem:aece91693b0d176d0c6ec80f3384ee834"><td class="memItemLeft" align="right" valign="top">unsigned short&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#aece91693b0d176d0c6ec80f3384ee834">GetShadowTextureSize</a> () const </td></tr>
<tr class="memdesc:aece91693b0d176d0c6ec80f3384ee834"><td class="mdescLeft">&#160;</td><td class="mdescRight">Retrieve the size of textures.  <a href="#aece91693b0d176d0c6ec80f3384ee834"></a><br/></td></tr>
<tr class="memitem:a4501ef6b70f9572110ce83b7ef9fd48c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a4501ef6b70f9572110ce83b7ef9fd48c">Initialize</a> ()</td></tr>
<tr class="memdesc:a4501ef6b70f9572110ce83b7ef9fd48c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure Items requiring other Managers.   <a href="#a4501ef6b70f9572110ce83b7ef9fd48c"></a><br/></td></tr>
<tr class="memitem:ae14c8c163f1d17eeebf698f7326f1840"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ae14c8c163f1d17eeebf698f7326f1840">PauseAllParticles</a> (bool Pause)</td></tr>
<tr class="memdesc:ae14c8c163f1d17eeebf698f7326f1840"><td class="mdescLeft">&#160;</td><td class="mdescRight">Pauses(or unpauses) all particles stored in this manager.  <a href="#ae14c8c163f1d17eeebf698f7326f1840"></a><br/></td></tr>
<tr class="memitem:ae4b889a919e490edcc3a7d0c32135a82"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ae4b889a919e490edcc3a7d0c32135a82">SetAmbientLight</a> (<a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Red=1.0, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Green=1.0, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Blue=1.0, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Alpha=1.0)</td></tr>
<tr class="memdesc:ae4b889a919e490edcc3a7d0c32135a82"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the ambient light for the scene.  <a href="#ae4b889a919e490edcc3a7d0c32135a82"></a><br/></td></tr>
<tr class="memitem:a887c8fb632f4e64b5aec59900ec545aa"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a887c8fb632f4e64b5aec59900ec545aa">SetAmbientLight</a> (const <a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a> &amp;LightColor)</td></tr>
<tr class="memdesc:a887c8fb632f4e64b5aec59900ec545aa"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the ambient light for the scene, in a single value.  <a href="#a887c8fb632f4e64b5aec59900ec545aa"></a><br/></td></tr>
<tr class="memitem:ae487633b59779be0bd63de98c4656f6d"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ae487633b59779be0bd63de98c4656f6d">SetSceneShadowTechnique</a> (<a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6">SceneShadowTechnique</a> Shadows)</td></tr>
<tr class="memdesc:ae487633b59779be0bd63de98c4656f6d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the type of shadows to be used when rendering the scene.  <a href="#ae487633b59779be0bd63de98c4656f6d"></a><br/></td></tr>
<tr class="memitem:a8bc4a68f885b85a3a023d632d932de65"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8bc4a68f885b85a3a023d632d932de65">SetShadowColour</a> (const <a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a> &amp;ShadowColour)</td></tr>
<tr class="memdesc:a8bc4a68f885b85a3a023d632d932de65"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the colour to be used when casting shadows.  <a href="#a8bc4a68f885b85a3a023d632d932de65"></a><br/></td></tr>
<tr class="memitem:a79b5c4f2edd3301134a6a2513b4deaa1"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a79b5c4f2edd3301134a6a2513b4deaa1">SetShadowFarDistance</a> (const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;FarDist)</td></tr>
<tr class="memdesc:a79b5c4f2edd3301134a6a2513b4deaa1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the maximum distance from the camera that shadows will be visible.  <a href="#a79b5c4f2edd3301134a6a2513b4deaa1"></a><br/></td></tr>
<tr class="memitem:a9d959f0128e2aa14aeb9d425cd9631d2"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a9d959f0128e2aa14aeb9d425cd9631d2">SetShadowTextureCount</a> (const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;Count)</td></tr>
<tr class="memdesc:a9d959f0128e2aa14aeb9d425cd9631d2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the number of textures to be alloted for creating shadows.  <a href="#a9d959f0128e2aa14aeb9d425cd9631d2"></a><br/></td></tr>
<tr class="memitem:a303b871aa1475605d2711239d4d088ac"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a303b871aa1475605d2711239d4d088ac">SetShadowTextureSize</a> (unsigned short Size)</td></tr>
<tr class="memdesc:a303b871aa1475605d2711239d4d088ac"><td class="mdescLeft">&#160;</td><td class="mdescRight">Sets the size of all texture based shadows.  <a href="#a303b871aa1475605d2711239d4d088ac"></a><br/></td></tr>
<tr class="memitem:a6c0d1129cf368b2c1e992a039c1d2c01"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a80fac0c0b67191cb5450bddde74b470e">SkyMethod</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a6c0d1129cf368b2c1e992a039c1d2c01">WhichSky</a> () const </td></tr>
<tr class="memdesc:a6c0d1129cf368b2c1e992a039c1d2c01"><td class="mdescLeft">&#160;</td><td class="mdescRight">get the kind of sy in use  <a href="#a6c0d1129cf368b2c1e992a039c1d2c01"></a><br/></td></tr>
<tr class="inherit_header pub_methods_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&nbsp;Public Member Functions inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:a6ee3249f71f330394e81e349370d57a8 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6ee3249f71f330394e81e349370d57a8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a6ee3249f71f330394e81e349370d57a8">ManagerBase</a> ()</td></tr>
<tr class="memdesc:a6ee3249f71f330394e81e349370d57a8 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor. <br/></td></tr>
<tr class="memitem:ad98752e65db50b66fbb000dedbc07786 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ad98752e65db50b66fbb000dedbc07786">~ManagerBase</a> ()</td></tr>
<tr class="memdesc:ad98752e65db50b66fbb000dedbc07786 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deconstructor.  <a href="#ad98752e65db50b66fbb000dedbc07786"></a><br/></td></tr>
<tr class="memitem:aec6f56b909c0453370771f921d29e7d7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aec6f56b909c0453370771f921d29e7d7"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#aec6f56b909c0453370771f921d29e7d7">ErasePostMainLoopItems</a> ()</td></tr>
<tr class="memdesc:aec6f56b909c0453370771f921d29e7d7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This simply calls <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#af33945c6196024c530990780b2a44cfc" title="This assigns a function to be the callback function to run prior to the main loop.">SetPostMainLoopItems()</a> passing it 0. <br/></td></tr>
<tr class="memitem:a173afcb032bfe374c220d17e24a2ef2c inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a173afcb032bfe374c220d17e24a2ef2c"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a173afcb032bfe374c220d17e24a2ef2c">ErasePreMainLoopItems</a> ()</td></tr>
<tr class="memdesc:a173afcb032bfe374c220d17e24a2ef2c inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This simply calls <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a2837c3c4ec588e4a3cbed39fa8287ef0" title="This assigns a function to be the callback function to run prior to the main loop.">SetPreMainLoopItems()</a> passing it 0. <br/></td></tr>
<tr class="memitem:a70b61244d5182ad40dd056b2664a6aa7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a70b61244d5182ad40dd056b2664a6aa7">GetInterfaceTypeAsString</a> () const </td></tr>
<tr class="memdesc:a70b61244d5182ad40dd056b2664a6aa7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a string of the interface type of this manager.  <a href="#a70b61244d5182ad40dd056b2664a6aa7"></a><br/></td></tr>
<tr class="memitem:a661b5cafe1a0f77c9fbd17c7444d1fea inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a661b5cafe1a0f77c9fbd17c7444d1fea">GetPostMainLoopItems</a> () const </td></tr>
<tr class="memdesc:a661b5cafe1a0f77c9fbd17c7444d1fea inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This returns the Callback that would be called before the main loop items.  <a href="#a661b5cafe1a0f77c9fbd17c7444d1fea"></a><br/></td></tr>
<tr class="memitem:a45c0e893c832e257475321fb1e826f20 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a45c0e893c832e257475321fb1e826f20">GetPreMainLoopItems</a> () const </td></tr>
<tr class="memdesc:a45c0e893c832e257475321fb1e826f20 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This returns the Callback that would be called before the main loop items.  <a href="#a45c0e893c832e257475321fb1e826f20"></a><br/></td></tr>
<tr class="memitem:a2d0d7e80c5a151c9f0d91a0366605cca inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a2d0d7e80c5a151c9f0d91a0366605cca">GetPriority</a> ()</td></tr>
<tr class="memdesc:a2d0d7e80c5a151c9f0d91a0366605cca inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This gets the Priority of this manager.  <a href="#a2d0d7e80c5a151c9f0d91a0366605cca"></a><br/></td></tr>
<tr class="memitem:ade516a30e6d24b4ffd1accf1b1efd948 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ade516a30e6d24b4ffd1accf1b1efd948">IsInitialized</a> ()</td></tr>
<tr class="memdesc:ade516a30e6d24b4ffd1accf1b1efd948 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets whether or not this manager has been initialized.  <a href="#ade516a30e6d24b4ffd1accf1b1efd948"></a><br/></td></tr>
<tr class="memitem:aec26bca08780fd29f49370973f39cbf7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#aec26bca08780fd29f49370973f39cbf7">PostMainLoopItems</a> ()</td></tr>
<tr class="memdesc:aec26bca08780fd29f49370973f39cbf7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This runs any callback that is required after the mainloop items are run.  <a href="#aec26bca08780fd29f49370973f39cbf7"></a><br/></td></tr>
<tr class="memitem:a786e385f50879d6643962ea17b9e13e7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a786e385f50879d6643962ea17b9e13e7">PreMainLoopItems</a> ()</td></tr>
<tr class="memdesc:a786e385f50879d6643962ea17b9e13e7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This runs any callback that is required before the mainloop items are run.  <a href="#a786e385f50879d6643962ea17b9e13e7"></a><br/></td></tr>
<tr class="memitem:af33945c6196024c530990780b2a44cfc inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#af33945c6196024c530990780b2a44cfc">SetPostMainLoopItems</a> (<a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a> PostMainCallback)</td></tr>
<tr class="memdesc:af33945c6196024c530990780b2a44cfc inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This assigns a function to be the callback function to run prior to the main loop.  <a href="#af33945c6196024c530990780b2a44cfc"></a><br/></td></tr>
<tr class="memitem:a2837c3c4ec588e4a3cbed39fa8287ef0 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a2837c3c4ec588e4a3cbed39fa8287ef0">SetPreMainLoopItems</a> (<a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a> PreMainCallback)</td></tr>
<tr class="memdesc:a2837c3c4ec588e4a3cbed39fa8287ef0 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This assigns a function to be the callback function to run prior to the main loop.  <a href="#a2837c3c4ec588e4a3cbed39fa8287ef0"></a><br/></td></tr>
<tr class="memitem:a226c8f18a44d8ef6e261a9ae202ff044 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a226c8f18a44d8ef6e261a9ae202ff044">SetPriority</a> (short int Priority_)</td></tr>
<tr class="memdesc:a226c8f18a44d8ef6e261a9ae202ff044 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This gets the Priority of this manager.  <a href="#a226c8f18a44d8ef6e261a9ae202ff044"></a><br/></td></tr>
<tr class="inherit_header pub_methods_classMezzanine_1_1Singleton"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classMezzanine_1_1Singleton')"><img src="closed.png" alt="-"/>&nbsp;Public Member Functions inherited from <a class="el" href="classMezzanine_1_1Singleton.xhtml">Mezzanine::Singleton< SceneManager ></a></td></tr>
<tr class="memitem:a7174af94e201bdaeab717cdbcbb2e565 inherit pub_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7174af94e201bdaeab717cdbcbb2e565"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a7174af94e201bdaeab717cdbcbb2e565">Singleton</a> ()</td></tr>
<tr class="memdesc:a7174af94e201bdaeab717cdbcbb2e565 inherit pub_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class constructor. <br/></td></tr>
<tr class="memitem:a5e45fc3969b0fae3d095676cc515da1d inherit pub_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5e45fc3969b0fae3d095676cc515da1d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a5e45fc3969b0fae3d095676cc515da1d">~Singleton</a> ()</td></tr>
<tr class="memdesc:a5e45fc3969b0fae3d095676cc515da1d inherit pub_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class destructor. <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:a7263baed88ec60edbffdcaa12ccec53f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7263baed88ec60edbffdcaa12ccec53f"></a>
void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a7263baed88ec60edbffdcaa12ccec53f">UpdateTrackingNodes</a> ()</td></tr>
<tr class="memdesc:a7263baed88ec60edbffdcaa12ccec53f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Updates all nodes tracking other objects. <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:af76f840b982cf140cebe9398b7caedb3"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="af76f840b982cf140cebe9398b7caedb3"></a>
EntityContainer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#af76f840b982cf140cebe9398b7caedb3">Entities</a></td></tr>
<tr class="memdesc:af76f840b982cf140cebe9398b7caedb3"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector storing all the entities in use by this class. <br/></td></tr>
<tr class="memitem:ad80ecee7efce608a526befc597b3d613"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad80ecee7efce608a526befc597b3d613"></a>
LightContainer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ad80ecee7efce608a526befc597b3d613">Lights</a></td></tr>
<tr class="memdesc:ad80ecee7efce608a526befc597b3d613"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector storing all the lights in use by this class. <br/></td></tr>
<tr class="memitem:aacac613a9a842967e1383f5004f76a77"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aacac613a9a842967e1383f5004f76a77"></a>
ParticleContainer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#aacac613a9a842967e1383f5004f76a77">Particles</a></td></tr>
<tr class="memdesc:aacac613a9a842967e1383f5004f76a77"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector storing all the particle effects in use by this class. <br/></td></tr>
<tr class="memitem:a19cb85bda03fce0115a62869b5e819a5"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a19cb85bda03fce0115a62869b5e819a5"></a>
std::set&lt; <a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a19cb85bda03fce0115a62869b5e819a5">TrackingNodes</a></td></tr>
<tr class="memdesc:a19cb85bda03fce0115a62869b5e819a5"><td class="mdescLeft">&#160;</td><td class="mdescRight">Container of nodes currently tracking other objects. <br/></td></tr>
<tr class="memitem:a7550a9ecf7060db5abef99d66c4ef757"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7550a9ecf7060db5abef99d66c4ef757"></a>
WorldNodeContainer&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a7550a9ecf7060db5abef99d66c4ef757">WorldNodes</a></td></tr>
<tr class="memdesc:a7550a9ecf7060db5abef99d66c4ef757"><td class="mdescLeft">&#160;</td><td class="mdescRight">Vector storing all the nodes in use by this class. <br/></td></tr>
<tr class="inherit_header pro_attribs_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&nbsp;Protected Attributes inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:ada3bad0fe77ff2fa7404eea7a5c16264 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ada3bad0fe77ff2fa7404eea7a5c16264">Initialized</a></td></tr>
<tr class="memdesc:ada3bad0fe77ff2fa7404eea7a5c16264 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple bool indicating whether or not this manager has been initialized.  <a href="#ada3bad0fe77ff2fa7404eea7a5c16264"></a><br/></td></tr>
<tr class="memitem:ab27f3f7458b9a6f2a08974d096125ed5 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab27f3f7458b9a6f2a08974d096125ed5">PostMainLoop</a></td></tr>
<tr class="memdesc:ab27f3f7458b9a6f2a08974d096125ed5 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a function pointer to the function that should be called after running Main Loop Items.  <a href="#ab27f3f7458b9a6f2a08974d096125ed5"></a><br/></td></tr>
<tr class="memitem:a1652110258237bc313a02757229d0f47 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a1652110258237bc313a02757229d0f47">PreMainLoop</a></td></tr>
<tr class="memdesc:a1652110258237bc313a02757229d0f47 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a function pointer to the function that should be called before running Main Loop Items.  <a href="#a1652110258237bc313a02757229d0f47"></a><br/></td></tr>
<tr class="memitem:a96fb02bf2f4e8b4afe70dedd0d8c6ac9 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a96fb02bf2f4e8b4afe70dedd0d8c6ac9">Priority</a></td></tr>
<tr class="memdesc:a96fb02bf2f4e8b4afe70dedd0d8c6ac9 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a weighting used by the main loop to decide what order the managers should be called in.  <a href="#a96fb02bf2f4e8b4afe70dedd0d8c6ac9"></a><br/></td></tr>
<tr class="memitem:ae619b4bd732d7345e0ef59ecde6d03cc inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Entresol.xhtml">Entresol</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc">TheEntresol</a></td></tr>
<tr class="memdesc:ae619b4bd732d7345e0ef59ecde6d03cc inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">The actual pointer to the world.  <a href="#ae619b4bd732d7345e0ef59ecde6d03cc"></a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&nbsp;Static Public Member Functions inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:a446009f2bdf870d4a135d65e941bc066 inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a446009f2bdf870d4a135d65e941bc066">GetTypeNameAsString</a> (const ManagerType &amp;ManagerType)</td></tr>
<tr class="memdesc:a446009f2bdf870d4a135d65e941bc066 inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the string form of the type of manager.  <a href="#a446009f2bdf870d4a135d65e941bc066"></a><br/></td></tr>
<tr class="memitem:ae76f56a9d8585b96c3cda9f51368b60a inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">static ManagerType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ae76f56a9d8585b96c3cda9f51368b60a">GetTypeNameFromString</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;ManagerName)</td></tr>
<tr class="memdesc:ae76f56a9d8585b96c3cda9f51368b60a inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the type of manager requested from a string.  <a href="#ae76f56a9d8585b96c3cda9f51368b60a"></a><br/></td></tr>
<tr class="inherit_header pub_static_methods_classMezzanine_1_1Singleton"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classMezzanine_1_1Singleton')"><img src="closed.png" alt="-"/>&nbsp;Static Public Member Functions inherited from <a class="el" href="classMezzanine_1_1Singleton.xhtml">Mezzanine::Singleton< SceneManager ></a></td></tr>
<tr class="memitem:a78fc425584913f0b2c615ec440871a67 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classMezzanine_1_1SceneManager.xhtml">SceneManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67">GetSingletonPtr</a> ()</td></tr>
<tr class="memdesc:a78fc425584913f0b2c615ec440871a67 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fetches a pointer to the singleton.  <a href="#a78fc425584913f0b2c615ec440871a67"></a><br/></td></tr>
<tr class="memitem:a554165fe3e4b594b678d64215fd7a6f9 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a554165fe3e4b594b678d64215fd7a6f9">SingletonValid</a> ()</td></tr>
<tr class="memdesc:a554165fe3e4b594b678d64215fd7a6f9 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if the singleton pointer is valid.  <a href="#a554165fe3e4b594b678d64215fd7a6f9"></a><br/></td></tr>
<tr class="inherit_header pro_static_attribs_classMezzanine_1_1Singleton"><td colspan="2" onclick="javascript:toggleInherit('pro_static_attribs_classMezzanine_1_1Singleton')"><img src="closed.png" alt="-"/>&nbsp;Static Protected Attributes inherited from <a class="el" href="classMezzanine_1_1Singleton.xhtml">Mezzanine::Singleton< SceneManager ></a></td></tr>
<tr class="memitem:a0db9959ccd7daa1345f4567aa0b0655d inherit pro_static_attribs_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0db9959ccd7daa1345f4567aa0b0655d"></a>
static <a class="el" href="classMezzanine_1_1SceneManager.xhtml">SceneManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>SingletonPtr</b></td></tr>
</table>
<a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>This class contains utilities and functions to allow the manipulation of the Graphical scene, rather then the physics inside, or the object inside. </p>
<p>This class contains functions that allow the manipulation of lighting, skyboxes, internal scenemanager types, and more. </p>

<p>Definition at line <a class="el" href="scenemanager_8h_source.xhtml#l00083">83</a> of file <a class="el" href="scenemanager_8h_source.xhtml">scenemanager.h</a>.</p>
</div><h2>Member Enumeration Documentation</h2>
<a class="anchor" id="a8149cd1ec188e0d57935d71c6a7134c6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6">Mezzanine::SceneManager::SceneShadowTechnique</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>needs to be documented </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a8149cd1ec188e0d57935d71c6a7134c6aeedc28307131c43b9ae0bff12c8b1cda"></a>SST_None</em>&nbsp;</td><td>
<p>No shadows. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a8149cd1ec188e0d57935d71c6a7134c6a616375ae458dbd612ff9745895d7e1f1"></a>SST_Stencil_Modulative</em>&nbsp;</td><td>
<p>Stencil shadow technique which renders all shadow volumes as a modulation after all the non-transparent areas have been rendered. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a8149cd1ec188e0d57935d71c6a7134c6a216c1b4f5e8b891ae9e74abf48790ec8"></a>SST_Stencil_Additive</em>&nbsp;</td><td>
<p>Stencil shadow technique which renders each light as a separate additive pass to the scene. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a8149cd1ec188e0d57935d71c6a7134c6acfa2f5f4596184169e9a6495273fe6c7"></a>SST_Texture_Modulative</em>&nbsp;</td><td>
<p>Texture-based shadow technique which involves a monochrome render-to-texture of the shadow caster and a projection of that texture onto the shadow receivers as a modulative pass. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a8149cd1ec188e0d57935d71c6a7134c6a966cfba4dd29dd9248c6283ec37e3d8f"></a>SST_Texture_Additive</em>&nbsp;</td><td>
<p>Texture-based shadow technique which involves a render-to-texture of the shadow caster and a projection of that texture onto the shadow receivers, built up per light as additive passes. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a8149cd1ec188e0d57935d71c6a7134c6ae673066d535f340debfa4a6210d6b0ce"></a>SST_Texture_Additive_Integrated</em>&nbsp;</td><td>
<p>Texture-based shadow technique which involves a render-to-texture of the shadow caster and a projection of that texture on to the shadow receivers, with the usage of those shadow textures completely controlled by the materials of the receivers. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a8149cd1ec188e0d57935d71c6a7134c6ab4ff7a97c53ca46f7628541c9e39309c"></a>SST_Texture_Modulative_Integrated</em>&nbsp;</td><td>
<p>Texture-based shadow technique which involves a render-to-texture of the shadow caster and a projection of that texture on to the shadow receivers, with the usage of those shadow textures completely controlled by the materials of the receivers. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="scenemanager_8h_source.xhtml#l00092">92</a> of file <a class="el" href="scenemanager_8h_source.xhtml">scenemanager.h</a>.</p>

</div>
</div>
<a class="anchor" id="a80fac0c0b67191cb5450bddde74b470e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="classMezzanine_1_1SceneManager.xhtml#a80fac0c0b67191cb5450bddde74b470e">Mezzanine::SceneManager::SkyMethod</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used to help identify which method is used to draw the sky, if any. </p>
<dl><dt><b>Enumerator: </b></dt><dd><table border="0" cellspacing="2" cellpadding="0">
<tr><td valign="top"><em><a class="anchor" id="a80fac0c0b67191cb5450bddde74b470ead62543178728c0bcd4e92d463860e571"></a>SkyNone</em>&nbsp;</td><td>
<p>No Sky rendering at all. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a80fac0c0b67191cb5450bddde74b470ea95a4503b6f35da0286b384931cb484b8"></a>SkyPlane</em>&nbsp;</td><td>
<p>A flat plane use to draw the sky. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a80fac0c0b67191cb5450bddde74b470ea4c80b5621b7b8c3decfc687561b8adf4"></a>SkyBox</em>&nbsp;</td><td>
<p>A box using 5 Rectangles to draw the sky. </p>
</td></tr>
<tr><td valign="top"><em><a class="anchor" id="a80fac0c0b67191cb5450bddde74b470eaa0c0e7a37ae3ab8ff27a9b7012eaf7fe"></a>SkyDome</em>&nbsp;</td><td>
<p>A multifaceted hemispherical dome, the most sophisticated sky background. </p>
</td></tr>
</table>
</dd>
</dl>

<p>Definition at line <a class="el" href="scenemanager_8h_source.xhtml#l00104">104</a> of file <a class="el" href="scenemanager_8h_source.xhtml">scenemanager.h</a>.</p>

</div>
</div>
<h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="add7232bdd3758cbde34e9cf46d350f68"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::SceneManager::SceneManager </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>InternalManagerTypeName</em> = <code>&quot;DefaultSceneManager&quot;</code></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class Constructor. </p>
<p>Standard class initialization constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">InternalManagerTypeName</td><td>The name of the scenemanager type to be constructed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae9b92ffcd16960614a4d8e51cd3711b3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::SceneManager::SceneManager </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;&#160;</td>
          <td class="paramname"><em>XMLNode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">XMLNode</td><td>The node of the xml document to construct from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8becb78de62a9e5c66c213066e7a421b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::SceneManager::~SceneManager </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Class Destructor. </p>
<p>The class destructor. </p>

</div>
</div>
<h2>Member Function Documentation</h2>
<a class="anchor" id="ae5db6928dd653974b1d5b9076e9be2e2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::_RegisterTrackingNode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> *&#160;</td>
          <td class="paramname"><em>Tracker</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Informs this manager that a node needs periodic updates for tracking. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Tracker</td><td>The node that is getting tracking enabled. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a850cf7390472c3a80aa9b278a8c82268"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::_UnRegisterTrackingNode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> *&#160;</td>
          <td class="paramname"><em>Tracker</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Informs this manager a node is no longer tracking another object. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Tracker</td><td>The node that is getting tracking disabled. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a303da31480a3e9d5a854b6c9f4f6f691"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a1e2d6cd6454bb900b31762eab8effc8b">EntityIterator</a> Mezzanine::SceneManager::BeginEntity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get an EntityIterator to the first Entity*. </p>
<dl class="section return"><dt>Returns</dt><dd>An EntityIterator to the first Entity* </dd></dl>

</div>
</div>
<a class="anchor" id="a2310c117ea0c49a4d1d6652d16fe2ddf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a6837ab4cd75f30af8159f18db973e497">ConstEntityIterator</a> Mezzanine::SceneManager::BeginEntity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a ConstEntityIterator to the first Entity*. </p>
<dl class="section return"><dt>Returns</dt><dd>A ConstEntityIterator to the first Entity* </dd></dl>

</div>
</div>
<a class="anchor" id="a210aca02367a8783fe425e5c3b0ee1e9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a70382bc80d3905971a04a77d5c6bcb33">LightIterator</a> Mezzanine::SceneManager::BeginLight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a LightIterator to the first Light*. </p>
<dl class="section return"><dt>Returns</dt><dd>A LightIterator to the first Light* </dd></dl>

</div>
</div>
<a class="anchor" id="acf4938ac04501140a6bf365eea1585e2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a04a257d3df126110aa545e856853a663">ConstLightIterator</a> Mezzanine::SceneManager::BeginLight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a ConstLightIterator to the first Light*. </p>
<dl class="section return"><dt>Returns</dt><dd>A ConstLightIterator to the first Light* </dd></dl>

</div>
</div>
<a class="anchor" id="a6512744f5637069c2f1c36517f0dd5c8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a5f3bd65fb09c7a08202083cc48e46fe7">ParticleEffectIterator</a> Mezzanine::SceneManager::BeginParticleEffect </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a ParticleEffectIterator to the first ParticleEffect*. </p>
<dl class="section return"><dt>Returns</dt><dd>A ParticleEffectIterator to the first ParticleEffect* </dd></dl>

</div>
</div>
<a class="anchor" id="a1cc41384cda53a8b0061d99f6646dfa0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ab1213cec08b0bc15ea58ed0d3617b887">ConstParticleEffectIterator</a> Mezzanine::SceneManager::BeginParticleEffect </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a ConstParticleEffectIterator to the first ParticleEffect*. </p>
<dl class="section return"><dt>Returns</dt><dd>A ConstParticleEffectIterator to the first ParticleEffect* </dd></dl>

</div>
</div>
<a class="anchor" id="a3288784ada5dc7322f5ca0d6f4323f65"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a498b2390acb176a185e1026d23b773f0">WorldNodeIterator</a> Mezzanine::SceneManager::BeginWorldNode </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a WorldNodeIterator to the first WorldNode*. </p>
<dl class="section return"><dt>Returns</dt><dd>A WorldNodeIterator to the first WorldNode* </dd></dl>

</div>
</div>
<a class="anchor" id="a0aa6eae7f9f66c5c31c346fd87c0c724"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ad60b6e15daa2395944d395b4e307b905">ConstWorldNodeIterator</a> Mezzanine::SceneManager::BeginWorldNode </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a ConstWorldNodeIterator to the first WorldNode*. </p>
<dl class="section return"><dt>Returns</dt><dd>A ConstWorldNodeIterator to the first WorldNode* </dd></dl>

</div>
</div>
<a class="anchor" id="ad68fe54cbb3fe79921ab4ccff6dcff79"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Entity.xhtml">Entity</a>* Mezzanine::SceneManager::CreateEntity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>EntName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>MeshName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates an entity. </p>
<p>Entities are objects that have zero physical representation, they are essentially meshes in world space. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">EntName</td><td>The name to be given to this entity. </td></tr>
    <tr><td class="paramname">MeshName</td><td>The name of the mesh to construct this entity from. </td></tr>
    <tr><td class="paramname">Group</td><td>The resource group to find the mesh. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the entity class which was created by this function. </dd></dl>

</div>
</div>
<a class="anchor" id="aedc83e187f7b0b9307e3c0d277ce8244"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Light.xhtml">Light</a>* Mezzanine::SceneManager::CreateLight </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a dynamic light. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to be given to this light. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the light class which was created by this function. </dd></dl>

</div>
</div>
<a class="anchor" id="a9c3ebe1096b137cd737f6275f61b51c9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1ParticleEffect.xhtml">ParticleEffect</a>* Mezzanine::SceneManager::CreateParticleEffect </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Template</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a particle effect. </p>
<p>Particle effects are useful when trying to create visual effects for rain, smoke, explosions, fireworks, etc.. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to be given to this particle effect. </td></tr>
    <tr><td class="paramname">Template</td><td>The particle script (from a .particle file) to base this particle effect on. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the particle effect class which was created by this function. </dd></dl>

</div>
</div>
<a class="anchor" id="aaa3c4b8d15aa74c767a21d725de25ec7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::CreateSkyBox </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Material</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>DrawFirst</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a>&#160;</td>
          <td class="paramname"><em>Orientation</em> = <code><a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a>()</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a skybox for use in making a sky. </p>
<p>Like skyplanes, only one can exist per scene. Unlike skyplanes, skyboxes will be applied individually to each camera in the scene. The skybox will move with the camera, so as a result the camera will never be able to "touch" the sky. Skyboxes are more performance intensive then skyplanes. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Material</td><td>The name of the material to be applied to the skybox. Note: This is not referring to the filename, but the specific material script within the file. </td></tr>
    <tr><td class="paramname">Group</td><td>The resource group where the material can be found. </td></tr>
    <tr><td class="paramname">Distance</td><td>The distance from the camera where the skybox is found. This is in world units. </td></tr>
    <tr><td class="paramname">DrawFirst</td><td>Whether or not the skybox should be the first thing rendered in the scene. Usually you will want this to be true as it'll ensure all other objects are rendered on top of it. </td></tr>
    <tr><td class="paramname">Orientation</td><td>Optional quaternion to rotate the orientation of the skybox. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a5862eefa87c9fcda9fdba7fa69efd6cf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::CreateSkyDome </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Material</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Distance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Curvature</em> = <code>10.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Tiling</em> = <code>8.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>DrawFirst</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a>&#160;</td>
          <td class="paramname"><em>Orientation</em> = <code><a class="el" href="classMezzanine_1_1Quaternion.xhtml">Quaternion</a>()</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>XSegments</em> = <code>16</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>YSegments</em> = <code>16</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a skydome for use in making a sky. </p>
<p>Like the other two types of sky's, their can be only one skydome per scene. Skydomes much like skyboxes, except they have 5 sides(the bottom side is missing), and they bow each of the sides to make the dome. In all other respects they are the same. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Material</td><td>The name of the material to be applied to the skydome. Note: This is not referring to the filename, but the specific material script within the file. </td></tr>
    <tr><td class="paramname">Group</td><td>The resource group where the material can be found. </td></tr>
    <tr><td class="paramname">Distance</td><td>The distance from the camera where the skydome is found. This is in world units. </td></tr>
    <tr><td class="paramname">Curvature</td><td>Curvature of the dome. Usually you want this value to be between 2 and 65. </td></tr>
    <tr><td class="paramname">Tiling</td><td>The number of times to tile the texture or textures listed in the material script across the skydome. </td></tr>
    <tr><td class="paramname">DrawFirst</td><td>Whether or not the skybox should be the first thing rendered in the scene. Usually you will want this to be true as it'll ensure all other objects are rendered on top of it. </td></tr>
    <tr><td class="paramname">Orientation</td><td>Optional quaternion to rotate the orientation of the skydome. </td></tr>
    <tr><td class="paramname">XSegments</td><td>The number of segments, or boxes, the skydome consists of on the dome's X axis. </td></tr>
    <tr><td class="paramname">YSegments</td><td>The number of segments, or boxes, the skydome consists of on the dome's Y axis. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6cea438ed9b13cf613b07e2dd6467c4e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::CreateSkyPlane </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1Plane.xhtml">Plane</a> &amp;&#160;</td>
          <td class="paramname"><em>SkyPlane_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Material</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Scale</em> = <code>1000.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Tiling</em> = <code>10.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>DrawFirst</em> = <code>true</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Bow</em> = <code>0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>XSegments</em> = <code>1</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>YSegments</em> = <code>1</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a skyplane for use in making a sky. </p>
<p>Only one skyplane can exist in a scene. Making a new one will remove the old one. Skyplanes are flat planes that face in one direction. They are ideal for levels with surrounding mountains or anything where the horizon is not visable. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">SkyPlane</td><td>The plane that will become the sky. </td></tr>
    <tr><td class="paramname">Material</td><td>The name of the material to be applied to the skyplane. Note: This is not referring to the filename, but the specific material script within the file. </td></tr>
    <tr><td class="paramname">Group</td><td>The resource group where the material can be found. </td></tr>
    <tr><td class="paramname">Scale</td><td>The scaling to be applied to the skyplane. This may need to be tweaked based on how high you set the plane off the ground. </td></tr>
    <tr><td class="paramname">Tiling</td><td>The number of times to tile the texture or textures listed in the material script across the skyplane. </td></tr>
    <tr><td class="paramname">DrawFirst</td><td>Whether or not the skyplane should be the first thing rendered in the scene. Usually you will want this to be true as it'll ensure all other objects are rendered on top of it. </td></tr>
    <tr><td class="paramname">Bow</td><td>This will add curvature to the skyplane if set above zero. Note: Use small numbers. A bow of 1.5 should be noticable. </td></tr>
    <tr><td class="paramname">XSegments</td><td>The number of segments, or boxes, the skyplane consists of on the planes X axis. This is usful when giving the skyplane a bow. By default the skyplane is just one massive box. </td></tr>
    <tr><td class="paramname">YSegments</td><td>The number of segments, or boxes, the skyplane consists of on the planes Y axis. This is usful when giving the skyplane a bow. By default the skyplane is just one massive box. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a66c0988bf97c20d5d3ddb9e7dc924296"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a>* Mezzanine::SceneManager::CreateWorldNode </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Creates a world node that can be manipulated. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to be given to the node. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a87d26a862306dcf859ff0dee2e8a6834"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::DestroyEntity </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Entity.xhtml">Entity</a> *&#160;</td>
          <td class="paramname"><em>ToBeDestroyed</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deletes an entity and removes all trace of it from the manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToBeDestroyed</td><td>The entity to be destroyed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad05338bb291dc8535b8f691378682851"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::DestroyLight </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Light.xhtml">Light</a> *&#160;</td>
          <td class="paramname"><em>ToBeDestroyed</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deletes a light and removes all trace of it from the manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToBeDestroyed</td><td>The light to be destroyed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab6123477f052d34a357db85a8284c8be"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::DestroyNode </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a> *&#160;</td>
          <td class="paramname"><em>ToBeDestroyed</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deletes a node and removes all trace of it from the manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToBeDestroyed</td><td>The node to be destroyed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad91db10c13517ff6a31be64739ca2f27"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::DestroyParticleEffect </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1ParticleEffect.xhtml">ParticleEffect</a> *&#160;</td>
          <td class="paramname"><em>ToBeDestroyed</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deletes a particle effect and removes all trace of it from the manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ToBeDestroyed</td><td>The particle effect to be destroyed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="afda2cf0379dbfb7ca1f53950c489cdae"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::DisableSkyBox </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disables the currently active skybox. </p>
<p>Using this function effectively deletes the skybox, so you will have to provide a new set of parameters if you wish to re-create the skybox. </p>

</div>
</div>
<a class="anchor" id="a505c371bfe64cd5a07cecd6ece4c8ed8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::DisableSkyDome </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disables the currently active skydome. </p>
<p>Using this function effectively deletes the skydome, so you will have to provide a new set of parameters if you wish to re-create the skydome. </p>

</div>
</div>
<a class="anchor" id="ac60ecdd9745803cf7d99af3a87fa6a36"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::DisableSkyPlane </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Disables the currently active skyplane. </p>
<p>Using this function effectively deletes the skyplane, so you will have to provide a new set of parameters if you wish to re-create the skyplane. </p>

</div>
</div>
<a class="anchor" id="aa6bed5e6cbaab40a465bb20267f7ef29"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::SceneManager::DoMainLoopItems </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The main loop calls this once per frame.  </p>
<p>This is where each manager is expected to put anything that needs to be run each iteration of the main loop  </p>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a4ee29e4baf6c4b9a3bfec1b2258d5cd2">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="a21045432d175ce80101f03b8bec66efc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a1e2d6cd6454bb900b31762eab8effc8b">EntityIterator</a> Mezzanine::SceneManager::EndEntity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a EntityIterator to one past the last Entity*. </p>
<dl class="section return"><dt>Returns</dt><dd>A EntityIterator to one past the last Entity* </dd></dl>

</div>
</div>
<a class="anchor" id="a8f7a960df2f673f06f51c61c8f2a3db0"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a6837ab4cd75f30af8159f18db973e497">ConstEntityIterator</a> Mezzanine::SceneManager::EndEntity </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a ConstEntityIterator to one past the last Entity*. </p>
<dl class="section return"><dt>Returns</dt><dd>A ConstEntityIterator to one past the last Entity* </dd></dl>

</div>
</div>
<a class="anchor" id="afd5cf87086d25174424066f3ca7a1606"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a70382bc80d3905971a04a77d5c6bcb33">LightIterator</a> Mezzanine::SceneManager::EndLight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a LightIterator to one past the last Light*. </p>
<dl class="section return"><dt>Returns</dt><dd>A LightIterator to one past the last Light* </dd></dl>

</div>
</div>
<a class="anchor" id="ae60793299a0392704b0f37617384d8a4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a04a257d3df126110aa545e856853a663">ConstLightIterator</a> Mezzanine::SceneManager::EndLight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a ConstLightIterator to one past the last Light*. </p>
<dl class="section return"><dt>Returns</dt><dd>A ConstLightIterator to one past the last Light* </dd></dl>

</div>
</div>
<a class="anchor" id="a83f4770917bcbdcb499b6d9aba7b63cb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a5f3bd65fb09c7a08202083cc48e46fe7">ParticleEffectIterator</a> Mezzanine::SceneManager::EndParticleEffect </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a ParticleEffectIterator to one past the last ParticleEffect*. </p>
<dl class="section return"><dt>Returns</dt><dd>A ParticleEffectIterator to one past the last ParticleEffect* </dd></dl>

</div>
</div>
<a class="anchor" id="a8ee3d04a551484d9b6fb8c2cb592a22f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ab1213cec08b0bc15ea58ed0d3617b887">ConstParticleEffectIterator</a> Mezzanine::SceneManager::EndParticleEffect </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a ConstParticleEffectIterator to one past the last ParticleEffect*. </p>
<dl class="section return"><dt>Returns</dt><dd>A ConstParticleEffectIterator to one past the last ParticleEffect* </dd></dl>

</div>
</div>
<a class="anchor" id="ae6060ca191957909db40be3b5cbdfe64"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a498b2390acb176a185e1026d23b773f0">WorldNodeIterator</a> Mezzanine::SceneManager::EndWorldNode </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a WorldNodeIterator to one past the last WorldNode*. </p>
<dl class="section return"><dt>Returns</dt><dd>A WorldNodeIterator to one past the last WorldNode* </dd></dl>

</div>
</div>
<a class="anchor" id="a8052a320336f60583306690c54369e4f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#ad60b6e15daa2395944d395b4e307b905">ConstWorldNodeIterator</a> Mezzanine::SceneManager::EndWorldNode </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a ConstWorldNodeIterator to one past the last WorldNode*. </p>
<dl class="section return"><dt>Returns</dt><dd>A ConstWorldNodeIterator to one past the last WorldNode* </dd></dl>

</div>
</div>
<a class="anchor" id="ab23edaf46108b6cd00e64d4338bfc993"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a> Mezzanine::SceneManager::GetAmbientLight </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve the level of the ambient light. </p>
<dl class="section return"><dt>Returns</dt><dd>A <a class="el" href="classMezzanine_1_1ColourValue.xhtml" title="This is a simple class for holding 4 reals representing the colour any give object or lightsource can...">ColourValue</a> with the ambient light levels </dd></dl>

</div>
</div>
<a class="anchor" id="a6afd96e4004e7e7022d0b524bb81f26f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Entity.xhtml">Entity</a>* Mezzanine::SceneManager::GetEntity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets an already created entity by name. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the entity of the specified name. </dd></dl>

</div>
</div>
<a class="anchor" id="ad42e6135932770fb367e94e8fd3c4df1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Entity.xhtml">Entity</a>* Mezzanine::SceneManager::GetEntity </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets an already created entity by index. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the entity at the specified index. </dd></dl>

</div>
</div>
<a class="anchor" id="aaea5120c22b48a261118884aefe5def9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Ogre::SceneManager* Mezzanine::SceneManager::GetGraphicsWorldPointer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the internal <a class="el" href="namespaceOgre.xhtml">Ogre</a> Scene Manager pointer. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the ogre Scene Manager. </dd></dl>

</div>
</div>
<a class="anchor" id="a76fd211471e399bda338398abb007e39"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Mezzanine::SceneManager::GetImplementationTypeName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This Allows any manager name to be sent to a stream. Primarily used for logging.  </p>
<p><dl class="section return"><dt>Returns</dt><dd>This returns a String that contains the name. </dd></dl>
 </p>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ac41d60f674e75d3d16b5544f4feb199c">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="a8c4ec8f6e62ac5627536f40e551dcfc8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual ManagerType Mezzanine::SceneManager::GetInterfaceType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This returns the type of this manager.  </p>
<p>This is intended to make using and casting from Manager base easier. With this is is possible to cast from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml" title="This is the base class from which all the World Managers inherit.">ManagerBase</a> to the correct Manager Type. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a ManagerTypeName to identify what this can be safely cast to. </dd></dl>
 </p>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a388aa37ed71b8667785b789c137aa8c6">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="ab4398c1ad9016adb05df2f8065e8f896"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Light.xhtml">Light</a>* Mezzanine::SceneManager::GetLight </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets an already created light by name. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the light of the specified name. </dd></dl>

</div>
</div>
<a class="anchor" id="abe0006a4aaff289483648fd57c71e45f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Light.xhtml">Light</a>* Mezzanine::SceneManager::GetLight </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets an already created light by index. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the light at the specified index. </dd></dl>

</div>
</div>
<a class="anchor" id="a379d628c1a33f472ad40bb42c7ccdf61"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a63cd699ac54b73953f35ec9cfc05e506">ConstString</a>&amp; Mezzanine::SceneManager::GetName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the name of this manager. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the name of this manager. </dd></dl>

</div>
</div>
<a class="anchor" id="ac8f0a055fd53494902b70b01ab5672c4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a>* Mezzanine::SceneManager::GetNode </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets an already created node by name. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the node of the specified name, or 0 if no matching <a class="el" href="classMezzanine_1_1WorldNode.xhtml" title="This is a helper class which non-physics objects, such as lights, cameras, ribbon trails...">WorldNode</a> could be Found.</dd></dl>
<p>This runs in Linear time </p>

</div>
</div>
<a class="anchor" id="af9b4ef3b9bd0da68703dc11a324772f1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1WorldNode.xhtml">WorldNode</a>* Mezzanine::SceneManager::GetNode </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets an already created node by index. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the node at the specified index.</dd></dl>
<p>This runs in constant time. </p>

</div>
</div>
<a class="anchor" id="a409f664d4383b33700cba40f7ab99bbb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::SceneManager::GetNumEntities </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the number of entities created and stored in this manager. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the number of entities this manager is storing. </dd></dl>

</div>
</div>
<a class="anchor" id="aa1cafdcd750fda2452db42cb3ddf365c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::SceneManager::GetNumLights </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the number of lights created and stored in this manager. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the number of lights this manager is storing. </dd></dl>

</div>
</div>
<a class="anchor" id="ae78bda0af2b0f11f32d283d5cf83086f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::SceneManager::GetNumNodes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the number of nodes created and stored in this manager. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the number of nodes this manager is storing.</dd></dl>
<p>This runs in constant time, this data is cached constantly. </p>

</div>
</div>
<a class="anchor" id="a730f48b359f0028d7db491facd95d95d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::SceneManager::GetNumParticleEffects </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the number of particle effects created and stored in this manager. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns the number of particle effects this manager is storing. </dd></dl>

</div>
</div>
<a class="anchor" id="aa4a86d44bacdf23aa5aae6eb583ea1e5"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1ParticleEffect.xhtml">ParticleEffect</a>* Mezzanine::SceneManager::GetParticleEffect </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets an already created particle effect by name. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the particle effect of the specified name. </dd></dl>

</div>
</div>
<a class="anchor" id="a3dffb309e13b90117575e5887d65f146"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1ParticleEffect.xhtml">ParticleEffect</a>* Mezzanine::SceneManager::GetParticleEffect </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Index</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets an already created particle effect by index. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the particle effect at the specified index. </dd></dl>

</div>
</div>
<a class="anchor" id="a370de5b250ffa0eb401a743a4e296dd3"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Internal::SceneManagerData* Mezzanine::SceneManager::GetRawInternalDataPointer </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the raw internal internal data. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a to the raw internal data. </dd></dl>

</div>
</div>
<a class="anchor" id="a56aecf0980d141a525dda92f4b756ae6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6">SceneShadowTechnique</a> Mezzanine::SceneManager::GetSceneShadowTechnique </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the currently set shadow technique. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a SceneShadowTechnique enum value representing the currently set shadow technique. </dd></dl>

</div>
</div>
<a class="anchor" id="aeaba5d32f77249821ec4ec85cecb1522"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a> Mezzanine::SceneManager::GetShadowColour </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the colour being used when casting shadows. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1ColourValue.xhtml" title="This is a simple class for holding 4 reals representing the colour any give object or lightsource can...">ColourValue</a> representing the colour used when casting shadows. </dd></dl>

</div>
</div>
<a class="anchor" id="a244de596b02c103c4b2cb2417bd8fdbb"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> Mezzanine::SceneManager::GetShadowFarDistance </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the maximum distance from the camera that shadows will be visible. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a Real representing the maximum distance from the camera shadows will be rendered. </dd></dl>

</div>
</div>
<a class="anchor" id="aa863b17f316b6b29592b4be50136b543"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::SceneManager::GetShadowTextureCount </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Gets the currently set number of textures being used to make texture shadows. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a Whole indicating the number of textures used to make texture shadows. </dd></dl>

</div>
</div>
<a class="anchor" id="aece91693b0d176d0c6ec80f3384ee834"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned short Mezzanine::SceneManager::GetShadowTextureSize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Retrieve the size of textures. </p>
<dl class="section return"><dt>Returns</dt><dd>An unsigned short which is the size of the textures. </dd></dl>

</div>
</div>
<a class="anchor" id="a4501ef6b70f9572110ce83b7ef9fd48c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::SceneManager::Initialize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Configure Items requiring other Managers.  </p>
<p>If you are using the <a class="el" href="classMezzanine_1_1World.xhtml">Mezzanine::World</a> this is called when Mezzanine::World::GameInit() is called. It is expected that by the time this is called either ManagerBase::ManagerBase(World*) or ManagerBase::SetGameWorld(World*) will have been called. This is where all configuration that requires atleast one other manager on the <a class="el" href="classMezzanine_1_1World.xhtml">Mezzanine::World</a> to exist.<br/>
<br/>
 Yes we know it is spelled wrong, but are Zs cooler anyway.  </p>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a864e3cac11928a602c1db28fa2d52ee2">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="ae14c8c163f1d17eeebf698f7326f1840"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::PauseAllParticles </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>Pause</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Pauses(or unpauses) all particles stored in this manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Pause</td><td>Will pause all Particles if true, unpause if false. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae4b889a919e490edcc3a7d0c32135a82"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::SetAmbientLight </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Red</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Green</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Blue</em> = <code>1.0</code>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>Alpha</em> = <code>1.0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the ambient light for the scene. </p>
<p>Not all scene's will need ambient light. Ambient light is light that hits all objects from all directions. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Red</td><td>The value representing the amount of red color in the ambient light. </td></tr>
    <tr><td class="paramname">Green</td><td>The value representing the amount of green color in the ambient light. </td></tr>
    <tr><td class="paramname">Blue</td><td>The value representing the amount of blue color in the ambient light. </td></tr>
    <tr><td class="paramname">Alpha</td><td>The value representing the transparency of the color in the ambient light. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a887c8fb632f4e64b5aec59900ec545aa"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::SetAmbientLight </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a> &amp;&#160;</td>
          <td class="paramname"><em>LightColor</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the ambient light for the scene, in a single value. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Red</td><td>The value representing the amount of red color in the ambient light. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ae487633b59779be0bd63de98c4656f6d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::SetSceneShadowTechnique </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a8149cd1ec188e0d57935d71c6a7134c6">SceneShadowTechnique</a>&#160;</td>
          <td class="paramname"><em>Shadows</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the type of shadows to be used when rendering the scene. </p>
<p>The scene manager defaults to no shadows. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Shadows</td><td>The technique to be applied, see SceneShadowTechnique enum for more info. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a8bc4a68f885b85a3a023d632d932de65"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::SetShadowColour </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1ColourValue.xhtml">ColourValue</a> &amp;&#160;</td>
          <td class="paramname"><em>ShadowColour</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the colour to be used when casting shadows. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ShadowColour</td><td>The colour desired to be used when rendering shadows. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a79b5c4f2edd3301134a6a2513b4deaa1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::SetShadowFarDistance </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> &amp;&#160;</td>
          <td class="paramname"><em>FarDist</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the maximum distance from the camera that shadows will be visible. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">FarDist</td><td>The maximum distance from the camera shadows will be rendered. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9d959f0128e2aa14aeb9d425cd9631d2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::SetShadowTextureCount </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> &amp;&#160;</td>
          <td class="paramname"><em>Count</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the number of textures to be alloted for creating shadows. </p>
<p>Defaults to 1. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Count</td><td>The amount of textures to be used for creating texture-based shadows. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a303b871aa1475605d2711239d4d088ac"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::SceneManager::SetShadowTextureSize </td>
          <td>(</td>
          <td class="paramtype">unsigned short&#160;</td>
          <td class="paramname"><em>Size</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Sets the size of all texture based shadows. </p>
<p>This defaults to 512. Sizes must be a power of 2. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Size</td><td>The size of all textures to be used with shadows, in KB(?). </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a6c0d1129cf368b2c1e992a039c1d2c01"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1SceneManager.xhtml#a80fac0c0b67191cb5450bddde74b470e">SkyMethod</a> Mezzanine::SceneManager::WhichSky </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>get the kind of sy in use </p>
<dl class="section return"><dt>Returns</dt><dd>The kind of sky in use </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/sqeaky/Code/Mezzanine/Mezzanine/src/<a class="el" href="scenemanager_8h_source.xhtml">scenemanager.h</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat Mar 30 2013 10:40:52 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1.2</small></address>
</body>
</html>
