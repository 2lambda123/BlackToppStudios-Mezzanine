<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::Physics Namespace Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">May 19, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li class="current"><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="namespaces.xhtml"><span>Namespace&#160;List</span></a></li>
      <li><a href="namespacemembers.xhtml"><span>Namespace&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml">Physics</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::Physics Namespace Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This namespace is for all the classes belonging to the <a class="el" href="namespaceMezzanine_1_1Physics.xhtml" title="This namespace is for all the classes belonging to the Physics Subsystem.">Physics</a> Subsystem.  
<a href="#details">More...</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1ActorSoftCollisionShape.xhtml">ActorSoftCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A collision shape for soft actors.  <a href="classMezzanine_1_1Physics_1_1ActorSoftCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1BoxCollisionShape.xhtml">BoxCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A box physics shape.  <a href="classMezzanine_1_1Physics_1_1BoxCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1CapsuleCollisionShape.xhtml">CapsuleCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A capsule physics shape.  <a href="classMezzanine_1_1Physics_1_1CapsuleCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1Collision.xhtml">Collision</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is an event class used to track collsions in the physics world.  <a href="classMezzanine_1_1Physics_1_1Collision.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1Physics_1_1CollisionInternalData.xhtml">CollisionInternalData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to insulate the interface from the implementation details for bullet.  <a href="structMezzanine_1_1Physics_1_1CollisionInternalData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class for all collision shapes.  <a href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShapeDeSerializer.xhtml">CollisionShapeDeSerializer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A tool to aid in deserialization for the specific instances that DeSerialization CollisionShapes other ways does not make sense.  <a href="classMezzanine_1_1Physics_1_1CollisionShapeDeSerializer.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml">CompoundCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A collision shape composed of many other collision shapes placed and oriented in local space.  <a href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1ConeCollisionShape.xhtml">ConeCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A cone physics shape.  <a href="classMezzanine_1_1Physics_1_1ConeCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1ConeTwistConstraint.xhtml">ConeTwistConstraint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1Constraint.xhtml">Constraint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class for all constraints supported.  <a href="classMezzanine_1_1Physics_1_1Constraint.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml">ConvexHullCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A simple convex shape built from a low number of points in local space.  <a href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1CylinderCollisionShape.xhtml">CylinderCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A cylinder physics shape.  <a href="classMezzanine_1_1Physics_1_1CylinderCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1DualTransformConstraint.xhtml">DualTransformConstraint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">All constraints that track rotation and location of the Pivot relative to each Actor inherit from this.  <a href="classMezzanine_1_1Physics_1_1DualTransformConstraint.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml">DynamicMeshCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A triangle mesh collsion shape based on a graphics mesh.  <a href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1FieldCollisionShape.xhtml">FieldCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class for all Field shapes.  <a href="classMezzanine_1_1Physics_1_1FieldCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1Generic6DofConstraint.xhtml">Generic6DofConstraint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create simple but specific limits on any axis of movement or rotation.  <a href="classMezzanine_1_1Physics_1_1Generic6DofConstraint.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1Generic6DofSpringConstraint.xhtml">Generic6DofSpringConstraint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a constraint as configurable as the 6Dof constraint, but has added support for spring motion.  <a href="classMezzanine_1_1Physics_1_1Generic6DofSpringConstraint.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1HeightfieldCollisionShape.xhtml">HeightfieldCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A series of values that store hieght in a grid like fashion.  <a href="classMezzanine_1_1Physics_1_1HeightfieldCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1Hinge2Constraint.xhtml">Hinge2Constraint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1HingeConstraint.xhtml">HingeConstraint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a constraint to be used to restrict the movement between two objects to angular rotation on a single axis.  <a href="classMezzanine_1_1Physics_1_1HingeConstraint.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1MeshCollisionShape.xhtml">MeshCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class for all Mesh shapes.  <a href="classMezzanine_1_1Physics_1_1MeshCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1MultiSphereCollisionShape.xhtml">MultiSphereCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A physics shape comprised of multiple sphere's placed in local space.  <a href="classMezzanine_1_1Physics_1_1MultiSphereCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml">PhysicsProxy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a proxy from which physics objects are handled.  <a href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PlaneCollisionShape.xhtml">PlaneCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A Flat wall/floor of limitless size.  <a href="classMezzanine_1_1Physics_1_1PlaneCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1Point2PointConstraint.xhtml">Point2PointConstraint</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Tries to make a point relative to each of two actors match in 3d space, without regard to rotation.  <a href="classMezzanine_1_1Physics_1_1Point2PointConstraint.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1PrimitiveCollisionShape.xhtml">PrimitiveCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is the base class for all Primitive shapes.  <a href="classMezzanine_1_1Physics_1_1PrimitiveCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml">RigidProxy</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a proxy from which rigid body objects are handled.  <a href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1SliderConstraint.xhtml">SliderConstraint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1SphereCollisionShape.xhtml">SphereCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A sphere physics shape.  <a href="classMezzanine_1_1Physics_1_1SphereCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml">StaticMeshCollisionShape</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A triangle mesh collsion shape based on a graphics mesh.  <a href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1Physics_1_1StickyConstraintConstructionInfo.xhtml">StickyConstraintConstructionInfo</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple struct for holding information on how sticky constraints should be constructed.  <a href="structMezzanine_1_1Physics_1_1StickyConstraintConstructionInfo.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1Physics_1_1StickyData.xhtml">StickyData</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a basic class for storing the data related to the sticky behavior available to rigid bodies.  <a href="structMezzanine_1_1Physics_1_1StickyData.xhtml#details">More...</a><br/></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Physics_1_1UniversalConstraint.xhtml">UniversalConstraint</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a0659fce5a0aa7f29ae9429d6b4dcf2c8"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0659fce5a0aa7f29ae9429d6b4dcf2c8"></a>
typedef <a class="el" href="classMezzanine_1_1Physics_1_1Generic6DofConstraint.xhtml">Generic6DofConstraint</a>&#160;</td><td class="memItemRight" valign="bottom"><b>StickyConstraint</b></td></tr>
<tr class="separator:a0659fce5a0aa7f29ae9429d6b4dcf2c8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:ae9d613932c3d0560e84b8266e550d46b"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#ae9d613932c3d0560e84b8266e550d46b">CollisionFilter</a> { <br/>
&#160;&#160;<b>CF_GenericFilter</b> = 1, 
<b>CF_StaticFilter</b> = 2, 
<b>CF_KinematicFilter</b> = 4, 
<b>CF_DebrisFilter</b> = 8, 
<br/>
&#160;&#160;<b>CF_SensorFilter</b> = 16, 
<b>CF_CharacterFilter</b> = 32, 
<b>CF_AllFilter</b> = -1, 
<b>CF_UserFilter1</b> = 64, 
<br/>
&#160;&#160;<b>CF_UserFilter2</b> = 128
<br/>
 }</td></tr>
<tr class="memdesc:ae9d613932c3d0560e84b8266e550d46b"><td class="mdescLeft">&#160;</td><td class="mdescRight">These are the various filters that can be applied to all physics accelerated world objects to limit what they collide with.  <a href="namespaceMezzanine_1_1Physics.xhtml#ae9d613932c3d0560e84b8266e550d46b">More...</a><br/></td></tr>
<tr class="separator:ae9d613932c3d0560e84b8266e550d46b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa640f4c4b2baf4a4039db76fd792d2c1"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1">ConstraintParam</a> { <a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac8dc98db8c9881c5836a27d5b34fd787">Con_ERP</a> = 1, 
<b>Con_Stop_ERP</b> = 2, 
<a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1ac7067723ec3340acdf2941f1a4f56569">Con_CFM</a> = 3, 
<b>Con_Stop_CFM</b> = 4
 }</td></tr>
<tr class="memdesc:aa640f4c4b2baf4a4039db76fd792d2c1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used by constraints for setting some parameters.  <a href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1">More...</a><br/></td></tr>
<tr class="separator:aa640f4c4b2baf4a4039db76fd792d2c1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a80c4fbe8d2b2c4817756af89056a769c"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><b>ProxyType</b> { <b>PT_Rigid</b> = 1, 
<b>PT_Soft</b> = 2
 }</td></tr>
<tr class="separator:a80c4fbe8d2b2c4817756af89056a769c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1ae3cbffba27dd89d350576d3ef965c4"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#a1ae3cbffba27dd89d350576d3ef965c4">WorldObjectActivationState</a> { <br/>
&#160;&#160;<b>WOAS_Active</b> = 1, 
<b>WOAS_Island_Sleeping</b> = 2, 
<b>WOAS_Wants_Deactivation</b> = 3, 
<b>WOAS_DisableDeactivation</b> = 4, 
<br/>
&#160;&#160;<b>WOAS_DisableSimulation</b> = 5
<br/>
 }</td></tr>
<tr class="memdesc:a1ae3cbffba27dd89d350576d3ef965c4"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is used by all the world objects to monitor and set their physics activation. <br/></td></tr>
<tr class="separator:a1ae3cbffba27dd89d350576d3ef965c4"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:a8697c4711a045a8fd7a96dba727ae7fc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea">CollisionShape::ShapeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#a8697c4711a045a8fd7a96dba727ae7fc">BulletSapeTypeToShapeType</a> (int BulletShapeType)</td></tr>
<tr class="memdesc:a8697c4711a045a8fd7a96dba727ae7fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert from a Bullet <a class="el" href="classMezzanine_1_1Physics_1_1Collision.xhtml" title="This is an event class used to track collsions in the physics world.">Collision</a> Shape to a <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">CollisionShape::ShapeType</a>.  <a href="#a8697c4711a045a8fd7a96dba727ae7fc">More...</a><br/></td></tr>
<tr class="separator:a8697c4711a045a8fd7a96dba727ae7fc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a20628c78a5f53a967af1aa3eec05f952"><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#a20628c78a5f53a967af1aa3eec05f952">char4ToAxis</a> (char it)</td></tr>
<tr class="memdesc:a20628c78a5f53a967af1aa3eec05f952"><td class="mdescLeft">&#160;</td><td class="mdescRight">used to help convert string to the axis they indicate  <a href="#a20628c78a5f53a967af1aa3eec05f952">More...</a><br/></td></tr>
<tr class="separator:a20628c78a5f53a967af1aa3eec05f952"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aab6743742986e4125e21b9c68b9af967"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aab6743742986e4125e21b9c68b9af967">ConstraintParamAsString</a> (<a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1">ConstraintParam</a> Param)</td></tr>
<tr class="memdesc:aab6743742986e4125e21b9c68b9af967"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a <a class="el" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Constraint</a> Parameter as a String.  <a href="#aab6743742986e4125e21b9c68b9af967">More...</a><br/></td></tr>
<tr class="separator:aab6743742986e4125e21b9c68b9af967"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a58012efb6a76c109d2bcc80b142c04bf"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#a58012efb6a76c109d2bcc80b142c04bf">CreateShape</a> (<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea">CollisionShape::ShapeType</a> ShapeToCreate, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name_, btCollisionShape *ShapeToModel)</td></tr>
<tr class="memdesc:a58012efb6a76c109d2bcc80b142c04bf"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create A shape of a type and optionally model it after an example.  <a href="#a58012efb6a76c109d2bcc80b142c04bf">More...</a><br/></td></tr>
<tr class="separator:a58012efb6a76c109d2bcc80b142c04bf"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afb85cceec4e3de0b49346ce9fbcf87bc"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#afb85cceec4e3de0b49346ce9fbcf87bc">CreateShape</a> (<a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> OneNode)</td></tr>
<tr class="memdesc:afb85cceec4e3de0b49346ce9fbcf87bc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Create a <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a> from a snippet of xml.  <a href="#afb85cceec4e3de0b49346ce9fbcf87bc">More...</a><br/></td></tr>
<tr class="separator:afb85cceec4e3de0b49346ce9fbcf87bc"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa4900d97a41e81175d854f1fed11749d"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa4900d97a41e81175d854f1fed11749d">ShapeTypeToString</a> (<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea">CollisionShape::ShapeType</a> ShapeToConvert)</td></tr>
<tr class="memdesc:aa4900d97a41e81175d854f1fed11749d"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a string suitable for human eyes from a <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">CollisionShape::ShapeType</a>, may not be suitable for endusers.  <a href="#aa4900d97a41e81175d854f1fed11749d">More...</a><br/></td></tr>
<tr class="separator:aa4900d97a41e81175d854f1fed11749d"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb0330d242970d0fdf1c5e98be35701e"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1">ConstraintParam</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#adb0330d242970d0fdf1c5e98be35701e">StringAsConstraintParam</a> (<a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Param)</td></tr>
<tr class="memdesc:adb0330d242970d0fdf1c5e98be35701e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert A string that might be ConstraintParam to one.  <a href="#adb0330d242970d0fdf1c5e98be35701e">More...</a><br/></td></tr>
<tr class="separator:adb0330d242970d0fdf1c5e98be35701e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33f5db0f6af44912f6b5eddee22ca46f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea">CollisionShape::ShapeType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#a33f5db0f6af44912f6b5eddee22ca46f">StringToShapeType</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;TypeName)</td></tr>
<tr class="memdesc:a33f5db0f6af44912f6b5eddee22ca46f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a human readable string (as provided by <a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa4900d97a41e81175d854f1fed11749d" title="Get a string suitable for human eyes from a CollisionShape::ShapeType, may not be suitable for enduse...">ShapeTypeToString()</a>) and convert it to a <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">CollisionShape::ShapeType</a>.  <a href="#a33f5db0f6af44912f6b5eddee22ca46f">More...</a><br/></td></tr>
<tr class="separator:a33f5db0f6af44912f6b5eddee22ca46f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a1693cefad473b8c50aa44b9f6e4ac108"><td class="memItemLeft" align="right" valign="top">const int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#a1693cefad473b8c50aa44b9f6e4ac108">ConstraintParamCount</a> = 4</td></tr>
<tr class="memdesc:a1693cefad473b8c50aa44b9f6e4ac108"><td class="mdescLeft">&#160;</td><td class="mdescRight">How many ConstraintParam Exist.  <a href="#a1693cefad473b8c50aa44b9f6e4ac108">More...</a><br/></td></tr>
<tr class="separator:a1693cefad473b8c50aa44b9f6e4ac108"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a24f9082730ebc36ba260dbbe86c981f6"><td class="memItemLeft" align="right" valign="top">return&#160;</td><td class="memItemRight" valign="bottom"><b>Torque</b></td></tr>
<tr class="separator:a24f9082730ebc36ba260dbbe86c981f6"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This namespace is for all the classes belonging to the <a class="el" href="namespaceMezzanine_1_1Physics.xhtml" title="This namespace is for all the classes belonging to the Physics Subsystem.">Physics</a> Subsystem. </p>
<p>By default, this sub-system utilizies Bullet for it's physics acceleration. </p>
</div><h2 class="groupheader">Enumeration Type Documentation</h2>
<a class="anchor" id="ae9d613932c3d0560e84b8266e550d46b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine_1_1Physics.xhtml#ae9d613932c3d0560e84b8266e550d46b">Mezzanine::Physics::CollisionFilter</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>These are the various filters that can be applied to all physics accelerated world objects to limit what they collide with. </p>
<p>You can create your own groups on top of the ones that exist here, but they have to be powers of 2, and not overlap with any of the existing groups defined here. Simply pass in the Whole where appropriate. </p>

<p>Definition at line <a class="el" href="physicsenumerations_8h_source.xhtml#l00054">54</a> of file <a class="el" href="physicsenumerations_8h_source.xhtml">physicsenumerations.h</a>.</p>

</div>
</div>
<a class="anchor" id="aa640f4c4b2baf4a4039db76fd792d2c1"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">enum <a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1">Mezzanine::Physics::ConstraintParam</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used by constraints for setting some parameters. </p>
<p>See the constraint class documentation for more details. </p>
<table class="fieldtable">
<tr><th colspan="2">Enumerator</th></tr><tr><td class="fieldname"><em><a class="anchor" id="aa640f4c4b2baf4a4039db76fd792d2c1ac8dc98db8c9881c5836a27d5b34fd787"></a>Con_ERP</em>&nbsp;</td><td class="fielddoc">
<p>ERP values adjust how fast the errors in the constraints are reduced. </p>
</td></tr>
<tr><td class="fieldname"><em><a class="anchor" id="aa640f4c4b2baf4a4039db76fd792d2c1ac7067723ec3340acdf2941f1a4f56569"></a>Con_CFM</em>&nbsp;</td><td class="fielddoc">
<p>CFM values adds some small value to the main diagonal on the constraint matrix to prevent degenerate matrices. </p>
</td></tr>
</table>

<p>Definition at line <a class="el" href="constraint_8h_source.xhtml#l00064">64</a> of file <a class="el" href="constraint_8h_source.xhtml">constraint.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Function Documentation</h2>
<a class="anchor" id="a8697c4711a045a8fd7a96dba727ae7fc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea">CollisionShape::ShapeType</a> <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::Physics::BulletSapeTypeToShapeType </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>BulletShapeType</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert from a Bullet <a class="el" href="classMezzanine_1_1Physics_1_1Collision.xhtml" title="This is an event class used to track collsions in the physics world.">Collision</a> Shape to a <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">CollisionShape::ShapeType</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">BulletShapeType</td><td>The ShapeType to Convert </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>The corresponding <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">CollisionShape::ShapeType</a> to the passed in bullet Shape Type if asuitable match exists </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">The</td><td><a class="el" href="namespaceMezzanine.xhtml" title="The bulk of the engine components go in this namspace.">Mezzanine</a> engine only uses a subset of Bullets shapes, a <a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Mezzanine::Exception</a> with be thrown in the event an unsupported one is passed in. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="collisionshape_8cpp_source.xhtml#l00244">244</a> of file <a class="el" href="collisionshape_8cpp_source.xhtml">collisionshape.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="a20628c78a5f53a967af1aa3eec05f952"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int Mezzanine::Physics::char4ToAxis </td>
          <td>(</td>
          <td class="paramtype">char&#160;</td>
          <td class="paramname"><em>it</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>used to help convert string to the axis they indicate </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">it</td><td>it is the character that is passed in to indicate what the axis is. This should be the [4] character or the 5 character of the string. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>this returns an int that indicates the Axis for the string. </dd></dl>

</div>
</div>
<a class="anchor" id="aab6743742986e4125e21b9c68b9af967"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Mezzanine::Physics::ConstraintParamAsString </td>
          <td>(</td>
          <td class="paramtype">ConstraintParam&#160;</td>
          <td class="paramname"><em>Param</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a <a class="el" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Constraint</a> Parameter as a String. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Param</td><td>The Parameter to get as a String. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A String That contains the name of a ConstraintParam. </dd></dl>

</div>
</div>
<a class="anchor" id="a58012efb6a76c109d2bcc80b142c04bf"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *<a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::Physics::CreateShape </td>
          <td>(</td>
          <td class="paramtype">CollisionShape::ShapeType&#160;</td>
          <td class="paramname"><em>ShapeToCreate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>Name_</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">btCollisionShape *&#160;</td>
          <td class="paramname"><em>ShapeToModel</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create A shape of a type and optionally model it after an example. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ShapeToCreate</td><td>The Type of Shape to create. </td></tr>
    <tr><td class="paramname">Name</td><td>the name of the new shape. </td></tr>
    <tr><td class="paramname">ShapeToModel</td><td>An optional pointer to a bullet shape to include instead of creating one. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A new Mezzanine::CollisionShape with either default Values or the values of the bullet shape if one is provided. </dd></dl>
<dl class="section warning"><dt>Warning</dt><dd>The only checking done on the bullet shape is to verify it is not a null pointer. If the Bullet shape fails to be of the appropriate kind correlating to ShapeToCreate then <em>undefined behavior</em> will occur. </dd></dl>

<p>Definition at line <a class="el" href="collisionshape_8cpp_source.xhtml#l00162">162</a> of file <a class="el" href="collisionshape_8cpp_source.xhtml">collisionshape.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="afb85cceec4e3de0b49346ce9fbcf87bc"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">CollisionShape</a> *<a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::Physics::CreateShape </td>
          <td>(</td>
          <td class="paramtype">XML::Node&#160;</td>
          <td class="paramname"><em>OneNode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Create a <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a> from a snippet of xml. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">OneNode</td><td>A Node for any <a class="el" href="classMezzanine_1_1Physics_1_1Collision.xhtml" title="This is an event class used to track collsions in the physics world.">Collision</a> Shape that can be instanstiated </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A pointer to a <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a> of the Correct Type with the values stored in the <a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a>. </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000090">Todo:</a></b></dt><dd>Complete CreateShape function once <a class="el" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">DynamicMeshCollisionShape</a> can be deserialized </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000091">Todo:</a></b></dt><dd>Complete CreateShape function once <a class="el" href="classMezzanine_1_1Physics_1_1ActorSoftCollisionShape.xhtml" title="A collision shape for soft actors.">ActorSoftCollisionShape</a> can be deserialized </dd></dl>
<dl class="todo"><dt><b><a class="el" href="todo.xhtml#_todo000092">Todo:</a></b></dt><dd>Complete CreateShape function once <a class="el" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml" title="A triangle mesh collsion shape based on a graphics mesh.">StaticMeshCollisionShape</a> can be deserialized </dd></dl>

<p>Definition at line <a class="el" href="collisionshape_8cpp_source.xhtml#l00202">202</a> of file <a class="el" href="collisionshape_8cpp_source.xhtml">collisionshape.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="aa4900d97a41e81175d854f1fed11749d"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::Physics::ShapeTypeToString </td>
          <td>(</td>
          <td class="paramtype">CollisionShape::ShapeType&#160;</td>
          <td class="paramname"><em>ShapeToConvert</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a string suitable for human eyes from a <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">CollisionShape::ShapeType</a>, may not be suitable for endusers. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">ShapeToConvert</td><td>The kind of shape you want a string for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A String with human readable contents corresponding to the passed in type. </dd></dl>

<p>Definition at line <a class="el" href="collisionshape_8cpp_source.xhtml#l00266">266</a> of file <a class="el" href="collisionshape_8cpp_source.xhtml">collisionshape.cpp</a>.</p>

</div>
</div>
<a class="anchor" id="adb0330d242970d0fdf1c5e98be35701e"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa640f4c4b2baf4a4039db76fd792d2c1">ConstraintParam</a> Mezzanine::Physics::StringAsConstraintParam </td>
          <td>(</td>
          <td class="paramtype">String&#160;</td>
          <td class="paramname"><em>Param</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert A string that might be ConstraintParam to one. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Param</td><td>A String that should be storing, a constraint param name. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>if the name matches on of the constraintParams exactly, return that one. </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">If</td><td>the Param does not match a type exactly, then this will throw an exception. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a33f5db0f6af44912f6b5eddee22ca46f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea">CollisionShape::ShapeType</a> <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a> Mezzanine::Physics::StringToShapeType </td>
          <td>(</td>
          <td class="paramtype">const String &amp;&#160;</td>
          <td class="paramname"><em>TypeName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Convert a human readable string (as provided by <a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa4900d97a41e81175d854f1fed11749d" title="Get a string suitable for human eyes from a CollisionShape::ShapeType, may not be suitable for enduse...">ShapeTypeToString()</a>) and convert it to a <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">CollisionShape::ShapeType</a>. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">TypeName</td><td>A String that matches exactly what returns from <a class="el" href="namespaceMezzanine_1_1Physics.xhtml#aa4900d97a41e81175d854f1fed11749d" title="Get a string suitable for human eyes from a CollisionShape::ShapeType, may not be suitable for enduse...">ShapeTypeToString()</a>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>A valid <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8ea" title="This enum describes what kind of shape you are currently working with.">CollisionShape::ShapeType</a> if possible </dd></dl>
<dl class="exception"><dt>Exceptions</dt><dd>
  <table class="exception">
    <tr><td class="paramname">This</td><td>throws a <a class="el" href="classMezzanine_1_1Exception.xhtml" title="This is the exception thrown by most Mezzanine system that can throw exceptions.">Mezzanine::Exception</a> in the event of a gibberish name. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="collisionshape_8cpp_source.xhtml#l00288">288</a> of file <a class="el" href="collisionshape_8cpp_source.xhtml">collisionshape.cpp</a>.</p>

</div>
</div>
<h2 class="groupheader">Variable Documentation</h2>
<a class="anchor" id="a1693cefad473b8c50aa44b9f6e4ac108"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const int Mezzanine::Physics::ConstraintParamCount = 4</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>How many ConstraintParam Exist. </p>
<p>Used in some algorithms and we didn't want it to look like a magic so we defined it here. </p>

<p>Definition at line <a class="el" href="constraint_8h_source.xhtml#l00085">85</a> of file <a class="el" href="constraint_8h_source.xhtml">constraint.h</a>.</p>

</div>
</div>
<a class="anchor" id="a24f9082730ebc36ba260dbbe86c981f6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">return Mezzanine::Physics::Torque</td>
        </tr>
      </table>
</div><div class="memdoc">
<b>Initial value:</b><div class="fragment"><div class="line">{</div>
<div class="line">            Vector3 Torque(PhysicsRigidBody-&gt;getTotalTorque())</div>
</div><!-- fragment -->
<p>Definition at line <a class="el" href="rigidproxy_8cpp_source.xhtml#l00153">153</a> of file <a class="el" href="rigidproxy_8cpp_source.xhtml">rigidproxy.cpp</a>.</p>

</div>
</div>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat May 18 2013 22:24:24 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
