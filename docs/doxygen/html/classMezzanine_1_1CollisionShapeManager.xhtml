<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::CollisionShapeManager Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml">CollisionShapeManager</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pub-attribs">Public Attributes</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="classMezzanine_1_1CollisionShapeManager-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::CollisionShapeManager Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This manager is for the storage of all shapes and creation of mesh shapes.  
 <a href="classMezzanine_1_1CollisionShapeManager.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="collisionshapemanager_8h_source.xhtml">collisionshapemanager.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for Mezzanine::CollisionShapeManager:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1CollisionShapeManager__inherit__graph.svg" width="382" height="150"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for Mezzanine::CollisionShapeManager:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classMezzanine_1_1CollisionShapeManager__coll__graph.svg" width="100%" height="537"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:add99b0db976867d9e370b785474c7296"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="add99b0db976867d9e370b785474c7296"></a>
typedef std::map&lt; <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>, <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> * &gt;<br class="typebreak"/>
::<a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#add99b0db976867d9e370b785474c7296">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#add99b0db976867d9e370b785474c7296">const_iterator</a></td></tr>
<tr class="memdesc:add99b0db976867d9e370b785474c7296"><td class="mdescLeft">&#160;</td><td class="mdescRight">An const_iterator that should be compatible with most iterator algorithms. <br/></td></tr>
<tr class="separator:add99b0db976867d9e370b785474c7296"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afdfd6a59aeee9ba1a31e7ad3ae85bb87"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afdfd6a59aeee9ba1a31e7ad3ae85bb87"></a>
typedef std::map&lt; <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>, <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> * &gt;<br class="typebreak"/>
::<a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#afdfd6a59aeee9ba1a31e7ad3ae85bb87">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#afdfd6a59aeee9ba1a31e7ad3ae85bb87">iterator</a></td></tr>
<tr class="memdesc:afdfd6a59aeee9ba1a31e7ad3ae85bb87"><td class="mdescLeft">&#160;</td><td class="mdescRight">An iterator that should be compatible with most iterator algorithms. <br/></td></tr>
<tr class="separator:afdfd6a59aeee9ba1a31e7ad3ae85bb87"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_types_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pub_types_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&#160;Public Types inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:ab23a9aa27c4e3cb58d902a149d3c6de2 inherit pub_types_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ab23a9aa27c4e3cb58d902a149d3c6de2"></a>
typedef bool(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a> )()</td></tr>
<tr class="memdesc:ab23a9aa27c4e3cb58d902a149d3c6de2 inherit pub_types_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This makes working with Callback function pointer a bit easier. <br/></td></tr>
<tr class="separator:ab23a9aa27c4e3cb58d902a149d3c6de2 inherit pub_types_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9a6f3e238f66cbc68dfec11e4160aa6c inherit pub_types_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a9a6f3e238f66cbc68dfec11e4160aa6c">ManagerType</a> { <br/>
&#160;&#160;<b>ActorManager</b> = 1, 
<b>AudioManager</b>, 
<b>CameraManager</b>, 
<b>CollisionShapeManager</b>, 
<br/>
&#160;&#160;<b>EventManager</b>, 
<b>GraphicsManager</b>, 
<b>InputManager</b>, 
<b>LogManager</b>, 
<br/>
&#160;&#160;<b>MeshManager</b>, 
<b>NetworkManager</b>, 
<b>PagingManager</b>, 
<b>PhysicsManager</b>, 
<br/>
&#160;&#160;<b>ResourceManager</b>, 
<b>SceneManager</b>, 
<b>ScriptingManager</b>, 
<b>TerrainManager</b>, 
<br/>
&#160;&#160;<b>TimerManager</b>, 
<b>UIManager</b>, 
<a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a9a6f3e238f66cbc68dfec11e4160aa6caa58e48b5e043dfdaf6e2cd17b79a3194">UserCreated</a> = 512
<br/>
 }</td></tr>
<tr class="separator:a9a6f3e238f66cbc68dfec11e4160aa6c inherit pub_types_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a47c3e4e886e22abb3c8017e8f244cac2"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a47c3e4e886e22abb3c8017e8f244cac2"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a47c3e4e886e22abb3c8017e8f244cac2">CollisionShapeManager</a> ()</td></tr>
<tr class="memdesc:a47c3e4e886e22abb3c8017e8f244cac2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class constructor. <br/></td></tr>
<tr class="separator:a47c3e4e886e22abb3c8017e8f244cac2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a33671dfe83da86a6abbb172ff8a679f8"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a33671dfe83da86a6abbb172ff8a679f8">CollisionShapeManager</a> (<a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;XMLNode)</td></tr>
<tr class="memdesc:a33671dfe83da86a6abbb172ff8a679f8"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> constructor.  <a href="#a33671dfe83da86a6abbb172ff8a679f8">More...</a><br/></td></tr>
<tr class="separator:a33671dfe83da86a6abbb172ff8a679f8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac4d5b275eb2949af19b0c44237ad2792"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac4d5b275eb2949af19b0c44237ad2792"></a>
virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#ac4d5b275eb2949af19b0c44237ad2792">~CollisionShapeManager</a> ()</td></tr>
<tr class="memdesc:ac4d5b275eb2949af19b0c44237ad2792"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class destructor. <br/></td></tr>
<tr class="separator:ac4d5b275eb2949af19b0c44237ad2792"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a27ee4f89c25600d26cf770836ed42d68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#afdfd6a59aeee9ba1a31e7ad3ae85bb87">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a27ee4f89c25600d26cf770836ed42d68">begin</a> ()</td></tr>
<tr class="memdesc:a27ee4f89c25600d26cf770836ed42d68"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get an Iterator pointing to the first item in the container.  <a href="#a27ee4f89c25600d26cf770836ed42d68">More...</a><br/></td></tr>
<tr class="separator:a27ee4f89c25600d26cf770836ed42d68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abb94fad923a57599125bcbf73bc1e306"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#add99b0db976867d9e370b785474c7296">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#abb94fad923a57599125bcbf73bc1e306">begin</a> () const </td></tr>
<tr class="memdesc:abb94fad923a57599125bcbf73bc1e306"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a const Iterator pointing at the first item in the container.  <a href="#abb94fad923a57599125bcbf73bc1e306">More...</a><br/></td></tr>
<tr class="separator:abb94fad923a57599125bcbf73bc1e306"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a714ac4b57ebbf070984f86274a42c055"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a714ac4b57ebbf070984f86274a42c055"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a714ac4b57ebbf070984f86274a42c055">DestroyAllShapes</a> ()</td></tr>
<tr class="memdesc:a714ac4b57ebbf070984f86274a42c055"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all shapes from the manager and then deletes them. <br/></td></tr>
<tr class="separator:a714ac4b57ebbf070984f86274a42c055"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa8b995367ea6dfb4e0e792817304eb6f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#aa8b995367ea6dfb4e0e792817304eb6f">DestroyShape</a> (<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> *Shape)</td></tr>
<tr class="memdesc:aa8b995367ea6dfb4e0e792817304eb6f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a shape from this manager and deletes it.  <a href="#aa8b995367ea6dfb4e0e792817304eb6f">More...</a><br/></td></tr>
<tr class="separator:aa8b995367ea6dfb4e0e792817304eb6f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9304a02b149b0fda8db598d34e7c51e8"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a9304a02b149b0fda8db598d34e7c51e8">DestroyShape</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name)</td></tr>
<tr class="memdesc:a9304a02b149b0fda8db598d34e7c51e8"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a shape from this manager and deletes it.  <a href="#a9304a02b149b0fda8db598d34e7c51e8">More...</a><br/></td></tr>
<tr class="separator:a9304a02b149b0fda8db598d34e7c51e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb317a9d7e5eff54ca00ad35db7813ca"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#adb317a9d7e5eff54ca00ad35db7813ca">DoMainLoopItems</a> ()</td></tr>
<tr class="memdesc:adb317a9d7e5eff54ca00ad35db7813ca"><td class="mdescLeft">&#160;</td><td class="mdescRight">The main loop calls this once per frame.  <a href="#adb317a9d7e5eff54ca00ad35db7813ca">More...</a><br/></td></tr>
<tr class="separator:adb317a9d7e5eff54ca00ad35db7813ca"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adaab69f72839d638bba4b58fa8b23870"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#afdfd6a59aeee9ba1a31e7ad3ae85bb87">iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#adaab69f72839d638bba4b58fa8b23870">end</a> ()</td></tr>
<tr class="memdesc:adaab69f72839d638bba4b58fa8b23870"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get an Iterator pointing to one past the last item in the container.  <a href="#adaab69f72839d638bba4b58fa8b23870">More...</a><br/></td></tr>
<tr class="separator:adaab69f72839d638bba4b58fa8b23870"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a300502ff40df1511b4863c8fce76092f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#add99b0db976867d9e370b785474c7296">const_iterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a300502ff40df1511b4863c8fce76092f">end</a> () const </td></tr>
<tr class="memdesc:a300502ff40df1511b4863c8fce76092f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get an const Iterator pointing to one past the last item in the container.  <a href="#a300502ff40df1511b4863c8fce76092f">More...</a><br/></td></tr>
<tr class="separator:a300502ff40df1511b4863c8fce76092f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8f7546e3b720cd3352a6ce32f3332b00"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml">Physics::ConvexHullCollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a8f7546e3b720cd3352a6ce32f3332b00">GenerateConvexHull</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name, <a class="el" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml">Graphics::Mesh</a> *ObjectMesh, bool UseAllSubmeshes=false)</td></tr>
<tr class="memdesc:a8f7546e3b720cd3352a6ce32f3332b00"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a Convex Hull from a provided mesh.  <a href="#a8f7546e3b720cd3352a6ce32f3332b00">More...</a><br/></td></tr>
<tr class="separator:a8f7546e3b720cd3352a6ce32f3332b00"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:abf8682575dc0f393203acc3a93983ade"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml">Physics::ConvexHullCollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#abf8682575dc0f393203acc3a93983ade">GenerateConvexHull</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;MeshName, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Group, bool UseAllSubmeshes=false)</td></tr>
<tr class="memdesc:abf8682575dc0f393203acc3a93983ade"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a Convex Hull from a provided mesh.  <a href="#abf8682575dc0f393203acc3a93983ade">More...</a><br/></td></tr>
<tr class="separator:abf8682575dc0f393203acc3a93983ade"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a305181edaf87de93b12f49d91e719139"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml">Physics::DynamicMeshCollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a305181edaf87de93b12f49d91e719139">GenerateDynamicTriMesh</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name, <a class="el" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml">Graphics::Mesh</a> *ObjectMesh, bool UseAllSubmeshes=false)</td></tr>
<tr class="memdesc:a305181edaf87de93b12f49d91e719139"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a mesh shape for dynamic objects.  <a href="#a305181edaf87de93b12f49d91e719139">More...</a><br/></td></tr>
<tr class="separator:a305181edaf87de93b12f49d91e719139"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2b307d557b4b6a77ab7c923e5a20c00e"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml">Physics::DynamicMeshCollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a2b307d557b4b6a77ab7c923e5a20c00e">GenerateDynamicTriMesh</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;MeshName, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Group, bool UseAllSubmeshes=false)</td></tr>
<tr class="memdesc:a2b307d557b4b6a77ab7c923e5a20c00e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a mesh shape for dynamic objects.  <a href="#a2b307d557b4b6a77ab7c923e5a20c00e">More...</a><br/></td></tr>
<tr class="separator:a2b307d557b4b6a77ab7c923e5a20c00e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af30cadd677c1e8012ed62e89e4b01bda"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml">Physics::StaticMeshCollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#af30cadd677c1e8012ed62e89e4b01bda">GenerateStaticTriMesh</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name, <a class="el" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml">Graphics::Mesh</a> *ObjectMesh, bool UseAllSubmeshes=false)</td></tr>
<tr class="memdesc:af30cadd677c1e8012ed62e89e4b01bda"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a mesh shape for static objects.  <a href="#af30cadd677c1e8012ed62e89e4b01bda">More...</a><br/></td></tr>
<tr class="separator:af30cadd677c1e8012ed62e89e4b01bda"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9bf448c6ba6507714a1f98b5bf5c7c92"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml">Physics::StaticMeshCollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a9bf448c6ba6507714a1f98b5bf5c7c92">GenerateStaticTriMesh</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;MeshName, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Group, bool UseAllSubmeshes=false)</td></tr>
<tr class="memdesc:a9bf448c6ba6507714a1f98b5bf5c7c92"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a mesh shape for static objects.  <a href="#a9bf448c6ba6507714a1f98b5bf5c7c92">More...</a><br/></td></tr>
<tr class="separator:a9bf448c6ba6507714a1f98b5bf5c7c92"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a85d67e2feacaf03fcc99433f36511f44"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a85d67e2feacaf03fcc99433f36511f44">GetImplementationTypeName</a> () const </td></tr>
<tr class="memdesc:a85d67e2feacaf03fcc99433f36511f44"><td class="mdescLeft">&#160;</td><td class="mdescRight">This Allows any manager name to be sent to a stream. Primarily used for logging.  <a href="#a85d67e2feacaf03fcc99433f36511f44">More...</a><br/></td></tr>
<tr class="separator:a85d67e2feacaf03fcc99433f36511f44"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad11ff782f278396fd7bfc4ba238d6d1a"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a9a6f3e238f66cbc68dfec11e4160aa6c">ManagerType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#ad11ff782f278396fd7bfc4ba238d6d1a">GetInterfaceType</a> () const </td></tr>
<tr class="memdesc:ad11ff782f278396fd7bfc4ba238d6d1a"><td class="mdescLeft">&#160;</td><td class="mdescRight">This returns the type of this manager.  <a href="#ad11ff782f278396fd7bfc4ba238d6d1a">More...</a><br/></td></tr>
<tr class="separator:ad11ff782f278396fd7bfc4ba238d6d1a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a73bac4fdb338596d9c19f46b56a72c04"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a73bac4fdb338596d9c19f46b56a72c04">GetNumStoredShapes</a> ()</td></tr>
<tr class="memdesc:a73bac4fdb338596d9c19f46b56a72c04"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the number of stored shapes in this manager.  <a href="#a73bac4fdb338596d9c19f46b56a72c04">More...</a><br/></td></tr>
<tr class="separator:a73bac4fdb338596d9c19f46b56a72c04"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa5bc796ce3f9f94362ca76f157a1fad1"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#aa5bc796ce3f9f94362ca76f157a1fad1">GetShape</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name)</td></tr>
<tr class="memdesc:aa5bc796ce3f9f94362ca76f157a1fad1"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a shape already stored in this manager.  <a href="#aa5bc796ce3f9f94362ca76f157a1fad1">More...</a><br/></td></tr>
<tr class="separator:aa5bc796ce3f9f94362ca76f157a1fad1"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad285cc5c620a3dd8daaec716fd2b7954"><td class="memItemLeft" align="right" valign="top">std::set<br class="typebreak"/>
&lt; <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> * &gt; &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#ad285cc5c620a3dd8daaec716fd2b7954">GetUnnamedShapes</a> ()</td></tr>
<tr class="memdesc:ad285cc5c620a3dd8daaec716fd2b7954"><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns a vector of unnamed shapes stored in this manager.  <a href="#ad285cc5c620a3dd8daaec716fd2b7954">More...</a><br/></td></tr>
<tr class="separator:ad285cc5c620a3dd8daaec716fd2b7954"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa9a24e60f105770d1adba71ac8af15f9"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#aa9a24e60f105770d1adba71ac8af15f9">Initialize</a> ()</td></tr>
<tr class="memdesc:aa9a24e60f105770d1adba71ac8af15f9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Configure Items requiring other Managers.  <a href="#aa9a24e60f105770d1adba71ac8af15f9">More...</a><br/></td></tr>
<tr class="separator:aa9a24e60f105770d1adba71ac8af15f9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5bc34938bcd1fb949297c6c55f10710f"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a5bc34938bcd1fb949297c6c55f10710f">LoadAllShapesFromFile</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;FileName, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Group)</td></tr>
<tr class="memdesc:a5bc34938bcd1fb949297c6c55f10710f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Loads all shapes saved in an existing .bullet file, and stores them in this manager.  <a href="#a5bc34938bcd1fb949297c6c55f10710f">More...</a><br/></td></tr>
<tr class="separator:a5bc34938bcd1fb949297c6c55f10710f"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a4467ed326534e12c37e7c724f96a7b5e"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml">Physics::CompoundCollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a4467ed326534e12c37e7c724f96a7b5e">PerformConvexDecomposition</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name, <a class="el" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml">Graphics::Mesh</a> *ObjectMesh, <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Depth, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> CPercent, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> PPercent, bool UseAllSubmeshes=false)</td></tr>
<tr class="memdesc:a4467ed326534e12c37e7c724f96a7b5e"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a compound shape of Convex Hulls from a provided mesh.  <a href="#a4467ed326534e12c37e7c724f96a7b5e">More...</a><br/></td></tr>
<tr class="separator:a4467ed326534e12c37e7c724f96a7b5e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a28f49a5847644c22f191c41049e6ffb2"><td class="memItemLeft" align="right" valign="top">virtual <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml">Physics::CompoundCollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a28f49a5847644c22f191c41049e6ffb2">PerformConvexDecomposition</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;MeshName, const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Group, <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Depth, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> CPercent, <a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a> PPercent, bool UseAllSubmeshes=false)</td></tr>
<tr class="memdesc:a28f49a5847644c22f191c41049e6ffb2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Generates a compound shape of Convex Hulls from a provided mesh.  <a href="#a28f49a5847644c22f191c41049e6ffb2">More...</a><br/></td></tr>
<tr class="separator:a28f49a5847644c22f191c41049e6ffb2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a792bdc824c2447f444f72435a10bbaa4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a792bdc824c2447f444f72435a10bbaa4"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a792bdc824c2447f444f72435a10bbaa4">RemoveAllShapes</a> ()</td></tr>
<tr class="memdesc:a792bdc824c2447f444f72435a10bbaa4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes all shapes from the manager without deleting them. <br/></td></tr>
<tr class="separator:a792bdc824c2447f444f72435a10bbaa4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a62d248e52a06695c4638d5c4a53c6d25"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a62d248e52a06695c4638d5c4a53c6d25">RemoveShape</a> (<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> *Shape)</td></tr>
<tr class="memdesc:a62d248e52a06695c4638d5c4a53c6d25"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a shape from this manager without deleting it.  <a href="#a62d248e52a06695c4638d5c4a53c6d25">More...</a><br/></td></tr>
<tr class="separator:a62d248e52a06695c4638d5c4a53c6d25"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7c39a1d48821916619be5837a233b3b6"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a7c39a1d48821916619be5837a233b3b6">RemoveShape</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name)</td></tr>
<tr class="memdesc:a7c39a1d48821916619be5837a233b3b6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Removes a shape from this manager without deleting it.  <a href="#a7c39a1d48821916619be5837a233b3b6">More...</a><br/></td></tr>
<tr class="separator:a7c39a1d48821916619be5837a233b3b6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee50943037df853e6fbe5193616f7898"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#aee50943037df853e6fbe5193616f7898">SaveAllStoredShapesToFile</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;FileName)</td></tr>
<tr class="memdesc:aee50943037df853e6fbe5193616f7898"><td class="mdescLeft">&#160;</td><td class="mdescRight">Takes all the shapes currently stored this manager and saves them to a .bullet file.  <a href="#aee50943037df853e6fbe5193616f7898">More...</a><br/></td></tr>
<tr class="separator:aee50943037df853e6fbe5193616f7898"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af885289c561d840f7542e88e5141026c"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#af885289c561d840f7542e88e5141026c">SaveShapesToFile</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;FileName, std::vector&lt; <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> * &gt; &amp;ShapesToSave)</td></tr>
<tr class="memdesc:af885289c561d840f7542e88e5141026c"><td class="mdescLeft">&#160;</td><td class="mdescRight">Saves all shapes contained in a vector and saves them to a .bullet file.  <a href="#af885289c561d840f7542e88e5141026c">More...</a><br/></td></tr>
<tr class="separator:af885289c561d840f7542e88e5141026c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3c8e9621a78c0a9be58bd5a551998b81"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a3c8e9621a78c0a9be58bd5a551998b81">SetNameForUnnamedShape</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;NewName, <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> *Shape)</td></tr>
<tr class="memdesc:a3c8e9621a78c0a9be58bd5a551998b81"><td class="mdescLeft">&#160;</td><td class="mdescRight">Assigns a name to an unnamed shape.  <a href="#a3c8e9621a78c0a9be58bd5a551998b81">More...</a><br/></td></tr>
<tr class="separator:a3c8e9621a78c0a9be58bd5a551998b81"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab7c64d521d289e6c7272143977065aec"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#ab7c64d521d289e6c7272143977065aec">StoreShape</a> (<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> *Shape)</td></tr>
<tr class="memdesc:ab7c64d521d289e6c7272143977065aec"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores a pre-made shape in this manager.  <a href="#ab7c64d521d289e6c7272143977065aec">More...</a><br/></td></tr>
<tr class="separator:ab7c64d521d289e6c7272143977065aec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:a6ee3249f71f330394e81e349370d57a8 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6ee3249f71f330394e81e349370d57a8"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a6ee3249f71f330394e81e349370d57a8">ManagerBase</a> ()</td></tr>
<tr class="memdesc:a6ee3249f71f330394e81e349370d57a8 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor. <br/></td></tr>
<tr class="separator:a6ee3249f71f330394e81e349370d57a8 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad98752e65db50b66fbb000dedbc07786 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ad98752e65db50b66fbb000dedbc07786">~ManagerBase</a> ()</td></tr>
<tr class="memdesc:ad98752e65db50b66fbb000dedbc07786 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deconstructor.  <a href="#ad98752e65db50b66fbb000dedbc07786">More...</a><br/></td></tr>
<tr class="separator:ad98752e65db50b66fbb000dedbc07786 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec6f56b909c0453370771f921d29e7d7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aec6f56b909c0453370771f921d29e7d7"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#aec6f56b909c0453370771f921d29e7d7">ErasePostMainLoopItems</a> ()</td></tr>
<tr class="memdesc:aec6f56b909c0453370771f921d29e7d7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This simply calls <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#af33945c6196024c530990780b2a44cfc" title="This assigns a function to be the callback function to run prior to the main loop.">SetPostMainLoopItems()</a> passing it 0. <br/></td></tr>
<tr class="separator:aec6f56b909c0453370771f921d29e7d7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a173afcb032bfe374c220d17e24a2ef2c inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a173afcb032bfe374c220d17e24a2ef2c"></a>
virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a173afcb032bfe374c220d17e24a2ef2c">ErasePreMainLoopItems</a> ()</td></tr>
<tr class="memdesc:a173afcb032bfe374c220d17e24a2ef2c inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This simply calls <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a2837c3c4ec588e4a3cbed39fa8287ef0" title="This assigns a function to be the callback function to run prior to the main loop.">SetPreMainLoopItems()</a> passing it 0. <br/></td></tr>
<tr class="separator:a173afcb032bfe374c220d17e24a2ef2c inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a70b61244d5182ad40dd056b2664a6aa7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a70b61244d5182ad40dd056b2664a6aa7">GetInterfaceTypeAsString</a> () const </td></tr>
<tr class="memdesc:a70b61244d5182ad40dd056b2664a6aa7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets a string of the interface type of this manager.  <a href="#a70b61244d5182ad40dd056b2664a6aa7">More...</a><br/></td></tr>
<tr class="separator:a70b61244d5182ad40dd056b2664a6aa7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a661b5cafe1a0f77c9fbd17c7444d1fea inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a661b5cafe1a0f77c9fbd17c7444d1fea">GetPostMainLoopItems</a> () const </td></tr>
<tr class="memdesc:a661b5cafe1a0f77c9fbd17c7444d1fea inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This returns the Callback that would be called before the main loop items.  <a href="#a661b5cafe1a0f77c9fbd17c7444d1fea">More...</a><br/></td></tr>
<tr class="separator:a661b5cafe1a0f77c9fbd17c7444d1fea inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a45c0e893c832e257475321fb1e826f20 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a45c0e893c832e257475321fb1e826f20">GetPreMainLoopItems</a> () const </td></tr>
<tr class="memdesc:a45c0e893c832e257475321fb1e826f20 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This returns the Callback that would be called before the main loop items.  <a href="#a45c0e893c832e257475321fb1e826f20">More...</a><br/></td></tr>
<tr class="separator:a45c0e893c832e257475321fb1e826f20 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2d0d7e80c5a151c9f0d91a0366605cca inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a2d0d7e80c5a151c9f0d91a0366605cca">GetPriority</a> ()</td></tr>
<tr class="memdesc:a2d0d7e80c5a151c9f0d91a0366605cca inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This gets the Priority of this manager.  <a href="#a2d0d7e80c5a151c9f0d91a0366605cca">More...</a><br/></td></tr>
<tr class="separator:a2d0d7e80c5a151c9f0d91a0366605cca inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ade516a30e6d24b4ffd1accf1b1efd948 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ade516a30e6d24b4ffd1accf1b1efd948">IsInitialized</a> ()</td></tr>
<tr class="memdesc:ade516a30e6d24b4ffd1accf1b1efd948 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets whether or not this manager has been initialized.  <a href="#ade516a30e6d24b4ffd1accf1b1efd948">More...</a><br/></td></tr>
<tr class="separator:ade516a30e6d24b4ffd1accf1b1efd948 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aec26bca08780fd29f49370973f39cbf7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#aec26bca08780fd29f49370973f39cbf7">PostMainLoopItems</a> ()</td></tr>
<tr class="memdesc:aec26bca08780fd29f49370973f39cbf7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This runs any callback that is required after the mainloop items are run.  <a href="#aec26bca08780fd29f49370973f39cbf7">More...</a><br/></td></tr>
<tr class="separator:aec26bca08780fd29f49370973f39cbf7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a786e385f50879d6643962ea17b9e13e7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a786e385f50879d6643962ea17b9e13e7">PreMainLoopItems</a> ()</td></tr>
<tr class="memdesc:a786e385f50879d6643962ea17b9e13e7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This runs any callback that is required before the mainloop items are run.  <a href="#a786e385f50879d6643962ea17b9e13e7">More...</a><br/></td></tr>
<tr class="separator:a786e385f50879d6643962ea17b9e13e7 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af33945c6196024c530990780b2a44cfc inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#af33945c6196024c530990780b2a44cfc">SetPostMainLoopItems</a> (<a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a> PostMainCallback)</td></tr>
<tr class="memdesc:af33945c6196024c530990780b2a44cfc inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This assigns a function to be the callback function to run prior to the main loop.  <a href="#af33945c6196024c530990780b2a44cfc">More...</a><br/></td></tr>
<tr class="separator:af33945c6196024c530990780b2a44cfc inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a2837c3c4ec588e4a3cbed39fa8287ef0 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a2837c3c4ec588e4a3cbed39fa8287ef0">SetPreMainLoopItems</a> (<a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a> PreMainCallback)</td></tr>
<tr class="memdesc:a2837c3c4ec588e4a3cbed39fa8287ef0 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This assigns a function to be the callback function to run prior to the main loop.  <a href="#a2837c3c4ec588e4a3cbed39fa8287ef0">More...</a><br/></td></tr>
<tr class="separator:a2837c3c4ec588e4a3cbed39fa8287ef0 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a226c8f18a44d8ef6e261a9ae202ff044 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a226c8f18a44d8ef6e261a9ae202ff044">SetPriority</a> (short int Priority_)</td></tr>
<tr class="memdesc:a226c8f18a44d8ef6e261a9ae202ff044 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This gets the Priority of this manager.  <a href="#a226c8f18a44d8ef6e261a9ae202ff044">More...</a><br/></td></tr>
<tr class="separator:a226c8f18a44d8ef6e261a9ae202ff044 inherit pub_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_methods_classMezzanine_1_1Singleton"><td colspan="2" onclick="javascript:toggleInherit('pub_methods_classMezzanine_1_1Singleton')"><img src="closed.png" alt="-"/>&#160;Public Member Functions inherited from <a class="el" href="classMezzanine_1_1Singleton.xhtml">Mezzanine::Singleton&lt; CollisionShapeManager &gt;</a></td></tr>
<tr class="memitem:a7174af94e201bdaeab717cdbcbb2e565 inherit pub_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a7174af94e201bdaeab717cdbcbb2e565"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a7174af94e201bdaeab717cdbcbb2e565">Singleton</a> ()</td></tr>
<tr class="memdesc:a7174af94e201bdaeab717cdbcbb2e565 inherit pub_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class constructor. <br/></td></tr>
<tr class="separator:a7174af94e201bdaeab717cdbcbb2e565 inherit pub_methods_classMezzanine_1_1Singleton"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5e45fc3969b0fae3d095676cc515da1d inherit pub_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5e45fc3969b0fae3d095676cc515da1d"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a5e45fc3969b0fae3d095676cc515da1d">~Singleton</a> ()</td></tr>
<tr class="memdesc:a5e45fc3969b0fae3d095676cc515da1d inherit pub_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Class destructor. <br/></td></tr>
<tr class="separator:a5e45fc3969b0fae3d095676cc515da1d inherit pub_methods_classMezzanine_1_1Singleton"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-attribs"></a>
Public Attributes</h2></td></tr>
<tr class="memitem:aa8418b770b2f8dcb0c73cfed5c7d3e0f"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShapeDeSerializer.xhtml">Physics::CollisionShapeDeSerializer</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#aa8418b770b2f8dcb0c73cfed5c7d3e0f">ShapeDeserializer</a></td></tr>
<tr class="memdesc:aa8418b770b2f8dcb0c73cfed5c7d3e0f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to serialize and deserialize collisionshapes to xml.  <a href="#aa8418b770b2f8dcb0c73cfed5c7d3e0f">More...</a><br/></td></tr>
<tr class="separator:aa8418b770b2f8dcb0c73cfed5c7d3e0f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:ae6baa10aaf283a92e1334b846800a2fe"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae6baa10aaf283a92e1334b846800a2fe"></a>
btTriangleMesh *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#ae6baa10aaf283a92e1334b846800a2fe">CreateBulletTrimesh</a> (<a class="el" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml">Graphics::Mesh</a> *ObjectMesh, bool UseAllSubmeshes)</td></tr>
<tr class="memdesc:ae6baa10aaf283a92e1334b846800a2fe"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a TriMesh to be used in TriMesh based collision shapes. <br/></td></tr>
<tr class="separator:ae6baa10aaf283a92e1334b846800a2fe"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afed185df2e6b781beed59ae7847b48ff"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="afed185df2e6b781beed59ae7847b48ff"></a>
<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#afed185df2e6b781beed59ae7847b48ff">WrapShape</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;Name, btCollisionShape *InternalShape)</td></tr>
<tr class="memdesc:afed185df2e6b781beed59ae7847b48ff"><td class="mdescLeft">&#160;</td><td class="mdescRight">Creates a wrapper for an internal bullet shape. <br/></td></tr>
<tr class="separator:afed185df2e6b781beed59ae7847b48ff"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:a5878a3669f80a6a1f0a7d7148d5ef8af"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a5878a3669f80a6a1f0a7d7148d5ef8af"></a>
std::map&lt; <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>, <br class="typebreak"/>
<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a5878a3669f80a6a1f0a7d7148d5ef8af">CollisionShapes</a></td></tr>
<tr class="memdesc:a5878a3669f80a6a1f0a7d7148d5ef8af"><td class="mdescLeft">&#160;</td><td class="mdescRight">This Stores the names and collision Shapes. <br/></td></tr>
<tr class="separator:a5878a3669f80a6a1f0a7d7148d5ef8af"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a01863d6ee8dd2bf122c4b690b593cd93"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a01863d6ee8dd2bf122c4b690b593cd93"></a>
std::set<br class="typebreak"/>
&lt; <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#a01863d6ee8dd2bf122c4b690b593cd93">UnnamedShapes</a></td></tr>
<tr class="memdesc:a01863d6ee8dd2bf122c4b690b593cd93"><td class="mdescLeft">&#160;</td><td class="mdescRight">Stores shapes that have notbe given a name. <br/></td></tr>
<tr class="separator:a01863d6ee8dd2bf122c4b690b593cd93"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_attribs_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pro_attribs_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&#160;Protected Attributes inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:ada3bad0fe77ff2fa7404eea7a5c16264 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ada3bad0fe77ff2fa7404eea7a5c16264">Initialized</a></td></tr>
<tr class="memdesc:ada3bad0fe77ff2fa7404eea7a5c16264 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Simple bool indicating whether or not this manager has been initialized.  <a href="#ada3bad0fe77ff2fa7404eea7a5c16264">More...</a><br/></td></tr>
<tr class="separator:ada3bad0fe77ff2fa7404eea7a5c16264 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ab27f3f7458b9a6f2a08974d096125ed5 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab27f3f7458b9a6f2a08974d096125ed5">PostMainLoop</a></td></tr>
<tr class="memdesc:ab27f3f7458b9a6f2a08974d096125ed5 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a function pointer to the function that should be called after running Main Loop Items.  <a href="#ab27f3f7458b9a6f2a08974d096125ed5">More...</a><br/></td></tr>
<tr class="separator:ab27f3f7458b9a6f2a08974d096125ed5 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1652110258237bc313a02757229d0f47 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ab23a9aa27c4e3cb58d902a149d3c6de2">Callback</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a1652110258237bc313a02757229d0f47">PreMainLoop</a></td></tr>
<tr class="memdesc:a1652110258237bc313a02757229d0f47 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a function pointer to the function that should be called before running Main Loop Items.  <a href="#a1652110258237bc313a02757229d0f47">More...</a><br/></td></tr>
<tr class="separator:a1652110258237bc313a02757229d0f47 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a96fb02bf2f4e8b4afe70dedd0d8c6ac9 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">short int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a96fb02bf2f4e8b4afe70dedd0d8c6ac9">Priority</a></td></tr>
<tr class="memdesc:a96fb02bf2f4e8b4afe70dedd0d8c6ac9 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">This is a weighting used by the main loop to decide what order the managers should be called in.  <a href="#a96fb02bf2f4e8b4afe70dedd0d8c6ac9">More...</a><br/></td></tr>
<tr class="separator:a96fb02bf2f4e8b4afe70dedd0d8c6ac9 inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae619b4bd732d7345e0ef59ecde6d03cc inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1Entresol.xhtml">Entresol</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc">TheEntresol</a></td></tr>
<tr class="memdesc:ae619b4bd732d7345e0ef59ecde6d03cc inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">The actual pointer to the world.  <a href="#ae619b4bd732d7345e0ef59ecde6d03cc">More...</a><br/></td></tr>
<tr class="separator:ae619b4bd732d7345e0ef59ecde6d03cc inherit pro_attribs_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="inherited"></a>
Additional Inherited Members</h2></td></tr>
<tr class="inherit_header pub_static_methods_classMezzanine_1_1ManagerBase"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classMezzanine_1_1ManagerBase')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml">Mezzanine::ManagerBase</a></td></tr>
<tr class="memitem:a446009f2bdf870d4a135d65e941bc066 inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a446009f2bdf870d4a135d65e941bc066">GetTypeNameAsString</a> (const <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a9a6f3e238f66cbc68dfec11e4160aa6c">ManagerType</a> &amp;<a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a9a6f3e238f66cbc68dfec11e4160aa6c">ManagerType</a>)</td></tr>
<tr class="memdesc:a446009f2bdf870d4a135d65e941bc066 inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the string form of the type of manager.  <a href="#a446009f2bdf870d4a135d65e941bc066">More...</a><br/></td></tr>
<tr class="separator:a446009f2bdf870d4a135d65e941bc066 inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ae76f56a9d8585b96c3cda9f51368b60a inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a9a6f3e238f66cbc68dfec11e4160aa6c">ManagerType</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ae76f56a9d8585b96c3cda9f51368b60a">GetTypeNameFromString</a> (const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;ManagerName)</td></tr>
<tr class="memdesc:ae76f56a9d8585b96c3cda9f51368b60a inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets the type of manager requested from a string.  <a href="#ae76f56a9d8585b96c3cda9f51368b60a">More...</a><br/></td></tr>
<tr class="separator:ae76f56a9d8585b96c3cda9f51368b60a inherit pub_static_methods_classMezzanine_1_1ManagerBase"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pub_static_methods_classMezzanine_1_1Singleton"><td colspan="2" onclick="javascript:toggleInherit('pub_static_methods_classMezzanine_1_1Singleton')"><img src="closed.png" alt="-"/>&#160;Static Public Member Functions inherited from <a class="el" href="classMezzanine_1_1Singleton.xhtml">Mezzanine::Singleton&lt; CollisionShapeManager &gt;</a></td></tr>
<tr class="memitem:a78fc425584913f0b2c615ec440871a67 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top">static <a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml">CollisionShapeManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67">GetSingletonPtr</a> ()</td></tr>
<tr class="memdesc:a78fc425584913f0b2c615ec440871a67 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Fetches a pointer to the singleton.  <a href="#a78fc425584913f0b2c615ec440871a67">More...</a><br/></td></tr>
<tr class="separator:a78fc425584913f0b2c615ec440871a67 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a554165fe3e4b594b678d64215fd7a6f9 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1Singleton.xhtml#a554165fe3e4b594b678d64215fd7a6f9">SingletonValid</a> ()</td></tr>
<tr class="memdesc:a554165fe3e4b594b678d64215fd7a6f9 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="mdescLeft">&#160;</td><td class="mdescRight">Checks to see if the singleton pointer is valid.  <a href="#a554165fe3e4b594b678d64215fd7a6f9">More...</a><br/></td></tr>
<tr class="separator:a554165fe3e4b594b678d64215fd7a6f9 inherit pub_static_methods_classMezzanine_1_1Singleton"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="inherit_header pro_static_attribs_classMezzanine_1_1Singleton"><td colspan="2" onclick="javascript:toggleInherit('pro_static_attribs_classMezzanine_1_1Singleton')"><img src="closed.png" alt="-"/>&#160;Static Protected Attributes inherited from <a class="el" href="classMezzanine_1_1Singleton.xhtml">Mezzanine::Singleton&lt; CollisionShapeManager &gt;</a></td></tr>
<tr class="memitem:a0db9959ccd7daa1345f4567aa0b0655d inherit pro_static_attribs_classMezzanine_1_1Singleton"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a0db9959ccd7daa1345f4567aa0b0655d"></a>
static <a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml">CollisionShapeManager</a> *&#160;</td><td class="memItemRight" valign="bottom"><b>SingletonPtr</b></td></tr>
<tr class="separator:a0db9959ccd7daa1345f4567aa0b0655d inherit pro_static_attribs_classMezzanine_1_1Singleton"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This manager is for the storage of all shapes and creation of mesh shapes. </p>
<p>Collision shapes do not need to be stored in this manager, but can be re-used across multiple <a class="el" href="classMezzanine_1_1World.xhtml">World</a> objects with physics representations. For performance reasons, it is recommended to store and re-use a collision shape anytime you need it in multiple objects, rather then re-creating the same shape again and again. </p>

<p>Definition at line <a class="el" href="collisionshapemanager_8h_source.xhtml#l00081">81</a> of file <a class="el" href="collisionshapemanager_8h_source.xhtml">collisionshapemanager.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a33671dfe83da86a6abbb172ff8a679f8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::CollisionShapeManager::CollisionShapeManager </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">XML::Node</a> &amp;&#160;</td>
          <td class="paramname"><em>XMLNode</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p><a class="el" href="namespaceMezzanine_1_1XML.xhtml" title="All tools for working with XML are located in this namespace.">XML</a> constructor. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">XMLNode</td><td>The node of the xml document to construct from. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a27ee4f89c25600d26cf770836ed42d68"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#afdfd6a59aeee9ba1a31e7ad3ae85bb87">iterator</a> Mezzanine::CollisionShapeManager::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get an Iterator pointing to the first item in the container. </p>
<dl class="section return"><dt>Returns</dt><dd>An iterator that is compatible with most std algorithms and points to the first collisionshape entry. </dd></dl>

</div>
</div>
<a class="anchor" id="abb94fad923a57599125bcbf73bc1e306"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#add99b0db976867d9e370b785474c7296">const_iterator</a> Mezzanine::CollisionShapeManager::begin </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get a const Iterator pointing at the first item in the container. </p>
<dl class="section return"><dt>Returns</dt><dd>A const iterator that is compatible with most std algorithms and points to the first collisionshape entry. </dd></dl>

</div>
</div>
<a class="anchor" id="aa8b995367ea6dfb4e0e792817304eb6f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::CollisionShapeManager::DestroyShape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> *&#160;</td>
          <td class="paramname"><em>Shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes a shape from this manager and deletes it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Shape</td><td>Pointer to the shape to be destroyed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9304a02b149b0fda8db598d34e7c51e8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::CollisionShapeManager::DestroyShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes a shape from this manager and deletes it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the shape to be destroyed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="adb317a9d7e5eff54ca00ad35db7813ca"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::CollisionShapeManager::DoMainLoopItems </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>The main loop calls this once per frame. </p>
<p>This is where each manager is expected to put anything that needs to be run each iteration of the main loop </p>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a4ee29e4baf6c4b9a3bfec1b2258d5cd2">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="adaab69f72839d638bba4b58fa8b23870"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#afdfd6a59aeee9ba1a31e7ad3ae85bb87">iterator</a> Mezzanine::CollisionShapeManager::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get an Iterator pointing to one past the last item in the container. </p>
<dl class="section return"><dt>Returns</dt><dd>An iterator that is compatible with most std algorithms and points to one past the last valid collision shape entry. </dd></dl>

</div>
</div>
<a class="anchor" id="a300502ff40df1511b4863c8fce76092f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1CollisionShapeManager.xhtml#add99b0db976867d9e370b785474c7296">const_iterator</a> Mezzanine::CollisionShapeManager::end </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get an const Iterator pointing to one past the last item in the container. </p>
<dl class="section return"><dt>Returns</dt><dd>An const iterator that is compatible with most std algorithms and points to one past the last valid collision shape entry. </dd></dl>

</div>
</div>
<a class="anchor" id="a8f7546e3b720cd3352a6ce32f3332b00"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml">Physics::ConvexHullCollisionShape</a>* Mezzanine::CollisionShapeManager::GenerateConvexHull </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml">Graphics::Mesh</a> *&#160;</td>
          <td class="paramname"><em>ObjectMesh</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>UseAllSubmeshes</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates a Convex Hull from a provided mesh. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created shape. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to give the created shape. </td></tr>
    <tr><td class="paramname">ObjectMesh</td><td>The mesh to base this shape off of. </td></tr>
    <tr><td class="paramname">UseAllSubMeshes</td><td>Whether or not you want to use all submesh information when generating this shape. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abf8682575dc0f393203acc3a93983ade"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Physics_1_1ConvexHullCollisionShape.xhtml">Physics::ConvexHullCollisionShape</a>* Mezzanine::CollisionShapeManager::GenerateConvexHull </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>MeshName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>UseAllSubmeshes</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates a Convex Hull from a provided mesh. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created shape. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to give the created shape. </td></tr>
    <tr><td class="paramname">MeshName</td><td>The name of the mesh to base this shape off of. </td></tr>
    <tr><td class="paramname">Group</td><td>The resource group where the mesh can be found. </td></tr>
    <tr><td class="paramname">UseAllSubMeshes</td><td>Whether or not you want to use all submesh information when generating this shape. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a305181edaf87de93b12f49d91e719139"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml">Physics::DynamicMeshCollisionShape</a>* Mezzanine::CollisionShapeManager::GenerateDynamicTriMesh </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml">Graphics::Mesh</a> *&#160;</td>
          <td class="paramname"><em>ObjectMesh</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>UseAllSubmeshes</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates a mesh shape for dynamic objects. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created shape. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to give the created shape. </td></tr>
    <tr><td class="paramname">ObjectMesh</td><td>The mesh to base this shape off of. </td></tr>
    <tr><td class="paramname">UseAllSubMeshes</td><td>Whether or not you want to use all submesh information when generating this shape. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a2b307d557b4b6a77ab7c923e5a20c00e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Physics_1_1DynamicMeshCollisionShape.xhtml">Physics::DynamicMeshCollisionShape</a>* Mezzanine::CollisionShapeManager::GenerateDynamicTriMesh </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>MeshName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>UseAllSubmeshes</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates a mesh shape for dynamic objects. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created shape. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to give the created shape. </td></tr>
    <tr><td class="paramname">MeshName</td><td>The name of the mesh to base this shape off of. </td></tr>
    <tr><td class="paramname">Group</td><td>The resource group where the mesh can be found. </td></tr>
    <tr><td class="paramname">UseAllSubMeshes</td><td>Whether or not you want to use all submesh information when generating this shape. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af30cadd677c1e8012ed62e89e4b01bda"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml">Physics::StaticMeshCollisionShape</a>* Mezzanine::CollisionShapeManager::GenerateStaticTriMesh </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml">Graphics::Mesh</a> *&#160;</td>
          <td class="paramname"><em>ObjectMesh</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>UseAllSubmeshes</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates a mesh shape for static objects. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created shape. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to give the created shape. </td></tr>
    <tr><td class="paramname">ObjectMesh</td><td>The mesh to base this shape off of. </td></tr>
    <tr><td class="paramname">UseAllSubMeshes</td><td>Whether or not you want to use all submesh information when generating this shape. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9bf448c6ba6507714a1f98b5bf5c7c92"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Physics_1_1StaticMeshCollisionShape.xhtml">Physics::StaticMeshCollisionShape</a>* Mezzanine::CollisionShapeManager::GenerateStaticTriMesh </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>MeshName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>UseAllSubmeshes</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates a mesh shape for static objects. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created shape. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to give the created shape. </td></tr>
    <tr><td class="paramname">MeshName</td><td>The name of the mesh to base this shape off of. </td></tr>
    <tr><td class="paramname">Group</td><td>The resource group where the mesh can be found. </td></tr>
    <tr><td class="paramname">UseAllSubMeshes</td><td>Whether or not you want to use all submesh information when generating this shape. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a85d67e2feacaf03fcc99433f36511f44"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> Mezzanine::CollisionShapeManager::GetImplementationTypeName </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This Allows any manager name to be sent to a stream. Primarily used for logging. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a String that contains the name. </dd></dl>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#ac41d60f674e75d3d16b5544f4feb199c">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="ad11ff782f278396fd7bfc4ba238d6d1a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a9a6f3e238f66cbc68dfec11e4160aa6c">ManagerType</a> Mezzanine::CollisionShapeManager::GetInterfaceType </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>This returns the type of this manager. </p>
<p>This is intended to make using and casting from Manager base easier. With this is is possible to cast from <a class="el" href="classMezzanine_1_1ManagerBase.xhtml" title="This is the base class from which all the World Managers inherit.">ManagerBase</a> to the correct Manager Type. </p>
<dl class="section return"><dt>Returns</dt><dd>This returns a ManagerTypeName to identify what this can be safely cast to. </dd></dl>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a388aa37ed71b8667785b789c137aa8c6">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="a73bac4fdb338596d9c19f46b56a72c04"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a> Mezzanine::CollisionShapeManager::GetNumStoredShapes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets the number of stored shapes in this manager. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a whole representing how many shapes this manager is storing. </dd></dl>

</div>
</div>
<a class="anchor" id="aa5bc796ce3f9f94362ca76f157a1fad1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a>* Mezzanine::CollisionShapeManager::GetShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Gets a shape already stored in this manager. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the desired shape. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>the name of the desired shape. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ad285cc5c620a3dd8daaec716fd2b7954"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::set&lt;<a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a>*&gt;&amp; Mezzanine::CollisionShapeManager::GetUnnamedShapes </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Returns a vector of unnamed shapes stored in this manager. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a reference to a vector storing all the unnamed shapes loaded from files.</dd></dl>
<p>Shapes created in code require a name to be constructed. However, sometimes when loading a file a shape may not have a name, since one isn't required by the .bullet file format in order for a shape to be serialized. When that happens those shapes go here, and from there can be handled by the game programmer however they see fit. </p>

</div>
</div>
<a class="anchor" id="aa9a24e60f105770d1adba71ac8af15f9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::CollisionShapeManager::Initialize </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Configure Items requiring other Managers. </p>
<p>If you are using the <a class="el" href="classMezzanine_1_1World.xhtml">Mezzanine::World</a> this is called when Mezzanine::World::GameInit() is called. It is expected that by the time this is called either ManagerBase::ManagerBase(World*) or ManagerBase::SetGameWorld(World*) will have been called. This is where all configuration that requires atleast one other manager on the <a class="el" href="classMezzanine_1_1World.xhtml">Mezzanine::World</a> to exist.<br/>
<br/>
 Yes we know it is spelled wrong, but are Zs cooler anyway. </p>

<p>Implements <a class="el" href="classMezzanine_1_1ManagerBase.xhtml#a864e3cac11928a602c1db28fa2d52ee2">Mezzanine::ManagerBase</a>.</p>

</div>
</div>
<a class="anchor" id="a5bc34938bcd1fb949297c6c55f10710f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::CollisionShapeManager::LoadAllShapesFromFile </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>FileName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Loads all shapes saved in an existing .bullet file, and stores them in this manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">FileName</td><td>The name of the file to load shapes from. </td></tr>
    <tr><td class="paramname">Group</td><td>The resource group the .bullet file is located in. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a4467ed326534e12c37e7c724f96a7b5e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml">Physics::CompoundCollisionShape</a>* Mezzanine::CollisionShapeManager::PerformConvexDecomposition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Graphics_1_1Mesh.xhtml">Graphics::Mesh</a> *&#160;</td>
          <td class="paramname"><em>ObjectMesh</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td>
          <td class="paramname"><em>Depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>CPercent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>PPercent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>UseAllSubmeshes</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates a compound shape of Convex Hulls from a provided mesh. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created shape. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to give the created shape. </td></tr>
    <tr><td class="paramname">ObjectMesh</td><td>The mesh to base this shape off of. </td></tr>
    <tr><td class="paramname">UseAllSubMeshes</td><td>Whether or not you want to use all submesh information when generating this shape. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a28f49a5847644c22f191c41049e6ffb2"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classMezzanine_1_1Physics_1_1CompoundCollisionShape.xhtml">Physics::CompoundCollisionShape</a>* Mezzanine::CollisionShapeManager::PerformConvexDecomposition </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>MeshName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Group</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493">Whole</a>&#160;</td>
          <td class="paramname"><em>Depth</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>CPercent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6">Real</a>&#160;</td>
          <td class="paramname"><em>PPercent</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>UseAllSubmeshes</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Generates a compound shape of Convex Hulls from a provided mesh. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a pointer to the created shape. </dd></dl>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name to give the created shape. </td></tr>
    <tr><td class="paramname">MeshName</td><td>The name of the mesh to base this shape off of. </td></tr>
    <tr><td class="paramname">Group</td><td>The resource group where the mesh can be found. </td></tr>
    <tr><td class="paramname">UseAllSubMeshes</td><td>Whether or not you want to use all submesh information when generating this shape. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a62d248e52a06695c4638d5c4a53c6d25"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::CollisionShapeManager::RemoveShape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> *&#160;</td>
          <td class="paramname"><em>Shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes a shape from this manager without deleting it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Shape</td><td>Pointer to the shape to be removed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a7c39a1d48821916619be5837a233b3b6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::CollisionShapeManager::RemoveShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>Name</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Removes a shape from this manager without deleting it. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Name</td><td>The name of the shape to be removed. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="aee50943037df853e6fbe5193616f7898"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::CollisionShapeManager::SaveAllStoredShapesToFile </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>FileName</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Takes all the shapes currently stored this manager and saves them to a .bullet file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">FileName</td><td>The name of the file to save the shapes to. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="af885289c561d840f7542e88e5141026c"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::CollisionShapeManager::SaveShapesToFile </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>FileName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; <a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>ShapesToSave</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Saves all shapes contained in a vector and saves them to a .bullet file. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">FileName</td><td>The name of the file to save the shapes to. </td></tr>
    <tr><td class="paramname">ShapesToSave</td><td>A vector of collisions shapes that will be saved. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a3c8e9621a78c0a9be58bd5a551998b81"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void Mezzanine::CollisionShapeManager::SetNameForUnnamedShape </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86">String</a> &amp;&#160;</td>
          <td class="paramname"><em>NewName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> *&#160;</td>
          <td class="paramname"><em>Shape</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Assigns a name to an unnamed shape. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">NewName</td><td>The new name to be assigned to a shape. </td></tr>
    <tr><td class="paramname">Shape</td><td>The shape to be given the new name. This shape must be a valid shape currently stored in the set of unnamed shapes. Calling this fucntion will not remove it from that set, but will move it into the named collision shape map. If you want the shape removed from the Unnamed set, you must do it yourself. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="ab7c64d521d289e6c7272143977065aec"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual void Mezzanine::CollisionShapeManager::StoreShape </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml">Physics::CollisionShape</a> *&#160;</td>
          <td class="paramname"><em>Shape</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Stores a pre-made shape in this manager. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">Shape</td><td>The shape to be stored. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="aa8418b770b2f8dcb0c73cfed5c7d3e0f"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classMezzanine_1_1Physics_1_1CollisionShapeDeSerializer.xhtml">Physics::CollisionShapeDeSerializer</a> Mezzanine::CollisionShapeManager::ShapeDeserializer</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Used to serialize and deserialize collisionshapes to xml. </p>
<p>More Sophisticated shapes may reference a .bullet or a .mesh file. </p>

<p>Definition at line <a class="el" href="collisionshapemanager_8h_source.xhtml#l00228">228</a> of file <a class="el" href="collisionshapemanager_8h_source.xhtml">collisionshapemanager.h</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li>/home/sqeaky/Code/Mezzanine/Mezzanine/src/<a class="el" href="collisionshapemanager_8h_source.xhtml">collisionshapemanager.h</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat May 18 2013 17:17:07 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
