<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/sqeaky/Projects/MezzanineCurrent/Mezzanine/Mezzanine/src/XML/xml.h File Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.1.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_2cb3f4bbed36e97976e95e8895b6e0de.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_28f80092e9c3ae4676af90cfa1b625bf.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_d1e0d7c6b3ad5ab368e7e773a2743d20.xhtml">XML</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#namespaces">Namespaces</a> &#124;
<a href="#define-members">Macros</a> &#124;
<a href="#typedef-members">Typedefs</a> &#124;
<a href="#enum-members">Enumerations</a> &#124;
<a href="#func-members">Functions</a> &#124;
<a href="#var-members">Variables</a>  </div>
  <div class="headertitle">
<div class="title">xml.h File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is where bulk of the XML subsystem is declare, there are numerous class that are all tighlty integrated so one file seemed appropriate.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;crossplatform.h&quot;</code><br/>
<code>#include &quot;XML/objectrange.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="xmldoc_8h_source.xhtml">XML/xmldoc.h</a>&quot;</code><br/>
<code>#include &quot;exception.h&quot;</code><br/>
<code>#include &quot;<a class="el" href="datastream_8h_source.xhtml">Resource/datastream.h</a>&quot;</code><br/>
<code>#include &lt;stddef.h&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;iosfwd&gt;</code><br/>
<code>#include &lt;string&gt;</code><br/>
</div><div class="textblock"><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Include dependency graph for xml.h:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="xml_8h__incl.svg" width="100%" height="528"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
</div><div class="textblock"><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> This graph shows which files directly or indirectly include this file:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="xml_8h__dep__incl.svg" width="100%" height="600"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
</div>
<p><a href="xml_8h_source.xhtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml">Mezzanine::XML::Attribute</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A light-weight handle for manipulating attributes in DOM tree.  <a href="classMezzanine_1_1XML_1_1Attribute.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1AttributeIterator.xhtml">Mezzanine::XML::AttributeIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight"><a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">Attribute</a> iterator (a bidirectional iterator over a collection of <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">Attribute</a>).  <a href="classMezzanine_1_1XML_1_1AttributeIterator.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml">Mezzanine::XML::Document</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">The root node of any xml hierarchy is a <a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml" title="The root node of any xml hierarchy is a Document Node.">Document</a> <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a>.  <a href="classMezzanine_1_1XML_1_1Document.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NamedNode__iterator.xhtml">Mezzanine::XML::NamedNode_iterator</a></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Mezzanine::XML::Node</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A light-weight handle for manipulating nodes in DOM tree.  <a href="classMezzanine_1_1XML_1_1Node.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">Mezzanine::XML::NodeIterator</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Child node iterator (a bidirectional iterator over a collection of <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a>)  <a href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1XML_1_1ParseResult.xhtml">Mezzanine::XML::ParseResult</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">All the information needed to troubleshoot a Parsing error.  <a href="structMezzanine_1_1XML_1_1ParseResult.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1Text.xhtml">Mezzanine::XML::Text</a></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1TreeWalker.xhtml">Mezzanine::XML::TreeWalker</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Used to call a function for_each member of the subtree of nodes descended from a specific node.  <a href="classMezzanine_1_1XML_1_1TreeWalker.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1Writer.xhtml">Mezzanine::XML::Writer</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Interface for node printing (see <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#aef52a586c2e21dce71397f3400c61b72">Node::Print</a>)  <a href="classMezzanine_1_1XML_1_1Writer.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1WriterFile.xhtml">Mezzanine::XML::WriterFile</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of <a class="el" href="classMezzanine_1_1XML_1_1Writer.xhtml">Writer</a> intended for writing to FILEs as defined in stdio.  <a href="classMezzanine_1_1XML_1_1WriterFile.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1WriterStream.xhtml">Mezzanine::XML::WriterStream</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An implementation of <a class="el" href="classMezzanine_1_1XML_1_1Writer.xhtml">Writer</a> intended for writing std::ostreams.  <a href="classMezzanine_1_1XML_1_1WriterStream.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XMLStreamWrapper.xhtml">Mezzanine::XML::XMLStreamWrapper</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">This represents a simple wrapper that makes data streams compatible with the XML API.  <a href="classMezzanine_1_1XML_1_1XMLStreamWrapper.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathException.xhtml">Mezzanine::XML::XPathException</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">Thrown in a variety of XPath only situations, to indicate type mismatch or other issues.  <a href="classMezzanine_1_1XML_1_1XPathException.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathNode.xhtml">Mezzanine::XML::XPathNode</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">An XPath node which can store handles to a <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> or an <a class="el" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">XML::Attribute</a>.  <a href="classMezzanine_1_1XML_1_1XPathNode.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathNodeSet.xhtml">Mezzanine::XML::XPathNodeSet</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A collection of nodes that an <a class="el" href="classMezzanine_1_1XML_1_1XPathQuery.xhtml" title="A compiled XPath query object.">XPathQuery</a> can work on.  <a href="classMezzanine_1_1XML_1_1XPathNodeSet.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structMezzanine_1_1XML_1_1XPathParseResult.xhtml">Mezzanine::XML::XPathParseResult</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">XPath parsing result.  <a href="structMezzanine_1_1XML_1_1XPathParseResult.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathQuery.xhtml">Mezzanine::XML::XPathQuery</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A compiled XPath query object.  <a href="classMezzanine_1_1XML_1_1XPathQuery.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathVariable.xhtml">Mezzanine::XML::XPathVariable</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A single XPath variable.  <a href="classMezzanine_1_1XML_1_1XPathVariable.xhtml#details">More...</a><br/></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1XPathVariableSet.xhtml">Mezzanine::XML::XPathVariableSet</a></td></tr>
<tr class="memdesc:"><td class="mdescLeft">&#160;</td><td class="mdescRight">A set of XPath variables.  <a href="classMezzanine_1_1XML_1_1XPathVariableSet.xhtml#details">More...</a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr class="memitem:namespaceMezzanine"><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></td></tr>
<tr class="memdesc:namespaceMezzanine"><td class="mdescLeft">&#160;</td><td class="mdescRight">The bulk of the engine components go in this namspace. <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="define-members"></a>
Macros</h2></td></tr>
<tr class="memitem:a18cfd9eafeb7e99a44f25ab761ed4897"><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="xml_8h.xhtml#a18cfd9eafeb7e99a44f25ab761ed4897">_XML_H</a></td></tr>
<tr class="memdesc:a18cfd9eafeb7e99a44f25ab761ed4897"><td class="mdescLeft">&#160;</td><td class="mdescRight">Prevents accidental loading of the file <a class="el" href="xml_8h.xhtml" title="This is where bulk of the XML subsystem is declare, there are numerous class that are all tighlty int...">xml.h</a> multiple times.  <a href="#a18cfd9eafeb7e99a44f25ab761ed4897"></a><br/></td></tr>
<tr class="memitem:a32181f1cbd2b36ff63b31c33cf70e118"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a32181f1cbd2b36ff63b31c33cf70e118"></a>
#define&#160;</td><td class="memItemRight" valign="bottom"><b>XML_VERSION</b>&#160;&#160;&#160;120</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr class="memitem:a07ad174921b7a0efcc0e94467d94e19f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a07ad174921b7a0efcc0e94467d94e19f"></a>
typedef void *(*&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::AllocationFunction</b> )(size_t size)</td></tr>
<tr class="memdesc:a07ad174921b7a0efcc0e94467d94e19f"><td class="mdescLeft">&#160;</td><td class="mdescRight">Memory allocation function interface; returns pointer to allocated memory or NULL on failure. <br/></td></tr>
<tr class="memitem:adb13a18915ff3de65f44d0ebe632603a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="adb13a18915ff3de65f44d0ebe632603a"></a>
typedef void(*&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::deAllocationFunction</b> )(void *ptr)</td></tr>
<tr class="memdesc:adb13a18915ff3de65f44d0ebe632603a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Memory deallocation function interface. <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr class="memitem:a77aa299731a2a63d9bab92cf6f03b057"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><b>Encoding</b> { <br/>
&#160;&#160;<b>Mezzanine::XML::EncodingAuto</b>, 
<b>Mezzanine::XML::EncodingUTF8</b>, 
<b>Mezzanine::XML::EncodingUTF16LE</b>, 
<b>Mezzanine::XML::EncodingUTF16BE</b>, 
<br/>
&#160;&#160;<b>Mezzanine::XML::EncodingUTF16</b>, 
<b>Mezzanine::XML::EncodingUTF32LE</b>, 
<b>Mezzanine::XML::EncodingUTF32BE</b>, 
<b>Mezzanine::XML::EncodingUTF32</b>, 
<br/>
&#160;&#160;<b>Mezzanine::XML::Encodingwchar_t</b>, 
<b>Mezzanine::XML::EncodingLatin1</b>
<br/>
 }</td></tr>
<tr class="memdesc:a77aa299731a2a63d9bab92cf6f03b057"><td class="mdescLeft">&#160;</td><td class="mdescRight">These flags determine the encoding of input data for an XML document. <br/></td></tr>
<tr class="memitem:a79dc84831ed2506631fb4adeb899564a"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><b>NodeType</b> { <br/>
&#160;&#160;<b>Mezzanine::XML::NodeNull</b>, 
<b>Mezzanine::XML::NodeDocument</b>, 
<b>Mezzanine::XML::NodeElement</b>, 
<b>Mezzanine::XML::NodePcdata</b>, 
<br/>
&#160;&#160;<b>Mezzanine::XML::NodeCdata</b>, 
<b>Mezzanine::XML::NodeComment</b>, 
<b>Mezzanine::XML::NodePi</b>, 
<b>Mezzanine::XML::NodeDeclaration</b>, 
<br/>
&#160;&#160;<b>Mezzanine::XML::NodeDocType</b>
<br/>
 }</td></tr>
<tr class="memdesc:a79dc84831ed2506631fb4adeb899564a"><td class="mdescLeft">&#160;</td><td class="mdescRight">The types of nodes that could be in the XML Tree. <br/></td></tr>
<tr class="memitem:a25d44cacbf75a9d031eae1baa9481442"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><b>ParseStatus</b> { <br/>
&#160;&#160;<b>Mezzanine::XML::StatusOk</b> =  0, 
<b>Mezzanine::XML::StatusFileNotFound</b>, 
<b>Mezzanine::XML::StatusIOError</b>, 
<b>Mezzanine::XML::StatusOutOfMemory</b>, 
<br/>
&#160;&#160;<b>Mezzanine::XML::StatusInternalError</b>, 
<b>Mezzanine::XML::StatusUnrecognizedTag</b>, 
<b>Mezzanine::XML::StatusBadPi</b>, 
<b>Mezzanine::XML::StatusBadComment</b>, 
<br/>
&#160;&#160;<b>Mezzanine::XML::StatusBadCdata</b>, 
<b>Mezzanine::XML::StatusBadDocType</b>, 
<b>Mezzanine::XML::StatusBadPcdata</b>, 
<b>Mezzanine::XML::StatusBadStartElement</b>, 
<br/>
&#160;&#160;<b>Mezzanine::XML::StatusBadAttribute</b>, 
<b>Mezzanine::XML::StatusBadEndElement</b>, 
<b>Mezzanine::XML::StatusEndElementMismatch</b>
<br/>
 }</td></tr>
<tr class="memdesc:a25d44cacbf75a9d031eae1baa9481442"><td class="mdescLeft">&#160;</td><td class="mdescRight">These statuses are used to help determine what issues, if any the parser had. the XML parser had. <br/></td></tr>
<tr class="memitem:a9bd26a1f9b2d49df236a663038cd77ee"><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><b>XPathValueType</b> { <br/>
&#160;&#160;<b>Mezzanine::XML::XPathTypeNone</b>, 
<b>Mezzanine::XML::XPathTypeNodeSet</b>, 
<b>Mezzanine::XML::XPathTypeNumber</b>, 
<b>Mezzanine::XML::XPathTypeString</b>, 
<br/>
&#160;&#160;<b>Mezzanine::XML::XPathTypeBoolean</b>
<br/>
 }</td></tr>
<tr class="memdesc:a9bd26a1f9b2d49df236a663038cd77ee"><td class="mdescLeft">&#160;</td><td class="mdescRight">XPathQuery return type. <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr class="memitem:abffe9a84ab44a5e5e9ad71e296be34dc"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; char, <br class="typebreak"/>
std::char_traits&lt; char &gt;<br class="typebreak"/>
, std::allocator&lt; char &gt;<br class="typebreak"/>
 &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::AsUtf8</b> (const wchar_t *str)</td></tr>
<tr class="memdesc:abffe9a84ab44a5e5e9ad71e296be34dc"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a c-style string of wchar_t to std::string containing UTF8.  <a href="#abffe9a84ab44a5e5e9ad71e296be34dc"></a><br/></td></tr>
<tr class="memitem:a2257e517c4c111ad4a38236f152f2a5a"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; char, <br class="typebreak"/>
std::char_traits&lt; char &gt;<br class="typebreak"/>
, std::allocator&lt; char &gt;<br class="typebreak"/>
 &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::AsUtf8</b> (const std::basic_string&lt; wchar_t, std::char_traits&lt; wchar_t &gt;, std::allocator&lt; wchar_t &gt; &gt; &amp;str)</td></tr>
<tr class="memdesc:a2257e517c4c111ad4a38236f152f2a5a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a std::wstring to a UTF8 std::string.  <a href="#a2257e517c4c111ad4a38236f152f2a5a"></a><br/></td></tr>
<tr class="memitem:a6bd29b5bfc542d609be8d06853a38ec9"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; wchar_t, <br class="typebreak"/>
std::char_traits&lt; wchar_t &gt;<br class="typebreak"/>
, std::allocator&lt; wchar_t &gt;<br class="typebreak"/>
 &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::AsWide</b> (const char *str)</td></tr>
<tr class="memdesc:a6bd29b5bfc542d609be8d06853a38ec9"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a Convert a c-style string to std::wstring containing native encoding (Usually UCS2 on windows and UTF32 on Linux/Mac).  <a href="#a6bd29b5bfc542d609be8d06853a38ec9"></a><br/></td></tr>
<tr class="memitem:ad8a5bbf1f662e8c4bf29016ce503e1f7"><td class="memItemLeft" align="right" valign="top">std::basic_string&lt; wchar_t, <br class="typebreak"/>
std::char_traits&lt; wchar_t &gt;<br class="typebreak"/>
, std::allocator&lt; wchar_t &gt;<br class="typebreak"/>
 &gt; <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::AsWide</b> (const std::basic_string&lt; char, std::char_traits&lt; char &gt;, std::allocator&lt; char &gt; &gt; &amp;str)</td></tr>
<tr class="memdesc:ad8a5bbf1f662e8c4bf29016ce503e1f7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Convert a Convert a std::string to std::wstring containing native encoding (Usually UCS2 on windows and UTF32 on Linux/Mac).  <a href="#ad8a5bbf1f662e8c4bf29016ce503e1f7"></a><br/></td></tr>
<tr class="memitem:a0087ce6526e3842467be8261ae75c116"><td class="memItemLeft" align="right" valign="top">AllocationFunction <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::GetMemoryAllocationFunction</b> ()</td></tr>
<tr class="memdesc:a0087ce6526e3842467be8261ae75c116"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current allocation funciton.  <a href="#a0087ce6526e3842467be8261ae75c116"></a><br/></td></tr>
<tr class="memitem:adab9aafffd1bab64cc55f38477925da6"><td class="memItemLeft" align="right" valign="top">deAllocationFunction <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::GetMemoryDeallocationFunction</b> ()</td></tr>
<tr class="memdesc:adab9aafffd1bab64cc55f38477925da6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the current allocation funciton.  <a href="#adab9aafffd1bab64cc55f38477925da6"></a><br/></td></tr>
<tr class="memitem:a23d3bc5d06c91b2b161b5dd881f8aa3b"><td class="memItemLeft" align="right" valign="top">void <a class="el" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc">MEZZ_LIB</a>&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::SetMemory_management_functions</b> (AllocationFunction allocate, deAllocationFunction deallocate)</td></tr>
<tr class="memdesc:a23d3bc5d06c91b2b161b5dd881f8aa3b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Override default memory management functions. All subsequent allocations/deallocations will be performed via supplied functions.  <a href="#a23d3bc5d06c91b2b161b5dd881f8aa3b"></a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="var-members"></a>
Variables</h2></td></tr>
<tr class="memitem:a9a9b9245ea32348c78817d002ecd61fc"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::FormatDefault</b> = FormatRaw</td></tr>
<tr class="memdesc:a9a9b9245ea32348c78817d002ecd61fc"><td class="mdescLeft">&#160;</td><td class="mdescRight">The default set of formatting flags. Only FormatRaw is enabled.  <a href="#a9a9b9245ea32348c78817d002ecd61fc"></a><br/></td></tr>
<tr class="memitem:a8c0eb20115e575906a663bc7fe5ba356"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8c0eb20115e575906a663bc7fe5ba356"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::FormatIndent</b> = 0x01</td></tr>
<tr class="memdesc:a8c0eb20115e575906a663bc7fe5ba356"><td class="mdescLeft">&#160;</td><td class="mdescRight">Indent the nodes that are written to output stream with as many indentation strings as deep the node is in DOM tree. This flag is off by default. <br/></td></tr>
<tr class="memitem:a965e10fd6db7e52461671ce5a05da1e6"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a965e10fd6db7e52461671ce5a05da1e6"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::FormatNoDeclaration</b> = 0x08</td></tr>
<tr class="memdesc:a965e10fd6db7e52461671ce5a05da1e6"><td class="mdescLeft">&#160;</td><td class="mdescRight">Omit default XML declaration even if there is no declaration in the document. This flag is off by default. <br/></td></tr>
<tr class="memitem:a3c62c89a322e80ecda0682755ef2a825"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3c62c89a322e80ecda0682755ef2a825"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::FormatNoEscapes</b> = 0x10</td></tr>
<tr class="memdesc:a3c62c89a322e80ecda0682755ef2a825"><td class="mdescLeft">&#160;</td><td class="mdescRight">Don't escape GetAttribute Values and PCDATA contents. This flag is off by default. <br/></td></tr>
<tr class="memitem:a113ddc3c498f17dde89bce5b7ceb5661"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a113ddc3c498f17dde89bce5b7ceb5661"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::FormatRaw</b> = 0x04</td></tr>
<tr class="memdesc:a113ddc3c498f17dde89bce5b7ceb5661"><td class="mdescLeft">&#160;</td><td class="mdescRight">Use raw output mode (no indentation and no line breaks are written). This flag is on by default. <br/></td></tr>
<tr class="memitem:aba51fb162156123758bf5e06f122ab76"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aba51fb162156123758bf5e06f122ab76"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::FormatSaveFileText</b> = 0x20</td></tr>
<tr class="memdesc:aba51fb162156123758bf5e06f122ab76"><td class="mdescLeft">&#160;</td><td class="mdescRight">Open file using text mode in <a class="el" href="classMezzanine_1_1XML_1_1Document.xhtml#a42feffdea66cc25d48fbc81eff21268e" title="Save XML to file.">XML::Document::SaveFile</a>. This enables special character (i.e. new-line) conversions on some systems. This flag is off by default. <br/></td></tr>
<tr class="memitem:a38a1aa387d54f0386ed79a0b04bee1e4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a38a1aa387d54f0386ed79a0b04bee1e4"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::FormatWriteBom</b> = 0x02</td></tr>
<tr class="memdesc:a38a1aa387d54f0386ed79a0b04bee1e4"><td class="mdescLeft">&#160;</td><td class="mdescRight">Write encoding-specific Byte Order Mark (BOM) to the output stream. This flag is off by default. <br/></td></tr>
<tr class="memitem:a4504643b4b1ad4cd0ed85fb42b25e1a4"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a4504643b4b1ad4cd0ed85fb42b25e1a4"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseCdata</b> = 0x0004</td></tr>
<tr class="memdesc:a4504643b4b1ad4cd0ed85fb42b25e1a4"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if CDATA sections (NodeCdata) are added to the DOM tree. This flag is on by default. <br/></td></tr>
<tr class="memitem:aa47eb6ac501513239cda4ff7b23f6786"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="aa47eb6ac501513239cda4ff7b23f6786"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseComments</b> = 0x0002</td></tr>
<tr class="memdesc:aa47eb6ac501513239cda4ff7b23f6786"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if comments (NodeComment) are added to the DOM tree. This flag is off by default. <br/></td></tr>
<tr class="memitem:a8f36bcf2332a3393c6bb437f080e7468"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a8f36bcf2332a3393c6bb437f080e7468"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseDeclaration</b> = 0x0100</td></tr>
<tr class="memdesc:a8f36bcf2332a3393c6bb437f080e7468"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if document declaration (NodeDeclaration) is added to the DOM tree. This flag is off by default. <br/></td></tr>
<tr class="memitem:a01d29dc9a004027ae57e863313c23c21"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseDefault</b> = ParseCdata | ParseEscapes | ParseWconvAttribute | ParseEol</td></tr>
<tr class="memdesc:a01d29dc9a004027ae57e863313c23c21"><td class="mdescLeft">&#160;</td><td class="mdescRight">The default parsing mode.  <a href="#a01d29dc9a004027ae57e863313c23c21"></a><br/></td></tr>
<tr class="memitem:a9a5951b276f36d8260f299b0dad23dfd"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a9a5951b276f36d8260f299b0dad23dfd"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseDocType</b> = 0x0200</td></tr>
<tr class="memdesc:a9a5951b276f36d8260f299b0dad23dfd"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if document type declaration (NodeDoctype) is added to the DOM tree. This flag is off by default. <br/></td></tr>
<tr class="memitem:a3f5fea4e887be7ff1796b8a1150f1f0a"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a3f5fea4e887be7ff1796b8a1150f1f0a"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseEol</b> = 0x0020</td></tr>
<tr class="memdesc:a3f5fea4e887be7ff1796b8a1150f1f0a"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if EOL characters are normalized (converted to #xA) during parsing. This flag is on by default. <br/></td></tr>
<tr class="memitem:ad8eec3ecbd62fc333bd51abf0e0d4031"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad8eec3ecbd62fc333bd51abf0e0d4031"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseEscapes</b> = 0x0010</td></tr>
<tr class="memdesc:ad8eec3ecbd62fc333bd51abf0e0d4031"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if character and entity references are expanded during parsing. This flag is on by default. <br/></td></tr>
<tr class="memitem:a10efc4e566d550841245774e21ee98ae"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseFull</b> = ParseDefault | ParsePi | ParseComments | ParseDeclaration | ParseDocType</td></tr>
<tr class="memdesc:a10efc4e566d550841245774e21ee98ae"><td class="mdescLeft">&#160;</td><td class="mdescRight">The full parsing mode.  <a href="#a10efc4e566d550841245774e21ee98ae"></a><br/></td></tr>
<tr class="memitem:a019d452f24324f76f236257eaf1ffb9b"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseMinimal</b> = 0x0000</td></tr>
<tr class="memdesc:a019d452f24324f76f236257eaf1ffb9b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Minimal parsing mode (equivalent to turning all other flags off).  <a href="#a019d452f24324f76f236257eaf1ffb9b"></a><br/></td></tr>
<tr class="memitem:a10dfe21f7a8edcd95c34de367b723a1e"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a10dfe21f7a8edcd95c34de367b723a1e"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParsePi</b> = 0x0001</td></tr>
<tr class="memdesc:a10dfe21f7a8edcd95c34de367b723a1e"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if processing instructions (NodePi) are added to the DOM tree. This flag is off by default. <br/></td></tr>
<tr class="memitem:a06f0f3c1d26e2fb874d50d5ac48a0937"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a06f0f3c1d26e2fb874d50d5ac48a0937"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseWconvAttribute</b> = 0x0040</td></tr>
<tr class="memdesc:a06f0f3c1d26e2fb874d50d5ac48a0937"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if attribute values are normalized using CDATA normalization rules during parsing. This flag is on by default. <br/></td></tr>
<tr class="memitem:ad4f5c38b3b86855050a6b1b92b771612"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ad4f5c38b3b86855050a6b1b92b771612"></a>
const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseWnormAttribute</b> = 0x0080</td></tr>
<tr class="memdesc:ad4f5c38b3b86855050a6b1b92b771612"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if attribute values are normalized using NMTOKENS normalization rules during parsing. This flag is off by default. <br/></td></tr>
<tr class="memitem:ad154251a7def4608431a84fdeef8e8d6"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseWsPcdata</b> = 0x0008</td></tr>
<tr class="memdesc:ad154251a7def4608431a84fdeef8e8d6"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if plain character data (NodePcdata) that consist only of whitespace are added to the DOM tree.  <a href="#ad154251a7def4608431a84fdeef8e8d6"></a><br/></td></tr>
<tr class="memitem:a52f0171a14ec94635b21ce5b0532b625"><td class="memItemLeft" align="right" valign="top">const unsigned int&#160;</td><td class="memItemRight" valign="bottom"><b>Mezzanine::XML::ParseWsPcdata_single</b> = 0x0400</td></tr>
<tr class="memdesc:a52f0171a14ec94635b21ce5b0532b625"><td class="mdescLeft">&#160;</td><td class="mdescRight">This flag determines if plain character data (NodePcdata) that is the only child of the parent node and that consists only of whitespace is added to the DOM tree.  <a href="#a52f0171a14ec94635b21ce5b0532b625"></a><br/></td></tr>
</table>
<a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>This is where bulk of the XML subsystem is declare, there are numerous class that are all tighlty integrated so one file seemed appropriate. </p>
<p>See <a class="el" href="xmldoc_8h.xhtml" title="This file houses all the documentation for the XML system that is not directly related to a specific ...">xmldoc.h</a> for additional details. </p>

<p>Definition in file <a class="el" href="xml_8h_source.xhtml">xml.h</a>.</p>
</div><h2>Macro Definition Documentation</h2>
<a class="anchor" id="a18cfd9eafeb7e99a44f25ab761ed4897"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define _XML_H</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Prevents accidental loading of the file <a class="el" href="xml_8h.xhtml" title="This is where bulk of the XML subsystem is declare, there are numerous class that are all tighlty int...">xml.h</a> multiple times. </p>

<p>Definition at line <a class="el" href="xml_8h_source.xhtml#l00094">94</a> of file <a class="el" href="xml_8h_source.xhtml">xml.h</a>.</p>

</div>
</div>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Mar 10 2013 23:53:06 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1.2</small></address>
</body>
</html>
