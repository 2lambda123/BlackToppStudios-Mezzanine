<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/sqeaky/Code/Mezzanine/Mezzanine/src/physicsmanager.cpp Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">May 19, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_282391f6f4177160a7bfc5213c65158e.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_b044052e4980a71349e081a68f99b09b.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">physicsmanager.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//Â© Copyright 2010 - 2013 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">    The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    (at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    along with The Mezzanine Engine.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   &#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    - DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    - Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    - Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">    - Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">    - If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">        your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">   These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">   them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">   you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">   John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _physicsmanager_cpp</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _physicsmanager_cpp</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">using namespace </span>std;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="preprocessor">#include &quot;linegroup.h&quot;</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &quot;physicsmanager.h&quot;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &quot;entresol.h&quot;</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &quot;vector3.h&quot;</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="preprocessor">#include &quot;actormanager.h&quot;</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="preprocessor">#include &quot;actorphysicssettings.h&quot;</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="preprocessor">#include &quot;vector3wactor.h&quot;</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="preprocessor">#include &quot;areaeffect.h&quot;</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="preprocessor">#include &quot;eventmanager.h&quot;</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="preprocessor">#include &quot;eventcollision.h&quot;</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="preprocessor">#include &quot;worldtrigger.h&quot;</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="preprocessor">#include &quot;worldobject.h&quot;</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="preprocessor">#include &quot;objectreference.h&quot;</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="preprocessor">#include &quot;Physics/collision.h&quot;</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="preprocessor">#include &quot;scenemanager.h&quot;</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="preprocessor">#include &quot;stringtool.h&quot;</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="preprocessor">#include &lt;queue&gt;</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="preprocessor">#include &lt;Ogre.h&gt;</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="preprocessor">#include &lt;btBulletDynamicsCommon.h&gt;</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="preprocessor">#include &lt;BulletSoftBody/btSoftRigidDynamicsWorld.h&gt;</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="preprocessor">#include &lt;BulletSoftBody/btSoftBodyRigidBodyCollisionConfiguration.h&gt;</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="preprocessor">#include &quot;BulletCollision/Gimpact/btGImpactCollisionAlgorithm.h&quot;</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="preprocessor">#include &lt;BulletCollision/CollisionDispatch/btGhostObject.h&gt;</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;{<span class="comment"></span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">    /// @internal</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">    /// @namespace Mezzanine::debug</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">    /// @brief This namespace is for internal debugging tools. In general it shouldn&#39;t be used in game code.</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">    /// @details This whole debug namespace is a dirty hack. This is where internal only classes and functions go</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">    /// that can and maybe should be ommited from release builds</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment"></span>    <span class="keyword">namespace </span>debug</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    {<span class="comment"></span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">        /// @internal</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">        /// @class InternalDebugDrawer</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">        /// @brief This is used to draw wireframse for the Physics subsystem</span></div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml">   85</a></span>&#160;<span class="comment"></span>        <span class="keyword">class </span><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml" title="This is used to draw wireframse for the Physics subsystem.">InternalDebugDrawer</a> : <span class="keyword">public</span> btIDebugDraw</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        {</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="keyword">private</span>:<span class="comment"></span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">                /// @brief A pointer to Mezzanine::Entresol that this Debug Drawer works with</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1Entresol.xhtml" title="This is the main entry point for the entire library.">Entresol</a>* TheEntresol;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">                /// @brief How many wireframes do you want to keep around on the screen.</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span>                <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> WireFrameCount;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">                /// @brief This queue stores The listing of of the wireframes still to be rendered.</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">                /// @details This stores an amount of wireframes up to the WireFrameCount. When this class is created or a</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">                /// new frame rendered a new Line group is a added to this queue.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span>                std::queue&lt;Mezzanine::LineGroup*&gt; WireFrames;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">                /// @brief This stores whether or not to render physics debug lines</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">                /// @details This stores whether or not to render physics debud lines. 0 = Do not draw anything. 1 = Draw model wireframes.</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">                /// Later we will add support for contact drawing, individual modeling drawing, etc...</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment"></span>                <span class="keywordtype">int</span> DebugDrawing;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">                /// @brief Basic Constructor</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">                /// @param ParentWorld_ This is a Pointer to the world to be rendered</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">                /// @param WireFrameCount_ This sets the amount of previous Wireframes to be rendered, see InternalDebugDrawer::SetWireFrameCount for details.</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment">                /// @details This creates a basic Debug Drawer which works with the Mezzanine::Entresol that was passed. With a new</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span>                <a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml" title="This is used to draw wireframse for the Physics subsystem.">InternalDebugDrawer</a>(<a class="code" href="classMezzanine_1_1Entresol.xhtml" title="This is the main entry point for the entire library.">Mezzanine::Entresol</a>* ParentEntresol_, <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> WireFrameCount_ = 2);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">                /// @brief Destructor</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">                /// @details This deletes all the Wireframes and will stop wireframe rendering</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"></span>                ~<a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml" title="This is used to draw wireframse for the Physics subsystem.">InternalDebugDrawer</a>();</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment">                /// @brief This will prepare a line segment for being drawn</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment">                /// @details This adds the points for a line to the internal list of points to be rendered.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">                /// @param from The first point of the line</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">                /// @param to The second point of the line</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">                /// @param color Currently ignored</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> drawLine(<span class="keyword">const</span> btVector3&amp; from,<span class="keyword">const</span> btVector3&amp; to,<span class="keyword">const</span> btVector3&amp; color);</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment">                /// @brief This add all the rendering information to the graphics subsystem</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">                /// @details This sends all the points in the list of lines to the rendering subsystem(currently ogre), where they will stay until deleted</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> PrepareForRendering();</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment">                /// @brief Sets the amount of previous wireframes to leave visible.</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment">                /// @details This will limit the amount of previous wireframes drawn. Setting this will cause all the extra wireframes to be deleted</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">                /// InternalDebugDrawer::PrepareForRendering() is next called, which should happen just before everything is rendered.</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">                /// @param WireFrameCount_ This is a whole number which is limit.</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetWireFrameCount(<a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> WireFrameCount_);</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">                /// @brief This returns the amount of wireframes to be drawn</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">                /// @details This returns either 2 or the amount last set by InternalDebugDrawer::SetWireFrameCount .</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">                /// @return This returns a whole number with the wireframe limit.</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> GetWireFrameCount();</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment">                /// @brief Currently Unused</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">                /// @details Currently Unused</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">                /// @param PointOnB Currently Unused</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">                /// @param normalOnB Currently Unused</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">                /// @param distance Currently Unused</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">                /// @param lifeTime Currently Unused</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">                /// @param color Currently Unused</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> drawContactPoint(<span class="keyword">const</span> btVector3&amp; PointOnB,<span class="keyword">const</span> btVector3&amp; normalOnB,btScalar distance,<span class="keywordtype">int</span> lifeTime,<span class="keyword">const</span> btVector3&amp; color);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">                /// @brief Used by the physics subsystem to report errors using the renderer</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="comment">                /// @details We *Believe* that this is used by the physics subsystem to report errors about rendering to the developer/user. As such, we</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="comment">                /// Have redirected all input from this function to the Entresol::Log function.</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="comment">                /// @param warningString We *Believe* These are messagesfrom the physics subsystem, and that this should not directly called otherwise</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> reportErrorWarning(<span class="keyword">const</span> <span class="keywordtype">char</span>* warningString);</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">                /// @brief Currently Unused</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">                /// @details Currently Unused</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">                /// @param location Currently Unused</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">                /// @param textString Currently Unused</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> draw3dText(<span class="keyword">const</span> btVector3&amp; location, <span class="keyword">const</span> <span class="keywordtype">char</span>* textString);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">                /// @brief This is used to decide how much the debug render should draw</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">                /// @details Currently this accepts btIDebugDraw::DBG_NoDebug or btIDebugDraw::DBG_DrawWireframe and setting these will either start or stop</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">                /// Wireframe rendering. All other btIDebugDraw values are ignored.</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">                /// @param debugMode An Int which contains either btIDebugDraw::DBG_NoDebug or btIDebugDraw::DBG_DrawWireframe</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> setDebugMode(<span class="keywordtype">int</span> debugMode);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">                /// @internal</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">                /// @brief This will return the current debug mode.</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">                /// @details Currently this can only return btIDebugDraw::DBG_NoDebug or btIDebugDraw::DBG_DrawWireframe</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment">                /// @return Returns the Current debug mode, currently either btIDebugDraw::DBG_NoDebug or btIDebugDraw::DBG_DrawWireframe</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">int</span> getDebugMode() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        };</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#acce1b5f1a70a560798a0fde2c9693996">  184</a></span>&#160;        InternalDebugDrawer::InternalDebugDrawer( <a class="code" href="classMezzanine_1_1Entresol.xhtml" title="This is the main entry point for the entire library.">Mezzanine::Entresol</a>* ParentEntresol_, <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> WireFrameCount_ )</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        {</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            this-&gt;DebugDrawing = 0;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            this-&gt;TheEntresol = ParentEntresol_;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;            this-&gt;WireFrameCount = WireFrameCount_;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;            <span class="comment">//Mezzanine::LineGroup* temp = new Mezzanine::LineGroup();</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            this-&gt;WireFrames.push(<span class="keyword">new</span> <a class="code" href="classMezzanine_1_1LineGroup.xhtml" title="This is a group of consectutive line segments to be rendered together.">Mezzanine::LineGroup</a>());</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        }</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a93dd964d454dbc3b34e3535e6eab2822">  195</a></span>&#160;        InternalDebugDrawer::~InternalDebugDrawer()</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">while</span> ( ! this-&gt;WireFrames.empty() )</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            {</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keyword">delete</span> this-&gt;WireFrames.front();</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                this-&gt;WireFrames.pop();</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;            }</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#af557ecfa759edf32dfc3c8dd3dc15a0b">  204</a></span>&#160;        <span class="keywordtype">void</span> InternalDebugDrawer::drawLine(<span class="keyword">const</span> btVector3&amp; from,<span class="keyword">const</span> btVector3&amp; to,<span class="keyword">const</span> btVector3&amp; color)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;            <a class="code" href="classMezzanine_1_1LineGroup.xhtml" title="This is a group of consectutive line segments to be rendered together.">Mezzanine::LineGroup</a> *myLine = this-&gt;WireFrames.back();</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            <span class="comment">//Convert btVectors to Vector3s</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> LineStart(from);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> LineEnd(to);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            myLine-&gt;<a class="code" href="classMezzanine_1_1LineGroup.xhtml#a3326fcfa0207505082af2610d73c2e46" title="This add Either a start pointing, or a line segment to the next point.">addPoint</a>(LineStart);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            myLine-&gt;<a class="code" href="classMezzanine_1_1LineGroup.xhtml#a3326fcfa0207505082af2610d73c2e46" title="This add Either a start pointing, or a line segment to the next point.">addPoint</a>(LineEnd);</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#aab7fbeabbd7ddb67d5388fdd5673c005">  216</a></span>&#160;        <span class="keywordtype">void</span> InternalDebugDrawer::drawContactPoint(<span class="keyword">const</span> btVector3&amp; PointOnB,<span class="keyword">const</span> btVector3&amp; normalOnB,btScalar distance,<span class="keywordtype">int</span> lifeTime,<span class="keyword">const</span> btVector3&amp; color)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a263870f8b8e6099d3bd200ccc283ff25">  221</a></span>&#160;        <span class="keywordtype">void</span> InternalDebugDrawer::reportErrorWarning(<span class="keyword">const</span> <span class="keywordtype">char</span>* warningString)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        {</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> temp(warningString);</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            this-&gt;TheEntresol-&gt;Log(temp);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;</div>
<div class="line"><a name="l00227"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#aaec96d2b633e9890ac4d4bd28816e7b6">  227</a></span>&#160;        <span class="keywordtype">void</span> InternalDebugDrawer::draw3dText(<span class="keyword">const</span> btVector3&amp; location,<span class="keyword">const</span> <span class="keywordtype">char</span>* textString)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        {}</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a3a678f0ac120893bd32351a138211cc4">  230</a></span>&#160;        <span class="keywordtype">void</span> InternalDebugDrawer::setDebugMode(<span class="keywordtype">int</span> debugMode)</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        {</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            this-&gt;DebugDrawing = debugMode;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a988d8362fbfd5e45032010334777d02d">  235</a></span>&#160;        <span class="keywordtype">int</span> InternalDebugDrawer::getDebugMode()<span class="keyword"> const</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;            <span class="keywordflow">return</span> this-&gt;DebugDrawing;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a4600feca2ea7570300e80b4daa49a41b">  240</a></span>&#160;        <span class="keywordtype">void</span> InternalDebugDrawer::PrepareForRendering()</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        {</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="keywordflow">if</span>(!this-&gt;WireFrames.empty())</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                this-&gt;WireFrames.back()-&gt;drawLines();</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            <span class="comment">//Delete extra wireframes</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">while</span> ( this-&gt;WireFrames.size() &gt; this-&gt;WireFrameCount )</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                <span class="keyword">delete</span> this-&gt;WireFrames.front();</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                this-&gt;WireFrames.pop();</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            }</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="comment">//This will add the Ogre Scene Nodes to the world and set up a</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            this-&gt;WireFrames.back()-&gt;PrepareForRendering();</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            this-&gt;WireFrames.push(<span class="keyword">new</span> <a class="code" href="classMezzanine_1_1LineGroup.xhtml" title="This is a group of consectutive line segments to be rendered together.">Mezzanine::LineGroup</a>());</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;</div>
<div class="line"><a name="l00259"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a90fdd352bf1b49a62653a9aa4878f49a">  259</a></span>&#160;        <span class="keywordtype">void</span> InternalDebugDrawer::SetWireFrameCount(<a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> WireFrameCount_)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            this-&gt;WireFrameCount = WireFrameCount_;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        }</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno"><a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a2d747dbcc3fb7d0c18fc21c8df2c57ef">  264</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> InternalDebugDrawer::GetWireFrameCount()</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        {</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">return</span> this-&gt;WireFrameCount;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    }<span class="comment">// debug</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="preprocessor">    #ifdef GetObject</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;<span class="preprocessor"></span><span class="preprocessor">    #undef GetObject</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;<span class="preprocessor"></span><span class="preprocessor">    #endif</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    <span class="keyword">typedef</span> std::list&lt;btCollisionAlgorithm*&gt; AlgoList;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment">    /// @internal</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">    /// @brief Used to provide better reporting of collisions</span></div>
<div class="line"><a name="l00278"></a><span class="lineno"><a class="code" href="classMezzanine_1_1CollisionDispatcher.xhtml">  278</a></span>&#160;<span class="comment"></span>    <span class="keyword">class </span><a class="code" href="classMezzanine_1_1CollisionDispatcher.xhtml" title="Used to provide better reporting of collisions.">CollisionDispatcher</a> : <span class="keyword">public</span> btCollisionDispatcher</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    {</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keyword">protected</span>:</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            AlgoList AlgoCreationQueue;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keyword">public</span>:</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <a class="code" href="classMezzanine_1_1CollisionDispatcher.xhtml" title="Used to provide better reporting of collisions.">CollisionDispatcher</a>(btCollisionConfiguration* CollisionConfig)</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                : btCollisionDispatcher(CollisionConfig)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            {</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            ~<a class="code" href="classMezzanine_1_1CollisionDispatcher.xhtml" title="Used to provide better reporting of collisions.">CollisionDispatcher</a>()</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            }</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="comment">/*btPersistentManifold* getNewManifold(void* b0, void* b1)</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">                // Get the manifold</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="comment">                btPersistentManifold* NewManifold = btCollisionDispatcher::getNewManifold(b0,b1);</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="comment">                // Store the manifold for processing later</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="comment">                ManifoldCreationQueue.push_back(NewManifold);</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">                return NewManifold;</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">            void releaseManifold(btPersistentManifold* manifold)</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">                // first check the queue</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">                if(!ManifoldCreationQueue.empty())</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">                    for(std::list&lt;btPersistentManifold*&gt;::iterator QueIt = ManifoldCreationQueue.begin() ; QueIt != ManifoldCreationQueue.end() ; QueIt++ )</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">                        if(manifold == (*QueIt))</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">                        {</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">                            ManifoldCreationQueue.erase(QueIt);</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="comment">                            btCollisionDispatcher::releaseManifold(manifold);</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="comment">                            return;</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">                        }</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">                // now check the already generated collisions</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">                PhysicsManager* PhysMan = PhysicsManager::GetSingletonPtr();</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">                for( PhysicsManager::CollisionIterator ColIt = PhysMan-&gt;Collisions.begin() ; ColIt != PhysMan-&gt;Collisions.end() ; ++ColIt )</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">                    if(manifold == (*ColIt).second-&gt;InternalAlgo)</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">                        //ManifoldDestructionQueue.push_back(ColIt);</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">                        //Collision* ToBeDestroyed = (*ColIt).second;</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment">                        //ToBeDestroyed-&gt;GetActorA()-&gt;_NotifyCollisionState(ToBeDestroyed,Collision::Col_End);</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="comment">                        //ToBeDestroyed-&gt;GetActorB()-&gt;_NotifyCollisionState(ToBeDestroyed,Collision::Col_End);</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="comment">                        delete (*ColIt).second;</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="comment">                        PhysMan-&gt;Collisions.erase(ColIt);</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="comment">                        //delete ToBeDestroyed;</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="comment">                        break;</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">                btCollisionDispatcher::releaseManifold(manifold);</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">            void releaseManifoldManual(btPersistentManifold* manifold)</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">                PhysicsManager* PhysMan = PhysicsManager::GetSingletonPtr();</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">                for( PhysicsManager::CollisionIterator ColIt = PhysMan-&gt;Collisions.begin() ; ColIt != PhysMan-&gt;Collisions.end() ; ++ColIt )</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">                    if(manifold == (*ColIt).second-&gt;Manifold)</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment">                        Collision* ToBeDestroyed = (*ColIt).second;</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="comment">                        //ToBeDestroyed-&gt;GetActorA()-&gt;_NotifyCollisionState(ToBeDestroyed,Collision::Col_End);</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="comment">                        //ToBeDestroyed-&gt;GetActorB()-&gt;_NotifyCollisionState(ToBeDestroyed,Collision::Col_End);</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="comment">                        PhysMan-&gt;Collisions.erase(ColIt);</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment">                        delete ToBeDestroyed;</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment">                        break;</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;<span class="comment">                btCollisionDispatcher::releaseManifold(manifold);</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">            }// */</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="keywordtype">void</span>* allocateCollisionAlgorithm(<span class="keywordtype">int</span> size)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            {</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="keywordtype">void</span>* ToReturn = btCollisionDispatcher::allocateCollisionAlgorithm(size);</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                btCollisionAlgorithm* Casted = (btCollisionAlgorithm*)ToReturn;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                AlgoCreationQueue.push_back(Casted);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                <span class="keywordflow">return</span> ToReturn;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            }</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="keywordtype">void</span> freeCollisionAlgorithm(<span class="keywordtype">void</span>* ptr)</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            {</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                btCollisionAlgorithm* Casted = (btCollisionAlgorithm*)ptr;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                <span class="comment">// first check the queue</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                <span class="keywordflow">if</span>(!AlgoCreationQueue.empty())</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                {</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                    <span class="keywordflow">for</span>(AlgoList::iterator QueIt = AlgoCreationQueue.begin() ; QueIt != AlgoCreationQueue.end() ; QueIt++ )</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                    {</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                        <span class="keywordflow">if</span>(Casted == (*QueIt))</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                        {</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                            AlgoCreationQueue.erase(QueIt);</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                            btCollisionDispatcher::freeCollisionAlgorithm(ptr);</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                        }</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    }</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                }</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                <span class="comment">// now check the already generated collisions</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml" title="This is simply a place for storing all the Physics Related functions.">PhysicsManager</a>* PhysMan = PhysicsManager::GetSingletonPtr();</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                <span class="keywordflow">for</span>( <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a776e9bd99369c83297958207fa0a2eb3" title="Used to make working with the Collisions easier.">PhysicsManager::CollisionIterator</a> ColIt = PhysMan-&gt;Collisions.begin() ; ColIt != PhysMan-&gt;Collisions.end() ; ++ColIt )</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <span class="keywordflow">if</span>(Casted == (*ColIt).second-&gt;InternalAlgo)</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                    {</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                        <span class="comment">//ManifoldDestructionQueue.push_back(ColIt);</span></div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                        <span class="comment">//ToBeDestroyed-&gt;GetActorA()-&gt;_NotifyCollisionState(ToBeDestroyed,Collision::Col_End);</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                        <span class="comment">//ToBeDestroyed-&gt;GetActorB()-&gt;_NotifyCollisionState(ToBeDestroyed,Collision::Col_End);</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                        <span class="keyword">delete</span> (*ColIt).second;</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                        PhysMan-&gt;Collisions.erase(ColIt);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    }</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                }</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                btCollisionDispatcher::freeCollisionAlgorithm(ptr);</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            AlgoList&amp; GetAlgoCreationQueue()</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                <span class="keywordflow">return</span> AlgoCreationQueue;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            }</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    };<span class="comment">// CollisionDispatcher</span></div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">    ///////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment"></span>    <span class="comment">// PhysicsConstructionInfo functions</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a5e4c8044d232f5507dfd34cb434e9145">  396</a></span>&#160;    PhysicsConstructionInfo::PhysicsConstructionInfo()</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        : PhysicsFlags(0),</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;          MaxProxies(0),</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;          GeographyLowerBounds(<a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>()),</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;          GeographyUpperBounds(<a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>()),</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;          Gravity(<a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>())</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;    {</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div>
<div class="line"><a name="l00405"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a65a6e6cd89e4089c98919b932a12bfbe">  405</a></span>&#160;    <a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a65a6e6cd89e4089c98919b932a12bfbe" title="Class destructor.">PhysicsConstructionInfo::~PhysicsConstructionInfo</a>()</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    {</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;    }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a5bbb296d18fed394076ae066e6862f93">  409</a></span>&#160;    <a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml">PhysicsConstructionInfo</a>&amp; <a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a5bbb296d18fed394076ae066e6862f93" title="Assignment Operator.">PhysicsConstructionInfo::operator=</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml">PhysicsConstructionInfo</a>&amp; Other)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    {</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        this-&gt;<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> = Other.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a>;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        this-&gt;<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a33cf4caa561d10c3d1df0ea150612c95" title="The maximum number of Actors and Area Effects you expect to have in the world at one time...">MaxProxies</a> = Other.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a33cf4caa561d10c3d1df0ea150612c95" title="The maximum number of Actors and Area Effects you expect to have in the world at one time...">MaxProxies</a>;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        this-&gt;<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aed6f8f0555fe4dec58758f6d774cbcee" title="The lower limits of the worlds AABB.">GeographyLowerBounds</a> = Other.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aed6f8f0555fe4dec58758f6d774cbcee" title="The lower limits of the worlds AABB.">GeographyLowerBounds</a>;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;        this-&gt;<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aa1794e928aea2ce5f2e9ad4f467b1c14" title="The upper limits of the worlds AABB.">GeographyUpperBounds</a> = Other.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aa1794e928aea2ce5f2e9ad4f467b1c14" title="The upper limits of the worlds AABB.">GeographyUpperBounds</a>;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        this-&gt;<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#ad8811afcf56826a1b2fb90c66da842c5" title="The gravity to set for the world.">Gravity</a> = Other.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#ad8811afcf56826a1b2fb90c66da842c5" title="The gravity to set for the world.">Gravity</a>;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="comment">    ///////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;<span class="comment"></span>    <span class="comment">// Physicsmanager functions</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;    <span class="keyword">template</span>&lt;&gt; <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml" title="This is simply a place for storing all the Physics Related functions.">PhysicsManager</a>* <a class="code" href="classMezzanine_1_1Singleton.xhtml" title="This is a convenient base class intended to be used with classes that need to be singletons.">Singleton&lt;PhysicsManager&gt;::SingletonPtr</a> = 0;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;</div>
<div class="line"><a name="l00423"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#af734a8d307507e261995a838a0ad0dfb">  423</a></span>&#160;    <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#af734a8d307507e261995a838a0ad0dfb" title="Simple Constructor.">PhysicsManager::PhysicsManager</a>()</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        : BulletDrawer(NULL),</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;          SimulationPaused(false),</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;          SubstepModifier(1)</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    {</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml">PhysicsConstructionInfo</a> Info;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> = (PhysicsConstructionInfo::PCF_SoftRigidWorld | PhysicsConstructionInfo::PCF_LimitlessWorld);</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        this-&gt;Construct(Info);</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;</div>
<div class="line"><a name="l00433"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a45f36a4feb384c5497fcf903729f86ee">  433</a></span>&#160;    <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#af734a8d307507e261995a838a0ad0dfb" title="Simple Constructor.">PhysicsManager::PhysicsManager</a>(<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; XMLNode)</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        : BulletDrawer(NULL),</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;          SimulationPaused(false),</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;          SubstepModifier(1)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml">PhysicsConstructionInfo</a> Info;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml" title="A light-weight handle for manipulating attributes in DOM tree.">XML::Attribute</a> CurrAttrib;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> WorldSettings = XMLNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a9c5b7b5376c9444d3d1d0bfeb47e4dc4" title="Attempt to get a child Node with a given name.">GetChild</a>(<span class="stringliteral">&quot;WorldSettings&quot;</span>);</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        <span class="keywordflow">if</span>(!WorldSettings.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a8c770f21644c937e1e5ca1fd9966651b" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        {</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;            CurrAttrib = WorldSettings.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;LimitlessWorld&quot;</span>);</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">if</span>(!CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;            {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> = (Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> | PhysicsConstructionInfo::PCF_LimitlessWorld);</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                CurrAttrib = WorldSettings.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;WorldUpperBounds&quot;</span>);</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                <span class="keywordflow">if</span>(!CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aa1794e928aea2ce5f2e9ad4f467b1c14" title="The upper limits of the worlds AABB.">GeographyUpperBounds</a> = StringTools::ConvertToVector3(CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#aeaf831643fd53fa7e645bf36b0a8ecec" title="Attempts to convert the value of the attribute to a String and returns the results.">AsString</a>());</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                CurrAttrib = WorldSettings.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;WorldLowerBounds&quot;</span>);</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                <span class="keywordflow">if</span>(!CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                    Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aed6f8f0555fe4dec58758f6d774cbcee" title="The lower limits of the worlds AABB.">GeographyLowerBounds</a> = StringTools::ConvertToVector3(CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#aeaf831643fd53fa7e645bf36b0a8ecec" title="Attempts to convert the value of the attribute to a String and returns the results.">AsString</a>());</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                CurrAttrib = WorldSettings.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;MaxObjects&quot;</span>);</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                <span class="keywordflow">if</span>(!CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                    Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a33cf4caa561d10c3d1df0ea150612c95" title="The maximum number of Actors and Area Effects you expect to have in the world at one time...">MaxProxies</a> = CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#ae5d2a5afd1559756172c5fbeadd3750b" title="Attempts to convert the value of the attribute to a Whole and returns the results.">AsWhole</a>();</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            CurrAttrib = WorldSettings.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;SoftRigidWorld&quot;</span>);</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="keywordflow">if</span>(!CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            {</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> = (Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> | PhysicsConstructionInfo::PCF_SoftRigidWorld);</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            }</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        this-&gt;Construct(Info);</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> StepModifier = XMLNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a9c5b7b5376c9444d3d1d0bfeb47e4dc4" title="Attempt to get a child Node with a given name.">GetChild</a>(<span class="stringliteral">&quot;SubStepModifier&quot;</span>);</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        <span class="keywordflow">if</span>(!StepModifier.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a8c770f21644c937e1e5ca1fd9966651b" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        {</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            CurrAttrib = WorldSettings.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;Modifier&quot;</span>);</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <span class="keywordflow">if</span>(!CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            {</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#acbe6ef0e6554702a005c152079bb40c0" title="Sets the modifier to be used when stepping the physics simulation.">SetSimulationSubstepModifier</a>(CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#ae5d2a5afd1559756172c5fbeadd3750b" title="Attempts to convert the value of the attribute to a Whole and returns the results.">AsWhole</a>());</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            }</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        }</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        <a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a> DebugRender = XMLNode.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a9c5b7b5376c9444d3d1d0bfeb47e4dc4" title="Attempt to get a child Node with a given name.">GetChild</a>(<span class="stringliteral">&quot;DebugRendering&quot;</span>);</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="keywordflow">if</span>(!DebugRender.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a8c770f21644c937e1e5ca1fd9966651b" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        {</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            <span class="keywordtype">int</span> RenderMode = 0;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;            <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> WireCount = 2;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;            CurrAttrib = WorldSettings.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;RenderingMode&quot;</span>);</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;            <span class="keywordflow">if</span>(!CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                RenderMode = CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a433fef4f74eaa825755b53b1baea539a" title="Attempts to convert the value of the attribute to an int and returns the results.">AsInt</a>();</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            CurrAttrib = WorldSettings.<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml#a7257f2f9f8e08461260afae0d5062aa7" title="Attempt to get an Attribute on this Node with a given name.">GetAttribute</a>(<span class="stringliteral">&quot;WireCount&quot;</span>);</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            <span class="keywordflow">if</span>(!CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#a9f3ac1beb83562f6b2c155772b87dc05" title="Is this storing anything at all?">Empty</a>())</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                WireCount = CurrAttrib.<a class="code" href="classMezzanine_1_1XML_1_1Attribute.xhtml#ae5d2a5afd1559756172c5fbeadd3750b" title="Attempts to convert the value of the attribute to a Whole and returns the results.">AsWhole</a>();</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            <span class="keywordflow">if</span>(0 != RenderMode)</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            {</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ac1104ad21c6c779bb93147163d066f7e" title="Enables and Disables Physics Debug Drawing.">SetDebugPhysicsRendering</a>(RenderMode);</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a7a2fd072c1035b744ce4c22265219d8b" title="How many Wireframes do you want drawn from previous events.">SetDebugPhysicsWireCount</a>(WireCount);</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            }</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;    }</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;</div>
<div class="line"><a name="l00498"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a0fe5d7e0c4ce3eac834478862cef73b1">  498</a></span>&#160;    <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#af734a8d307507e261995a838a0ad0dfb" title="Simple Constructor.">PhysicsManager::PhysicsManager</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml">PhysicsConstructionInfo</a>&amp; Info)</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        : BulletDrawer(NULL),</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;          SimulationPaused(false),</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;          SubstepModifier(1)</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    {</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        this-&gt;Construct(Info);</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;    }</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div>
<div class="line"><a name="l00506"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a1d265da29c5a4030a3f6ad97f5027709">  506</a></span>&#160;    <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a1d265da29c5a4030a3f6ad97f5027709" title="Deconstructor.">PhysicsManager::~PhysicsManager</a>()</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;    {</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        btCollisionObjectArray ObjectArray( BulletDynamicsWorld-&gt;getCollisionObjectArray() );</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <span class="keywordflow">for</span>( <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> X = 0 ; X &lt; BulletDynamicsWorld-&gt;getNumCollisionObjects() ; ++X )</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        {</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <a class="code" href="classMezzanine_1_1ObjectReference.xhtml" title="This is a small class used to store a reference to a world object.">ObjectReference</a>* ObjectRef = <span class="keyword">static_cast&lt;</span><a class="code" href="classMezzanine_1_1ObjectReference.xhtml" title="This is a small class used to store a reference to a world object.">ObjectReference</a>*<span class="keyword">&gt;</span>( ObjectArray[X]-&gt;getUserPointer() );</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            ObjectRef-&gt;<a class="code" href="classMezzanine_1_1ObjectReference.xhtml#ad0be2b6ed910bbf8d68f2de89af64973" title="Gets the object this class references.">GetObject</a>()-&gt;<a class="code" href="classMezzanine_1_1WorldObject.xhtml#a67e3c05d50cc1ff631beecd37d87255a" title="Removes the World Object from the World.">RemoveFromWorld</a>();</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        }</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a8f127a13daa6fc9bbd3bf0e0237239fe" title="Destroys all constraints currently in the manager.">DestroyAllConstraints</a>();</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ad1717a3bbf093c82909bc4af70641c7c" title="Destroys all area effects currently in the manager.">DestroyAllAreaEffects</a>();</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a91386ac53ea08838f8e733459a2f3b74" title="Destroys all triggers currently in the manager.">DestroyAllWorldTriggers</a>();</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        <span class="comment">//Destroy the physical world that we loved and cherished</span></div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <span class="keyword">delete</span> BulletDynamicsWorld;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keyword">delete</span> BulletDispatcher;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;        <span class="keyword">delete</span> BulletCollisionConfiguration;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        <span class="keyword">delete</span> BulletSolver;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <span class="keyword">delete</span> BulletBroadphase;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="keywordflow">if</span>(BulletDrawer) <span class="keyword">delete</span> BulletDrawer;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    }</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;    <span class="keywordtype">void</span> PhysicsManager::Construct(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml">PhysicsConstructionInfo</a>&amp; Info)</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    {</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        this-&gt;<a class="code" href="classMezzanine_1_1ManagerBase.xhtml#a96fb02bf2f4e8b4afe70dedd0d8c6ac9" title="This is a weighting used by the main loop to decide what order the managers should be called in...">Priority</a> = 20;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <span class="keywordflow">if</span>(Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> &amp; PhysicsConstructionInfo::PCF_LimitlessWorld)</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        {</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            this-&gt;BulletBroadphase = <span class="keyword">new</span> btDbvtBroadphase();</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;            <span class="keywordflow">if</span>(Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a33cf4caa561d10c3d1df0ea150612c95" title="The maximum number of Actors and Area Effects you expect to have in the world at one time...">MaxProxies</a> &lt; 65536)</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;            {</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                this-&gt;BulletBroadphase = <span class="keyword">new</span> btAxisSweep3(Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aed6f8f0555fe4dec58758f6d774cbcee" title="The lower limits of the worlds AABB.">GeographyLowerBounds</a>.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>(),</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                                                          Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aa1794e928aea2ce5f2e9ad4f467b1c14" title="The upper limits of the worlds AABB.">GeographyUpperBounds</a>.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>(),</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;                                                          Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a33cf4caa561d10c3d1df0ea150612c95" title="The maximum number of Actors and Area Effects you expect to have in the world at one time...">MaxProxies</a>);</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                this-&gt;BulletBroadphase = <span class="keyword">new</span> bt32BitAxisSweep3(Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aed6f8f0555fe4dec58758f6d774cbcee" title="The lower limits of the worlds AABB.">GeographyLowerBounds</a>.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>(),</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                                                               Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aa1794e928aea2ce5f2e9ad4f467b1c14" title="The upper limits of the worlds AABB.">GeographyUpperBounds</a>.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>(),</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                                                               Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a33cf4caa561d10c3d1df0ea150612c95" title="The maximum number of Actors and Area Effects you expect to have in the world at one time...">MaxProxies</a>);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;            }</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        }</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        this-&gt;GhostCallback = <span class="keyword">new</span> btGhostPairCallback();</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        this-&gt;BulletBroadphase-&gt;getOverlappingPairCache()-&gt;setInternalGhostPairCallback(GhostCallback);</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        this-&gt;BulletSolver = <span class="keyword">new</span> btSequentialImpulseConstraintSolver;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <span class="comment">//if(Info.PhysicsFlags &amp; PhysicsConstructionInfo::PCF_SoftRigidWorld)</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        <span class="comment">//{</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;            this-&gt;BulletCollisionConfiguration = <span class="keyword">new</span> btSoftBodyRigidBodyCollisionConfiguration();</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            this-&gt;BulletDispatcher = <span class="keyword">new</span> CollisionDispatcher(BulletCollisionConfiguration);</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;            btGImpactCollisionAlgorithm::registerAlgorithm(BulletDispatcher);</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            this-&gt;BulletDynamicsWorld = <span class="keyword">new</span> btSoftRigidDynamicsWorld(</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                                                        BulletDispatcher,</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                                                        BulletBroadphase,</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                                                        BulletSolver,</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                                                        BulletCollisionConfiguration);</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;getWorldInfo().m_dispatcher = this-&gt;BulletDispatcher;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;getWorldInfo().m_broadphase = this-&gt;BulletBroadphase;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;getWorldInfo().m_sparsesdf.Initialize();</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="comment">/*}else{</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="comment">            this-&gt;BulletCollisionConfiguration = new btDefaultCollisionConfiguration();</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="comment">            this-&gt;BulletDispatcher = new btCollisionDispatcher(BulletCollisionConfiguration);</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="comment">            btGImpactCollisionAlgorithm::registerAlgorithm(BulletDispatcher);</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="comment">            this-&gt;BulletDynamicsWorld = new btDiscreteDynamicsWorld(</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="comment">                                                        BulletDispatcher,</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="comment">                                                        BulletBroadphase,</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="comment">                                                        BulletSolver,</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="comment">                                                        BulletCollisionConfiguration);</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="comment">        }// */</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        this-&gt;BulletDynamicsWorld-&gt;setInternalTickCallback((btInternalTickCallback)PhysicsManager::InternalTickCallback,0,<span class="keyword">false</span>);</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        this-&gt;BulletDynamicsWorld-&gt;getDispatchInfo().m_enableSPU = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        this-&gt;BulletDynamicsWorld-&gt;getDispatchInfo().m_useContinuous = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="comment">//this-&gt;BulletDynamicsWorld-&gt;getSolverInfo().m_splitImpulse = true;</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        <span class="comment">//this-&gt;BulletDynamicsWorld-&gt;getSolverInfo().m_numIterations = 20;</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        <span class="comment">//this-&gt;BulletDynamicsWorld-&gt;getSolverInfo().m_globalCfm = 0.15;</span></div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <span class="comment">//this-&gt;BulletDynamicsWorld-&gt;getSolverInfo().m_erp = 0.4;</span></div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        this-&gt;<a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a565b338b5930571713ff72de45c95485" title="Sets the gravity.">SetGravity</a>(Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#ad8811afcf56826a1b2fb90c66da842c5" title="The gravity to set for the world.">Gravity</a>);</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        this-&gt;<a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ab7f73d5ea910fc68120d33ee8c491d88" title="Sets the gravity for soft bodies.">SetSoftGravity</a>(Info.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#ad8811afcf56826a1b2fb90c66da842c5" title="The gravity to set for the world.">Gravity</a>);</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;        this-&gt;WorldConstructionInfo = Info;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    }</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keywordtype">void</span> PhysicsManager::ProcessAllEffects()</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    {</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">if</span>( !AreaEffects.empty() )</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;        {</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            <span class="keywordflow">for</span>( std::vector&lt;AreaEffect*&gt;::iterator AE = AreaEffects.begin() ; AE != AreaEffects.end() ; AE++ )</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            {</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                (*AE)-&gt;_Update();</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                (*AE)-&gt;ApplyEffect();</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            }</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        }</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;    }</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="keywordtype">void</span> PhysicsManager::ProcessAllTriggers()</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    {</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="keywordflow">if</span>( !Triggers.empty() )</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;        {</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            <span class="keywordflow">for</span>( std::vector&lt;WorldTrigger*&gt;::iterator Trig = Triggers.begin() ; Trig != Triggers.end() ; Trig++ )</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                <span class="keywordflow">if</span>((*Trig)-&gt;ConditionsAreMet())</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                    (*Trig)-&gt;ApplyTrigger();</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            }</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        }</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    }</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;    <span class="keywordtype">void</span> PhysicsManager::ProcessAllCollisions()</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;    {</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        CollisionDispatcher* Dispatch = (CollisionDispatcher*)this-&gt;BulletDispatcher;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        <span class="comment">//Update the collisions that already exist as necessary</span></div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keywordflow">for</span>( <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a776e9bd99369c83297958207fa0a2eb3" title="Used to make working with the Collisions easier.">PhysicsManager::CollisionIterator</a> ColIt = Collisions.begin() ; ColIt != Collisions.end() ; ColIt++ )</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            (*ColIt).second-&gt;Update();</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        <span class="comment">//Process the collisions that are in the creation queue</span></div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        AlgoList&amp; AlgoQueue = Dispatch-&gt;GetAlgoCreationQueue();</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        <span class="keywordflow">if</span>(AlgoQueue.empty())</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="preprocessor">        #ifdef MEZZDEBUG</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;<span class="preprocessor"></span>        std::stringstream logstream;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;        logstream &lt;&lt; <span class="stringliteral">&quot;Processing &quot;</span> &lt;&lt; AlgoQueue.size() &lt;&lt; <span class="stringliteral">&quot; algorithms for collisions.&quot;</span> &lt;&lt; endl;</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;        <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">Entresol::GetSingletonPtr</a>()-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#a96f894e20225d43643091c3731acc35d" title="Runtime event and message logging.">Log</a>(logstream.str());</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <span class="comment">//Entresol::GetSingletonPtr()-&gt;DoMainLoopLogging();</span></div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;<span class="preprocessor">        #endif</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;<span class="preprocessor"></span>        btCollisionAlgorithm* NewAlgo = AlgoQueue.front();</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        <span class="keywordflow">while</span>( NewAlgo != NULL )</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;        {</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;            ObjectReference* ObjectA = NULL;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            ObjectReference* ObjectB = NULL;<span class="comment"></span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;<span class="comment">            /// @todo This is an absurd round-about way to get the data we need,</span></div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="comment">            /// and bullet will probably have to be extended to change this so it&#39;s actually good.</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="comment"></span>            btBroadphasePairArray&amp; PairArray = BulletBroadphase-&gt;getOverlappingPairCache()-&gt;getOverlappingPairArray();</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;            <span class="keywordflow">for</span>( <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> X = 0 ; X &lt; PairArray.size() ; ++X )</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;            {</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                <span class="keywordflow">if</span>( NewAlgo == PairArray[X].m_algorithm )</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                {</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                    btCollisionObject* COA = (btCollisionObject*)PairArray[X].m_pProxy0-&gt;m_clientObject;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                    ObjectA = (ObjectReference*)COA-&gt;getUserPointer();</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                    btCollisionObject* COB = (btCollisionObject*)PairArray[X].m_pProxy1-&gt;m_clientObject;</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                    ObjectB = (ObjectReference*)COB-&gt;getUserPointer();</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                }</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;            }</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            <span class="comment">// Verify we have objects to work with</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            <span class="keywordflow">if</span>( !ObjectA || !ObjectB )</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            {</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;                AlgoQueue.pop_front();</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                <span class="keywordflow">if</span>(AlgoQueue.size() &gt; 0) NewAlgo = AlgoQueue.front();</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                <span class="keywordflow">else</span> NewAlgo = NULL;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            }</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            <span class="comment">// Verify the objects actually collide</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;            <span class="keywordflow">if</span>( !ObjectA-&gt;GetObject()-&gt;GetPhysicsSettings()-&gt;GetCollisionResponse() ||</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                !ObjectB-&gt;GetObject()-&gt;GetPhysicsSettings()-&gt;GetCollisionResponse() )</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            {</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                AlgoQueue.pop_front();</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                <span class="keywordflow">if</span>(AlgoQueue.size() &gt; 0) NewAlgo = AlgoQueue.front();</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                <span class="keywordflow">else</span> NewAlgo = NULL;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;            }</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;            <span class="comment">// Creat the collision</span></div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;            ObjectPair NewPair(ObjectA-&gt;GetObject(),ObjectB-&gt;GetObject());</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;            <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a776e9bd99369c83297958207fa0a2eb3" title="Used to make working with the Collisions easier.">PhysicsManager::CollisionIterator</a> ColIt = Collisions.find(NewPair);</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            <span class="keywordflow">if</span>(ColIt == Collisions.end())</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            {</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                Physics::Collision* NewCol = <span class="keyword">new</span> Physics::Collision(ObjectA-&gt;GetObject(),ObjectB-&gt;GetObject(),NewAlgo);</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                <span class="comment">//NewCol-&gt;GetActorA()-&gt;_NotifyCollisionState(NewCol,Physics::Collision::Col_Begin);</span></div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                <span class="comment">//NewCol-&gt;GetActorB()-&gt;_NotifyCollisionState(NewCol,Physics::Collision::Col_Begin);</span></div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                Collisions.insert(std::pair&lt;ObjectPair,Physics::Collision*&gt;(NewPair,NewCol));</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            }</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            AlgoQueue.pop_front();</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <span class="keywordflow">if</span>(AlgoQueue.size() &gt; 0) NewAlgo = AlgoQueue.front();</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;            <span class="keywordflow">else</span> NewAlgo = NULL;</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        }<span class="comment">//*/</span></div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    }</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keywordtype">void</span> PhysicsManager::InternalTickCallback(btDynamicsWorld* world, btScalar timeStep)</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    {</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;        <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">PhysicsManager::GetSingletonPtr</a>()-&gt;ProcessAllCollisions();</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    }</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div>
<div class="line"><a name="l00687"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a83b7f0be56d405ecbc51fe770e1f93b6">  687</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a83b7f0be56d405ecbc51fe770e1f93b6" title="Pauses the simulation, preventing the physics world from taking action.">PhysicsManager::PauseSimulation</a>(<span class="keywordtype">bool</span> Pause)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    {</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        SimulationPaused = Pause;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;    }</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div>
<div class="line"><a name="l00692"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a2124e18b9fd28d1dc3c0da54224154b2">  692</a></span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a2124e18b9fd28d1dc3c0da54224154b2" title="Gets Whether or not the simulation is currently paused.">PhysicsManager::SimulationIsPaused</a>()</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;    {</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="keywordflow">return</span> SimulationPaused;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;    }</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div>
<div class="line"><a name="l00697"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a565b338b5930571713ff72de45c95485">  697</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a565b338b5930571713ff72de45c95485" title="Sets the gravity.">PhysicsManager::SetGravity</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; pgrav)</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;    {</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;        this-&gt;BulletDynamicsWorld-&gt;setGravity(pgrav.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>());</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;    }</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div>
<div class="line"><a name="l00702"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#aaad40d1888caa36c158dc6e94d63c068">  702</a></span>&#160;    <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#aaad40d1888caa36c158dc6e94d63c068" title="Gets the gravity.">PhysicsManager::GetGravity</a>()</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    {</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> grav(this-&gt;BulletDynamicsWorld-&gt;getGravity());</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        <span class="keywordflow">return</span> grav;</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;    }</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;</div>
<div class="line"><a name="l00708"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ab7f73d5ea910fc68120d33ee8c491d88">  708</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ab7f73d5ea910fc68120d33ee8c491d88" title="Sets the gravity for soft bodies.">PhysicsManager::SetSoftGravity</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; sgrav)</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;    {</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        this-&gt;BulletDynamicsWorld-&gt;getWorldInfo().m_gravity = sgrav.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>();</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;    }</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div>
<div class="line"><a name="l00713"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#aa1fdbb815c43718c1c0e68b29a3e9915">  713</a></span>&#160;    <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#aa1fdbb815c43718c1c0e68b29a3e9915" title="Gets the soft body gravity.">PhysicsManager::GetSoftGravity</a>()</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    {</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> sgrav(this-&gt;BulletDynamicsWorld-&gt;getWorldInfo().m_gravity);</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        <span class="keywordflow">return</span> sgrav;</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;    }</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div>
<div class="line"><a name="l00719"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a63f9fe303e30542249d263773ae9dc08">  719</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a63f9fe303e30542249d263773ae9dc08" title="Sets the gravity to be applied to a single object.">PhysicsManager::SetIndividualGravity</a>(<a class="code" href="classMezzanine_1_1ActorBase.xhtml" title="This is the base class from which all the actors inherit.">ActorBase</a>* Actor, <span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; igrav)</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    {</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keywordflow">if</span> (Mezzanine::WSO_ActorRigid==Actor-&gt;<a class="code" href="classMezzanine_1_1ActorBase.xhtml#a83f7356d743f1b59ea58aac6d7570901" title="Gets the type of the World Object instance. ">GetType</a>())</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        {</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            btRigidBody* Rigid = static_cast &lt; btRigidBody* &gt;(Actor-&gt;<a class="code" href="classMezzanine_1_1WorldObject.xhtml#a4564b948a585aac1764ee13f2a61c110" title="Gets the internal physics object this World Object is based on.">_GetBasePhysicsObject</a>());</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            Rigid-&gt;setGravity(igrav.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>());</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        }</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    }</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;</div>
<div class="line"><a name="l00728"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a6f1656e4df845f30f5e3b639cd0a03dd">  728</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a6f1656e4df845f30f5e3b639cd0a03dd" title="Adds a constraint to the world.">PhysicsManager::AddConstraint</a>(<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Physics::Constraint</a>* Con, <span class="keywordtype">bool</span> DisableCollisions)</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;    {</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;        this-&gt;BulletDynamicsWorld-&gt;addConstraint(Con-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#aa9649e5c2bfbd0fa19caf876ed039544" title="Get the Bullet constraint that this class encapsulates.">GetConstraintBase</a>(), DisableCollisions);</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;        Constraints.push_back(Con);</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;    }</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;</div>
<div class="line"><a name="l00734"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ae48146e5f11180121fd79fc3deab9885">  734</a></span>&#160;    <a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Physics::Constraint</a>* <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ae48146e5f11180121fd79fc3deab9885" title="Gets a constraint by index.">PhysicsManager::GetConstraint</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a>&amp; Index)</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;    {</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <span class="keywordflow">return</span> Constraints[Index];</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    }</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;</div>
<div class="line"><a name="l00739"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a7c29c81cb88d3a347433130614237eec">  739</a></span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a7c29c81cb88d3a347433130614237eec" title="Gets the number of constraints currently in the world.">PhysicsManager::GetNumConstraints</a>()</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;    {</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;        <span class="keywordflow">return</span> Constraints.size();</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;    }</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;</div>
<div class="line"><a name="l00744"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#abea04afff872c0181fed7843b041c66c">  744</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#abea04afff872c0181fed7843b041c66c" title="Removes a constraint from the world.">PhysicsManager::RemoveConstraint</a>(<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml" title="This is the base class for all constraints supported.">Physics::Constraint</a>* Con)</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    {</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        this-&gt;BulletDynamicsWorld-&gt;removeConstraint(Con-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Constraint.xhtml#aa9649e5c2bfbd0fa19caf876ed039544" title="Get the Bullet constraint that this class encapsulates.">GetConstraintBase</a>());</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;        <span class="keywordflow">for</span>( std::vector&lt;Physics::Constraint*&gt;::iterator ConIt = Constraints.begin() ; ConIt &lt; Constraints.end() ; ConIt++ )</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        {</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;            <span class="keywordflow">if</span>( (*ConIt) == Con )</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;            {</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                Constraints.erase(ConIt);</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;            }</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        }</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    }</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;</div>
<div class="line"><a name="l00757"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a8f127a13daa6fc9bbd3bf0e0237239fe">  757</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a8f127a13daa6fc9bbd3bf0e0237239fe" title="Destroys all constraints currently in the manager.">PhysicsManager::DestroyAllConstraints</a>()</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;    {</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        <span class="keywordflow">for</span>( std::vector&lt;Physics::Constraint*&gt;::iterator Con = Constraints.begin() ; Con != Constraints.end() ; Con++ )</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        {</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;removeConstraint((*Con)-&gt;GetConstraintBase());</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            <span class="keyword">delete</span> (*Con);</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        }</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        Constraints.clear();</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    }</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;</div>
<div class="line"><a name="l00767"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a62c7bb223d2712a4f1806216429015a9">  767</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a62c7bb223d2712a4f1806216429015a9" title="Adds an area effect to the world.">PhysicsManager::AddAreaEffect</a>(<a class="code" href="classMezzanine_1_1AreaEffect.xhtml" title="This class is used to define area&#39;s in the world that have unique effects.">AreaEffect</a>* AE)</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;    {</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;        AE-&gt;<a class="code" href="classMezzanine_1_1AreaEffect.xhtml#aed1323d5e951b5c02c789b4d30d6d9d7" title="Adds the World Object to the World. ">AddToWorld</a>();</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        this-&gt;AreaEffects.push_back(AE);</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    }</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;</div>
<div class="line"><a name="l00773"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a820856e1a0bad25203b86d6e53391f13">  773</a></span>&#160;    <a class="code" href="classMezzanine_1_1AreaEffect.xhtml" title="This class is used to define area&#39;s in the world that have unique effects.">AreaEffect</a>* <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a820856e1a0bad25203b86d6e53391f13" title="Gets an Area Effect by name.">PhysicsManager::GetAreaEffect</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a>&amp; Name)</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;    {</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        <span class="keywordflow">for</span>( vector&lt;AreaEffect*&gt;::iterator c = AreaEffects.begin() ; c != AreaEffects.end() ; c++ )</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        {</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;            <span class="keywordflow">if</span> ( Name == (*c)-&gt;GetName() )</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;            {</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                <span class="keywordflow">return</span> *c;</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;            }</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        }</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;    }</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div>
<div class="line"><a name="l00785"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a648b109c3e2cf4436f492f5fce455878">  785</a></span>&#160;    <a class="code" href="classMezzanine_1_1AreaEffect.xhtml" title="This class is used to define area&#39;s in the world that have unique effects.">AreaEffect</a>* <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a820856e1a0bad25203b86d6e53391f13" title="Gets an Area Effect by name.">PhysicsManager::GetAreaEffect</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a>&amp; Index)</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;    {</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="keywordflow">return</span> AreaEffects[Index];</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    }</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;</div>
<div class="line"><a name="l00790"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a29d29a586387400426857fc2897b91dc">  790</a></span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a29d29a586387400426857fc2897b91dc" title="Gets the number of Area Effects currently in the world.">PhysicsManager::GetNumAreaEffects</a>()</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    {</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        <span class="keywordflow">return</span> AreaEffects.size();</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    }</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div>
<div class="line"><a name="l00795"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#afb424692ede644ccef8327aae1ea9674">  795</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#afb424692ede644ccef8327aae1ea9674" title="Removes an area effect from the world.">PhysicsManager::RemoveAreaEffect</a>(<a class="code" href="classMezzanine_1_1AreaEffect.xhtml" title="This class is used to define area&#39;s in the world that have unique effects.">AreaEffect</a>* AE)</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    {</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        AE-&gt;<a class="code" href="classMezzanine_1_1AreaEffect.xhtml#aaf2aab50bfb000f3dfec58e97b423a29" title="Removes the World Object from the World. ">RemoveFromWorld</a>();</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <span class="keywordflow">for</span>( vector&lt;AreaEffect*&gt;::iterator c = AreaEffects.begin() ; c != AreaEffects.end() ; c++ )</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        {</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;            <span class="keywordflow">if</span> ( AE == *c )</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;            {</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;                AreaEffects.erase(c);</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            }</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        }</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    }</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div>
<div class="line"><a name="l00808"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ad1717a3bbf093c82909bc4af70641c7c">  808</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ad1717a3bbf093c82909bc4af70641c7c" title="Destroys all area effects currently in the manager.">PhysicsManager::DestroyAllAreaEffects</a>()</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;    {</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        <span class="keywordflow">for</span>( std::vector&lt;AreaEffect*&gt;::iterator AE = AreaEffects.begin() ; AE != AreaEffects.end() ; AE++ )</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;        {</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;removeCollisionObject((*AE)-&gt;Ghost);</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            <span class="keyword">delete</span> (*AE);</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        }</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        AreaEffects.clear();</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    }</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div>
<div class="line"><a name="l00818"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a4dfbe87e03c09b1fcce946c9b9271fa6">  818</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a4dfbe87e03c09b1fcce946c9b9271fa6" title="Adds a trigger to the world.">PhysicsManager::AddWorldTrigger</a>(<a class="code" href="classMezzanine_1_1WorldTrigger.xhtml" title="This is an abstract class for creating in-game triggers.">WorldTrigger</a>* Trig)</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    {</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        Triggers.push_back(Trig);</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    }</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div>
<div class="line"><a name="l00823"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#adecd547ebb51380ae23fcbb889ed544c">  823</a></span>&#160;    <a class="code" href="classMezzanine_1_1WorldTrigger.xhtml" title="This is an abstract class for creating in-game triggers.">WorldTrigger</a>* <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#adecd547ebb51380ae23fcbb889ed544c" title="Gets a trigger by name.">PhysicsManager::GetWorldTrigger</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a>&amp; Name)</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    {</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        <span class="keywordflow">for</span>( vector&lt;WorldTrigger*&gt;::iterator Trig = Triggers.begin() ; Trig != Triggers.end() ; Trig++ )</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        {</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;            <span class="keywordflow">if</span> ( Name == (*Trig)-&gt;GetName() )</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;            {</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;                <span class="keywordflow">return</span> *Trig;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;            }</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        }</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;    }</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;</div>
<div class="line"><a name="l00835"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a9995e10453b675587423134c82d5cbe0">  835</a></span>&#160;    <a class="code" href="classMezzanine_1_1WorldTrigger.xhtml" title="This is an abstract class for creating in-game triggers.">WorldTrigger</a>* <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#adecd547ebb51380ae23fcbb889ed544c" title="Gets a trigger by name.">PhysicsManager::GetWorldTrigger</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a>&amp; Index)</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    {</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        <span class="keywordflow">return</span> Triggers[Index];</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;    }</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;</div>
<div class="line"><a name="l00840"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a43aa5298c72eba68b017838e902bc19b">  840</a></span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a43aa5298c72eba68b017838e902bc19b" title="Gets the number of triggers currently in the world.">PhysicsManager::GetNumWorldTriggers</a>()</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;    {</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;        <span class="keywordflow">return</span> Triggers.size();</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;    }</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div>
<div class="line"><a name="l00845"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ab3d96f132ab95690c520348f986140b8">  845</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ab3d96f132ab95690c520348f986140b8" title="Removes a trigger from the world.">PhysicsManager::RemoveWorldTrigger</a>(<a class="code" href="classMezzanine_1_1WorldTrigger.xhtml" title="This is an abstract class for creating in-game triggers.">WorldTrigger</a>* Trig)</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;    {</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        <span class="keywordflow">for</span>( vector&lt;WorldTrigger*&gt;::iterator T = Triggers.begin() ; T != Triggers.end() ; T++ )</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;        {</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            <span class="keywordflow">if</span> ( Trig == (*T) )</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            {</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;                Triggers.erase(T);</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            }</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;        }</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    }</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;</div>
<div class="line"><a name="l00857"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a91386ac53ea08838f8e733459a2f3b74">  857</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a91386ac53ea08838f8e733459a2f3b74" title="Destroys all triggers currently in the manager.">PhysicsManager::DestroyAllWorldTriggers</a>()</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;    {</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        <span class="keywordflow">for</span>( std::vector&lt;WorldTrigger*&gt;::iterator Trig = Triggers.begin() ; Trig != Triggers.end() ; Trig++ )</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;            <span class="keyword">delete</span> (*Trig);</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        Triggers.clear();</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;    }</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;</div>
<div class="line"><a name="l00864"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a02c812920be92ffa885442578049676c">  864</a></span>&#160;    <a class="code" href="classMezzanine_1_1Physics_1_1Collision.xhtml" title="This is an event class used to track collsions in the physics world.">Physics::Collision</a>* <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a02c812920be92ffa885442578049676c" title="Gets a Collision by object pair.">PhysicsManager::GetCollision</a>(<a class="code" href="classMezzanine_1_1ObjectPair.xhtml" title="This is an interface class for pairs of world objects.">ObjectPair</a>* Pair)</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;    {</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a776e9bd99369c83297958207fa0a2eb3" title="Used to make working with the Collisions easier.">PhysicsManager::CollisionIterator</a> ColIt = Collisions.find(*Pair);</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        <span class="keywordflow">if</span>(ColIt != Collisions.end()) <span class="keywordflow">return</span> (*ColIt).second;</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;    }</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;</div>
<div class="line"><a name="l00871"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#acadfd5d67fdc193a81ad726a2b41c748">  871</a></span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#acadfd5d67fdc193a81ad726a2b41c748" title="Gets the number of Collisions currently in the world.">PhysicsManager::GetNumCollisions</a>()</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    {</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;        <span class="keywordflow">return</span> Collisions.size();</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;    }</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;</div>
<div class="line"><a name="l00876"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a2c03c8434a3016b6f4867e8000d9246c">  876</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a2c03c8434a3016b6f4867e8000d9246c" title="Removes an existing collision from the world.">PhysicsManager::RemoveCollision</a>(<a class="code" href="classMezzanine_1_1Physics_1_1Collision.xhtml" title="This is an event class used to track collsions in the physics world.">Physics::Collision</a>* Col)</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;    {</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        <span class="comment">//((CollisionDispatcher*)BulletDispatcher)-&gt;releaseManifoldManual(Col-&gt;Manifold);</span></div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;        btBroadphasePair* btPair = BulletBroadphase-&gt;getOverlappingPairCache()-&gt;findPair(</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;            Col-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Collision.xhtml#a3ffb31ca3e7a563d48e4a9481d41416a" title="The first Object involved in the collision.">ObjectA</a>-&gt;<a class="code" href="classMezzanine_1_1WorldObject.xhtml#a4564b948a585aac1764ee13f2a61c110" title="Gets the internal physics object this World Object is based on.">_GetBasePhysicsObject</a>()-&gt;getBroadphaseHandle(),</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;            Col-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Collision.xhtml#a26aeca8abd0bccc89e15c7eacfb694ee" title="The second Object invovled in the collision.">ObjectB</a>-&gt;<a class="code" href="classMezzanine_1_1WorldObject.xhtml#a4564b948a585aac1764ee13f2a61c110" title="Gets the internal physics object this World Object is based on.">_GetBasePhysicsObject</a>()-&gt;getBroadphaseHandle());</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;        BulletBroadphase-&gt;getOverlappingPairCache()-&gt;removeOverlappingPair(</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            Col-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Collision.xhtml#a3ffb31ca3e7a563d48e4a9481d41416a" title="The first Object involved in the collision.">ObjectA</a>-&gt;<a class="code" href="classMezzanine_1_1WorldObject.xhtml#a4564b948a585aac1764ee13f2a61c110" title="Gets the internal physics object this World Object is based on.">_GetBasePhysicsObject</a>()-&gt;getBroadphaseHandle(),</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;            Col-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1Collision.xhtml#a26aeca8abd0bccc89e15c7eacfb694ee" title="The second Object invovled in the collision.">ObjectB</a>-&gt;<a class="code" href="classMezzanine_1_1WorldObject.xhtml#a4564b948a585aac1764ee13f2a61c110" title="Gets the internal physics object this World Object is based on.">_GetBasePhysicsObject</a>()-&gt;getBroadphaseHandle(),</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;            BulletDispatcher);<span class="comment">// */</span></div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;        BulletBroadphase-&gt;getOverlappingPairCache()-&gt;cleanOverlappingPair(*btPair,BulletDispatcher);</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        <span class="keyword">delete</span> btPair;</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;    }</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;</div>
<div class="line"><a name="l00890"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ade3423f416ddeeafcde5e89d6edcd221">  890</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ade3423f416ddeeafcde5e89d6edcd221" title="Removes all stored collisions that involve the specified Object.">PhysicsManager::RemoveCollisionsContainingObject</a>(<a class="code" href="classMezzanine_1_1WorldObject.xhtml" title="This is the base class from which classes that are insertable into the physical world.">WorldObject</a>* Object)</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;    {</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;        <span class="keywordflow">if</span>(!Object-&gt;<a class="code" href="classMezzanine_1_1WorldObject.xhtml#a2e773e73a7a190ad56d2afedeeeb8e87" title="Gets whether or not this object is currently in the world.">IsInWorld</a>())</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;        BulletBroadphase-&gt;getOverlappingPairCache()-&gt;cleanProxyFromPairs(Object-&gt;<a class="code" href="classMezzanine_1_1WorldObject.xhtml#a4564b948a585aac1764ee13f2a61c110" title="Gets the internal physics object this World Object is based on.">_GetBasePhysicsObject</a>()-&gt;getBroadphaseHandle(),BulletDispatcher);</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;        <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a776e9bd99369c83297958207fa0a2eb3" title="Used to make working with the Collisions easier.">PhysicsManager::CollisionIterator</a> ColIt = Collisions.begin();</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;        <span class="keywordflow">while</span>( ColIt != Collisions.end() )</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        {</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Collision.xhtml" title="This is an event class used to track collsions in the physics world.">Physics::Collision</a>* ToBeDestroyed = (*ColIt).second;</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;            <span class="keywordflow">if</span>( Object == (*ColIt).second-&gt;ObjectA || Object == (*ColIt).second-&gt;ObjectB )</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;            {</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a776e9bd99369c83297958207fa0a2eb3" title="Used to make working with the Collisions easier.">PhysicsManager::CollisionIterator</a> Delete = ColIt;</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                ++ColIt;</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                Collisions.erase(Delete);</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                <span class="keyword">delete</span> ToBeDestroyed;</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;                ++ColIt;</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;            }</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;        }</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    }</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;</div>
<div class="line"><a name="l00913"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a8a34856cf8da8448c5f148100163a995">  913</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a8a34856cf8da8448c5f148100163a995" title="Destroys all collisions currently being stored and processed in the manager.">PhysicsManager::DestroyAllCollisions</a>()</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    {</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        <span class="keywordflow">for</span>( <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a776e9bd99369c83297958207fa0a2eb3" title="Used to make working with the Collisions easier.">PhysicsManager::CollisionIterator</a> ColIt = Collisions.begin() ; ColIt != Collisions.end() ; ++ColIt )</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        {</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1Collision.xhtml" title="This is an event class used to track collsions in the physics world.">Physics::Collision</a>* ToBeDestroyed = (*ColIt).second;</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;            <span class="comment">//BulletDispatcher-&gt;releaseManifold(ToBeDestroyed-&gt;Manifold);</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        }</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        Collisions.clear();</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;    }</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;</div>
<div class="line"><a name="l00923"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ae7dd5afd48cb25dc72807f7a5a0efc0b">  923</a></span>&#160;    <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a776e9bd99369c83297958207fa0a2eb3" title="Used to make working with the Collisions easier.">PhysicsManager::CollisionIterator</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ae7dd5afd48cb25dc72807f7a5a0efc0b" title="Get an CollisionIterator to the first Collision.">PhysicsManager::BeginCollision</a>()</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    {</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        <span class="keywordflow">return</span> Collisions.begin();</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    }</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;</div>
<div class="line"><a name="l00928"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a4cf5887ebd7e0f21ee639478ccd5ca65">  928</a></span>&#160;    <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a776e9bd99369c83297958207fa0a2eb3" title="Used to make working with the Collisions easier.">PhysicsManager::CollisionIterator</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a4cf5887ebd7e0f21ee639478ccd5ca65" title="Get a CollisionIterator to one past the last Collision.">PhysicsManager::EndCollision</a>()</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    {</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        <span class="keywordflow">return</span> Collisions.end();</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;    }</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;</div>
<div class="line"><a name="l00933"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ac05c8da294e6556d1e07bffc954005a6">  933</a></span>&#160;    <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a3d20258bf091f49c4e698ded69642de0" title="Used to make working with the Collisions easier, and avoid the risk of accidentally changing them...">PhysicsManager::ConstCollisionIterator</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ae7dd5afd48cb25dc72807f7a5a0efc0b" title="Get an CollisionIterator to the first Collision.">PhysicsManager::BeginCollision</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        <span class="keywordflow">return</span> Collisions.begin();</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;    }</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;</div>
<div class="line"><a name="l00938"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#aae308444076255406bc67399fb8fca24">  938</a></span>&#160;    <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a3d20258bf091f49c4e698ded69642de0" title="Used to make working with the Collisions easier, and avoid the risk of accidentally changing them...">PhysicsManager::ConstCollisionIterator</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a4cf5887ebd7e0f21ee639478ccd5ca65" title="Get a CollisionIterator to one past the last Collision.">PhysicsManager::EndCollision</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        <span class="keywordflow">return</span> Collisions.end();</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    }</div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    <span class="comment">//Bullet Debug Drawing</span></div>
<div class="line"><a name="l00944"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ac1104ad21c6c779bb93147163d066f7e">  944</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ac1104ad21c6c779bb93147163d066f7e" title="Enables and Disables Physics Debug Drawing.">PhysicsManager::SetDebugPhysicsRendering</a>(<span class="keywordtype">int</span> ToBeEnabled)</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;    {</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        <span class="keywordflow">if</span>(!BulletDrawer)</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;        {</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;            this-&gt;BulletDrawer = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml" title="This is used to draw wireframse for the Physics subsystem.">debug::InternalDebugDrawer</a>(this-&gt;<a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>);</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;setDebugDrawer(this-&gt;BulletDrawer);</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;        }</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;        <span class="keywordflow">if</span>(ToBeEnabled)</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;        {</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;getDebugDrawer()-&gt;setDebugMode(btIDebugDraw::DBG_DrawWireframe);</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;        }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;getDebugDrawer()-&gt;setDebugMode(btIDebugDraw::DBG_NoDebug);</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;        }</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;    }</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;</div>
<div class="line"><a name="l00960"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a3dc5dbf00d4a6567561ea6fbf63da49d">  960</a></span>&#160;    <span class="keywordtype">int</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a3dc5dbf00d4a6567561ea6fbf63da49d" title="Is Physics Debug Drawing currently enabled?">PhysicsManager::GetDebugPhysicsRendering</a>()</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    {</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        <span class="keywordflow">if</span>(!BulletDrawer)</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        <span class="keywordflow">if</span>(this-&gt;BulletDrawer-&gt;<a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a988d8362fbfd5e45032010334777d02d" title="This will return the current debug mode.">getDebugMode</a>()==btIDebugDraw::DBG_DrawWireframe)</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;        {</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;            <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;        }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        }</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    }</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;</div>
<div class="line"><a name="l00973"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a7a2fd072c1035b744ce4c22265219d8b">  973</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a7a2fd072c1035b744ce4c22265219d8b" title="How many Wireframes do you want drawn from previous events.">PhysicsManager::SetDebugPhysicsWireCount</a>(<a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> WireFrameCount_)</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    {</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        <span class="keywordflow">if</span>(!BulletDrawer)</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        {</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;            this-&gt;BulletDrawer = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml" title="This is used to draw wireframse for the Physics subsystem.">debug::InternalDebugDrawer</a>(this-&gt;<a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>);</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;setDebugDrawer(this-&gt;BulletDrawer);</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        }</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        this-&gt;BulletDrawer-&gt;<a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a90fdd352bf1b49a62653a9aa4878f49a" title="Sets the amount of previous wireframes to leave visible.">SetWireFrameCount</a>(WireFrameCount_);</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;    }</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;</div>
<div class="line"><a name="l00984"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a04e47cd46c50c979026a801caac1020c">  984</a></span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a04e47cd46c50c979026a801caac1020c" title="This gets how many WireFrames are being drawn.">PhysicsManager::GetDebugPhysicsWireCount</a>()</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    {</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;        <span class="keywordflow">if</span>(BulletDrawer)</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;            <span class="keywordflow">return</span> this-&gt;BulletDrawer-&gt;<a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a2d747dbcc3fb7d0c18fc21c8df2c57ef" title="This returns the amount of wireframes to be drawn.">GetWireFrameCount</a>();</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;            <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    }</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;</div>
<div class="line"><a name="l00992"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#aa4333ad1d8382ead2401e2870603ae89">  992</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#aa4333ad1d8382ead2401e2870603ae89" title="Resets all the internal physics structures in this manager.">PhysicsManager::ResetPhysicsWorld</a>(<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml">PhysicsConstructionInfo</a>* Info)</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    {</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;        <span class="keyword">delete</span> BulletDynamicsWorld;</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        <span class="keyword">delete</span> BulletDispatcher;</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        <span class="keyword">delete</span> BulletCollisionConfiguration;</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;        <span class="keyword">delete</span> BulletSolver;</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        <span class="keyword">delete</span> BulletBroadphase;</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;        <span class="keyword">delete</span> GhostCallback;</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;        <span class="keywordtype">bool</span> DebugOn = <span class="keyword">false</span>;</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        <span class="keywordflow">if</span>(BulletDrawer)</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;        {</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;            <span class="keyword">delete</span> BulletDrawer;</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;            DebugOn = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;        }</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        <span class="keywordflow">if</span>(Info) this-&gt;Construct(*Info);</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        <span class="keywordflow">else</span> this-&gt;Construct(WorldConstructionInfo);</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;        <span class="keywordflow">if</span>(DebugOn)</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        {</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;            this-&gt;BulletDrawer = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml" title="This is used to draw wireframse for the Physics subsystem.">debug::InternalDebugDrawer</a>(this-&gt;<a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>);</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;setDebugDrawer(this-&gt;BulletDrawer);</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        }</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;    }</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;</div>
<div class="line"><a name="l01016"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a82fc7833487bbc792a671b032cfd7a6b"> 1016</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a82fc7833487bbc792a671b032cfd7a6b" title="Clears all data relating to actors and other simulation objects from the physics world.">PhysicsManager::ClearPhysicsMetaData</a>()</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;    {</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        <span class="comment">// Clean the broadphase of AABB data</span></div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;        btOverlappingPairCache* Pairs = BulletBroadphase-&gt;getOverlappingPairCache();</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        <span class="keywordtype">int</span> NumPairs = Pairs-&gt;getNumOverlappingPairs();</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        btBroadphasePairArray PairArray = Pairs-&gt;getOverlappingPairArray();</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;        <span class="keywordflow">for</span>( <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> X = 0 ; X &lt; NumPairs ; X++ )</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;        {</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;            btBroadphasePair&amp; CurrPair = PairArray.at(X);</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;            Pairs-&gt;cleanOverlappingPair(CurrPair,BulletDispatcher);</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;            Pairs-&gt;removeOverlappingPair(CurrPair.m_pProxy0,CurrPair.m_pProxy1,BulletDispatcher);</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;        }</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;        <span class="comment">// Clean the dispatcher(narrowphase) of shape data</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;        <span class="keywordtype">int</span> numManifolds = BulletDynamicsWorld-&gt;getDispatcher()-&gt;getNumManifolds();</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;        <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i = 0 ; i &lt; numManifolds ; i++ )</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;        {</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;            BulletDispatcher-&gt;releaseManifold(BulletDispatcher-&gt;getManifoldByIndexInternal(i));</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;        }</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;        BulletBroadphase-&gt;resetPool(BulletDispatcher);</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;        BulletSolver-&gt;reset();</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;        BulletDynamicsWorld-&gt;stepSimulation(1.f/60.f,1,1.f/60.f);</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    }</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;</div>
<div class="line"><a name="l01041"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#acbe6ef0e6554702a005c152079bb40c0"> 1041</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#acbe6ef0e6554702a005c152079bb40c0" title="Sets the modifier to be used when stepping the physics simulation.">PhysicsManager::SetSimulationSubstepModifier</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a>&amp; Modifier)</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    {</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        SubstepModifier = Modifier;</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;    }</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;</div>
<div class="line"><a name="l01046"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a9fffb77acb0644d31ea78de4e823c0a0"> 1046</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a21df393f2356a20151fce997577e3d76" title="The main loop calls this once per frame. ">PhysicsManager::DoMainLoopItems</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> &amp;TimeElapsed)</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;    {</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;        <span class="keywordflow">if</span>(SimulationPaused)</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;<span class="preprocessor">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;<span class="preprocessor"></span>        <span class="keyword">static</span> Ogre::Timer* Profiler = <span class="keyword">new</span> Ogre::Timer();</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        Profiler-&gt;reset();</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;<span class="preprocessor">        #endif</span></div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> FloatTime = TimeElapsed * 0.001; <span class="comment">//Convert from MilliSeconds to Seconds</span></div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> IdealStep = this-&gt;<a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#ad009b4ed29febd443616060ca32ad573" title="Retrieves the amount of milliseconds we would like each iteration of the Main Loop to be...">GetTargetFrameTime</a>() * 0.001;</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;        IdealStep /= SubstepModifier;</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;        <span class="keywordtype">int</span> MaxSteps = (FloatTime&lt;IdealStep) ? 1 : <span class="keywordtype">int</span>(FloatTime/IdealStep)+1;</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="preprocessor">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;<span class="preprocessor"></span>        Profiler-&gt;reset();</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;<span class="preprocessor">        #endif</span></div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;<span class="preprocessor"></span>        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#ae11d3d584419c09ce38aa1c4b646cf86" title="This is another way to put data in the log.">LogStream</a> &lt;&lt; <span class="stringliteral">&quot;Entering StepSimulation.&quot;</span>;</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#a9ff3a62c982cb032d644b2f327ce547f" title="This commits the log stream to the log.">DoMainLoopLogging</a>();</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;        this-&gt;BulletDynamicsWorld-&gt;stepSimulation( FloatTime, MaxSteps, IdealStep);</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;<span class="preprocessor">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;<span class="preprocessor"></span>        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#ae11d3d584419c09ce38aa1c4b646cf86" title="This is another way to put data in the log.">LogStream</a> &lt;&lt; <span class="stringliteral">&quot;StepSimulation() took &quot;</span> &lt;&lt; Profiler-&gt;getMicroseconds() &lt;&lt; <span class="stringliteral">&quot; microseconds.&quot;</span>;</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#a9ff3a62c982cb032d644b2f327ce547f" title="This commits the log stream to the log.">DoMainLoopLogging</a>();</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;<span class="preprocessor">        #endif // */</span></div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;        <span class="comment">/*#ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;<span class="comment">        Profiler-&gt;reset();</span></div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;<span class="comment">        #endif</span></div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="comment">        ProcessAllCollisions();</span></div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="comment">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="comment">        TheEntresol-&gt;LogStream &lt;&lt; &quot;Collisions took &quot; &lt;&lt; Profiler-&gt;getMicroseconds() &lt;&lt; &quot; microseconds.&quot;;</span></div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="comment">        TheEntresol-&gt;DoMainLoopLogging();</span></div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="comment">        #endif // */</span></div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="preprocessor">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="preprocessor"></span>        Profiler-&gt;reset();</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="preprocessor">        #endif</span></div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;<span class="preprocessor"></span>        ProcessAllEffects();</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;<span class="preprocessor">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="preprocessor"></span>        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#ae11d3d584419c09ce38aa1c4b646cf86" title="This is another way to put data in the log.">LogStream</a> &lt;&lt; <span class="stringliteral">&quot;AreaEffects took &quot;</span> &lt;&lt; Profiler-&gt;getMicroseconds() &lt;&lt; <span class="stringliteral">&quot; microseconds.&quot;</span>;</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#a9ff3a62c982cb032d644b2f327ce547f" title="This commits the log stream to the log.">DoMainLoopLogging</a>();</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="preprocessor">        #endif // */</span></div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;<span class="preprocessor">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;<span class="preprocessor"></span>        Profiler-&gt;reset();</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;<span class="preprocessor">        #endif</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;<span class="preprocessor"></span>        ProcessAllTriggers();</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;<span class="preprocessor">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="preprocessor"></span>        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#ae11d3d584419c09ce38aa1c4b646cf86" title="This is another way to put data in the log.">LogStream</a> &lt;&lt; <span class="stringliteral">&quot;Triggers took &quot;</span> &lt;&lt; Profiler-&gt;getMicroseconds() &lt;&lt; <span class="stringliteral">&quot; microseconds.&quot;</span>;</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#a9ff3a62c982cb032d644b2f327ce547f" title="This commits the log stream to the log.">DoMainLoopLogging</a>();</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;<span class="preprocessor">        #endif // */</span></div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;        <span class="comment">// This is supposedly to speed up the performance of soft bodies, if any are in the simulation.</span></div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;        <span class="comment">//this-&gt;BulletDynamicsWorld-&gt;getWorldInfo().m_sparsesdf.GarbageCollect();</span></div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;        <span class="comment">/*#ifdef MEZZDEBUG</span></div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;<span class="comment">        this-&gt;TheEntresol-&gt;Log(&quot;Checking for Collisions.&quot;);</span></div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;<span class="comment">        #endif</span></div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;<span class="comment">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;<span class="comment">        Profiler-&gt;reset();</span></div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;<span class="comment">        #endif</span></div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;<span class="comment">        int numManifolds = BulletDynamicsWorld-&gt;getDispatcher()-&gt;getNumManifolds();</span></div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;<span class="comment">        for (int i=0;i&lt;numManifolds;i++)</span></div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;<span class="comment">        {</span></div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;<span class="comment">            btPersistentManifold* contactManifold = BulletDynamicsWorld-&gt;getDispatcher()-&gt;getManifoldByIndexInternal(i);</span></div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;<span class="comment">            int numContacts = contactManifold-&gt;getNumContacts();</span></div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;<span class="comment">            for (int j=0;j&lt;numContacts;j++)</span></div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;<span class="comment">                btManifoldPoint&amp; pt = contactManifold-&gt;getContactPoint(j);</span></div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;<span class="comment">                if (pt.m_lifeTime == CollisionAge &amp;&amp; pt.m_appliedImpulse &gt;= Impulse &amp;&amp; pt.m_distance1 &lt; 0)</span></div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;<span class="comment">                {</span><span class="comment"></span></div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;<span class="comment">                    /// @todo This chunk of code won&#39;t take the upcoming terrain system into account, and should be modified accordingly</span></div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;<span class="comment"></span>                    btCollisionObject* objectA = static_cast&lt;btCollisionObject*&gt;(contactManifold-&gt;getBody0());</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                    btCollisionObject* objectB = static_cast&lt;btCollisionObject*&gt;(contactManifold-&gt;getBody1());</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                    ActorBase* ActA = ActorManager::GetSingletonPtr()-&gt;GetActorContainer()-&gt;FindActor(objectA);</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                    ActorBase* ActB = ActorManager::GetSingletonPtr()-&gt;GetActorContainer()-&gt;FindActor(objectB);</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;                    if( !ActA || !ActB )</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;                        continue;</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;                    Vector3 WorldLoc((pt.getPositionWorldOnA() + pt.getPositionWorldOnB()) * 0.5);</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;                    Vector3 ActALoc(pt.m_localPointA);</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;                    Vector3 ActBLoc(pt.m_localPointB);</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;                    EventCollision* ColEvent = new EventCollision(ActA,ActB,ActALoc,ActBLoc,WorldLoc,pt.m_appliedImpulse);</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;                    //create collision event</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;                    EventManager::GetSingletonPtr()-&gt;AddEvent(ColEvent);</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;                    #ifdef MEZZDEBUG</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;                    this-&gt;TheEntresol-&gt;Log(&quot;Collision Event:&quot;);</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;                    this-&gt;TheEntresol-&gt;Log(*ColEvent);</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;                    #endif</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;                }</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;            }</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;        }</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;        #ifdef MEZZPROFILE</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;        TheEntresol-&gt;LogStream &lt;&lt; &quot;Contact Manifold Iteration took &quot; &lt;&lt; Profiler-&gt;getMicroseconds() &lt;&lt; &quot; microseconds.&quot;;</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;        TheEntresol-&gt;DoMainLoopLogging();</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;        #endif // */</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;<span class="preprocessor">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;<span class="preprocessor"></span>        Profiler-&gt;reset();</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;<span class="preprocessor">        #endif</span></div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span>( this-&gt;BulletDrawer &amp;&amp; this-&gt;BulletDrawer-&gt;<a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a988d8362fbfd5e45032010334777d02d" title="This will return the current debug mode.">getDebugMode</a>() )        <span class="comment">//this part is responsible for drawing the wireframes</span></div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;        {</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;            this-&gt;BulletDrawer-&gt;<a class="code" href="classMezzanine_1_1debug_1_1InternalDebugDrawer.xhtml#a4600feca2ea7570300e80b4daa49a41b" title="This add all the rendering information to the graphics subsystem.">PrepareForRendering</a>();</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;            this-&gt;BulletDynamicsWorld-&gt;debugDrawWorld();</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;        }</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;<span class="preprocessor">        #ifdef MEZZPROFILE</span></div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;<span class="preprocessor"></span>        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#ae11d3d584419c09ce38aa1c4b646cf86" title="This is another way to put data in the log.">LogStream</a> &lt;&lt; <span class="stringliteral">&quot;DebugDrawer took &quot;</span> &lt;&lt; Profiler-&gt;getMicroseconds() &lt;&lt; <span class="stringliteral">&quot; microseconds.&quot;</span>;</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#a9ff3a62c982cb032d644b2f327ce547f" title="This commits the log stream to the log.">DoMainLoopLogging</a>();</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;<span class="preprocessor">        #endif // */</span></div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<span class="preprocessor"></span>    }</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;</div>
<div class="line"><a name="l01158"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ae8ba569b66769515c8efa8eba2131c14"> 1158</a></span>&#160;    btSoftRigidDynamicsWorld* <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ae8ba569b66769515c8efa8eba2131c14" title="This returns a pointer to the bullet physics world. This is for internal use only.">PhysicsManager::GetPhysicsWorldPointer</a>()</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;    {</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;        <span class="keywordflow">return</span> this-&gt;BulletDynamicsWorld;</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;    }</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;<span class="comment">    ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;<span class="comment"></span>    <span class="comment">// Inherited from Managerbase</span></div>
<div class="line"><a name="l01165"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ab09c912dc48b7082bd07a536167bc3d3"> 1165</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#ab09c912dc48b7082bd07a536167bc3d3" title="Configure Items requiring other Managers. ">PhysicsManager::Initialize</a>()</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;    {</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;        <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ada3bad0fe77ff2fa7404eea7a5c16264" title="Simple bool indicating whether or not this manager has been initialized.">Initialized</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;    }</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;</div>
<div class="line"><a name="l01170"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a21df393f2356a20151fce997577e3d76"> 1170</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a21df393f2356a20151fce997577e3d76" title="The main loop calls this once per frame. ">PhysicsManager::DoMainLoopItems</a>()</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;    {</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;        this-&gt;<a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a21df393f2356a20151fce997577e3d76" title="The main loop calls this once per frame. ">DoMainLoopItems</a>(this-&gt;<a class="code" href="classMezzanine_1_1ManagerBase.xhtml#ae619b4bd732d7345e0ef59ecde6d03cc" title="The actual pointer to the world.">TheEntresol</a>-&gt;<a class="code" href="classMezzanine_1_1Entresol.xhtml#a45d87ca28ed75adeac1f02219807342f" title="Gets the amount of time since the last time Rendering began.">GetFrameTime</a>());</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;    }</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;</div>
<div class="line"><a name="l01175"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a6bf6a9703851581ce5d03fa205063eaa"> 1175</a></span>&#160;    <a class="code" href="classMezzanine_1_1ManagerBase.xhtml#a9a6f3e238f66cbc68dfec11e4160aa6c">ManagerBase::ManagerType</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a6bf6a9703851581ce5d03fa205063eaa" title="This returns the type of this manager. ">PhysicsManager::GetInterfaceType</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;<span class="keyword">        </span>{ <span class="keywordflow">return</span> ManagerBase::PhysicsManager; }</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;</div>
<div class="line"><a name="l01178"></a><span class="lineno"><a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a8f6f3844b404a8bd18ad0ca6e39c59d2"> 1178</a></span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml#a8f6f3844b404a8bd18ad0ca6e39c59d2" title="This Allows any manager name to be sent to a stream. Primarily used for logging. ">PhysicsManager::GetImplementationTypeName</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="keyword">        </span>{ <span class="keywordflow">return</span> <span class="stringliteral">&quot;DefaultPhysicsManager&quot;</span>; }</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;<span class="comment">    ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;<span class="comment"></span>    <span class="comment">// DefaultPhysicsManagerFactory Methods</span></div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;</div>
<div class="line"><a name="l01184"></a><span class="lineno"><a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a6f020da6dacfa9f866c9b917b4d49cd1"> 1184</a></span>&#160;    <a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a6f020da6dacfa9f866c9b917b4d49cd1" title="Class constructor.">DefaultPhysicsManagerFactory::DefaultPhysicsManagerFactory</a>()</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;    {</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;    }</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;</div>
<div class="line"><a name="l01188"></a><span class="lineno"><a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a028bc086c46b31258daf30bbe44be413"> 1188</a></span>&#160;    <a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a028bc086c46b31258daf30bbe44be413" title="Class destructor.">DefaultPhysicsManagerFactory::~DefaultPhysicsManagerFactory</a>()</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    {</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;    }</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;</div>
<div class="line"><a name="l01192"></a><span class="lineno"><a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a5c5f954f39b2507e52b8c37b92a46b45"> 1192</a></span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> <a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a5c5f954f39b2507e52b8c37b92a46b45" title="Gets the name of the Manager that is created by this factory. ">DefaultPhysicsManagerFactory::GetManagerTypeName</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;<span class="keyword">    </span>{</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&quot;DefaultPhysicsManager&quot;</span>;</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;    }</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;</div>
<div class="line"><a name="l01197"></a><span class="lineno"><a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a9a690ef47906753aaea4fdab4fbef499"> 1197</a></span>&#160;    <a class="code" href="classMezzanine_1_1ManagerBase.xhtml" title="This is the base class from which all the World Managers inherit.">ManagerBase</a>* <a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a9a690ef47906753aaea4fdab4fbef499" title="Creates a manager of the type represented by this factory. ">DefaultPhysicsManagerFactory::CreateManager</a>(<a class="code" href="namespaceMezzanine.xhtml#ac9f30d4ba179aab9013e0c8fbf55bd28" title="This is a datatype mostly used for describing settings or parameters that can&#39;t be declared in advanc...">NameValuePairList</a>&amp; Params)</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;    {</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="classMezzanine_1_1Singleton.xhtml#a554165fe3e4b594b678d64215fd7a6f9" title="Checks to see if the singleton pointer is valid.">PhysicsManager::SingletonValid</a>())</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        {<span class="comment"></span></div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;<span class="comment">            /// @todo Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.</span></div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;<span class="comment"></span>            <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">PhysicsManager::GetSingletonPtr</a>();</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;        }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;            <span class="keywordflow">if</span>(Params.empty()) <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml" title="This is simply a place for storing all the Physics Related functions.">PhysicsManager</a>();</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;            <span class="keywordflow">else</span></div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;            {</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                <a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml">PhysicsConstructionInfo</a> PhysInfo;</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;                <span class="keywordflow">for</span>( NameValuePairList::iterator ParIt = Params.begin() ; ParIt != Params.end() ; ++ParIt )</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;                {</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;                    <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> Lower = (*ParIt).first;</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;                    StringTools::ToLowerCase(Lower);</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;                    <span class="keywordflow">if</span>( <span class="stringliteral">&quot;geographyupperbounds&quot;</span> == Lower )</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;                    {</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;                        PhysInfo.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aa1794e928aea2ce5f2e9ad4f467b1c14" title="The upper limits of the worlds AABB.">GeographyUpperBounds</a> = StringTools::ConvertToVector3( (*ParIt).second );</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;                    }</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span>( <span class="stringliteral">&quot;geographylowerbounds&quot;</span> == Lower )</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;                    {</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;                        PhysInfo.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#aed6f8f0555fe4dec58758f6d774cbcee" title="The lower limits of the worlds AABB.">GeographyLowerBounds</a> = StringTools::ConvertToVector3( (*ParIt).second );</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;                    }</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span>( <span class="stringliteral">&quot;maxproxies&quot;</span> == Lower )</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;                    {</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;                        PhysInfo.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a33cf4caa561d10c3d1df0ea150612c95" title="The maximum number of Actors and Area Effects you expect to have in the world at one time...">MaxProxies</a> = StringTools::ConvertToUInt32( (*ParIt).second );</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;                    }</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span>( <span class="stringliteral">&quot;gravity&quot;</span> == Lower )</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;                    {</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;                        PhysInfo.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#ad8811afcf56826a1b2fb90c66da842c5" title="The gravity to set for the world.">Gravity</a> = StringTools::ConvertToVector3( (*ParIt).second );</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                    }</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span>( <span class="stringliteral">&quot;softrigidworld&quot;</span> == Lower )</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                    {</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                        <span class="keywordflow">if</span>(StringTools::ConvertToBool( (*ParIt).second ))</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                            PhysInfo.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> = (PhysInfo.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> | PhysicsConstructionInfo::PCF_SoftRigidWorld);</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                    }</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;                    <span class="keywordflow">else</span> <span class="keywordflow">if</span>( <span class="stringliteral">&quot;limitlessworld&quot;</span> == Lower )</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;                    {</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;                        <span class="keywordflow">if</span>(StringTools::ConvertToBool( (*ParIt).second ))</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;                            PhysInfo.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> = (PhysInfo.<a class="code" href="classMezzanine_1_1PhysicsConstructionInfo.xhtml#a6bd545e44118899b296b07e996a49039" title="The flags to initialize the physics system with.">PhysicsFlags</a> | PhysicsConstructionInfo::PCF_LimitlessWorld);</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;                    }</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;                }</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml" title="This is simply a place for storing all the Physics Related functions.">PhysicsManager</a>(PhysInfo);</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;            }</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;        }</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;    }</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;</div>
<div class="line"><a name="l01244"></a><span class="lineno"><a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a2a47545af6d3afd469e7143ab0309453"> 1244</a></span>&#160;    <a class="code" href="classMezzanine_1_1ManagerBase.xhtml" title="This is the base class from which all the World Managers inherit.">ManagerBase</a>* <a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a9a690ef47906753aaea4fdab4fbef499" title="Creates a manager of the type represented by this factory. ">DefaultPhysicsManagerFactory::CreateManager</a>(<a class="code" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">XML::Node</a>&amp; XMLNode)</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;    {</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="classMezzanine_1_1Singleton.xhtml#a554165fe3e4b594b678d64215fd7a6f9" title="Checks to see if the singleton pointer is valid.">PhysicsManager::SingletonValid</a>())</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;        {<span class="comment"></span></div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;<span class="comment">            /// @todo Add something to log a warning that the manager exists and was requested to be constructed when we have a logging manager set up.</span></div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;<span class="comment"></span>            <span class="keywordflow">return</span> <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">PhysicsManager::GetSingletonPtr</a>();</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        }<span class="keywordflow">else</span> <span class="keywordflow">return</span> <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1PhysicsManager.xhtml" title="This is simply a place for storing all the Physics Related functions.">PhysicsManager</a>(XMLNode);</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;    }</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;</div>
<div class="line"><a name="l01253"></a><span class="lineno"><a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a2d72cfa3c0e601ac239c7f27878fccd5"> 1253</a></span>&#160;    <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1DefaultPhysicsManagerFactory.xhtml#a2d72cfa3c0e601ac239c7f27878fccd5" title="Destroys a Manager created by this factory. ">DefaultPhysicsManagerFactory::DestroyManager</a>(<a class="code" href="classMezzanine_1_1ManagerBase.xhtml" title="This is the base class from which all the World Managers inherit.">ManagerBase</a>* ToBeDestroyed)</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;    {</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;        <span class="keyword">delete</span> ToBeDestroyed;</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;    }</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;}<span class="comment">//Mezzanine</span></div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat May 18 2013 22:24:20 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
