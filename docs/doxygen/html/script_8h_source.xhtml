<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/sqeaky/Code/Mezzanine/Mezzanine/src/Scripting/script.h Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.1.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_282391f6f4177160a7bfc5213c65158e.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_b044052e4980a71349e081a68f99b09b.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_1a8bf512ac1e8674f397238bb15ffede.xhtml">Scripting</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">script.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="script_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//Â© Copyright 2010 - 2013 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">    The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    (at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    along with The Mezzanine Engine.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   &#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    - DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    - Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    - Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">    - Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">    - If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">        your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">   These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">   them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">   you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">   John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _script_h</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _script_h</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span><span class="comment"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/// @file</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">/// @brief This file has the interfaces for Scripts and tag derived classes.</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="preprocessor">#include &quot;binarytool.h&quot;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="scriptargument_8h.xhtml" title="This file has the interfaces for Script Arguments and the associated dependency chain.">scriptargument.h</a>&quot;</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="smartptr_8h.xhtml" title="This file describes and implements any pointers or typedefs to pointers that the Mezzanine uses and e...">smartptr.h</a>&quot;</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;{</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">namespace </span>Scripting</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    {</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="comment">// Forward Declares</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keyword">class </span>iScriptCompilable;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keyword">class </span>iScriptMultipleReturn;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">        /// @brief The interface for a script</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">        /// @details All the methods that all scripts for all languages must implement.</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">        /// These are tiny pieces of data that can be run like miniature programs.</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">        /// @n @n</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">        /// These can be executed by passing them to the appropriate Script Manager.</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">        /// @n @n</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">        /// This uses multiple inheritance to minimize the amount of features a scripting langauge with need to</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">        /// implement. It is expected that a simple scripting language may only need to implement the base</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">        /// @ref iScript interface. Other languages that support more features can have their script classes</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">        /// multiply inherit from the other classes like</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScript.xhtml">   70</a></span>&#160;<span class="comment"></span>        <span class="keyword">class </span><a class="code" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc" title="Some platforms require special decorations to denote what is exported/imported in a share library...">MEZZ_LIB</a> <a class="code" href="classMezzanine_1_1Scripting_1_1iScript.xhtml" title="The interface for a script.">iScript</a></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        {</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            <span class="keyword">public</span>:<span class="comment"></span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span>                <span class="comment">// Work With Arguments</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">                /// @brief This adds an argument to be passed to the script.</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">                /// @details All arguments added with this are passed in FIFO order to the Script during or just</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">                /// before execution. This should normally run in constant time. Some scripting implementations may</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">                /// change the order arguments are passed if doing it another way mays more sense.</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">                /// @param Arg This accepts a CountedPtr to a script argument and The script shares responsibility with caller for deleting the argument.</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> AddArgument(<a class="code" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple referencing counting pointer.">CountedPtr&lt;iScriptArgument&gt;</a> Arg) = 0;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">                /// @brief Remove an argument based on a CountedPtr to the script</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">                /// @detail This searches through the internal list and removes the first entry it finds matching this.</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">                /// This should be treated as taking linear time, relative to the total count of arguments assigned to this script, to run.</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">                /// This can be used with AddArgument to re-order the way parameters are passed into a script</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">                /// @param Arg A CountedPtr matching the one to be removed</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> RemoveArgument(<a class="code" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple referencing counting pointer.">CountedPtr&lt;iScriptArgument&gt;</a> Arg) = 0;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">                /// @brief Remove a Script argument based on the order it will be passed into the Script at Execution.</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">                /// @detail This removes the  specified Argument from the internal list. This should be treated as taking linear</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">                /// time, relative to the total count of arguments assigned to this script, to run.</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">                /// @param ArgNumber The number of the Argument to be removed. This behaves similar to an array or vector as it starts counting at 0.</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> RemoveArgument(<a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> ArgNumber) = 0;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">                /// @brief How many arguments have been attached to this script?</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">                /// @return A Whole containing the amount of arguments passed in so far.</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> GetArgumentCount() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">                /// @brief Remove all the ARGs!!! http://imgur.com/DJhw7</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">                /// @details This should run in constant time. It still might be slower than removing and readding just one a few arguments</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">                /// in simple cases</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> ClearArguments() = 0;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">                /// @brief Retrieve a argument previously passed in.</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">                /// @param ArgNumber The index of the passed parameter to retrun.</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">                /// @return A reference counted pointer to a ScriptArgument.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1CountedPtr.xhtml" title="A simple referencing counting pointer.">CountedPtr&lt;iScriptArgument&gt;</a> GetArgument(<a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> ArgNumber) <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment"></span>                <span class="comment">// Source of the Script</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment">                /// @brief Sets the string version of the script.</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">                /// @param Code A string that defines the source code to be executed or compiled whne running the script.</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">                /// @detail It is recomended that when this is called that implentors clear any bytecode or any other compiled</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">                /// version of the script. This will prevent issues with mismatched version of source and bytecode.</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetSourceCode(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a>&amp; Code) = 0;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">                /// @brief If present this returns the code of script</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">                /// @return This will return either an empty @ref String or the code. In cases where bytcode is set it is advised to clear this in implementations.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> GetSourceCode() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment"></span>                <span class="comment">// Compilation Detection support</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">                /// @brief Used to check if there is a bytecode version of the script available.</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="comment">                /// @return This will return false on all scripts not implementing @ref ScriptCompilable and only false when the bytecode is already compiled.</span></div>
<div class="line"><a name="l00128"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScript.xhtml#aca6d95a143bc299424fb6eb92552f750">  128</a></span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsCompiled()<span class="keyword"> const</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="keyword">                    </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">                /// @brief Used to check if this Script supports compilation bytecode.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">                /// @return This will return false on all scripts not implementing @ref ScriptCompilable and on those that do implement it.</span></div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScript.xhtml#a5d222fee4b4f2ef855605472fd186667">  133</a></span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsCompilable()<span class="keyword"> const</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keyword">                    </span>{ <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">                /// @brief If your only handle to this is a pointer of type @ref iScript this can be called to get a pointer to an @ref iScriptCompilable if it would be valid</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">                /// @return A null pointer if this conversion is invalid or a valid pointer to this as an @ref iScriptCompilable if it is valid.</span></div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScript.xhtml#a166c96bd77a34a4815a5da2eb5b1af65">  138</a></span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Scripting_1_1iScriptCompilable.xhtml" title="The interface for a script that can be compiled to bytecode.">iScriptCompilable</a>* GetAsScriptCompilable()</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    { <span class="keywordflow">return</span> 0; }</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">                /// @copydoc GetAsScriptCompilable</span></div>
<div class="line"><a name="l00142"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScript.xhtml#a3a9e22da955af88cb7dce88475cbba42">  142</a></span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Scripting_1_1iScriptCompilable.xhtml" title="The interface for a script that can be compiled to bytecode.">iScriptCompilable</a>* GetAsScriptCompilable()<span class="keyword"> const</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="keyword">                </span>{ <span class="keywordflow">return</span> 0; }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="comment">                ///////////////////////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="comment"></span>                <span class="comment">// Multiple return Detection Support</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment">                /// @brief Does this script support multiple return values.</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">                /// @detail Some scripting language support return tuples of values(Python), return an array of values (javascript), returning tables made of records</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="comment">                /// which are groups or values(sql), and some allow return an arbitrary number of items that could be tables, or values and allow for tables to contain</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">                /// more tables and values(Lua). This allows for checking for an interface to retrieve some of these.</span></div>
<div class="line"><a name="l00152"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScript.xhtml#a5b6d72ccf1385c1dc80c77f1846fd0f3">  152</a></span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">bool</span> CanReturnMultples()</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    { <span class="keywordflow">return</span> <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">                /// @brief If your only handle to this is a pointer of type @ref iScript this can be called to get a pointer to an @ref iScriptMultipleReturn if it would be valid</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">                /// @return A null pointer if this conversion is invalid or a valid pointer to this as an @ref iScriptMultipleReturn if it is valid.</span></div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScript.xhtml#af3076ca7b55d0565bfc787852cd148a8">  157</a></span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Scripting_1_1iScriptMultipleReturn.xhtml" title="This script can return simple group of values.">iScriptMultipleReturn</a>* GetAsiScriptMultipleReturn()</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                    { <span class="keywordflow">return</span> 0; }</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        }; <span class="comment">// iScript</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">        /// @brief The interface for a script that can be compiled to bytecode</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">        /// @details All the members that all script for all languages must implement that</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">        /// support dynamic compilation in the Mezzanine.</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment">        /// @n @n</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="comment">        /// These are tiny pieces of data that can be run like miniature programs. In some cases</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment">        /// they will be compiled to a bytecode that can swiftly be executed by the appropriate</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">        /// bytecode interpretter. This is generally faster than interpretting text, but slower than</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">        /// running machine code.</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="comment">        /// @n @n</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment">        /// This class is designed for use with multiple inheritance. If a script returns true from</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">        /// @ref IsCompilable then its pointer can safely be cast to a ScriptCompilable pointer.</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment">        /// @todo Add sample code of safe cast in ScriptCompilable, becuase that is kinda wierd.</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">        ///////////////////////////////////////</span></div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScriptCompilable.xhtml">  177</a></span>&#160;<span class="comment"></span>        <span class="keyword">class </span><a class="code" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc" title="Some platforms require special decorations to denote what is exported/imported in a share library...">MEZZ_LIB</a> <a class="code" href="classMezzanine_1_1Scripting_1_1iScriptCompilable.xhtml" title="The interface for a script that can be compiled to bytecode.">iScriptCompilable</a> : <span class="keyword">public</span> <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Scripting_1_1iScript.xhtml" title="The interface for a script.">iScript</a></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keyword">public</span>:</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment">                /// @brief Set the bytecode used when this script is executed.</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">                /// @param Code The Binary version of the script</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">                /// @details This is what will be executed. No reverse compiling support is provided, so it is advisable</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment">                /// that implementations of this either clear the source code or set it to the source that matches the</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="comment">                /// compiled binary.</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetByteCode(<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryTools::BinaryBuffer</a> Code) = 0;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">                /// @brief Get the compiled version of the code if it is available.</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">                /// @return If there is valid byte code this will retrieve that, otherwise this will return an empty bytecode.</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryTools::BinaryBuffer</a> GetByteCode() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">                /// @brief Has this script already been compiled into a bytecode.</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">                /// @return True if there is bytecode available false otherwise.</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsCompiled() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">                /// @brief Any script implementing this class is compilable.</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">                /// @brief returns true.</span></div>
<div class="line"><a name="l00198"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScriptCompilable.xhtml#af3644b4ee4b4a27b27da25f7510364b7">  198</a></span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">bool</span> IsCompilable()<span class="keyword"> const</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="keyword">                    </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;</div>
<div class="line"><a name="l00201"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScriptCompilable.xhtml#a8a391e6b19b9221a9f692f4effe40001">  201</a></span>&#160;                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Scripting_1_1iScriptCompilable.xhtml" title="The interface for a script that can be compiled to bytecode.">iScriptCompilable</a>* GetAsScriptCompilable()</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    { <span class="keywordflow">return</span> <span class="keyword">this</span>; }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        };</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">        /// @brief A group of arguments that can be returned from some scripts</span></div>
<div class="line"><a name="l00207"></a><span class="lineno"><a class="code" href="namespaceMezzanine_1_1Scripting.xhtml#a3fbd873486ee95c33de828a12d6a21b5">  207</a></span>&#160;<span class="comment"></span>        <span class="keyword">typedef</span> std::vector&lt; CountedPtr&lt;iScriptArgument&gt; &gt; <a class="code" href="namespaceMezzanine_1_1Scripting.xhtml#a3fbd873486ee95c33de828a12d6a21b5" title="A group of arguments that can be returned from some scripts.">ArgumentSet</a>;</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">        /// @brief This script can return simple group of values.</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">        /// @details This loosely correlates to a tuple like the simple returns</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">        /// in Lua or any return in Python. This cannot handle returns that include</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">        /// tuples that contain tuples in a graceful way.</span></div>
<div class="line"><a name="l00213"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Scripting_1_1iScriptMultipleReturn.xhtml">  213</a></span>&#160;<span class="comment"></span>        <span class="keyword">class </span><a class="code" href="crossplatformexport_8h.xhtml#a455f91aab9e6a1cf4286f5cdfa74c7bc" title="Some platforms require special decorations to denote what is exported/imported in a share library...">MEZZ_LIB</a> <a class="code" href="classMezzanine_1_1Scripting_1_1iScriptMultipleReturn.xhtml" title="This script can return simple group of values.">iScriptMultipleReturn</a> : <span class="keyword">public</span> <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Scripting_1_1iScript.xhtml" title="The interface for a script.">iScript</a></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        {<span class="comment"></span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">                /// @brief Does this script support multiple return values.</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">                /// @return Any implementation of this returns true.</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <span class="keywordtype">bool</span> CanReturnMultples()<span class="keyword"> const</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="keyword">                    </span>{ <span class="keywordflow">return</span> <span class="keyword">true</span>; }</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="keyword">virtual</span> <a class="code" href="classMezzanine_1_1Scripting_1_1iScriptMultipleReturn.xhtml" title="This script can return simple group of values.">iScriptMultipleReturn</a>* GetAsiScriptMultipleReturn()</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    { <span class="keywordflow">return</span> <span class="keyword">this</span>; }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">                /// @brief How many values are being returned</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">                /// @return A Whole with the amount of items available to be returned now(from the last script call).</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> GetReturnCount() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">                /// @brief Get the returns from the last exection of the script</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">                /// @return An ArgumentSet that can be iterated over to get all the values returned.</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"></span>                <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine_1_1Scripting.xhtml#a3fbd873486ee95c33de828a12d6a21b5" title="A group of arguments that can be returned from some scripts.">ArgumentSet</a> GetAllReturns() <span class="keyword">const</span> = 0;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        };</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;}<span class="comment">//Mezzanine</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="preprocessor">#endif // \_script_h</span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Apr 9 2013 23:03:25 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1.2</small></address>
</body>
</html>
