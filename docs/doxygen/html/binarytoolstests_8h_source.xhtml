<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/sqeaky/Code/Mezzanine/UnitTests/tests/binarytoolstests.h Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">May 19, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_0b4cbdaab449d5f7091aab9921025b36.xhtml">UnitTests</a></li><li class="navelem"><a class="el" href="dir_5cf7925284949b697f49fbc7acb6ed3c.xhtml">tests</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">binarytoolstests.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="binarytoolstests_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//Â© Copyright 2010 - 2013 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">    The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">    it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">    the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">    (at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">    The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">    but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">    GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">    You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">    along with The Mezzanine Engine.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">   &#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">   Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">   However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">   any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">   out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">    - DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">    - Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">    - Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">    - Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">    - If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">        your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">   These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">   them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">   you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">   Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">   John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _binarytoolstests_h</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _binarytoolstests_h</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;main.h&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">/// @file</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// @brief Test the BinaryBuffer and associate functions</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">using namespace </span>std;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">using namespace </span>Mezzanine;</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">using namespace </span>Mezzanine::Testing;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">using namespace </span>Mezzanine::BinaryTools;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">// Code change to Match BTS naming conventions and formatting</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">// Copyright information in binarytools.cpp</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">/// @brief The library of characters used in Rene&#39;s Base64 implementation</span></div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="code" href="binarytoolstests_8h.xhtml#a5de7d929731748eff9cdfc5bee081aad">   58</a></span>&#160;<span class="comment"></span><span class="keyword">static</span> <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> <a class="code" href="binarytoolstests_8h.xhtml#a5de7d929731748eff9cdfc5bee081aad" title="The library of characters used in Rene&#39;s Base64 implementation.">Base64Chars</a> =</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;             <span class="stringliteral">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;             <span class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;             <span class="stringliteral">&quot;0123456789+/&quot;</span>;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">// Code change to Match BTS naming conventions and formatting</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">// Copyright information in binarytools.cpp</span><span class="comment"></span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">/// @brief Rene&#39;s Base64 implementation for comparison purposes.</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// @param BytesToEncode A buffer of bytes which is to be encoded. NULL bytes are encoded and not used for termination</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">/// @param Length The Length of the buffer pointed to by BytesToEncode</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/// @return A String containing the encoded value.</span></div>
<div class="line"><a name="l00070"></a><span class="lineno"><a class="code" href="binarytoolstests_8h.xhtml#acfd52e05446d6dd9a724fc5016291536">   70</a></span>&#160;<span class="comment"></span><a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> <a class="code" href="binarytoolstests_8h.xhtml#acfd52e05446d6dd9a724fc5016291536" title="Rene&#39;s Base64 implementation for comparison purposes.">ReneBase64Encode</a>(<a class="code" href="namespaceMezzanine.xhtml#aa5f38583d9025e05fa33d6e32e97b457" title="An 8-bit unsigned integer.">UInt8</a> <span class="keyword">const</span>* BytesToEncode, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Length)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;{</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> ret;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keywordtype">int</span> j = 0;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> char_array_3[3];</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> char_array_4[4];</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">while</span> (Length--)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        char_array_3[i++] = *(BytesToEncode++);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> (i == 3)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            char_array_4[0] = (char_array_3[0] &amp; 0xfc) &gt;&gt; 2;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            char_array_4[1] = ((char_array_3[0] &amp; 0x03) &lt;&lt; 4) + ((char_array_3[1] &amp; 0xf0) &gt;&gt; 4);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            char_array_4[2] = ((char_array_3[1] &amp; 0x0f) &lt;&lt; 2) + ((char_array_3[2] &amp; 0xc0) &gt;&gt; 6);</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            char_array_4[3] = char_array_3[2] &amp; 0x3f;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">for</span>(i = 0; (i &lt;4) ; i++)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                { ret += <a class="code" href="binarytoolstests_8h.xhtml#a5de7d929731748eff9cdfc5bee081aad" title="The library of characters used in Rene&#39;s Base64 implementation.">Base64Chars</a>[char_array_4[i]]; }</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            i = 0;</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        }</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    }</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keywordflow">if</span> (i)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    {</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">for</span>(j = i; j &lt; 3; j++)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            { char_array_3[j] = <span class="charliteral">&#39;\0&#39;</span>; }</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        char_array_4[0] = (char_array_3[0] &amp; 0xfc) &gt;&gt; 2;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        char_array_4[1] = ((char_array_3[0] &amp; 0x03) &lt;&lt; 4) + ((char_array_3[1] &amp; 0xf0) &gt;&gt; 4);</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        char_array_4[2] = ((char_array_3[1] &amp; 0x0f) &lt;&lt; 2) + ((char_array_3[2] &amp; 0xc0) &gt;&gt; 6);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        char_array_4[3] = char_array_3[2] &amp; 0x3f;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">for</span> (j = 0; (j &lt; i + 1); j++)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            { ret += <a class="code" href="binarytoolstests_8h.xhtml#a5de7d929731748eff9cdfc5bee081aad" title="The library of characters used in Rene&#39;s Base64 implementation.">Base64Chars</a>[char_array_4[j]]; }</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">while</span>((i++ &lt; 3))</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        { ret += <span class="charliteral">&#39;=&#39;</span>; }</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    }</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;}</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">// Code change to Match BTS naming conventions and formatting</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment">// Copyright information in binarytools.cpp</span><span class="comment"></span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment">/// @brief A reference implementation of Base64 decoding as provide by Rene.</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">/// @param EncodedString The String to be decoded as provided by ReneBase64Encode()</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">/// @ref A string Containing the resulting binary.</span></div>
<div class="line"><a name="l00119"></a><span class="lineno"><a class="code" href="binarytoolstests_8h.xhtml#a64798a22390aecb7a676cda618004874">  119</a></span>&#160;<span class="comment"></span><a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> <a class="code" href="binarytoolstests_8h.xhtml#a64798a22390aecb7a676cda618004874" title="A reference implementation of Base64 decoding as provide by Rene.">ReneBase64Decode</a>(<a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> <span class="keyword">const</span>&amp; EncodedString)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;{</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keywordtype">int</span> in_len = EncodedString.size();</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keywordtype">int</span> i = 0;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordtype">int</span> j = 0;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordtype">int</span> in_ = 0;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> char_array_4[4], char_array_3[3];</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> ret;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">while</span> (in_len-- &amp;&amp; ( EncodedString[in_] != <span class="charliteral">&#39;=&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(EncodedString[in_]))</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        char_array_4[i++] = EncodedString[in_]; in_++;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">if</span> (i ==4)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        {</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">for</span> (i = 0; i &lt;4; i++)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                { char_array_4[i] = <a class="code" href="binarytoolstests_8h.xhtml#a5de7d929731748eff9cdfc5bee081aad" title="The library of characters used in Rene&#39;s Base64 implementation.">Base64Chars</a>.find(char_array_4[i]); }</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            char_array_3[0] = (char_array_4[0] &lt;&lt; 2) + ((char_array_4[1] &amp; 0x30) &gt;&gt; 4);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            char_array_3[1] = ((char_array_4[1] &amp; 0xf) &lt;&lt; 4) + ((char_array_4[2] &amp; 0x3c) &gt;&gt; 2);</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            char_array_3[2] = ((char_array_4[2] &amp; 0x3) &lt;&lt; 6) + char_array_4[3];</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordflow">for</span> (i = 0; (i &lt; 3); i++)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                { ret += char_array_3[i]; }</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            i = 0;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        }</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    }</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">if</span> (i)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    {</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">for</span> (j = i; j &lt;4; j++)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            { char_array_4[j] = 0; }</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">for</span> (j = 0; j &lt;4; j++)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            { char_array_4[j] = <a class="code" href="binarytoolstests_8h.xhtml#a5de7d929731748eff9cdfc5bee081aad" title="The library of characters used in Rene&#39;s Base64 implementation.">Base64Chars</a>.find(char_array_4[j]); }</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        char_array_3[0] = (char_array_4[0] &lt;&lt; 2) + ((char_array_4[1] &amp; 0x30) &gt;&gt; 4);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        char_array_3[1] = ((char_array_4[1] &amp; 0xf) &lt;&lt; 4) + ((char_array_4[2] &amp; 0x3c) &gt;&gt; 2);</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        char_array_3[2] = ((char_array_4[2] &amp; 0x3) &lt;&lt; 6) + char_array_4[3];</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">for</span> (j = 0; (j &lt; i - 1); j++)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            { ret += char_array_3[j]; }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    }</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="comment">//return BinaryBuffer();</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;}</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="code" href="classbinarytoolstests.xhtml">  167</a></span>&#160;<span class="keyword">class </span><a class="code" href="classbinarytoolstests.xhtml">binarytoolstests</a> : <span class="keyword">public</span> UnitTestGroup</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;{</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keyword">virtual</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> Name()</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            { <span class="keywordflow">return</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;binarytools&quot;</span>); }</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        <span class="keyword">virtual</span> <span class="keywordtype">void</span> RunTests(<span class="keywordtype">bool</span> RunAutomaticTests, <span class="keywordtype">bool</span> RunInteractiveTests)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        {</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> Test1String(<span class="stringliteral">&quot;Test&quot;</span>);</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> Test1Base64(<span class="stringliteral">&quot;VGVzdA==&quot;</span>);</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            <span class="keywordflow">if</span> (RunAutomaticTests)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                TestResult temp;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> DefaultTest;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <span class="keywordflow">if</span>( 0==DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a7d818c0f96de38e39c2a27e0f7682b4a" title="How many bytes is Binary in size. This is set to 0 if Binary is invalid and should be a null pointer...">Size</a> &amp;&amp; 0==DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::DefaultConstructor&quot;</span>, temp);</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a7d818c0f96de38e39c2a27e0f7682b4a" title="How many bytes is Binary in size. This is set to 0 if Binary is invalid and should be a null pointer...">Size</a>=4;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a> = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6" title="The type of data this buffer can hold, it is intended to be some type one byte in length...">BinaryBuffer::Byte</a>[4];</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                *(DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+0) = <span class="charliteral">&#39;T&#39;</span>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                *(DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+1) = <span class="charliteral">&#39;e&#39;</span>;</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                *(DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+2) = <span class="charliteral">&#39;s&#39;</span>;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                *(DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+3) = <span class="charliteral">&#39;t&#39;</span>;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> Copied(DefaultTest);</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                *(DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+0) = <span class="charliteral">&#39;O&#39;</span>;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                *(DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+1) = <span class="charliteral">&#39;l&#39;</span>;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                *(DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+2) = <span class="charliteral">&#39;d&#39;</span>;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                *(DefaultTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+3) = <span class="charliteral">&#39;.&#39;</span>;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="keywordflow">if</span>( 4==Copied.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a7d818c0f96de38e39c2a27e0f7682b4a" title="How many bytes is Binary in size. This is set to 0 if Binary is invalid and should be a null pointer...">Size</a> &amp;&amp;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    (*(Copied.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+0) == <span class="charliteral">&#39;T&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    (*(Copied.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+1) == <span class="charliteral">&#39;e&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    (*(Copied.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+2) == <span class="charliteral">&#39;s&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    (*(Copied.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+3) == <span class="charliteral">&#39;t&#39;</span>)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                  )</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::CopyConstructor&quot;</span>, temp);</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> StrinTest(<span class="stringliteral">&quot;Strin&quot;</span>,<span class="keyword">false</span>);</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keywordflow">if</span>( 5==StrinTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a7d818c0f96de38e39c2a27e0f7682b4a" title="How many bytes is Binary in size. This is set to 0 if Binary is invalid and should be a null pointer...">Size</a>  &amp;&amp;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                        (*(StrinTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+0) == <span class="charliteral">&#39;S&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        (*(StrinTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+1) == <span class="charliteral">&#39;t&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        (*(StrinTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+2) == <span class="charliteral">&#39;r&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        (*(StrinTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+3) == <span class="charliteral">&#39;i&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        (*(StrinTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a>+4) == <span class="charliteral">&#39;n&#39;</span>)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                  )</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::StringConstructor&quot;</span>, temp);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                <span class="keywordflow">if</span>( <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Strin&quot;</span>) == StrinTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a4726a05fd3262ed729c86fcc02c7d739" title="Get the contents of this crudely converted to a c style string then stuff it in a string...">ToString</a>())</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::ToString&quot;</span>, temp);</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6" title="The type of data this buffer can hold, it is intended to be some type one byte in length...">BinaryBuffer::Byte</a>* CString = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#aeb16c1234f82f2b97b98d6d1079469c6" title="The type of data this buffer can hold, it is intended to be some type one byte in length...">BinaryBuffer::Byte</a>[4];</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                CString[0] = <span class="charliteral">&#39;T&#39;</span>;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                CString[1] = <span class="charliteral">&#39;e&#39;</span>;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                CString[2] = <span class="charliteral">&#39;s&#39;</span>;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                CString[3] = <span class="charliteral">&#39;t&#39;</span>;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> BufferConTest(CString,4);</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                <span class="keywordflow">if</span>( <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Test&quot;</span>) == BufferConTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a4726a05fd3262ed729c86fcc02c7d739" title="Get the contents of this crudely converted to a c style string then stuff it in a string...">ToString</a>())</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::PointerConstructor&quot;</span>, temp);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="keywordflow">if</span>( <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a>(200).Size == 200 )</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::SizeConstructor&quot;</span>, temp);</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> AssignmentTest;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                AssignmentTest = BufferConTest;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                BufferConTest[0]=<span class="charliteral">&#39;A&#39;</span>;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                BufferConTest[1]=<span class="charliteral">&#39;B&#39;</span>;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                BufferConTest[2]=<span class="charliteral">&#39;C&#39;</span>;</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                BufferConTest[3]=<span class="charliteral">&#39;!&#39;</span>;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                <span class="keywordflow">if</span>( <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;ABC!&quot;</span>) == BufferConTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a4726a05fd3262ed729c86fcc02c7d739" title="Get the contents of this crudely converted to a c style string then stuff it in a string...">ToString</a>())</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::operator[]&quot;</span>, temp);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                <span class="keywordflow">if</span>( <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Test&quot;</span>) == AssignmentTest.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a4726a05fd3262ed729c86fcc02c7d739" title="Get the contents of this crudely converted to a c style string then stuff it in a string...">ToString</a>())</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::operator=&quot;</span>, temp);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                <span class="keywordflow">if</span>( <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;Test&quot;</span>) == <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a>(<span class="stringliteral">&quot;VGVzdA==&quot;</span>).<a class="code" href="namespaceMezzanine.xhtml#ae8a13d6e385b9d270cbf37377b97e8a9" title="Converts whatever to a String as long as a streaming operator is available for it.">ToString</a>())</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::Base64Constructor&quot;</span>, temp);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::DefaultConstructor&quot;</span>, Skipped);</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::CopyConstructor&quot;</span>, Skipped);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::StringConstructor&quot;</span>, Skipped);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::ToString&quot;</span>, Skipped);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::PointerConstructor&quot;</span>, Skipped);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::SizeConstructor&quot;</span>, Skipped);</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::operator[]&quot;</span>, Skipped);</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::operator=&quot;</span>, Skipped);</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::Base64Constructor&quot;</span>, Skipped);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            }</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> Test2String(<span class="stringliteral">&quot;Mover&quot;</span>);</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> Test2Base64(<span class="stringliteral">&quot;TW92ZXI=&quot;</span>);</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> Test3String(<span class="stringliteral">&quot;Shaker&quot;</span>);</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> Test3Base64(<span class="stringliteral">&quot;U2hha2Vy&quot;</span>);</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> GettysburgAddress(<span class="stringliteral">&quot;Four score and seven years ago our fathers brought forth on this continent a new nation, conceived in liberty, and dedicated to the proposition that all men are created equal. Now we are engaged in a great civil war, testing whether that nation, or any nation, so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altogether fitting and proper that we should do this. But, in a larger sense, we can not dedicate, we can not consecrate, we can not hallow this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us-that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion-that we here highly resolve that these dead shall not have died in vain-that this nation, under God, shall have a new birth of freedom-and that government of the people, by the people, for the people, shall not perish from the earth.&quot;</span>);</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> GettysburgAddressBase64(<span class="stringliteral">&quot;Rm91ciBzY29yZSBhbmQgc2V2ZW4geWVhcnMgYWdvIG91ciBmYXRoZXJzIGJyb3VnaHQgZm9ydGggb24gdGhpcyBjb250aW5lbnQgYSBuZXcgbmF0aW9uLCBjb25jZWl2ZWQgaW4gbGliZXJ0eSwgYW5kIGRlZGljYXRlZCB0byB0aGUgcHJvcG9zaXRpb24gdGhhdCBhbGwgbWVuIGFyZSBjcmVhdGVkIGVxdWFsLiBOb3cgd2UgYXJlIGVuZ2FnZWQgaW4gYSBncmVhdCBjaXZpbCB3YXIsIHRlc3Rpbmcgd2hldGhlciB0aGF0IG5hdGlvbiwgb3IgYW55IG5hdGlvbiwgc28gY29uY2VpdmVkIGFuZCBzbyBkZWRpY2F0ZWQsIGNhbiBsb25nIGVuZHVyZS4gV2UgYXJlIG1ldCBvbiBhIGdyZWF0IGJhdHRsZS1maWVsZCBvZiB0aGF0IHdhci4gV2UgaGF2ZSBjb21lIHRvIGRlZGljYXRlIGEgcG9ydGlvbiBvZiB0aGF0IGZpZWxkLCBhcyBhIGZpbmFsIHJlc3RpbmcgcGxhY2UgZm9yIHRob3NlIHdobyBoZXJlIGdhdmUgdGhlaXIgbGl2ZXMgdGhhdCB0aGF0IG5hdGlvbiBtaWdodCBsaXZlLiBJdCBpcyBhbHRvZ2V0aGVyIGZpdHRpbmcgYW5kIHByb3BlciB0aGF0IHdlIHNob3VsZCBkbyB0aGlzLiBCdXQsIGluIGEgbGFyZ2VyIHNlbnNlLCB3ZSBjYW4gbm90IGRlZGljYXRlLCB3ZSBjYW4gbm90IGNvbnNlY3JhdGUsIHdlIGNhbiBub3QgaGFsbG93IHRoaXMgZ3JvdW5kLiBUaGUgYnJhdmUgbWVuLCBsaXZpbmcgYW5kIGRlYWQsIHdobyBzdHJ1Z2dsZWQgaGVyZSwgaGF2ZSBjb25zZWNyYXRlZCBpdCwgZmFyIGFib3ZlIG91ciBwb29yIHBvd2VyIHRvIGFkZCBvciBkZXRyYWN0LiBUaGUgd29ybGQgd2lsbCBsaXR0bGUgbm90ZSwgbm9yIGxvbmcgcmVtZW1iZXIgd2hhdCB3ZSBzYXkgaGVyZSwgYnV0IGl0IGNhbiBuZXZlciBmb3JnZXQgd2hhdCB0aGV5IGRpZCBoZXJlLiBJdCBpcyBmb3IgdXMgdGhlIGxpdmluZywgcmF0aGVyLCB0byBiZSBkZWRpY2F0ZWQgaGVyZSB0byB0aGUgdW5maW5pc2hlZCB3b3JrIHdoaWNoIHRoZXkgd2hvIGZvdWdodCBoZXJlIGhhdmUgdGh1cyBmYXIgc28gbm9ibHkgYWR2YW5jZWQuIEl0IGlzIHJhdGhlciBmb3IgdXMgdG8gYmUgaGVyZSBkZWRpY2F0ZWQgdG8gdGhlIGdyZWF0IHRhc2sgcmVtYWluaW5nIGJlZm9yZSB1cy10aGF0IGZyb20gdGhlc2UgaG9ub3JlZCBkZWFkIHdlIHRha2UgaW5jcmVhc2VkIGRldm90aW9uIHRvIHRoYXQgY2F1c2UgZm9yIHdoaWNoIHRoZXkgZ2F2ZSB0aGUgbGFzdCBmdWxsIG1lYXN1cmUgb2YgZGV2b3Rpb24tdGhhdCB3ZSBoZXJlIGhpZ2hseSByZXNvbHZlIHRoYXQgdGhlc2UgZGVhZCBzaGFsbCBub3QgaGF2ZSBkaWVkIGluIHZhaW4tdGhhdCB0aGlzIG5hdGlvbiwgdW5kZXIgR29kLCBzaGFsbCBoYXZlIGEgbmV3IGJpcnRoIG9mIGZyZWVkb20tYW5kIHRoYXQgZ292ZXJubWVudCBvZiB0aGUgcGVvcGxlLCBieSB0aGUgcGVvcGxlLCBmb3IgdGhlIHBlb3BsZSwgc2hhbGwgbm90IHBlcmlzaCBmcm9tIHRoZSBlYXJ0aC4=&quot;</span>);</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> UnicodeString(<span class="stringliteral">&quot;Iï½ï½Ã¨ï½ï½Ã¡ï½Ã¬ï½ï½Ã ï½Ã¯ï½Ã¢ï½ï½Ã²ï½&quot;</span>);</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> UnicedeBase64(<span class="stringliteral">&quot;Se+9ju+9lMOo772S772Ow6HvvZTDrO+9j++9jsOg772Mw6/vvZrDou+9lO+9icOy772O&quot;</span>);</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordflow">if</span> (RunAutomaticTests)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            {</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                TestResult temp;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordflow">if</span>( Test1Base64 == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a3c082328654156419fc24f832a1f8fd9" title="Converts the contents of a String into a String containing a base64 encoded String.">Base64Encode</a>(Test1String)    &amp;&amp;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    Test2Base64 == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a3c082328654156419fc24f832a1f8fd9" title="Converts the contents of a String into a String containing a base64 encoded String.">Base64Encode</a>(Test2String)    &amp;&amp;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    Test3Base64 == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a3c082328654156419fc24f832a1f8fd9" title="Converts the contents of a String into a String containing a base64 encoded String.">Base64Encode</a>(Test3String)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                  )</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Encode-Short&quot;</span>, temp);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                <span class="keywordflow">if</span>( GettysburgAddressBase64 == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a3c082328654156419fc24f832a1f8fd9" title="Converts the contents of a String into a String containing a base64 encoded String.">Base64Encode</a>(GettysburgAddress) )</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Encode-Long&quot;</span>, temp);</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                <span class="keywordflow">if</span>( UnicedeBase64 == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a3c082328654156419fc24f832a1f8fd9" title="Converts the contents of a String into a String containing a base64 encoded String.">Base64Encode</a>(UnicodeString) )</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Encode-Unicode&quot;</span>, temp);</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                <span class="keywordflow">if</span>( Test1String == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ade49f2e19e1c1e20ffd1e46e516913df" title="Convert Base64 stuff back to binary.">Base64Decode</a>(Test1Base64).<a class="code" href="namespaceMezzanine.xhtml#ae8a13d6e385b9d270cbf37377b97e8a9" title="Converts whatever to a String as long as a streaming operator is available for it.">ToString</a>()          &amp;&amp;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                    Test2String == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ade49f2e19e1c1e20ffd1e46e516913df" title="Convert Base64 stuff back to binary.">Base64Decode</a>(Test2Base64).<a class="code" href="namespaceMezzanine.xhtml#ae8a13d6e385b9d270cbf37377b97e8a9" title="Converts whatever to a String as long as a streaming operator is available for it.">ToString</a>()          &amp;&amp;</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                    Test3String == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ade49f2e19e1c1e20ffd1e46e516913df" title="Convert Base64 stuff back to binary.">Base64Decode</a>(Test3Base64).<a class="code" href="namespaceMezzanine.xhtml#ae8a13d6e385b9d270cbf37377b97e8a9" title="Converts whatever to a String as long as a streaming operator is available for it.">ToString</a>()</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                  )</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Decode-Short&quot;</span>, temp);</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> GettyBuffAddress(<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ade49f2e19e1c1e20ffd1e46e516913df" title="Convert Base64 stuff back to binary.">Base64Decode</a>(GettysburgAddressBase64));</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                <span class="keywordflow">if</span>(GettysburgAddress == GettyBuffAddress.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a4726a05fd3262ed729c86fcc02c7d739" title="Get the contents of this crudely converted to a c style string then stuff it in a string...">ToString</a>())</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Decode-Long&quot;</span>, temp);</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                <span class="keywordflow">if</span>(UnicodeString == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ade49f2e19e1c1e20ffd1e46e516913df" title="Convert Base64 stuff back to binary.">Base64Decode</a>(UnicedeBase64).<a class="code" href="namespaceMezzanine.xhtml#ae8a13d6e385b9d270cbf37377b97e8a9" title="Converts whatever to a String as long as a streaming operator is available for it.">ToString</a>())</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Decode-Unicode&quot;</span>, temp);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Decode-Long&quot;</span>, Skipped);</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Decode-Short&quot;</span>, Skipped);</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Decode-Unicode&quot;</span>, Skipped);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Encode-Long&quot;</span>, Skipped);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Encode-Short&quot;</span>, Skipped);</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::Base64Encode-Unicode&quot;</span>, Skipped);</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            }</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordflow">if</span> (RunAutomaticTests)</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            {</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                TestResult temp;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="keywordflow">if</span>( Test1Base64.size() == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a97766f570470a3c3a457faef28b6239f" title="From the size of a binary get the exact size in 8bit bytes.">PredictBase64StringSizeFromBinarySize</a>(Test1String.length())    &amp;&amp;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                    Test2Base64.size() == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a97766f570470a3c3a457faef28b6239f" title="From the size of a binary get the exact size in 8bit bytes.">PredictBase64StringSizeFromBinarySize</a>(Test2String.length())    &amp;&amp;</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                    Test3Base64.size() == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a97766f570470a3c3a457faef28b6239f" title="From the size of a binary get the exact size in 8bit bytes.">PredictBase64StringSizeFromBinarySize</a>(Test3String.length())</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                  )</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBase64StringSizeFromBinarySize-Short&quot;</span>, temp);</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                <span class="keywordflow">if</span>( GettysburgAddressBase64.size() == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a97766f570470a3c3a457faef28b6239f" title="From the size of a binary get the exact size in 8bit bytes.">PredictBase64StringSizeFromBinarySize</a>(GettysburgAddress.length()) )</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBase64StringSizeFromBinarySize-Long&quot;</span>, temp);</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                <span class="keywordflow">if</span>( UnicedeBase64.size() == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a97766f570470a3c3a457faef28b6239f" title="From the size of a binary get the exact size in 8bit bytes.">PredictBase64StringSizeFromBinarySize</a>(UnicodeString.length()) )</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBase64StringSizeFromBinarySize-Unicode&quot;</span>, temp);</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                <span class="keywordflow">if</span>( Test1String.size() == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ad9651d034b51497f37b69d52b605f6a8" title="From an encoded string get the exact size of the decode binary in 8bit bytes.">PredictBinarySizeFromBase64String</a>(Test1Base64)          &amp;&amp;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    Test2String.size() == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ad9651d034b51497f37b69d52b605f6a8" title="From an encoded string get the exact size of the decode binary in 8bit bytes.">PredictBinarySizeFromBase64String</a>(Test2Base64)          &amp;&amp;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    Test3String.size() == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ad9651d034b51497f37b69d52b605f6a8" title="From an encoded string get the exact size of the decode binary in 8bit bytes.">PredictBinarySizeFromBase64String</a>(Test3Base64)</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                  )</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBinarySizeFromBase64String-Short&quot;</span>, temp);</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                <span class="keywordflow">if</span>( GettysburgAddress.size() == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ad9651d034b51497f37b69d52b605f6a8" title="From an encoded string get the exact size of the decode binary in 8bit bytes.">PredictBinarySizeFromBase64String</a>(GettysburgAddressBase64) )</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBinarySizeFromBase64String-Long&quot;</span>, temp);</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                <span class="keywordflow">if</span>( UnicodeString.size() == <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ad9651d034b51497f37b69d52b605f6a8" title="From an encoded string get the exact size of the decode binary in 8bit bytes.">PredictBinarySizeFromBase64String</a>(UnicedeBase64) )</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBinarySizeFromBase64String-Unicode&quot;</span>, temp);</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBinarySizeFromBase64String-Long&quot;</span>, Skipped);</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBinarySizeFromBase64String-Short&quot;</span>, Skipped);</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBinarySizeFromBase64String-Unicode&quot;</span>, Skipped);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBase64StringSizeFromBinarySize-Long&quot;</span>, Skipped);</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBase64StringSizeFromBinarySize-Short&quot;</span>, Skipped);</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::PredictBase64StringSizeFromBinarySize-Unicode&quot;</span>, Skipped);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keywordflow">if</span> (RunAutomaticTests)</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            {</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                TestResult temp;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                <span class="keywordflow">if</span>( <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;a&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;b&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;c&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;d&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;e&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;f&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;g&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;h&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;i&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;j&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;k&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;l&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;m&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                    <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;n&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;o&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;p&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;q&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;r&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;s&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;t&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;u&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;v&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;w&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;x&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;y&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;z&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                    <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;A&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;B&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;C&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;D&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;E&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;F&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;G&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;H&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;I&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;J&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;K&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;L&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;M&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                    <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;N&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;O&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;P&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;Q&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;R&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;S&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;T&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;U&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;V&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;W&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;X&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;Y&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;Z&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                    <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;0&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;1&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;2&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;3&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;4&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;5&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;6&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;7&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;8&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;9&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                    <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;/&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;=&#39;</span>) &amp;&amp; <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;+&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                    !<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;\n&#39;</span>) &amp;&amp; !<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;.&#39;</span>) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;^&#39;</span>) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39; &#39;</span>) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;:&#39;</span>) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;@&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                    !<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;\t&#39;</span>) &amp;&amp; !<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;`&#39;</span>) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;[&#39;</span>) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;&lt;&#39;</span>) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;&gt;&#39;</span>) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(<span class="charliteral">&#39;]&#39;</span>) &amp;&amp;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                    !<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(0) &amp;&amp; !<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(127) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(150) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(255) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(7) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(10) &amp;&amp;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                    !<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(16) &amp;&amp; !<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(27) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(180) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(128) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(32) &amp;&amp;!<a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#a1bb380db90effda0797a1d303328cf35" title="Is a character a valid Base64 character.">IsBase64</a>(34)</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                  )</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::IsBase64&quot;</span>, temp);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::IsBase64&quot;</span>, Skipped);</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            }</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            <span class="keywordflow">if</span> (RunAutomaticTests)</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            {</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                TestResult temp;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> TestCount = 10000;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#ad7ab1b85229be184e16d96c505143f9b" title="A large integer type suitable for compile time math and long term microsecond time keeping...">MaxInt</a> Begin;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#ad7ab1b85229be184e16d96c505143f9b" title="A large integer type suitable for compile time math and long term microsecond time keeping...">MaxInt</a> End;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#ad7ab1b85229be184e16d96c505143f9b" title="A large integer type suitable for compile time math and long term microsecond time keeping...">MaxInt</a> BTSEncodeTime=0;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#ad7ab1b85229be184e16d96c505143f9b" title="A large integer type suitable for compile time math and long term microsecond time keeping...">MaxInt</a> BTSDecodeTime=0;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#ad7ab1b85229be184e16d96c505143f9b" title="A large integer type suitable for compile time math and long term microsecond time keeping...">MaxInt</a> ReneEncodeTime=0;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#ad7ab1b85229be184e16d96c505143f9b" title="A large integer type suitable for compile time math and long term microsecond time keeping...">MaxInt</a> ReneDecodeTime=0;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a> OutputS; <span class="comment">//To prevent optimizing this whole chunk away.</span></div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> OutputB; <span class="comment">//To prevent optimizing this whole chunk away.</span></div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                cout &lt;&lt; <span class="stringliteral">&quot;Benchmarking this for the sake of performace is dumb and I know it. This is not performance sensitive code, I just wanted to test my ability to gauge subtle non-optimal performance in code when I saw it.&quot;</span> &lt;&lt; endl &lt;&lt; endl;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                Begin = crossplatform::GetTimeStamp();</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                <span class="keywordflow">for</span>(<a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> c=0; c&lt;TestCount; c++)</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                {</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                    OutputS = <a class="code" href="binarytoolstests_8h.xhtml#a64798a22390aecb7a676cda618004874" title="A reference implementation of Base64 decoding as provide by Rene.">ReneBase64Decode</a>(GettysburgAddressBase64);</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                }</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                End = crossplatform::GetTimeStamp();</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                ReneDecodeTime = End - Begin;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                cout &lt;&lt; <span class="stringliteral">&quot;Decoding With Rene&#39;s algorithm took &quot;</span> &lt;&lt; ReneDecodeTime &lt;&lt; <span class="stringliteral">&quot; microseconds for &quot;</span> &lt;&lt; TestCount &lt;&lt; <span class="stringliteral">&quot; iterations and results like: &quot;</span> &lt;&lt; OutputS.substr(0,20) &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; OutputS.substr(OutputS.size()-20,20) &lt;&lt; endl;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                Begin = crossplatform::GetTimeStamp();</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                <span class="keywordflow">for</span>(<a class="code" href="namespaceMezzanine.xhtml#adcbb6ce6d1eb4379d109e51171e2e493" title="A Datatype used to represent an postive integer numbers.">Whole</a> c=0; c&lt;TestCount; c++)</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;                {</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;                    OutputB = <a class="code" href="namespaceMezzanine_1_1BinaryTools.xhtml#ade49f2e19e1c1e20ffd1e46e516913df" title="Convert Base64 stuff back to binary.">Base64Decode</a>(GettysburgAddressBase64);</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;                    <span class="comment">//OutputS = Base64Decode(GettysburgAddressBase64).ToString(); // If you will really one use this for Strings, then unremark this line, remark the next line up and remark the OutputS= line a few lower. It does not really matter.</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;                }</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                End = crossplatform::GetTimeStamp();</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                BTSDecodeTime = End - Begin;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                OutputS=OutputB.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a4726a05fd3262ed729c86fcc02c7d739" title="Get the contents of this crudely converted to a c style string then stuff it in a string...">ToString</a>(); <span class="comment">//The conversion to string does not get timed, the reason for this conversion was for use as a binary buffer, not an std::String we need to moved things that allow for direct control of memory.</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                cout &lt;&lt; <span class="stringliteral">&quot;Decoding With BTS algorithm took &quot;</span> &lt;&lt; BTSDecodeTime &lt;&lt; <span class="stringliteral">&quot; microseconds for &quot;</span> &lt;&lt; TestCount &lt;&lt; <span class="stringliteral">&quot; iterations and results like: &quot;</span> &lt;&lt; OutputS.substr(0,20) &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; OutputS.substr(OutputS.size()-20,20) &lt;&lt; endl;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                cout &lt;&lt; <span class="stringliteral">&quot;The new decoding algorithm takes about &quot;</span> &lt;&lt; double((BTSDecodeTime*1000)/(ReneDecodeTime))/10 &lt;&lt; <span class="stringliteral">&quot;% as long as the original.&quot;</span> &lt;&lt; endl;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                <span class="keywordflow">if</span>( BTSDecodeTime &lt; ReneDecodeTime )</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    { temp=Warning; }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::DecodeTime&quot;</span>, temp);</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::DecodeTime&quot;</span>, Skipped);</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            }</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;            <span class="keywordflow">if</span> (RunAutomaticTests)</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            {</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                TestResult temp;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> PartA(2);</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> PartB(2);</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                PartA[0]=<span class="charliteral">&#39;a&#39;</span>;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                PartA[1]=<span class="charliteral">&#39;s&#39;</span>;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                PartB[0]=<span class="charliteral">&#39;d&#39;</span>;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                PartB[1]=<span class="charliteral">&#39;f&#39;</span>;</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                PartA+=PartB;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                <span class="keywordflow">if</span>( <a class="code" href="namespaceMezzanine.xhtml#acf9fcc130e6ebf08e3d8491aebcf1c86" title="A Datatype used to a series of characters.">String</a>(<span class="stringliteral">&quot;asdf&quot;</span>) == PartA.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a4726a05fd3262ed729c86fcc02c7d739" title="Get the contents of this crudely converted to a c style string then stuff it in a string...">ToString</a>() )</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::Concatenation&quot;</span>, temp);</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::Concatenation&quot;</span>, Skipped);</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            }</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            <span class="keywordflow">if</span> (RunAutomaticTests)</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;            {</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                TestResult temp;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> Blank1;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                <span class="keywordflow">if</span>( 0 == Blank1.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a> &amp;&amp; 0 == Blank1.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a7d818c0f96de38e39c2a27e0f7682b4a" title="How many bytes is Binary in size. This is set to 0 if Binary is invalid and should be a null pointer...">Size</a>)</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::BlankDefaultConstruction&quot;</span>, temp);</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> Blank2(Blank1);</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                <span class="keywordflow">if</span>( 0 == Blank2.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a> &amp;&amp; 0 == Blank2.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a7d818c0f96de38e39c2a27e0f7682b4a" title="How many bytes is Binary in size. This is set to 0 if Binary is invalid and should be a null pointer...">Size</a>)</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::BlankCopyConstruction&quot;</span>, temp);</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;                <a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml" title="A way to store and pass binary buffers like compiled bytcode.">BinaryBuffer</a> Blank3(4);</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;                Blank3[0]=<span class="charliteral">&#39;F&#39;</span>;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;                Blank3[1]=<span class="charliteral">&#39;u&#39;</span>;</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;                Blank3[2]=<span class="charliteral">&#39;l&#39;</span>;</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                Blank3[3]=<span class="charliteral">&#39;l&#39;</span>;</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                Blank3=Blank1;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                <span class="keywordflow">if</span>( 0 == Blank3.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a99e9cadde8687dc8b304413608327b7c" title="A pointer to the actual binary data.">Binary</a> &amp;&amp; 0 == Blank3.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a7d818c0f96de38e39c2a27e0f7682b4a" title="How many bytes is Binary in size. This is set to 0 if Binary is invalid and should be a null pointer...">Size</a>)</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                    { temp=Success; }</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;                <span class="keywordflow">else</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;                    { temp=Failed; }</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::BlankAssignment&quot;</span>, temp);</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;                temp=Failed;</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;                <span class="keywordflow">try</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;                {</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                    Blank3.<a class="code" href="classMezzanine_1_1BinaryTools_1_1BinaryBuffer.xhtml#a552b6e0339ed4754097ade81d3f3a42e" title="This will create a buffer with size matching the this-&gt;Size and point this-&gt;Binary to that Buffer...">CreateBuffer</a>();</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                }<span class="keywordflow">catch</span>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1InvalidStateException.xhtml" title="Thrown when the available information should have worked but failed for unknown reasons.">InvalidStateException</a>&amp; e){</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;                    temp=Success;</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;                }</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::BlankBufferCreation&quot;</span>, temp);</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::BlankDefaultConstruction&quot;</span>, Skipped);</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::BlankCopyConstruction&quot;</span>, Skipped);</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::BlankAssignment&quot;</span>, Skipped);</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::BlankBufferCreation&quot;</span>, Skipped);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::&quot;</span>, Skipped);</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::&quot;</span>, Skipped);</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::&quot;</span>, Skipped);</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;                AddTestResult(<span class="stringliteral">&quot;BinaryTools::BinaryBuffer::&quot;</span>, Skipped);</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;            }</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        }</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;};</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="preprocessor"></span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sat May 18 2013 23:09:55 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
