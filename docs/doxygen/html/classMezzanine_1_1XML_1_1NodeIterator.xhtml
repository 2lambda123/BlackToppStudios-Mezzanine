<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>Mezzanine::XML::NodeIterator Class Reference</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">March 7, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.1.2 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceMezzanine.xhtml">Mezzanine</a></li><li class="navelem"><b>XML</b></li><li class="navelem"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">NodeIterator</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a> &#124;
<a href="classMezzanine_1_1XML_1_1NodeIterator-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Mezzanine::XML::NodeIterator Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Child node iterator (a bidirectional iterator over a collection of <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a>)  
 <a href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="xmldoc_8h_source.xhtml">xmldoc.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:ae9d4260c93e2084fb0d367efe2516f70"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ae9d4260c93e2084fb0d367efe2516f70"></a>
typedef ptrdiff_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#ae9d4260c93e2084fb0d367efe2516f70">difference_type</a></td></tr>
<tr class="memdesc:ae9d4260c93e2084fb0d367efe2516f70"><td class="mdescLeft">&#160;</td><td class="mdescRight">An Iterator trait. <br/></td></tr>
<tr class="memitem:ac1a481f7d8f37a5635ff211b49b7ac3f"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="ac1a481f7d8f37a5635ff211b49b7ac3f"></a>
typedef <br class="typebreak"/>
std::bidirectional_iterator_tag&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#ac1a481f7d8f37a5635ff211b49b7ac3f">iterator_category</a></td></tr>
<tr class="memdesc:ac1a481f7d8f37a5635ff211b49b7ac3f"><td class="mdescLeft">&#160;</td><td class="mdescRight">An Iterator trait. <br/></td></tr>
<tr class="memitem:abe0c933fe7feefdc20b2ba972ae3f49d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="abe0c933fe7feefdc20b2ba972ae3f49d"></a>
typedef <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#abe0c933fe7feefdc20b2ba972ae3f49d">pointer</a></td></tr>
<tr class="memdesc:abe0c933fe7feefdc20b2ba972ae3f49d"><td class="mdescLeft">&#160;</td><td class="mdescRight">An Iterator trait. <br/></td></tr>
<tr class="memitem:a101be13bf7a60db81a367aeeed36b282"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a101be13bf7a60db81a367aeeed36b282"></a>
typedef <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Node</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#a101be13bf7a60db81a367aeeed36b282">reference</a></td></tr>
<tr class="memdesc:a101be13bf7a60db81a367aeeed36b282"><td class="mdescLeft">&#160;</td><td class="mdescRight">An Iterator trait. <br/></td></tr>
<tr class="memitem:a6861f6309991acd41687942d660d7d36"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6861f6309991acd41687942d660d7d36"></a>
typedef <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Node</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#a6861f6309991acd41687942d660d7d36">value_type</a></td></tr>
<tr class="memdesc:a6861f6309991acd41687942d660d7d36"><td class="mdescLeft">&#160;</td><td class="mdescRight">An Iterator trait. <br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:a883e0d2ec3f3bc47d1fc418a33e7a138"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a883e0d2ec3f3bc47d1fc418a33e7a138"></a>
&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#a883e0d2ec3f3bc47d1fc418a33e7a138">NodeIterator</a> ()</td></tr>
<tr class="memdesc:a883e0d2ec3f3bc47d1fc418a33e7a138"><td class="mdescLeft">&#160;</td><td class="mdescRight">Default Constructor, makes a blank iterator. <br/></td></tr>
<tr class="memitem:a7bf6e267562f0e3584c7765d732ce28b"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#a7bf6e267562f0e3584c7765d732ce28b">NodeIterator</a> (const <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Node</a> &amp;node)</td></tr>
<tr class="memdesc:a7bf6e267562f0e3584c7765d732ce28b"><td class="mdescLeft">&#160;</td><td class="mdescRight">Construct an iterator which points to the specified node.  <a href="#a7bf6e267562f0e3584c7765d732ce28b"></a><br/></td></tr>
<tr class="memitem:a1c1d53275382e5ab795c60c65c025a53"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#a1c1d53275382e5ab795c60c65c025a53">operator!=</a> (const <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">NodeIterator</a> &amp;rhs) const </td></tr>
<tr class="memdesc:a1c1d53275382e5ab795c60c65c025a53"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> to another <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> for inequality.  <a href="#a1c1d53275382e5ab795c60c65c025a53"></a><br/></td></tr>
<tr class="memitem:a553a635fb39b80573d0ec95923ce4ab7"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Node</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#a553a635fb39b80573d0ec95923ce4ab7">operator*</a> () const </td></tr>
<tr class="memdesc:a553a635fb39b80573d0ec95923ce4ab7"><td class="mdescLeft">&#160;</td><td class="mdescRight">Deferences this Iterator.  <a href="#a553a635fb39b80573d0ec95923ce4ab7"></a><br/></td></tr>
<tr class="memitem:ac49d1cdb06cde08c11ba41cd456245e2"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">NodeIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#ac49d1cdb06cde08c11ba41cd456245e2">operator++</a> ()</td></tr>
<tr class="memdesc:ac49d1cdb06cde08c11ba41cd456245e2"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increment the iterator to the next member of the container.  <a href="#ac49d1cdb06cde08c11ba41cd456245e2"></a><br/></td></tr>
<tr class="memitem:ad09aa9538a8350ce24651b96c849e337"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">NodeIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#ad09aa9538a8350ce24651b96c849e337">operator++</a> (int)</td></tr>
<tr class="memdesc:ad09aa9538a8350ce24651b96c849e337"><td class="mdescLeft">&#160;</td><td class="mdescRight">Increment the iterator to the next member of the container.  <a href="#ad09aa9538a8350ce24651b96c849e337"></a><br/></td></tr>
<tr class="memitem:a84fb75d486c9e498accc9a2a3e62109a"><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">NodeIterator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#a84fb75d486c9e498accc9a2a3e62109a">operator--</a> ()</td></tr>
<tr class="memdesc:a84fb75d486c9e498accc9a2a3e62109a"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decrement the iterator to the next member of the container.  <a href="#a84fb75d486c9e498accc9a2a3e62109a"></a><br/></td></tr>
<tr class="memitem:a7dc521a4ff0984d71d58956f7c496376"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">NodeIterator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#a7dc521a4ff0984d71d58956f7c496376">operator--</a> (int)</td></tr>
<tr class="memdesc:a7dc521a4ff0984d71d58956f7c496376"><td class="mdescLeft">&#160;</td><td class="mdescRight">Decrement the iterator to the next member of the container.  <a href="#a7dc521a4ff0984d71d58956f7c496376"></a><br/></td></tr>
<tr class="memitem:a5118ac7ac47d26ba0d3c4860206c4488"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Node</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#a5118ac7ac47d26ba0d3c4860206c4488">operator-&gt;</a> () const </td></tr>
<tr class="memdesc:a5118ac7ac47d26ba0d3c4860206c4488"><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the pointer the <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a> this points to.  <a href="#a5118ac7ac47d26ba0d3c4860206c4488"></a><br/></td></tr>
<tr class="memitem:af7ee05a3a5124496caed80d04b22ef87"><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml#af7ee05a3a5124496caed80d04b22ef87">operator==</a> (const <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">NodeIterator</a> &amp;rhs) const </td></tr>
<tr class="memdesc:af7ee05a3a5124496caed80d04b22ef87"><td class="mdescLeft">&#160;</td><td class="mdescRight">Compares this <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> to another <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> for equality.  <a href="#af7ee05a3a5124496caed80d04b22ef87"></a><br/></td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr class="memitem:a6db9d28bd448a131448276ee03de1e6d"><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a6db9d28bd448a131448276ee03de1e6d"></a>
class&#160;</td><td class="memItemRight" valign="bottom"><b>Node</b></td></tr>
</table>
<a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Child node iterator (a bidirectional iterator over a collection of <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a>) </p>
<p><a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a7c9661538dc77fb5a36247aeb52c884e" title="Get a Child node iterator that references the first child Node.">Node::begin()</a> and <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a3c1c76bcdc016003da9ac7a6b4e8077d" title="Get an Attribute iterator that references the first Attribute on this Node.">Node::attributes_begin()</a> return iterators that point to the first node/attribute, respectively; <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a8f05b28d8f26ab67e3dd5337db6d4dc8" title="Get a Child node iterator that references one past the last child Node.">Node::end()</a> and <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a4b1a00ac548cc3c15b4fb48e7116195f" title="Get an Attribute iterator that references the one past the last Attribute on this Node...">Node::attributes_end()</a> return past-the-end iterator for node/attribute list, respectively - this iterator can't be dereferenced, but decrementing it results in an iterator pointing to the last element in the list (except for empty lists, where decrementing past-the-end iterator results in undefined behavior). Past-the-end iterator is commonly used as a termination value for iteration loops. If you want to get an iterator that points to an existing handle, you can construct the iterator with the handle as a single constructor argument, like so: xml_node_iterator(node). For xml_attribute_iterator, you'll have to provide both an attribute and its parent node.<br/>
<br/>
 <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a7c9661538dc77fb5a36247aeb52c884e" title="Get a Child node iterator that references the first child Node.">Node::begin()</a> and <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a8f05b28d8f26ab67e3dd5337db6d4dc8" title="Get a Child node iterator that references one past the last child Node.">Node::end()</a> return equal iterators if called on null <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a>; such iterators can't be dereferenced. <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a3c1c76bcdc016003da9ac7a6b4e8077d" title="Get an Attribute iterator that references the first Attribute on this Node.">Node::attributes_begin()</a> and <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml#a4b1a00ac548cc3c15b4fb48e7116195f" title="Get an Attribute iterator that references the one past the last Attribute on this Node...">Node::attributes_end()</a> behave the same way. For correct iterator usage this means that child node/attribute collections of null nodes appear to be empty.<br/>
<br/>
 Both types of iterators have bidirectional iterator semantics (i.e. they can be incremented and decremented, but efficient random access is not supported) and support all usual iterator operations - comparison, dereference, etc. The iterators are invalidated if the node/attribute objects they're pointing to are removed from the tree; adding nodes/attributes does not invalidate any iterators. </p>

<p>Definition at line <a class="el" href="xml_8h_source.xhtml#l00919">919</a> of file <a class="el" href="xml_8h_source.xhtml">xml.h</a>.</p>
</div><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a7bf6e267562f0e3584c7765d732ce28b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::XML::NodeIterator::NodeIterator </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml">Node</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Construct an iterator which points to the specified node. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">node</td><td>A <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a> that this iterator will point to. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<h2>Member Function Documentation</h2>
<a class="anchor" id="a1c1d53275382e5ab795c60c65c025a53"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::XML::NodeIterator::operator!= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">NodeIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compares this <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> to another <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> for inequality. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>The Right Hand Side <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a>. </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>False if the internal data stored in <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a> this <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> refers to is the same as the metadata in the other <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a>'s <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a>, True otherwise. </dd></dl>

</div>
</div>
<a class="anchor" id="a553a635fb39b80573d0ec95923ce4ab7"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::XML::NodeIterator::operator* </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Deferences this Iterator. </p>
<dl class="section return"><dt>Returns</dt><dd>a <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a> reference to the node pointed at by this <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="ac49d1cdb06cde08c11ba41cd456245e2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::XML::NodeIterator::operator++ </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Increment the iterator to the next member of the container. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a const <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="ad09aa9538a8350ce24651b96c849e337"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::XML::NodeIterator::operator++ </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Increment the iterator to the next member of the container. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="a84fb75d486c9e498accc9a2a3e62109a"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::XML::NodeIterator::operator-- </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Decrement the iterator to the next member of the container. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a const <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="a7dc521a4ff0984d71d58956f7c496376"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::XML::NodeIterator::operator-- </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Decrement the iterator to the next member of the container. </p>
<dl class="section return"><dt>Returns</dt><dd>Returns a <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a>. </dd></dl>

</div>
</div>
<a class="anchor" id="a5118ac7ac47d26ba0d3c4860206c4488"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::XML::NodeIterator::operator-&gt; </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Get the pointer the <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a> this points to. </p>
<dl class="section return"><dt>Returns</dt><dd>A pointer to the <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a> this <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> references. </dd></dl>

</div>
</div>
<a class="anchor" id="af7ee05a3a5124496caed80d04b22ef87"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">Mezzanine::XML::NodeIterator::operator== </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml">NodeIterator</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Compares this <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> to another <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> for equality. </p>
<dl class="params"><dt>Parameters</dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>The Right Hand Side <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> </td></tr>
  </table>
  </dd>
</dl>
<dl class="section return"><dt>Returns</dt><dd>True if the internal data stored in <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a> this <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a> refers to is the same as the metadata in the other <a class="el" href="classMezzanine_1_1XML_1_1NodeIterator.xhtml" title="Child node iterator (a bidirectional iterator over a collection of Node)">NodeIterator</a>'s <a class="el" href="classMezzanine_1_1XML_1_1Node.xhtml" title="A light-weight handle for manipulating nodes in DOM tree.">Node</a>, false otherwise. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li>/home/sqeaky/Projects/MezzanineCurrent/Mezzanine/Mezzanine/src/XML/<a class="el" href="xml_8h_source.xhtml">xml.h</a></li>
<li>/home/sqeaky/Projects/MezzanineCurrent/Mezzanine/Mezzanine/src/XML/<a class="el" href="xmldoc_8h_source.xhtml">xmldoc.h</a></li>
</ul>
</div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Mar 10 2013 23:44:07 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.1.2</small></address>
</body>
</html>
