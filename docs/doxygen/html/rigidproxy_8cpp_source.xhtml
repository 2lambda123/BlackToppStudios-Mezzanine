<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>/home/sqeaky/Code/Mezzanine/Mezzanine/src/Physics/rigidproxy.cpp Source File</title>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="DoxyStyle.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<div id="top"><!-- do not remove this div! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;" nowrap="nowrap">
   <div id="projectname"><a href="http://blacktoppstudios.com"><img src="logogreen100pxtall.png"/></a>MezzanineEngine&#160;<span id="projectnumber">May 19, 2013</span></div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- Generated by Doxygen 1.8.3.1 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_282391f6f4177160a7bfc5213c65158e.xhtml">Mezzanine</a></li><li class="navelem"><a class="el" href="dir_b044052e4980a71349e081a68f99b09b.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_f4a558a26acb75b95d8d3b9eaf634b1d.xhtml">Physics</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">rigidproxy.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">//c Copyright 2010 - 2012 BlackTopp Studios Inc.</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">/* This file is part of The Mezzanine Engine.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">The Mezzanine Engine is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">(at your option) any later version.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">The Mezzanine Engine is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">GNU General Public License for more details.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">along with The Mezzanine Engine. If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">/* The original authors have included a copy of the license specified above in the</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">&#39;Docs&#39; folder. See &#39;gpl.txt&#39;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/* We welcome the use of the Mezzanine engine to anyone, including companies who wish to</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">Build professional software and charge for their product.</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">However there are some practical restrictions, so if your project involves</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">any of the following you should contact us and we will try to work something</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">out:</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">- DRM or Copy Protection of any kind(except Copyrights)</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">- Software Patents You Do Not Wish to Freely License</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">- Any Kind of Linking to Non-GPL licensed Works</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">- Are Currently In Violation of Another Copyright Holder&#39;s GPL License</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">- If You want to change our code and not add a few hundred MB of stuff to</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">your distribution</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">These and other limitations could cause serious legal problems if you ignore</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">them, so it is best to simply contact us or the Free Software Foundation, if</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">you have any questions.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">Joseph Toppi - toppij@gmail.com</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">John Blackwood - makoenergy02@gmail.com</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="preprocessor">#ifndef _rigidproxy_cpp</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define _rigidproxy_cpp</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="preprocessor">#include &quot;rigidproxy.h&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="preprocessor">#include &quot;btBulletDynamicsCommon.h&quot;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">namespace </span>Mezzanine</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;{</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keyword">namespace </span>Physics</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    {</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a34a2fd1ecd4078677ccaa2de27758352">   50</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a34a2fd1ecd4078677ccaa2de27758352" title="Standard Constructor.">RigidProxy::RigidProxy</a>(<a class="code" href="classMezzanine_1_1WorldObject.xhtml" title="This is the base class from which classes that are insertable into the physical world.">WorldObject</a>* WO, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; mass)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        {</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1PhysicsProxy.xhtml#a1bafe743fbac675fca096d945d20830c" title="Standard Constructor.">PhysicsProxy</a>(WO);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a38ff5c70f321fefa4554c03c28b9e4a3" title="Used to create the physics representation of the rigid body.">CreateRigidObject</a>(mass);</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        }</div>
<div class="line"><a name="l00055"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#aaef334a4c2513b331a5340c23271e53f">   55</a></span>&#160;        <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#aaef334a4c2513b331a5340c23271e53f" title="Class Destructor.">RigidProxy::~RigidProxy</a>()</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        {</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            <span class="keyword">delete</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        }</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        </div>
<div class="line"><a name="l00060"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#af185a92ab825e67d5b43329553033274">   60</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#af185a92ab825e67d5b43329553033274" title="Sets the collision shape to be used.">RigidProxy::SetCollisionShape</a>(<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml" title="This is the base class for all collision shapes.">CollisionShape</a>* Shape)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        {</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;            <span class="keywordflow">if</span>(<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a985a918f81fe43d088cc1e39bbffc8eaab3ea202442832fcac695b82df402ca77" title="Indicates the class is a StaticMeshCollisionShape.">CollisionShape::ST_StaticTriMesh</a> != Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a86ea76660e7f96a28c74af150a6a4ee5" title="Gets the type of Collision shape this is.">GetType</a>())</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            {</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                btScalar mass = this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getInvMass();</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                <span class="keywordflow">if</span>(0 != mass)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                    mass=1/mass;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                btVector3 inertia(0,0,0);</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a2ae4c7e673b279f3adc434194a985d80" title="Gets the internal shape pointer this collision shape is based on.">GetBulletShape</a>()-&gt;calculateLocalInertia(mass, inertia);</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setMassProps(mass,inertia);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setCollisionShape(Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a2ae4c7e673b279f3adc434194a985d80" title="Gets the internal shape pointer this collision shape is based on.">GetBulletShape</a>());</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;updateInertiaTensor();</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setCollisionShape(Shape-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1CollisionShape.xhtml#a2ae4c7e673b279f3adc434194a985d80" title="Gets the internal shape pointer this collision shape is based on.">GetBulletShape</a>());</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            }</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <a class="code" href="classMezzanine_1_1Singleton.xhtml#a78fc425584913f0b2c615ec440871a67" title="Fetches a pointer to the singleton.">CollisionShapeManager::GetSingletonPtr</a>()-&gt;<a class="code" href="classMezzanine_1_1CollisionShapeManager.xhtml#ae2e5574192471e827fa08eb43967ba7f" title="Stores a pre-made shape in this manager.">StoreShape</a>(Shape);</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        }</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        <span class="comment"></span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span>        <span class="comment">// Movement Factors</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        </div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a404eb4d327440977c7e16a829e4d64fa">   81</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a404eb4d327440977c7e16a829e4d64fa" title="Restricts movement on the axis or axies of your choice.">RigidProxy::SetAngularMovementFactor</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Factor)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        {</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setAngularFactor(Factor.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>());</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        }   </div>
<div class="line"><a name="l00085"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a83fe7230c7abe61bbe7761988cb27ba0">   85</a></span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a83fe7230c7abe61bbe7761988cb27ba0" title="Gets the current angular factors being applied to this actor.">RigidProxy::GetAngularMovementFactor</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> AngFact(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getAngularFactor());</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">return</span> AngFact;</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        }</div>
<div class="line"><a name="l00090"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a3ebe346941f8d50d580ab4f4898ad192">   90</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a3ebe346941f8d50d580ab4f4898ad192" title="Restricts movement on the axis or axies of your choice.">RigidProxy::SetLinearMovementFactor</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Factor)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setLinearFactor(Factor.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>());</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        }</div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a26501bf2fb6d280cc55a486c8dbeeaa1">   94</a></span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a26501bf2fb6d280cc55a486c8dbeeaa1" title="Gets the current linear factors being applied to this actor.">RigidProxy::GetLinearMovementFactor</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> LinFact(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getLinearFactor());</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="keywordflow">return</span> LinFact;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        }</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="comment"></span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment"></span>        <span class="comment">// Rigid Physics Properties</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a87542bcdfcbfcad96147bf837584c9e9">  103</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a87542bcdfcbfcad96147bf837584c9e9" title="Sets the Damping for this object.">RigidProxy::SetDamping</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; LinDamping, <span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; AngDamping)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        {</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setDamping(LinDamping, AngDamping);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        }</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#adccb1a2ccec022c2336f0c502499ddce">  107</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#adccb1a2ccec022c2336f0c502499ddce" title="Get the linear damping.">RigidProxy::GetLinearDamping</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> LinDamping(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getLinearDamping());</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            <span class="keywordflow">return</span> LinDamping;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        }</div>
<div class="line"><a name="l00112"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#ac018b1380514fe79aaf30661074aef85">  112</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#ac018b1380514fe79aaf30661074aef85" title="Get the Angular damping.">RigidProxy::GetAngularDamping</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> AngDamping(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getAngularDamping());</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">return</span> AngDamping;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        }</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        </div>
<div class="line"><a name="l00118"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a45f05424a4bcc0b51d5b5f1a85ce1f76">  118</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a45f05424a4bcc0b51d5b5f1a85ce1f76" title="Sets the Linear Velocity of this object.">RigidProxy::SetLinearVelocity</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; LinVel)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setLinearVelocity(LinVel.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>());</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        }</div>
<div class="line"><a name="l00122"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a2662cc073cc66ce832c84a1710180179">  122</a></span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a2662cc073cc66ce832c84a1710180179" title="Gets the Linear Velocity of this object.">RigidProxy::GetLinearVelocity</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> LinVel(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getLinearVelocity());</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">return</span> LinVel;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        }</div>
<div class="line"><a name="l00127"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a7ee78b2e935d4936c44f15f68b7ab879">  127</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a7ee78b2e935d4936c44f15f68b7ab879" title="Sets the Angular Velocity of this object.">RigidProxy::SetAngularVelocity</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; AngVel)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        {</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setAngularVelocity(AngVel.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>());</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        }</div>
<div class="line"><a name="l00131"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#ad4a16cba5ad095f64b193c0a155f5248">  131</a></span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#ad4a16cba5ad095f64b193c0a155f5248" title="Gets the Angular Velocity of this object.">RigidProxy::GetAngularVelocity</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> AngVel(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getAngularVelocity());</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">return</span> AngVel;</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        }</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;</div>
<div class="line"><a name="l00137"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a15d251cbe754def9a64bc0af076c87cc">  137</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a15d251cbe754def9a64bc0af076c87cc" title="Sets the gravity for only this object.">RigidProxy::SetIndividualGravity</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Gravity)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        {</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setGravity(Gravity.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>());</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        }</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> RigidProxy::GetIndivudualGravity()<span class="keyword"> const</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> Gravity(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getGravity());</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            <span class="keywordflow">return</span> Gravity;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#aaed3dbe0c32babd4eeba5dfd63117344">  147</a></span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#aaed3dbe0c32babd4eeba5dfd63117344" title="Get the total Force/Movement on the object.">RigidProxy::GetForce</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> Force(<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getTotalForce());</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">return</span> Force;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        }</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a9a8e1f72c40a06fd4f7466177945581b" title="Get the Torque/Rotation.">RigidProxy::GetTorque</a>() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        {</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> Torque(PhysicsRigidBody-&gt;getTotalTorque());</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">return</span> Torque;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a2b658e54e4d1dc6465addd6891b2ce4e" title="Push/Apply force to an object.">RigidProxy::ApplyForce</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Force);</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        {</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            this-&gt;PhysicsRigidBody-&gt;applyCentralForce(Force.GetBulletVector3());</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        }</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a9415c06ba80691b6e2a6036b33a679bd">  161</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a9415c06ba80691b6e2a6036b33a679bd" title="Spin/Apply Torque to an object.">RigidProxy::ApplyTorque</a>(<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; Torque)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        {</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;applyTorque(Torque.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>());</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        }</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;</div>
<div class="line"><a name="l00166"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a1d070b21d0b815acd0db1fa42a8d3635">  166</a></span>&#160;        <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a1d070b21d0b815acd0db1fa42a8d3635" title="Get the total Mass of the object.">RigidProxy::GetMass</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            <span class="keywordflow">return</span>  this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getInvMass() != 0 ? 1/this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getInvMass() : 0;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        }</div>
<div class="line"><a name="l00170"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#aefd99c3fde60cb4494801b2e323e0f5a">  170</a></span>&#160;        <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#aefd99c3fde60cb4494801b2e323e0f5a" title="Get the current intertia of the object.">RigidProxy::GetLocalInertia</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="keywordflow">return</span>  <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>(this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getInvInertiaDiagLocal()).Inverse() ;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        }</div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acbed96fcb7d17970a3eb09fc28dfcbc9">  174</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acbed96fcb7d17970a3eb09fc28dfcbc9" title="Change the mass of the object.">RigidProxy::SetMass</a>(<a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> NewMass)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        { </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setMassProps(NewMass, <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#aefd99c3fde60cb4494801b2e323e0f5a" title="Get the current intertia of the object.">GetLocalInertia</a>().GetBulletVector3()); </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        }       </div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1ActorRigidPhysicsSettings.xhtml#a9b2ed9808e7b4a7c8874f33c51fb8ca1" title="Change the mass of the object.">ActorRigidPhysicsSettings::SetMass</a>(<a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a> NewMass,<span class="keyword">const</span> <a class="code" href="classMezzanine_1_1Vector3.xhtml" title="This is used to represent a point in space, or a vector through space.">Vector3</a>&amp; NewInertia)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        { </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            this-&gt;PhysicsRigidBody-&gt;setMassProps(NewMass, NewInertia.<a class="code" href="classMezzanine_1_1Vector3.xhtml#ab9fb84bdbfe3bed9fd210a6ad1cee8b7" title="Gets a Bullet vector3.">GetBulletVector3</a>()); </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="comment"></span>        <span class="comment">// Sticky Data</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        </div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="comment">// virtual void SetStickyData(const Whole&amp; MaxNumContacts);</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="comment">// virtual void ClearStickyContacts();</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment">// virtual StickyData* GetStickyData() const;</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        </div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="comment">/*</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">            void ActorRigidPhysicsSettings::SetStickyData(const Whole&amp; MaxNumContacts)</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment">                if(MaxNumContacts &gt; 0) StickyContacts-&gt;MaxNumContacts = MaxNumContacts;</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">                else ClearStickyContacts();</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment">         </span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">            void ActorRigidPhysicsSettings::ClearStickyContacts()</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">            {</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">                if(0 == StickyContacts-&gt;StickyConstraints.size())</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment">                    return;</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="comment">                btDiscreteDynamicsWorld* BulletWorld = PhysicsManager::GetSingletonPtr()-&gt;GetPhysicsWorldPointer();</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="comment">                for( std::vector&lt;StickyConstraint*&gt;::iterator SCit = StickyContacts-&gt;StickyConstraints.begin() ; SCit != StickyContacts-&gt;StickyConstraints.end() ; ++SCit )</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">                {</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">                    BulletWorld-&gt;removeConstraint((*SCit)-&gt;GetConstraintBase());</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">         </span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="comment">                    ActorRigid* OtherActor = (*SCit)-&gt;GetActorA() != Parent ? (*SCit)-&gt;GetActorA() : (*SCit)-&gt;GetActorB();</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="comment">                    StickyData* OtherSettings = OtherActor-&gt;GetPhysicsSettings()-&gt;GetStickyData();</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="comment">                    for( std::vector&lt;StickyConstraint*&gt;::iterator SCit2 = OtherSettings-&gt;StickyConstraints.begin() ; SCit2 != OtherSettings-&gt;StickyConstraints.end() ; ++SCit2 )</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">                    {</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">                        if( (*SCit) == (*SCit2) )</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">                        {</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">                            OtherSettings-&gt;StickyConstraints.erase(SCit2);</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">                            break;</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="comment">                        }</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">                    }</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment">         </span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment">                    delete (*SCit);</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">                }</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment">                StickyContacts-&gt;StickyConstraints.clear();</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">                StickyContacts-&gt;CreationQueue.clear();</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment">            }</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">         </span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">            StickyData* ActorRigidPhysicsSettings::GetStickyData() const</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">            { return StickyContacts; }</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">        */</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;<span class="comment"></span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment"></span>        <span class="comment">// Internal Methods</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;</div>
<div class="line"><a name="l00230"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a93b38df30b6bf6137a5c21d6572c2164">  230</a></span>&#160;        btRigidBody* <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a93b38df30b6bf6137a5c21d6572c2164" title="Accessor for the internal rigid body physics object.">RigidProxy::_GetBaseRigidBody</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="comment"></span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">        /// Note: Outdated ObjectReference/bullet user pointer</span></div>
<div class="line"><a name="l00236"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a38ff5c70f321fefa4554c03c28b9e4a3">  236</a></span>&#160;<span class="comment"></span>        <span class="keywordtype">void</span> <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a38ff5c70f321fefa4554c03c28b9e4a3" title="Used to create the physics representation of the rigid body.">RigidProxy::CreateRigidObject</a>(<span class="keyword">const</span> <a class="code" href="namespaceMezzanine.xhtml#a726731b1a7df72bf3583e4a97282c6f6" title="A Datatype used to represent a real floating point number.">Real</a>&amp; pmass)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        {</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            btScalar bmass=pmass;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a> = <span class="keyword">new</span> btRigidBody(bmass, <span class="keyword">new</span> internal::AttachableMotionState(<span class="keyword">this</span>), Shape-&gt;GetBulletShape());</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <a class="code" href="classMezzanine_1_1ObjectReference.xhtml" title="This is a small class used to store a reference to a world object.">ObjectReference</a>* ActorRef = <span class="keyword">new</span> <a class="code" href="classMezzanine_1_1ObjectReference.xhtml" title="This is a small class used to store a reference to a world object.">ObjectReference</a>(Mezzanine::WSO_ActorRigid,<span class="keyword">this</span>);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setUserPointer(ActorRef);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            <span class="keywordflow">if</span>(0.0 == bmass)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            {</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setCollisionFlags(btCollisionObject::CF_STATIC_OBJECT);</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            }<span class="keywordflow">else</span>{</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;setCollisionFlags(<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#acc8259ea9b15140941173c72cc15c1a1" title="RigidBody object used by the internal physics.">PhysicsRigidBody</a>-&gt;getCollisionFlags() &amp; (~btCollisionObject::CF_STATIC_OBJECT));</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            }</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        }</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="comment"></span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="comment">        ///////////////////////////////////////////////////////////////////////////////</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="comment"></span>        <span class="comment">// Inherited from PhysicsProxy</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        </div>
<div class="line"><a name="l00253"></a><span class="lineno"><a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a1afb9c4df7adecc331d29bf2a83d6c1b">  253</a></span>&#160;        btCollisionObject* <a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a1afb9c4df7adecc331d29bf2a83d6c1b" title="Accessor for the internal physics object. ">RigidProxy::_GetBasePhysicsObject</a>()<span class="keyword"> const</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="keyword">        </span>{</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            <span class="keywordflow">return</span> this-&gt;<a class="code" href="classMezzanine_1_1Physics_1_1RigidProxy.xhtml#a93b38df30b6bf6137a5c21d6572c2164" title="Accessor for the internal rigid body physics object.">_GetBaseRigidBody</a>();</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        }</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }<span class="comment">// Physics</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;}<span class="comment">// Mezzanine</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="preprocessor">#endif</span></div>
</div><!-- fragment --></div><!-- contents -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Jun 20 2013 21:56:54 for MezzanineEngine by&#160;<a href="http://www.doxygen.org/index.html"><img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.3.1</small></address>
</body>
</html>
